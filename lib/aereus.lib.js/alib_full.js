/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<10
	// For `typeof xmlNode.method` instead of `xmlNode.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	location = window.location,
	document = window.document,
	docElem = document.documentElement,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.10.2",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( jQuery.support.ownLast ) {
			for ( key in obj ) {
				return core_hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations.
	// Note: this method belongs to the css module but it's needed here for the support module.
	// If support gets modularized, this method should be moved back to the css module.
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
/*!
 * Sizzle CSS Selector Engine v1.10.2
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03
 */
(function( window, undefined ) {

var i,
	support,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	outermostContext,
	sortInput,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	hasDuplicate = false,
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:([*^$|!~]?=)" + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rsibling = new RegExp( whitespace + "*[+~]" ),
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent.attachEvent && parent !== parent.top ) {
		parent.attachEvent( "onbeforeunload", function() {
			setDocument();
		});
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Support: Opera 10-12/IE8
			// ^= $= *= and empty values
			// Should not select anything
			// Support: Windows 8 Native Apps
			// The type attribute is restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "t", "" );

			if ( div.querySelectorAll("[t^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = rnative.test( docElem.contains ) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b );

		if ( compare ) {
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		}

		// Not directly comparable, sort on existence of method
		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val === undefined ?
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null :
		val;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] && match[4] !== undefined ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
				}
				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return (val = elem.getAttributeNode( name )) && val.specified ?
				val.value :
				elem[ name ] === true ? name.toLowerCase() : null;
		}
	});
}

jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function( support ) {

	var all, a, input, select, fragment, opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Finish early in limited (non-browser) environments
	all = div.getElementsByTagName("*") || [];
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !a || !a.style || !all.length ) {
		return support;
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName("tbody").length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName("link").length;

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Make sure that element opacity exists
	// (IE uses filter instead)
	// Use a regex to work around a WebKit issue. See #5145
	support.opacity = /^0.5/.test( a.style.opacity );

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!a.style.cssFloat;

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone = document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Will be defined later
	support.inlineBlockNeedsLayout = false;
	support.shrinkWrapBlocks = false;
	support.pixelPosition = false;
	support.deleteExpando = true;
	support.noCloneEvent = true;
	support.reliableMarginRight = true;
	support.boxSizingReliable = true;

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: IE<9
	// Iteration over object's inherited properties before its own.
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior.
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";

		// Workaround failing boxSizing test due to offsetWidth returning wrong value
		// with some non-1 values of body zoom, ticket #13543
		jQuery.swap( body, body.style.zoom != null ? { zoom: 1 } : {}, function() {
			support.boxSizing = div.offsetWidth === 4;
		});

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})({});

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"applet": true,
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			data = null,
			i = 0,
			elem = this[0];

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( name.indexOf("data-") === 0 ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n\f]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// Use proper attribute retrieval(#6932, #12072)
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( jQuery(option).val(), values ) >= 0) ) {
						optionSet = true;
					}
				}

				// force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = jQuery.expr.attrHandle[ name ] || jQuery.find.attr;

	jQuery.expr.attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var fn = jQuery.expr.attrHandle[ name ],
				ret = isXML ?
					undefined :
					/* jshint eqeqeq: false */
					(jQuery.expr.attrHandle[ name ] = undefined) !=
						getter( elem, name, isXML ) ?

						name.toLowerCase() :
						null;
			jQuery.expr.attrHandle[ name ] = fn;
			return ret;
		} :
		function( elem, name, isXML ) {
			return isXML ?
				undefined :
				elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};
	jQuery.expr.attrHandle.id = jQuery.expr.attrHandle.name = jQuery.expr.attrHandle.coords =
		// Some attributes are constructed with empty-string values when not defined
		function( elem, name, isXML ) {
			var ret;
			return isXML ?
				undefined :
				(ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
		};
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ret.specified ?
				ret.value :
				undefined;
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !jQuery.support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
var isSimple = /^.[^:#\[\.,]*$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},

	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					cur = ret.push( cur );
					break;
				}
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var
			// Snapshot the DOM in case .domManip sweeps something relevant into its fragment
			args = jQuery.map( this, function( elem ) {
				return [ elem.nextSibling, elem.parentNode ];
			}),
			i = 0;

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			var next = args[ i++ ],
				parent = args[ i++ ];

			if ( parent ) {
				// Don't use the snapshot next if it has moved (#13810)
				if ( next && next.parentNode !== parent ) {
					next = this.nextSibling;
				}
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		// Allow new content to include elements from the context set
		}, true );

		// Force removal if there was no new content (e.g., from empty arguments)
		return i ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback, allowIntersection ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback, allowIntersection );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, !allowIntersection && this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery._evalUrl( node.src );
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType === 1 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	},

	_evalUrl: function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	}
});
jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;

// })();
if ( typeof module === "object" && module && typeof module.exports === "object" ) {
	// Expose jQuery as module.exports in loaders that implement the Node
	// module pattern (including browserify). Do not create the global, since
	// the user will be storing it themselves locally, and globals are frowned
	// upon in the Node module world.
	module.exports = jQuery;
} else {
	// Otherwise expose jQuery to the global object as usual
	window.jQuery = window.$ = jQuery;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function () { return jQuery; } );
	}
}

})( window );

/*! jQuery UI - v1.10.3 - 2013-05-13
* http://jqueryui.com
* Includes: jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js
* Copyright 2013 jQuery Foundation and other contributors Licensed MIT */

(function(t,e){var i="ui-effects-";t.effects={effect:{}},function(t,e){function i(t,e,i){var s=u[e.type]||{};return null==t?i||!e.def?null:e.def:(t=s.floor?~~t:parseFloat(t),isNaN(t)?e.def:s.mod?(t+s.mod)%s.mod:0>t?0:t>s.max?s.max:t)}function s(i){var s=l(),n=s._rgba=[];return i=i.toLowerCase(),f(h,function(t,a){var o,r=a.re.exec(i),h=r&&a.parse(r),l=a.space||"rgba";return h?(o=s[l](h),s[c[l].cache]=o[c[l].cache],n=s._rgba=o._rgba,!1):e}),n.length?("0,0,0,0"===n.join()&&t.extend(n,a.transparent),s):a[i]}function n(t,e,i){return i=(i+1)%1,1>6*i?t+6*(e-t)*i:1>2*i?e:2>3*i?t+6*(e-t)*(2/3-i):t}var a,o="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",r=/^([\-+])=\s*(\d+\.?\d*)/,h=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[t[1],t[2],t[3],t[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,parse:function(t){return[2.55*t[1],2.55*t[2],2.55*t[3],t[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(t){return[t[1],t[2]/100,t[3]/100,t[4]]}}],l=t.Color=function(e,i,s,n){return new t.Color.fn.parse(e,i,s,n)},c={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},u={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},d=l.support={},p=t("<p>")[0],f=t.each;p.style.cssText="background-color:rgba(1,1,1,.5)",d.rgba=p.style.backgroundColor.indexOf("rgba")>-1,f(c,function(t,e){e.cache="_"+t,e.props.alpha={idx:3,type:"percent",def:1}}),l.fn=t.extend(l.prototype,{parse:function(n,o,r,h){if(n===e)return this._rgba=[null,null,null,null],this;(n.jquery||n.nodeType)&&(n=t(n).css(o),o=e);var u=this,d=t.type(n),p=this._rgba=[];return o!==e&&(n=[n,o,r,h],d="array"),"string"===d?this.parse(s(n)||a._default):"array"===d?(f(c.rgba.props,function(t,e){p[e.idx]=i(n[e.idx],e)}),this):"object"===d?(n instanceof l?f(c,function(t,e){n[e.cache]&&(u[e.cache]=n[e.cache].slice())}):f(c,function(e,s){var a=s.cache;f(s.props,function(t,e){if(!u[a]&&s.to){if("alpha"===t||null==n[t])return;u[a]=s.to(u._rgba)}u[a][e.idx]=i(n[t],e,!0)}),u[a]&&0>t.inArray(null,u[a].slice(0,3))&&(u[a][3]=1,s.from&&(u._rgba=s.from(u[a])))}),this):e},is:function(t){var i=l(t),s=!0,n=this;return f(c,function(t,a){var o,r=i[a.cache];return r&&(o=n[a.cache]||a.to&&a.to(n._rgba)||[],f(a.props,function(t,i){return null!=r[i.idx]?s=r[i.idx]===o[i.idx]:e})),s}),s},_space:function(){var t=[],e=this;return f(c,function(i,s){e[s.cache]&&t.push(i)}),t.pop()},transition:function(t,e){var s=l(t),n=s._space(),a=c[n],o=0===this.alpha()?l("transparent"):this,r=o[a.cache]||a.to(o._rgba),h=r.slice();return s=s[a.cache],f(a.props,function(t,n){var a=n.idx,o=r[a],l=s[a],c=u[n.type]||{};null!==l&&(null===o?h[a]=l:(c.mod&&(l-o>c.mod/2?o+=c.mod:o-l>c.mod/2&&(o-=c.mod)),h[a]=i((l-o)*e+o,n)))}),this[n](h)},blend:function(e){if(1===this._rgba[3])return this;var i=this._rgba.slice(),s=i.pop(),n=l(e)._rgba;return l(t.map(i,function(t,e){return(1-s)*n[e]+s*t}))},toRgbaString:function(){var e="rgba(",i=t.map(this._rgba,function(t,e){return null==t?e>2?1:0:t});return 1===i[3]&&(i.pop(),e="rgb("),e+i.join()+")"},toHslaString:function(){var e="hsla(",i=t.map(this.hsla(),function(t,e){return null==t&&(t=e>2?1:0),e&&3>e&&(t=Math.round(100*t)+"%"),t});return 1===i[3]&&(i.pop(),e="hsl("),e+i.join()+")"},toHexString:function(e){var i=this._rgba.slice(),s=i.pop();return e&&i.push(~~(255*s)),"#"+t.map(i,function(t){return t=(t||0).toString(16),1===t.length?"0"+t:t}).join("")},toString:function(){return 0===this._rgba[3]?"transparent":this.toRgbaString()}}),l.fn.parse.prototype=l.fn,c.hsla.to=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e,i,s=t[0]/255,n=t[1]/255,a=t[2]/255,o=t[3],r=Math.max(s,n,a),h=Math.min(s,n,a),l=r-h,c=r+h,u=.5*c;return e=h===r?0:s===r?60*(n-a)/l+360:n===r?60*(a-s)/l+120:60*(s-n)/l+240,i=0===l?0:.5>=u?l/c:l/(2-c),[Math.round(e)%360,i,u,null==o?1:o]},c.hsla.from=function(t){if(null==t[0]||null==t[1]||null==t[2])return[null,null,null,t[3]];var e=t[0]/360,i=t[1],s=t[2],a=t[3],o=.5>=s?s*(1+i):s+i-s*i,r=2*s-o;return[Math.round(255*n(r,o,e+1/3)),Math.round(255*n(r,o,e)),Math.round(255*n(r,o,e-1/3)),a]},f(c,function(s,n){var a=n.props,o=n.cache,h=n.to,c=n.from;l.fn[s]=function(s){if(h&&!this[o]&&(this[o]=h(this._rgba)),s===e)return this[o].slice();var n,r=t.type(s),u="array"===r||"object"===r?s:arguments,d=this[o].slice();return f(a,function(t,e){var s=u["object"===r?t:e.idx];null==s&&(s=d[e.idx]),d[e.idx]=i(s,e)}),c?(n=l(c(d)),n[o]=d,n):l(d)},f(a,function(e,i){l.fn[e]||(l.fn[e]=function(n){var a,o=t.type(n),h="alpha"===e?this._hsla?"hsla":"rgba":s,l=this[h](),c=l[i.idx];return"undefined"===o?c:("function"===o&&(n=n.call(this,c),o=t.type(n)),null==n&&i.empty?this:("string"===o&&(a=r.exec(n),a&&(n=c+parseFloat(a[2])*("+"===a[1]?1:-1))),l[i.idx]=n,this[h](l)))})})}),l.hook=function(e){var i=e.split(" ");f(i,function(e,i){t.cssHooks[i]={set:function(e,n){var a,o,r="";if("transparent"!==n&&("string"!==t.type(n)||(a=s(n)))){if(n=l(a||n),!d.rgba&&1!==n._rgba[3]){for(o="backgroundColor"===i?e.parentNode:e;(""===r||"transparent"===r)&&o&&o.style;)try{r=t.css(o,"backgroundColor"),o=o.parentNode}catch(h){}n=n.blend(r&&"transparent"!==r?r:"_default")}n=n.toRgbaString()}try{e.style[i]=n}catch(h){}}},t.fx.step[i]=function(e){e.colorInit||(e.start=l(e.elem,i),e.end=l(e.end),e.colorInit=!0),t.cssHooks[i].set(e.elem,e.start.transition(e.end,e.pos))}})},l.hook(o),t.cssHooks.borderColor={expand:function(t){var e={};return f(["Top","Right","Bottom","Left"],function(i,s){e["border"+s+"Color"]=t}),e}},a=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(e){var i,s,n=e.ownerDocument.defaultView?e.ownerDocument.defaultView.getComputedStyle(e,null):e.currentStyle,a={};if(n&&n.length&&n[0]&&n[n[0]])for(s=n.length;s--;)i=n[s],"string"==typeof n[i]&&(a[t.camelCase(i)]=n[i]);else for(i in n)"string"==typeof n[i]&&(a[i]=n[i]);return a}function s(e,i){var s,n,o={};for(s in i)n=i[s],e[s]!==n&&(a[s]||(t.fx.step[s]||!isNaN(parseFloat(n)))&&(o[s]=n));return o}var n=["add","remove","toggle"],a={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};t.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(e,i){t.fx.step[i]=function(t){("none"!==t.end&&!t.setAttr||1===t.pos&&!t.setAttr)&&(jQuery.style(t.elem,i,t.end),t.setAttr=!0)}}),t.fn.addBack||(t.fn.addBack=function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}),t.effects.animateClass=function(e,a,o,r){var h=t.speed(a,o,r);return this.queue(function(){var a,o=t(this),r=o.attr("class")||"",l=h.children?o.find("*").addBack():o;l=l.map(function(){var e=t(this);return{el:e,start:i(this)}}),a=function(){t.each(n,function(t,i){e[i]&&o[i+"Class"](e[i])})},a(),l=l.map(function(){return this.end=i(this.el[0]),this.diff=s(this.start,this.end),this}),o.attr("class",r),l=l.map(function(){var e=this,i=t.Deferred(),s=t.extend({},h,{queue:!1,complete:function(){i.resolve(e)}});return this.el.animate(this.diff,s),i.promise()}),t.when.apply(t,l.get()).done(function(){a(),t.each(arguments,function(){var e=this.el;t.each(this.diff,function(t){e.css(t,"")})}),h.complete.call(o[0])})})},t.fn.extend({addClass:function(e){return function(i,s,n,a){return s?t.effects.animateClass.call(this,{add:i},s,n,a):e.apply(this,arguments)}}(t.fn.addClass),removeClass:function(e){return function(i,s,n,a){return arguments.length>1?t.effects.animateClass.call(this,{remove:i},s,n,a):e.apply(this,arguments)}}(t.fn.removeClass),toggleClass:function(i){return function(s,n,a,o,r){return"boolean"==typeof n||n===e?a?t.effects.animateClass.call(this,n?{add:s}:{remove:s},a,o,r):i.apply(this,arguments):t.effects.animateClass.call(this,{toggle:s},n,a,o)}}(t.fn.toggleClass),switchClass:function(e,i,s,n,a){return t.effects.animateClass.call(this,{add:i,remove:e},s,n,a)}})}(),function(){function s(e,i,s,n){return t.isPlainObject(e)&&(i=e,e=e.effect),e={effect:e},null==i&&(i={}),t.isFunction(i)&&(n=i,s=null,i={}),("number"==typeof i||t.fx.speeds[i])&&(n=s,s=i,i={}),t.isFunction(s)&&(n=s,s=null),i&&t.extend(e,i),s=s||i.duration,e.duration=t.fx.off?0:"number"==typeof s?s:s in t.fx.speeds?t.fx.speeds[s]:t.fx.speeds._default,e.complete=n||i.complete,e}function n(e){return!e||"number"==typeof e||t.fx.speeds[e]?!0:"string"!=typeof e||t.effects.effect[e]?t.isFunction(e)?!0:"object"!=typeof e||e.effect?!1:!0:!0}t.extend(t.effects,{version:"1.10.3",save:function(t,e){for(var s=0;e.length>s;s++)null!==e[s]&&t.data(i+e[s],t[0].style[e[s]])},restore:function(t,s){var n,a;for(a=0;s.length>a;a++)null!==s[a]&&(n=t.data(i+s[a]),n===e&&(n=""),t.css(s[a],n))},setMode:function(t,e){return"toggle"===e&&(e=t.is(":hidden")?"show":"hide"),e},getBaseline:function(t,e){var i,s;switch(t[0]){case"top":i=0;break;case"middle":i=.5;break;case"bottom":i=1;break;default:i=t[0]/e.height}switch(t[1]){case"left":s=0;break;case"center":s=.5;break;case"right":s=1;break;default:s=t[1]/e.width}return{x:s,y:i}},createWrapper:function(e){if(e.parent().is(".ui-effects-wrapper"))return e.parent();var i={width:e.outerWidth(!0),height:e.outerHeight(!0),"float":e.css("float")},s=t("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),n={width:e.width(),height:e.height()},a=document.activeElement;try{a.id}catch(o){a=document.body}return e.wrap(s),(e[0]===a||t.contains(e[0],a))&&t(a).focus(),s=e.parent(),"static"===e.css("position")?(s.css({position:"relative"}),e.css({position:"relative"})):(t.extend(i,{position:e.css("position"),zIndex:e.css("z-index")}),t.each(["top","left","bottom","right"],function(t,s){i[s]=e.css(s),isNaN(parseInt(i[s],10))&&(i[s]="auto")}),e.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),e.css(n),s.css(i).show()},removeWrapper:function(e){var i=document.activeElement;return e.parent().is(".ui-effects-wrapper")&&(e.parent().replaceWith(e),(e[0]===i||t.contains(e[0],i))&&t(i).focus()),e},setTransition:function(e,i,s,n){return n=n||{},t.each(i,function(t,i){var a=e.cssUnit(i);a[0]>0&&(n[i]=a[0]*s+a[1])}),n}}),t.fn.extend({effect:function(){function e(e){function s(){t.isFunction(a)&&a.call(n[0]),t.isFunction(e)&&e()}var n=t(this),a=i.complete,r=i.mode;(n.is(":hidden")?"hide"===r:"show"===r)?(n[r](),s()):o.call(n[0],i,s)}var i=s.apply(this,arguments),n=i.mode,a=i.queue,o=t.effects.effect[i.effect];return t.fx.off||!o?n?this[n](i.duration,i.complete):this.each(function(){i.complete&&i.complete.call(this)}):a===!1?this.each(e):this.queue(a||"fx",e)},show:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="show",this.effect.call(this,i)}}(t.fn.show),hide:function(t){return function(e){if(n(e))return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="hide",this.effect.call(this,i)}}(t.fn.hide),toggle:function(t){return function(e){if(n(e)||"boolean"==typeof e)return t.apply(this,arguments);var i=s.apply(this,arguments);return i.mode="toggle",this.effect.call(this,i)}}(t.fn.toggle),cssUnit:function(e){var i=this.css(e),s=[];return t.each(["em","px","%","pt"],function(t,e){i.indexOf(e)>0&&(s=[parseFloat(i),e])}),s}})}(),function(){var e={};t.each(["Quad","Cubic","Quart","Quint","Expo"],function(t,i){e[i]=function(e){return Math.pow(e,t+2)}}),t.extend(e,{Sine:function(t){return 1-Math.cos(t*Math.PI/2)},Circ:function(t){return 1-Math.sqrt(1-t*t)},Elastic:function(t){return 0===t||1===t?t:-Math.pow(2,8*(t-1))*Math.sin((80*(t-1)-7.5)*Math.PI/15)},Back:function(t){return t*t*(3*t-2)},Bounce:function(t){for(var e,i=4;((e=Math.pow(2,--i))-1)/11>t;);return 1/Math.pow(4,3-i)-7.5625*Math.pow((3*e-2)/22-t,2)}}),t.each(e,function(e,i){t.easing["easeIn"+e]=i,t.easing["easeOut"+e]=function(t){return 1-i(1-t)},t.easing["easeInOut"+e]=function(t){return.5>t?i(2*t)/2:1-i(-2*t+2)/2}})}()})(jQuery);(function(t){var e=/up|down|vertical/,i=/up|left|vertical|horizontal/;t.effects.effect.blind=function(s,n){var a,o,r,h=t(this),l=["position","top","bottom","left","right","height","width"],c=t.effects.setMode(h,s.mode||"hide"),u=s.direction||"up",d=e.test(u),p=d?"height":"width",f=d?"top":"left",m=i.test(u),g={},v="show"===c;h.parent().is(".ui-effects-wrapper")?t.effects.save(h.parent(),l):t.effects.save(h,l),h.show(),a=t.effects.createWrapper(h).css({overflow:"hidden"}),o=a[p](),r=parseFloat(a.css(f))||0,g[p]=v?o:0,m||(h.css(d?"bottom":"right",0).css(d?"top":"left","auto").css({position:"absolute"}),g[f]=v?r:o+r),v&&(a.css(p,0),m||a.css(f,r+o)),a.animate(g,{duration:s.duration,easing:s.easing,queue:!1,complete:function(){"hide"===c&&h.hide(),t.effects.restore(h,l),t.effects.removeWrapper(h),n()}})}})(jQuery);(function(t){t.effects.effect.bounce=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],h=t.effects.setMode(o,e.mode||"effect"),l="hide"===h,c="show"===h,u=e.direction||"up",d=e.distance,p=e.times||5,f=2*p+(c||l?1:0),m=e.duration/f,g=e.easing,v="up"===u||"down"===u?"top":"left",_="up"===u||"left"===u,b=o.queue(),y=b.length;for((c||l)&&r.push("opacity"),t.effects.save(o,r),o.show(),t.effects.createWrapper(o),d||(d=o["top"===v?"outerHeight":"outerWidth"]()/3),c&&(a={opacity:1},a[v]=0,o.css("opacity",0).css(v,_?2*-d:2*d).animate(a,m,g)),l&&(d/=Math.pow(2,p-1)),a={},a[v]=0,s=0;p>s;s++)n={},n[v]=(_?"-=":"+=")+d,o.animate(n,m,g).animate(a,m,g),d=l?2*d:d/2;l&&(n={opacity:0},n[v]=(_?"-=":"+=")+d,o.animate(n,m,g)),o.queue(function(){l&&o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}),y>1&&b.splice.apply(b,[1,0].concat(b.splice(y,f+1))),o.dequeue()}})(jQuery);(function(t){t.effects.effect.clip=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","height","width"],h=t.effects.setMode(o,e.mode||"hide"),l="show"===h,c=e.direction||"vertical",u="vertical"===c,d=u?"height":"width",p=u?"top":"left",f={};t.effects.save(o,r),o.show(),s=t.effects.createWrapper(o).css({overflow:"hidden"}),n="IMG"===o[0].tagName?s:o,a=n[d](),l&&(n.css(d,0),n.css(p,a/2)),f[d]=l?a:0,f[p]=l?0:a/2,n.animate(f,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){l||o.hide(),t.effects.restore(o,r),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.drop=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","opacity","height","width"],o=t.effects.setMode(n,e.mode||"hide"),r="show"===o,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h?"pos":"neg",u={opacity:r?1:0};t.effects.save(n,a),n.show(),t.effects.createWrapper(n),s=e.distance||n["top"===l?"outerHeight":"outerWidth"](!0)/2,r&&n.css("opacity",0).css(l,"pos"===c?-s:s),u[l]=(r?"pos"===c?"+=":"-=":"pos"===c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.explode=function(e,i){function s(){b.push(this),b.length===u*d&&n()}function n(){p.css({visibility:"visible"}),t(b).remove(),m||p.hide(),i()}var a,o,r,h,l,c,u=e.pieces?Math.round(Math.sqrt(e.pieces)):3,d=u,p=t(this),f=t.effects.setMode(p,e.mode||"hide"),m="show"===f,g=p.show().css("visibility","hidden").offset(),v=Math.ceil(p.outerWidth()/d),_=Math.ceil(p.outerHeight()/u),b=[];for(a=0;u>a;a++)for(h=g.top+a*_,c=a-(u-1)/2,o=0;d>o;o++)r=g.left+o*v,l=o-(d-1)/2,p.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-o*v,top:-a*_}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:v,height:_,left:r+(m?l*v:0),top:h+(m?c*_:0),opacity:m?0:1}).animate({left:r+(m?0:l*v),top:h+(m?0:c*_),opacity:m?1:0},e.duration||500,e.easing,s)}})(jQuery);(function(t){t.effects.effect.fade=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"toggle");s.animate({opacity:n},{queue:!1,duration:e.duration,easing:e.easing,complete:i})}})(jQuery);(function(t){t.effects.effect.fold=function(e,i){var s,n,a=t(this),o=["position","top","bottom","left","right","height","width"],r=t.effects.setMode(a,e.mode||"hide"),h="show"===r,l="hide"===r,c=e.size||15,u=/([0-9]+)%/.exec(c),d=!!e.horizFirst,p=h!==d,f=p?["width","height"]:["height","width"],m=e.duration/2,g={},v={};t.effects.save(a,o),a.show(),s=t.effects.createWrapper(a).css({overflow:"hidden"}),n=p?[s.width(),s.height()]:[s.height(),s.width()],u&&(c=parseInt(u[1],10)/100*n[l?0:1]),h&&s.css(d?{height:0,width:c}:{height:c,width:0}),g[f[0]]=h?n[0]:c,v[f[1]]=h?n[1]:0,s.animate(g,m,e.easing).animate(v,m,e.easing,function(){l&&a.hide(),t.effects.restore(a,o),t.effects.removeWrapper(a),i()})}})(jQuery);(function(t){t.effects.effect.highlight=function(e,i){var s=t(this),n=["backgroundImage","backgroundColor","opacity"],a=t.effects.setMode(s,e.mode||"show"),o={backgroundColor:s.css("backgroundColor")};"hide"===a&&(o.opacity=0),t.effects.save(s,n),s.show().css({backgroundImage:"none",backgroundColor:e.color||"#ffff99"}).animate(o,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===a&&s.hide(),t.effects.restore(s,n),i()}})}})(jQuery);(function(t){t.effects.effect.pulsate=function(e,i){var s,n=t(this),a=t.effects.setMode(n,e.mode||"show"),o="show"===a,r="hide"===a,h=o||"hide"===a,l=2*(e.times||5)+(h?1:0),c=e.duration/l,u=0,d=n.queue(),p=d.length;for((o||!n.is(":visible"))&&(n.css("opacity",0).show(),u=1),s=1;l>s;s++)n.animate({opacity:u},c,e.easing),u=1-u;n.animate({opacity:u},c,e.easing),n.queue(function(){r&&n.hide(),i()}),p>1&&d.splice.apply(d,[1,0].concat(d.splice(p,l+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.puff=function(e,i){var s=t(this),n=t.effects.setMode(s,e.mode||"hide"),a="hide"===n,o=parseInt(e.percent,10)||150,r=o/100,h={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()};t.extend(e,{effect:"scale",queue:!1,fade:!0,mode:n,complete:i,percent:a?o:100,from:a?h:{height:h.height*r,width:h.width*r,outerHeight:h.outerHeight*r,outerWidth:h.outerWidth*r}}),s.effect(e)},t.effects.effect.scale=function(e,i){var s=t(this),n=t.extend(!0,{},e),a=t.effects.setMode(s,e.mode||"effect"),o=parseInt(e.percent,10)||(0===parseInt(e.percent,10)?0:"hide"===a?0:100),r=e.direction||"both",h=e.origin,l={height:s.height(),width:s.width(),outerHeight:s.outerHeight(),outerWidth:s.outerWidth()},c={y:"horizontal"!==r?o/100:1,x:"vertical"!==r?o/100:1};n.effect="size",n.queue=!1,n.complete=i,"effect"!==a&&(n.origin=h||["middle","center"],n.restore=!0),n.from=e.from||("show"===a?{height:0,width:0,outerHeight:0,outerWidth:0}:l),n.to={height:l.height*c.y,width:l.width*c.x,outerHeight:l.outerHeight*c.y,outerWidth:l.outerWidth*c.x},n.fade&&("show"===a&&(n.from.opacity=0,n.to.opacity=1),"hide"===a&&(n.from.opacity=1,n.to.opacity=0)),s.effect(n)},t.effects.effect.size=function(e,i){var s,n,a,o=t(this),r=["position","top","bottom","left","right","width","height","overflow","opacity"],h=["position","top","bottom","left","right","overflow","opacity"],l=["width","height","overflow"],c=["fontSize"],u=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],d=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],p=t.effects.setMode(o,e.mode||"effect"),f=e.restore||"effect"!==p,m=e.scale||"both",g=e.origin||["middle","center"],v=o.css("position"),_=f?r:h,b={height:0,width:0,outerHeight:0,outerWidth:0};"show"===p&&o.show(),s={height:o.height(),width:o.width(),outerHeight:o.outerHeight(),outerWidth:o.outerWidth()},"toggle"===e.mode&&"show"===p?(o.from=e.to||b,o.to=e.from||s):(o.from=e.from||("show"===p?b:s),o.to=e.to||("hide"===p?b:s)),a={from:{y:o.from.height/s.height,x:o.from.width/s.width},to:{y:o.to.height/s.height,x:o.to.width/s.width}},("box"===m||"both"===m)&&(a.from.y!==a.to.y&&(_=_.concat(u),o.from=t.effects.setTransition(o,u,a.from.y,o.from),o.to=t.effects.setTransition(o,u,a.to.y,o.to)),a.from.x!==a.to.x&&(_=_.concat(d),o.from=t.effects.setTransition(o,d,a.from.x,o.from),o.to=t.effects.setTransition(o,d,a.to.x,o.to))),("content"===m||"both"===m)&&a.from.y!==a.to.y&&(_=_.concat(c).concat(l),o.from=t.effects.setTransition(o,c,a.from.y,o.from),o.to=t.effects.setTransition(o,c,a.to.y,o.to)),t.effects.save(o,_),o.show(),t.effects.createWrapper(o),o.css("overflow","hidden").css(o.from),g&&(n=t.effects.getBaseline(g,s),o.from.top=(s.outerHeight-o.outerHeight())*n.y,o.from.left=(s.outerWidth-o.outerWidth())*n.x,o.to.top=(s.outerHeight-o.to.outerHeight)*n.y,o.to.left=(s.outerWidth-o.to.outerWidth)*n.x),o.css(o.from),("content"===m||"both"===m)&&(u=u.concat(["marginTop","marginBottom"]).concat(c),d=d.concat(["marginLeft","marginRight"]),l=r.concat(u).concat(d),o.find("*[width]").each(function(){var i=t(this),s={height:i.height(),width:i.width(),outerHeight:i.outerHeight(),outerWidth:i.outerWidth()};f&&t.effects.save(i,l),i.from={height:s.height*a.from.y,width:s.width*a.from.x,outerHeight:s.outerHeight*a.from.y,outerWidth:s.outerWidth*a.from.x},i.to={height:s.height*a.to.y,width:s.width*a.to.x,outerHeight:s.height*a.to.y,outerWidth:s.width*a.to.x},a.from.y!==a.to.y&&(i.from=t.effects.setTransition(i,u,a.from.y,i.from),i.to=t.effects.setTransition(i,u,a.to.y,i.to)),a.from.x!==a.to.x&&(i.from=t.effects.setTransition(i,d,a.from.x,i.from),i.to=t.effects.setTransition(i,d,a.to.x,i.to)),i.css(i.from),i.animate(i.to,e.duration,e.easing,function(){f&&t.effects.restore(i,l)})})),o.animate(o.to,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){0===o.to.opacity&&o.css("opacity",o.from.opacity),"hide"===p&&o.hide(),t.effects.restore(o,_),f||("static"===v?o.css({position:"relative",top:o.to.top,left:o.to.left}):t.each(["top","left"],function(t,e){o.css(e,function(e,i){var s=parseInt(i,10),n=t?o.to.left:o.to.top;return"auto"===i?n+"px":s+n+"px"})})),t.effects.removeWrapper(o),i()}})}})(jQuery);(function(t){t.effects.effect.shake=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","height","width"],o=t.effects.setMode(n,e.mode||"effect"),r=e.direction||"left",h=e.distance||20,l=e.times||3,c=2*l+1,u=Math.round(e.duration/c),d="up"===r||"down"===r?"top":"left",p="up"===r||"left"===r,f={},m={},g={},v=n.queue(),_=v.length;for(t.effects.save(n,a),n.show(),t.effects.createWrapper(n),f[d]=(p?"-=":"+=")+h,m[d]=(p?"+=":"-=")+2*h,g[d]=(p?"-=":"+=")+2*h,n.animate(f,u,e.easing),s=1;l>s;s++)n.animate(m,u,e.easing).animate(g,u,e.easing);n.animate(m,u,e.easing).animate(f,u/2,e.easing).queue(function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}),_>1&&v.splice.apply(v,[1,0].concat(v.splice(_,c+1))),n.dequeue()}})(jQuery);(function(t){t.effects.effect.slide=function(e,i){var s,n=t(this),a=["position","top","bottom","left","right","width","height"],o=t.effects.setMode(n,e.mode||"show"),r="show"===o,h=e.direction||"left",l="up"===h||"down"===h?"top":"left",c="up"===h||"left"===h,u={};t.effects.save(n,a),n.show(),s=e.distance||n["top"===l?"outerHeight":"outerWidth"](!0),t.effects.createWrapper(n).css({overflow:"hidden"}),r&&n.css(l,c?isNaN(s)?"-"+s:-s:s),u[l]=(r?c?"+=":"-=":c?"-=":"+=")+s,n.animate(u,{queue:!1,duration:e.duration,easing:e.easing,complete:function(){"hide"===o&&n.hide(),t.effects.restore(n,a),t.effects.removeWrapper(n),i()}})}})(jQuery);(function(t){t.effects.effect.transfer=function(e,i){var s=t(this),n=t(e.to),a="fixed"===n.css("position"),o=t("body"),r=a?o.scrollTop():0,h=a?o.scrollLeft():0,l=n.offset(),c={top:l.top-r,left:l.left-h,height:n.innerHeight(),width:n.innerWidth()},u=s.offset(),d=t("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(e.className).css({top:u.top-r,left:u.left-h,height:s.innerHeight(),width:s.innerWidth(),position:a?"fixed":"absolute"}).animate(c,e.duration,e.easing,function(){d.remove(),i()})}})(jQuery);
/*
 * A time picker for jQuery
 * Based on original timePicker by Sam Collet (http://www.texotela.co.uk) -
 * copyright (c) 2006 Sam Collett (http://www.texotela.co.uk)
 *
 * Dual licensed under the MIT and GPL licenses.
 * Copyright (c) 2009 Anders Fajerson
 * @name     timePicker
 * @version  0.2
 * @author   Anders Fajerson (http://perifer.se)
 * @example  $("#mytime").timePicker();
 * @example  $("#mytime").timePicker({step:30, startTime:"15:00", endTime:"18:00"});
 */
 
(function($){
  $.fn.timePicker = function(options) {
    // Build main options before element iteration
    var settings = $.extend({}, $.fn.timePicker.defaults, options);
 
    return this.each(function() {
      $.timePicker(this, settings);
    });
  };
 
  $.timePicker = function (elm, settings) {
    var e = $(elm)[0];
    return e.timePicker || (e.timePicker = new jQuery._timePicker(e, settings));
  };
 
  $._timePicker = function(elm, settings) {
 
    var tpOver = false;
    var keyDown = false;
    var startTime = timeToDate(settings.startTime, settings);
    var endTime = timeToDate(settings.endTime, settings);
 
    $(elm).attr('autocomplete', 'OFF'); // Disable browser autocomplete
 
    var times = [];
    var time = new Date(startTime); // Create a new date object.
    while(time <= endTime) {
      times[times.length] = formatTime(time, settings);
      time = new Date(time.setMinutes(time.getMinutes() + settings.step));
    }
 
    var $tpDiv = $('<div class="acTimePicker'+ (settings.show24Hours ? '' : ' acTimePicker-12hours') +'"></div>');
    var $tpList = $('<ul></ul>');
 
    // Build the list.
    for(var i = 0; i < times.length; i++) {
      $tpList.append("<li>" + times[i] + "</li>");
    }
    $tpDiv.append($tpList);
    // Append the timPicker to the body and position it.
    var elmOffset = $(elm).offset();
    $tpDiv.appendTo('body').css({'top':elmOffset.top+elm.offsetHeight, 'left':elmOffset.left}).hide();
 
    // Store the mouse state, used by the blur event. Use mouseover instead of
    // mousedown since Opera fires blur before mousedown.
    $tpDiv.mouseover(function() {
      tpOver = true;
    }).mouseout(function() {
      tpOver = false;
    });
 
    $("li", $tpList).mouseover(function() {
      if (!keyDown) {
        $("li.selected", $tpDiv).removeClass("selected");
        $(this).addClass("selected");
      }
    }).mousedown(function() {
       tpOver = true;
    }).click(function() {
      setTimeVal(elm, this, $tpDiv, settings);
      tpOver = false;
    });
 
    var showPicker = function() {
      if ($tpDiv.is(":visible")) {
        return false;
      }
      $("li", $tpDiv).removeClass("selected");

      var elmOffset = $(elm).offset();
      $tpDiv.appendTo('body').css({'top':elmOffset.top+elm.offsetHeight, 'left':elmOffset.left}).hide();
 
      // Show picker. This has to be done before scrollTop is set since that
      // can't be done on hidden elements.
      $tpDiv.show();
 
      // Try to find a time in the list that matches the entered time.
      var time = elm.value ? timeStringToDate(elm.value, settings) : startTime;
      var startMin = startTime.getHours() * 60 + startTime.getMinutes();
      var min = (time.getHours() * 60 + time.getMinutes()) - startMin;
      var steps = Math.round(min / settings.step);
      var roundTime = normaliseTime(new Date(0, 0, 0, 0, (steps * settings.step + startMin), 0));
      roundTime = (startTime < roundTime && roundTime <= endTime) ? roundTime : startTime;
      var $matchedTime = $("li:contains(" + formatTime(roundTime, settings) + ")", $tpDiv);
 
      if ($matchedTime.length) {
        $matchedTime.addClass("selected");
        // Scroll to matched time.
        $tpDiv[0].scrollTop = $matchedTime[0].offsetTop;
      }
      return true;
    };
    // Attach to click as well as focus so timePicker can be shown again when
    // clicking on the input when it already has focus.
    $(elm).focus(showPicker).click(showPicker);
    // Hide timepicker on blur
    $(elm).blur(function() {
      if (!tpOver) {
        $tpDiv.hide();
      }
    });
    // Keypress doesn't repeat on Safari for non-text keys.
    // Keydown doesn't repeat on Firefox and Opera on Mac.
    // Using kepress for Opera and Firefox and keydown for the rest seems to
    // work with up/down/enter/esc.
    var event = ($.browser.opera || $.browser.mozilla) ? 'keypress' : 'keydown';
    $(elm)[event](function(e) {
      var $selected;
      keyDown = true;
      var top = $tpDiv[0].scrollTop;
      switch (e.keyCode) {
        case 38: // Up arrow.
          // Just show picker if it's hidden.
          if (showPicker()) {
            return false;
          };
          $selected = $("li.selected", $tpList);
          var prev = $selected.prev().addClass("selected")[0];
          if (prev) {
            $selected.removeClass("selected");
            // Scroll item into view.
            if (prev.offsetTop < top) {
              $tpDiv[0].scrollTop = top - prev.offsetHeight;
            }
          }
          else {
            // Loop to next item.
            $selected.removeClass("selected");
            prev = $("li:last", $tpList).addClass("selected")[0];
            $tpDiv[0].scrollTop = prev.offsetTop - prev.offsetHeight;
          }
          return false;
          break;
        case 40: // Down arrow, similar in behaviour to up arrow.
          if (showPicker()) {
            return false;
          };
          $selected = $("li.selected", $tpList);
          var next = $selected.next().addClass("selected")[0];
          if (next) {
            $selected.removeClass("selected");
            if (next.offsetTop + next.offsetHeight > top + $tpDiv[0].offsetHeight) {
              $tpDiv[0].scrollTop = top + next.offsetHeight;
            }
          }
          else {
            $selected.removeClass("selected");
            next = $("li:first", $tpList).addClass("selected")[0];
            $tpDiv[0].scrollTop = 0;
          }
          return false;
          break;
        case 13: // Enter
          if ($tpDiv.is(":visible")) {
            var sel = $("li.selected", $tpList)[0];
            setTimeVal(elm, sel, $tpDiv, settings);
          }
          return false;
          break;
        case 27: // Esc
          $tpDiv.hide();
          return false;
          break;
      }
      return true;
    });
    $(elm).keyup(function(e) {
      keyDown = false;
    });
    // Helper function to get an inputs current time as Date object.
    // Returns a Date object.
    this.getTime = function() {
      return timeStringToDate(elm.value, settings);
    };
    // Helper function to set a time input.
    // Takes a Date object.
    this.setTime = function(time) {
      elm.value = formatTime(normaliseTime(time), settings);
      // Trigger element's change events.
      $(elm).change();
    };
 
  }; // End fn;
 
  // Plugin defaults.
  $.fn.timePicker.defaults = {
    step:30,
    startTime: new Date(0, 0, 0, 0, 0, 0),
    endTime: new Date(0, 0, 0, 23, 30, 0),
    separator: ':',
    show24Hours: true
  };
 
  // Private functions.
 
  function setTimeVal(elm, sel, $tpDiv, settings) {
    // Update input field
    elm.value = $(sel).text();
    // Trigger element's change events.
    $(elm).change();
    // Keep focus for all but IE (which doesn't like it)
    if (!$.browser.msie) {
      elm.focus();
    }
    // Hide picker
    $tpDiv.hide();
  }
 
  function formatTime(time, settings) {
    var h = time.getHours();
    var hours = settings.show24Hours ? h : (((h + 11) % 12) + 1);
    var minutes = time.getMinutes();
    return formatNumber(hours) + settings.separator + formatNumber(minutes) + (settings.show24Hours ? '' : ((h < 12) ? ' AM' : ' PM'));
  }
 
  function formatNumber(value) {
    return (value < 10 ? '0' : '') + value;
  }
 
  function timeToDate(input, settings) {
    return (typeof input == 'object') ? normaliseTime(input) : timeStringToDate(input, settings);
  }
 
  function timeStringToDate(input, settings) {
    if (input) {
      var array = input.split(settings.separator);
      var hours = parseFloat(array[0]);
      var minutes = parseFloat(array[1]);
 
      // Convert AM/PM hour to 24-hour format.
      if (!settings.show24Hours) {
        if (hours == 12 && input.indexOf('AM') != -1) 
		{
          hours = 0;
        }
        else if (hours!=12 && input.indexOf('PM') != -1) 
		{
          hours += 12;
        }
      }
      var time = new Date(0, 0, 0, hours, minutes, 0);
      return normaliseTime(time);
    }
    return null;
  }
 
  /* Normalise time object to a common date. */
  function normaliseTime(time) {
    time.setFullYear(2001);
    time.setMonth(0);
    time.setDate(0);
    return time;
  }
 
})(jQuery);

// tipsy, facebook style tooltips for jquery
// version 1.0.0a
// (c) 2008-2010 jason frame [jason@onehackoranother.com]
// released under the MIT license
//
// joe
// Changed class names from tipsy* to alib-tooltip

(function($) {
    
    function maybeCall(thing, ctx) {
        return (typeof thing == 'function') ? (thing.call(ctx)) : thing;
    };
    
    function isElementInDOM(ele) {
      while (ele = ele.parentNode) {
        if (ele == document) return true;
      }
      return false;
    };
    
    function Tipsy(element, options) {
        this.$element = $(element);
        this.options = options;
        this.enabled = true;
        this.fixTitle();
    };
    
    Tipsy.prototype = {
        show: function() {
            var title = this.getTitle();
            if (title && this.enabled) {
                var $tip = this.tip();
                
                $tip.find('.alib-tooltip-inner')[this.options.html ? 'html' : 'text'](title);
                $tip[0].className = 'alib-tooltip'; // reset classname in case of dynamic gravity
                $tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).prependTo(document.body);
                
                var pos = $.extend({}, this.$element.offset(), {
                    width: this.$element[0].offsetWidth,
                    height: this.$element[0].offsetHeight
                });
                
                var actualWidth = $tip[0].offsetWidth,
                    actualHeight = $tip[0].offsetHeight,
                    gravity = maybeCall(this.options.gravity, this.$element[0]);

                var tp;
                switch (gravity.charAt(0)) {
                    case 'n':
                        tp = {top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
                        break;
                    case 's':
                        tp = {top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
                        break;
                    case 'e':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
                        break;
                    case 'w':
                        tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
                        break;
                }
                
                if (gravity.length == 2) {
                    if (gravity.charAt(1) == 'w') {
                        tp.left = pos.left + pos.width / 2 - 15;
                    } else {
                        tp.left = pos.left + pos.width / 2 - actualWidth + 15;
                    }
                }

				/**
				 * joe: below are edits to make sure tt does not go out of the document bounds
				 */
				if (tp.left < 0)
					tp.left = 0;
                
                $tip.css(tp).addClass('alib-tooltip-' + gravity);
                $tip.find('.alib-tooltip-arrow')[0].className = 'alib-tooltip-arrow alib-tooltip-arrow-' + gravity.charAt(0);
                if (this.options.className) {
                    $tip.addClass(maybeCall(this.options.className, this.$element[0]));
                }
                
                if (this.options.fade) {
                    $tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'}).animate({opacity: this.options.opacity});
                } else {
                    $tip.css({visibility: 'visible', opacity: this.options.opacity});
                }
            }
        },
        
        hide: function() {
            if (this.options.fade) {
                this.tip().stop().fadeOut(function() { $(this).remove(); });
            } else {
                this.tip().remove();
            }
        },
        
        fixTitle: function() {
            var $e = this.$element;
            if ($e.attr('title') || typeof($e.attr('original-title')) != 'string') {
                $e.attr('original-title', $e.attr('title') || '').removeAttr('title');
            }
        },
        
        getTitle: function() {
            var title, $e = this.$element, o = this.options;
            this.fixTitle();
            var title, o = this.options;
            if (typeof o.title == 'string') {
                title = $e.attr(o.title == 'title' ? 'original-title' : o.title);
            } else if (typeof o.title == 'function') {
                title = o.title.call($e[0]);
            }
            title = ('' + title).replace(/(^\s*|\s*$)/, "");
            return title || o.fallback;
        },
        
        tip: function() {
            if (!this.$tip) {
                this.$tip = $('<div class="alib-tooltip"></div>').html('<div class="alib-tooltip-arrow"></div><div class="alib-tooltip-inner"></div>');
                this.$tip.data('tipsy-pointee', this.$element[0]);
            }
            return this.$tip;
        },
        
        validate: function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        
        enable: function() { this.enabled = true; },
        disable: function() { this.enabled = false; },
        toggleEnabled: function() { this.enabled = !this.enabled; }
    };
    
    $.fn.tipsy = function(options) {
        
        if (options === true) {
            return this.data('tipsy');
        } else if (typeof options == 'string') {
            var tipsy = this.data('tipsy');
            if (tipsy) tipsy[options]();
            return this;
        }
        
        options = $.extend({}, $.fn.tipsy.defaults, options);
        
        function get(ele) {
            var tipsy = $.data(ele, 'tipsy');
            if (!tipsy) {
                tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
                $.data(ele, 'tipsy', tipsy);
            }
            return tipsy;
        }
        
        function enter() {
            var tipsy = get(this);
            tipsy.hoverState = 'in';
            if (options.delayIn == 0) {
                tipsy.show();
            } else {
                tipsy.fixTitle();
                setTimeout(function() { if (tipsy.hoverState == 'in') tipsy.show(); }, options.delayIn);
            }
        };
        
        function leave() {
            var tipsy = get(this);
            tipsy.hoverState = 'out';
            if (options.delayOut == 0) {
                tipsy.hide();
            } else {
                setTimeout(function() { if (tipsy.hoverState == 'out') tipsy.hide(); }, options.delayOut);
            }
        };
        
        if (!options.live) this.each(function() { get(this); });
        
        if (options.trigger != 'manual') {
            var binder   = options.live ? 'live' : 'bind',
                eventIn  = options.trigger == 'hover' ? 'mouseenter' : 'focus',
                eventOut = options.trigger == 'hover' ? 'mouseleave' : 'blur';
            this[binder](eventIn, enter)[binder](eventOut, leave);
        }
        
        return this;
        
    };
    
    $.fn.tipsy.defaults = {
        className: null,
        delayIn: 0,
        delayOut: 0,
        fade: false,
        fallback: '',
        gravity: 'n',
        html: false,
        live: false,
        offset: 0,
        opacity: 0.8,
        title: 'title',
        trigger: 'hover'
    };
    
    $.fn.tipsy.revalidate = function() {
      $('.alib-tooltip').each(function() {
        var pointee = $.data(this, 'tipsy-pointee');
        if (!pointee || !isElementInDOM(pointee)) {
          $(this).remove();
        }
      });
    };
    
    // Overwrite this method to provide options on a per-element basis.
    // For example, you could store the gravity in a 'tipsy-gravity' attribute:
    // return $.extend({}, options, {gravity: $(ele).attr('tipsy-gravity') || 'n' });
    // (remember - do not modify 'options' in place!)
    $.fn.tipsy.elementOptions = function(ele, options) {
        return $.metadata ? $.extend({}, options, $(ele).metadata()) : options;
    };
    
    $.fn.tipsy.autoNS = function() {
        return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
    };
    
    $.fn.tipsy.autoWE = function() {
        return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
    };
    
    /**
     * yields a closure of the supplied parameters, producing a function that takes
     * no arguments and is suitable for use as an autogravity function like so:
     *
     * @param margin (int) - distance from the viewable region edge that an
     *        element should be before setting its tooltip's gravity to be away
     *        from that edge.
     * @param prefer (string, e.g. 'n', 'sw', 'w') - the direction to prefer
     *        if there are no viewable region edges effecting the tooltip's
     *        gravity. It will try to vary from this minimally, for example,
     *        if 'sw' is preferred and an element is near the right viewable 
     *        region edge, but not the top edge, it will set the gravity for
     *        that element's tooltip to be 'se', preserving the southern
     *        component.
     */
     $.fn.tipsy.autoBounds = function(margin, prefer) {
		return function() {
			var dir = {ns: prefer[0], ew: (prefer.length > 1 ? prefer[1] : false)},
			    boundTop = $(document).scrollTop() + margin,
			    boundLeft = $(document).scrollLeft() + margin,
			    $this = $(this);

			if ($this.offset().top < boundTop) dir.ns = 'n';
			if ($this.offset().left < boundLeft) dir.ew = 'w';
			if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = 'e';
			if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = 's';

			return dir.ns + (dir.ew ? dir.ew : '');
		}
	};
})(jQuery);

/* From: https://github.com/phstc/jquery-dateFormat */
var DateFormat = {};

(function($) {
  var daysInWeek          = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var shortMonthsInYear   = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                              'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  var longMonthsInYear    = ['January', 'February', 'March', 'April', 'May', 'June',
                              'July', 'August', 'September', 'October', 'November', 'December'];
  var shortMonthsToNumber = { 'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04', 'May': '05', 'Jun': '06',
                              'Jul': '07', 'Aug': '08', 'Sep': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12' };

  var YYYYMMDD_MATCHER = /\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.?\d{0,3}[Z\-+]?(\d{2}:?\d{2})?/;

  $.format = (function() {
    function numberToLongDay(value) {
      // 0 to Sunday
      // 1 to Monday
      return daysInWeek[parseInt(value, 10)] || value;
    }

    function numberToShortMonth(value) {
      // 1 to Jan
      // 2 to Feb
      var monthArrayIndex = parseInt(value, 10) - 1;
      return shortMonthsInYear[monthArrayIndex] || value;
    }

    function numberToLongMonth(value) {
      // 1 to January
      // 2 to February
      var monthArrayIndex = parseInt(value, 10) - 1;
      return longMonthsInYear[monthArrayIndex] || value;
    }

    function shortMonthToNumber(value) {
      // Jan to 01
      // Feb to 02
      return shortMonthsToNumber[value] || value;
    }

    function parseTime(value) {
      // 10:54:50.546
      // => hour: 10, minute: 54, second: 50, millis: 546
      // 10:54:50
      // => hour: 10, minute: 54, second: 50, millis: ''
      var time = value,
          values,
          subValues,
          hour,
          minute,
          second,
          millis = '',
          delimited,
          timeArray;

      if(time.indexOf('.') !== -1) {
        delimited = time.split('.');
        // split time and milliseconds
        time   = delimited[0];
        millis = delimited[1];
      }

      timeArray = time.split(':');

      if(timeArray.length === 3) {
        hour   = timeArray[0];
        minute = timeArray[1];
        // '20 GMT-0200 (BRST)'.replace(/\s.+/, '').replace(/[a-z]/gi, '');
        // => 20
        // '20Z'.replace(/\s.+/, '').replace(/[a-z]/gi, '');
        // => 20
        second = timeArray[2].replace(/\s.+/, '').replace(/[a-z]/gi, '');
        // '01:10:20 GMT-0200 (BRST)'.replace(/\s.+/, '').replace(/[a-z]/gi, '');
        // => 01:10:20
        // '01:10:20Z'.replace(/\s.+/, '').replace(/[a-z]/gi, '');
        // => 01:10:20
        time = time.replace(/\s.+/, '').replace(/[a-z]/gi, '');
        return {
          time:    time,
          hour:    hour,
          minute:  minute,
          second:  second,
          millis:  millis
        };
      }

      return { time : '', hour : '', minute : '', second : '', millis : '' };
    }


    function padding(value, length) {
      var paddingCount = length - String(value).length;
      for(var i = 0; i < paddingCount; i++) {
        value = '0' + value;
      }
      return value;
    }

    return {

      parseDate: function(value) {
        var parsedDate = {
          date:       null,
          year:       null,
          month:      null,
          dayOfMonth: null,
          dayOfWeek:  null,
          time:       null
        };

        if(typeof value == 'number') {
          return this.parseDate(new Date(value));
        } else if(typeof value.getFullYear == 'function') {
          parsedDate.year       = String(value.getFullYear());
          // d = new Date(1900, 1, 1) // 1 for Feb instead of Jan.
          // => Thu Feb 01 1900 00:00:00
          parsedDate.month      = String(value.getMonth() + 1);
          parsedDate.dayOfMonth = String(value.getDate());
          parsedDate.time       = parseTime(value.toTimeString());
        } else if(value.search(YYYYMMDD_MATCHER) != -1) {
          /* 2009-04-19T16:11:05+02:00 || 2009-04-19T16:11:05Z */
          values = value.split(/[T\+-]/);
          parsedDate.year       = values[0];
          parsedDate.month      = values[1];
          parsedDate.dayOfMonth = values[2];
          parsedDate.time       = parseTime(values[3].split('.')[0]);
        } else {
          values = value.split(' ');
          switch (values.length) {
            case 6:
              /* Wed Jan 13 10:43:41 CET 2010 */
              parsedDate.year       = values[5];
              parsedDate.month      = shortMonthToNumber(values[1]);
              parsedDate.dayOfMonth = values[2];
              parsedDate.time       = parseTime(values[3]);
              break;
            case 2:
              /* 2009-12-18 10:54:50.546 */
              subValues = values[0].split('-');
              parsedDate.year       = subValues[0];
              parsedDate.month      = subValues[1];
              parsedDate.dayOfMonth = subValues[2];
              parsedDate.time       = parseTime(values[1]);
              break;
            case 7:
              /* Tue Mar 01 2011 12:01:42 GMT-0800 (PST) */
            case 9:
              /* added by Larry, for Fri Apr 08 2011 00:00:00 GMT+0800 (China Standard Time) */
            case 10:
              /* added by Larry, for Fri Apr 08 2011 00:00:00 GMT+0200 (W. Europe Daylight Time) */
              parsedDate.year       = values[3];
              parsedDate.month      = shortMonthToNumber(values[1]);
              parsedDate.dayOfMonth = values[2];
              parsedDate.time       = parseTime(values[4]);
              break;
            case 1:
              /* added by Jonny, for 2012-02-07CET00:00:00 (Doctrine Entity -> Json Serializer) */
              subValues = values[0].split('');
              parsedDate.year       = subValues[0] + subValues[1] + subValues[2] + subValues[3];
              parsedDate.month      = subValues[5] + subValues[6];
              parsedDate.dayOfMonth = subValues[8] + subValues[9];
              parsedDate.time       = parseTime(subValues[13] + subValues[14] + subValues[15] + subValues[16] + subValues[17] + subValues[18] + subValues[19] + subValues[20]);
              break;
            default:
              return null;
          }
        }
        parsedDate.date       = new Date(parsedDate.year, parsedDate.month - 1, parsedDate.dayOfMonth);
        parsedDate.dayOfWeek  = String(parsedDate.date.getDay());

        return parsedDate;
      },

      date : function(value, format) {
        try {
          var parsedDate = this.parseDate(value);

          if(parsedDate === null) {
            return value;
          }

          var date       = parsedDate.date,
              year       = parsedDate.year,
              month      = parsedDate.month,
              dayOfMonth = parsedDate.dayOfMonth,
              dayOfWeek  = parsedDate.dayOfWeek,
              time       = parsedDate.time;

          var pattern      = '',
              retValue     = '',
              unparsedRest = '',
              inQuote      = false;

          /* Issue 1 - variable scope issue in format.date (Thanks jakemonO) */
          for(var i = 0; i < format.length; i++) {
            var currentPattern = format.charAt(i);
            // Look-Ahead Right (LALR)
            var nextRight      = format.charAt(i + 1);

            if (inQuote) {
              if (currentPattern == "'") {
                retValue += (pattern === '') ? "'" : pattern;
                pattern = '';
                inQuote = false;
              } else {
                pattern += currentPattern;
              }
              continue;
            }
            pattern += currentPattern;
            unparsedRest = '';
            switch (pattern) {
              case 'ddd':
                retValue += numberToLongDay(dayOfWeek);
                pattern = '';
                break;
              case 'dd':
                if(nextRight === 'd') {
                  break;
                }
                retValue += padding(dayOfMonth, 2);
                pattern = '';
                break;
              case 'd':
                if(nextRight === 'd') {
                  break;
                }
                retValue += parseInt(dayOfMonth, 10);
                pattern = '';
                break;
              case 'D':
                if(dayOfMonth == 1 || dayOfMonth == 21 || dayOfMonth == 31) {
                  dayOfMonth = parseInt(dayOfMonth, 10) + 'st';
                } else if(dayOfMonth == 2 || dayOfMonth == 22) {
                  dayOfMonth = parseInt(dayOfMonth, 10) + 'nd';
                } else if(dayOfMonth == 3 || dayOfMonth == 23) {
                  dayOfMonth = parseInt(dayOfMonth, 10) + 'rd';
                } else {
                  dayOfMonth = parseInt(dayOfMonth, 10) + 'th';
                }
                retValue += dayOfMonth;
                pattern = '';
                break;
              case 'MMMM':
                retValue += numberToLongMonth(month);
                pattern = '';
                break;
              case 'MMM':
                if(nextRight === 'M') {
                  break;
                }
                retValue += numberToShortMonth(month);
                pattern = '';
                break;
              case 'MM':
                if(nextRight === 'M') {
                  break;
                }
                retValue += padding(month, 2);
                pattern = '';
                break;
              case 'M':
                if(nextRight === 'M') {
                  break;
                }
                retValue += parseInt(month, 10);
                pattern = '';
                break;
              case 'y':
              case 'yyy':
                if(nextRight === 'y') {
                  break;
                }
                retValue += pattern;
                pattern = '';
                break;
              case 'yy':
                if(nextRight === 'y') {
                  break;
                }
                retValue += String(year).slice(-2);
                pattern = '';
                break;
              case 'yyyy':
                retValue += year;
                pattern = '';
                break;
              case 'HH':
                retValue += padding(time.hour, 2);
                pattern = '';
                break;
              case 'H':
                if(nextRight === 'H') {
                  break;
                }
                retValue += parseInt(time.hour, 10);
                pattern = '';
                break;
              case 'hh':
                /* time.hour is '00' as string == is used instead of === */
                hour = (parseInt(time.hour, 10) === 0 ? 12 : time.hour < 13 ? time.hour
                    : time.hour - 12);
                retValue += padding(hour, 2);
                pattern = '';
                break;
              case 'h':
                if(nextRight === 'h') {
                  break;
                }
                hour = (parseInt(time.hour, 10) === 0 ? 12 : time.hour < 13 ? time.hour
                    : time.hour - 12);
                retValue += parseInt(hour, 10);
                // Fixing issue https://github.com/phstc/jquery-dateFormat/issues/21
                // retValue = parseInt(retValue, 10);
                pattern = '';
                break;
              case 'mm':
                retValue += padding(time.minute, 2);
                pattern = '';
                break;
              case 'm':
                if(nextRight === 'm') {
                  break;
                }
                retValue += time.minute;
                pattern = '';
                break;
              case 'ss':
                /* ensure only seconds are added to the return string */
                retValue += padding(time.second.substring(0, 2), 2);
                pattern = '';
                break;
              case 's':
                if(nextRight === 's') {
                  break;
                }
                retValue += time.second;
                pattern = '';
                break;
              case 'S':
              case 'SS':
                if(nextRight === 'S') {
                  break;
                }
                retValue += pattern;
                pattern = '';
                break;
              case 'SSS':
                retValue += time.millis.substring(0, 3);
                pattern = '';
                break;
              case 'a':
                retValue += time.hour >= 12 ? 'PM' : 'AM';
                pattern = '';
                break;
              case 'p':
                retValue += time.hour >= 12 ? 'p.m.' : 'a.m.';
                pattern = '';
                break;
              case "'":
                pattern = '';
                inQuote = true;
                break;
              default:
                retValue += currentPattern;
                pattern = '';
                break;
            }
          }
          retValue += unparsedRest;
          return retValue;
        } catch (e) {
          if(console && console.log) {
            console.log(e);
          }
          return value;
        }
      },
      /*
       * JavaScript Pretty Date
       * Copyright (c) 2011 John Resig (ejohn.org)
       * Licensed under the MIT and GPL licenses.
       *
       * Takes an ISO time and returns a string representing how long ago the date
       * represents
       *
       * ('2008-01-28T20:24:17Z') // => '2 hours ago'
       * ('2008-01-27T22:24:17Z') // => 'Yesterday'
       * ('2008-01-26T22:24:17Z') // => '2 days ago'
       * ('2008-01-14T22:24:17Z') // => '2 weeks ago'
       * ('2007-12-15T22:24:17Z') // => 'more than 5 weeks ago'
       *
       */
      prettyDate : function(time) {
        var date;
        var diff;
        var day_diff;

        if(typeof time === 'string' || typeof time === 'number') {
          date = new Date(time);
        }

        if(typeof time === 'object') {
          date = new Date(time.toString());
        }

        diff = (((new Date()).getTime() - date.getTime()) / 1000);

        day_diff = Math.floor(diff / 86400);

        if(isNaN(day_diff) || day_diff < 0) {
          return;
        }

        if(diff < 60) {
          return 'just now';
        } else if(diff < 120) {
          return '1 minute ago';
        } else if(diff < 3600) {
          return Math.floor(diff / 60) + ' minutes ago';
        } else if(diff < 7200) {
          return '1 hour ago';
        } else if(diff < 86400) {
          return Math.floor(diff / 3600) + ' hours ago';
        } else if(day_diff === 1) {
          return 'Yesterday';
        } else if(day_diff < 7) {
          return day_diff + ' days ago';
        } else if(day_diff < 31) {
          return Math.ceil(day_diff / 7) + ' weeks ago';
        } else if(day_diff >= 31) {
          return 'more than 5 weeks ago';
        }
      },
      toBrowserTimeZone : function(value, format) {
        return this.date(new Date(value), format || 'MM/dd/yyyy HH:mm:ss');
      }
    };
  }());
}(DateFormat));
;// require dateFormat.js
// please check `dist/jquery.dateFormat.js` for a complete version
(function($) {
  $.format = DateFormat.format;
}(jQuery));

/*
Script: GrowingInput.js
	Alters the size of an input depending on its content

	License:
		MIT-style license.

	Authors:
		Guillermo Rauch
*/

(function($){

$.GrowingInput = function(element, options){
	
	var value, lastValue, calc;
	
	options = $.extend({
		min: 0,
		max: null,
		startWidth: 15,
		correction: 15
	}, options);
	
	element = $(element).data('growing', this);
	
	var self = this;
	var init = function(){
		calc = $('<span></span>').css({
			'float': 'left',
			'display': 'inline-block',
			'position': 'absolute',
			'left': -1000
		}).insertAfter(element);
		$.each(['font-size', 'font-family', 'padding-left', 'padding-top', 'padding-bottom', 
		 'padding-right', 'border-left', 'border-right', 'border-top', 'border-bottom', 
		 'word-spacing', 'letter-spacing', 'text-indent', 'text-transform'], function(i, p){				
				calc.css(p, element.css(p));
		});
		element.blur(resize).keyup(resize).keydown(resize).keypress(resize);
		resize();
	};
	
	var calculate = function(chars){
		calc.text(chars);
		var width = calc.width();
		return (width ? width : options.startWidth) + options.correction;
	};
	
	var resize = function(){
		lastValue = value;
		value = element.val();
		var retValue = value;		
		if(chk(options.min) && value.length < options.min){
			if(chk(lastValue) && (lastValue.length <= options.min)) return;
			retValue = str_pad(value, options.min, '-');
		} else if(chk(options.max) && value.length > options.max){
			if(chk(lastValue) && (lastValue.length >= options.max)) return;
			retValue = value.substr(0, options.max);
		}
		element.width(calculate(retValue));
		return self;
	};
	
	this.resize = resize;
	init();
};

var chk = function(v){ return !!(v || v === 0); };
var str_repeat = function(str, times){ return new Array(times + 1).join(str); };
var str_pad = function(self, length, str, dir){
	if (self.length >= length) return this;
	str = str || ' ';
	var pad = str_repeat(str, length - self.length).substr(0, length - self.length);
	if (!dir || dir == 'right') return self + pad;
	if (dir == 'left') return pad + self;
	return pad.substr(0, (pad.length / 2).floor()) + self + pad.substr(0, (pad.length / 2).ceil());
};

})(jQuery);
/*
Script: TextboxList.js
	Displays a textbox as a combination of boxes an inputs (eg: facebook tokenizer)

	Authors:
		Guillermo Rauch
		
	Note:
		TextboxList is not priceless for commercial use. See <http://devthought.com/projects/jquery/textboxlist/>. 
		Purchase to remove this message.
*/

(function($){

// Was removed in jquery 1.9 but needed ofr this plugin
$.browser={ msie: ( navigator.appName == 'Microsoft Internet Explorer') ? true : false }
	
$.TextboxList = function(element, _options)
{
	var original, container, list, current, focused = false, index = [], blurtimer, events = {};
	var options = $.extend(true, {
    prefix: 'textboxlist',
    max: null,
		unique: false,
		uniqueInsensitive: true,
    endEditableBit: true,
		startEditableBit: true,
		hideEditableBits: true,
    inBetweenEditableBits: true,
		keys: {previous: 37, next: 39},
		bitsOptions: {editable: {}, box: {}},
    plugins: {},
		// tip: you can change encode/decode with JSON.stringify and JSON.parse
		encode: function(o){ 
			return $.grep($.map(o, function(v){		
				v = (chk(v[0]) ? v[0] : v[1]);
				return chk(v) ? v.toString().replace(/,/, '') : null;
			}), function(o){ return o != undefined; }).join(','); 
		},
		decode: function(o){ return o.split(','); }
  }, _options);
	
	element = $(element);
	
	var self = this;
	var init = function(){		
		original = element.css('display', 'none').attr('autocomplete', 'off').focus(focusLast);
		container = $('<div class="'+options.prefix+'" />')
			.insertAfter(element)
			.click(function(e){ 
				if ((e.target == list.get(0) || e.target == container.get(0)) && (!focused || (current && current.toElement().get(0) != list.find(':last-child').get(0)))) focusLast(); 			
			});			
		list = $('<ul class="'+ options.prefix +'-bits" />').appendTo(container);
		for (var name in options.plugins) enablePlugin(name, options.plugins[name]);		
		afterInit();
	};
	
	var enablePlugin = function(name, options){
		self.plugins[name] = new $.TextboxList[camelCase(capitalize(name))](self, options);
	};
	
	var afterInit = function(){
		if (options.endEditableBit) create('editable', null, {tabIndex: original.tabIndex}).inject(list);
		addEvent('bitAdd', update, true);
		addEvent('bitRemove', update, true);
		$(document).click(function(e){
			if (!focused) return;
			if (e.target.className.indexOf(options.prefix) != -1){				
				if (e.target == $(container).get(0)) return;				
				var parent = $(e.target).parents('div.' + options.prefix);
				if (parent.get(0) == container.get(0)) return;
			}
			blur();
		}).keydown(function(ev){
			if (!focused || !current) return;
			var caret = current.is('editable') ? current.getCaret() : null;
			var value = current.getValue()[1];
			var special = !!$.map(['shift', 'alt', 'meta', 'ctrl'], function(e){ return ev[e]; }).length;
			var custom = special || (current.is('editable') && current.isSelected());
			var evStop = function(){ ev.stopPropagation(); ev.preventDefault(); };
			switch (ev.which){
				case 8:
					if (current.is('box')){ 
						evStop();
						return current.remove(); 
					}
				case options.keys.previous:
					if (current.is('box') || ((caret == 0 || !value.length) && !custom)){
						evStop();
						focusRelative('prev');
					}
					break;
				case 46:
					if (current.is('box')){ 
						evStop();
						return current.remove(); 
					}
				case options.keys.next: 
					if (current.is('box') || (caret == value.length && !custom)){
						evStop();
						focusRelative('next');
					}
			}
		});
		setValues(options.decode(original.val()));
	};
	
	var create = function(klass, value, opt)
	{
		if (klass == 'box'){
			if (chk(options.max) && list.children('.' + options.prefix + '-bit-box').length + 1 > options.max) return false;
			if (options.unique && $.inArray(uniqueValue(value), index) != -1) return false;		
		}		
		return new $.TextboxListBit(klass, value, self, $.extend(true, options.bitsOptions[klass], opt));
	};
	
	var uniqueValue = function(value){
		return chk(value[0]) ? value[0] : (options.uniqueInsensitive ? value[1].toLowerCase() : value[1]);
	}
	
	var add = function(plain, id, html, afterEl){
		var b = create('box', [id, plain, html]);
		if (b){
			if (!afterEl || !afterEl.length) afterEl = list.find('.' + options.prefix + '-bit-box').filter(':last');
			b.inject(afterEl.length ? afterEl : list, afterEl.length ? 'after' : 'top');
		} 
		return self;
	};
	
	var focusRelative = function(dir, to){
		var el = getBit(to && $(to).length ? to : current).toElement();
		var b = getBit(el[dir]());
		if (b) b.focus();
		return self;
	};
	
	var focusLast = function(){
		try
		{
			var lastElement = list.children().filter(':last');
			if (lastElement) getBit(lastElement).focus();
		}
		catch (e) {}

		return self;
	};
	
	var blur = function(){	
		if (! focused) return self;
		if (current) current.blur();
		focused = false;
		return fireEvent('blur');
	};
	
	var getBit = function(obj){				
		return (obj.type && (obj.type == 'editable' || obj.type == 'box')) ? obj : $(obj).data('textboxlist:bit');
	};
	
	var getValues = function(){
		var values = [];
		list.children().each(function(){
			var bit = getBit(this);
			if (!bit.is('editable')) values.push(bit.getValue());
		});
		return values;
	};

	var clear = function(){
		list.children().each(function(){
			var bit = getBit(this);
			if (!bit.is('editable')) bit.remove();
		});
	};
	
	var setValues = function(values){
		if (!values) return;
		$.each(values, function(i, v){
			if (v) add.apply(self, $.isArray(v) ? [v[1], v[0], v[2]] : [v]);
		});		
	};
	
	var update = function(){
		original.val(options.encode(getValues()));
	};
	
	var addEvent = function(type, fn){
		if (events[type] == undefined) events[type] = [];
		var exists = false;
		$.each(events[type], function(f){
			if (f === fn){
				exists = true;
				return;
			};
		});
		if (!exists) events[type].push(fn);
		return self;
	};
	
	var fireEvent = function(type, args, delay){
		if (!events || !events[type]) return self;
		$.each(events[type], function(i, fn){		
			(function(){
				args = (args != undefined) ? splat(args) : Array.prototype.slice.call(arguments);
				var returns = function(){
					return fn.apply(self || null, args);
				};
				if (delay) return setTimeout(returns, delay);
				return returns();
			})();
		});
		return self;
	};
	
	var removeEvent = function(type, fn){
		if (events[type]){
			for (var i = events[type].length; i--; i){
				if (events[type][i] === fn) events[type].splice(i, 1);
			}
		} 
		return self;
	};
	
	var isDuplicate = function(v){
		return $.inArray(uniqueValue(v), index);
	};
	
	this.onFocus = function(bit){
		if (current) current.blur();
		clearTimeout(blurtimer);
		current = bit;
		container.addClass(options.prefix + '-focus');		
		if (!focused){
			focused = true;
			fireEvent('focus', bit);
		}
	};
	
	this.onAdd = function(bit){
		if (options.unique && bit.is('box')) index.push(uniqueValue(bit.getValue()));
		if (bit.is('box')){
			var prior = getBit(bit.toElement().prev());
			if ((prior && prior.is('box') && options.inBetweenEditableBits) || (!prior && options.startEditableBit)){				
				var priorEl = prior && prior.toElement().length ? prior.toElement() : false;
				var b = create('editable').inject(priorEl || list, priorEl ? 'after' : 'top');
				if (options.hideEditableBits) b.hide();
			}
		}
	};
	
	this.onRemove = function(bit){
		if (!focused) return;
		if (options.unique && bit.is('box')){
			var i = isDuplicate(bit.getValue());
			if (i != -1) index = index.splice(i + 1, 1);
		} 
		var prior = getBit(bit.toElement().prev());
		if (prior && prior.is('editable')) prior.remove();
		focusRelative('next', bit);
	};
	
	this.onBlur = function(bit, all){
		current = null;
		container.removeClass(options.prefix + '-focus');		
		blurtimer = setTimeout(blur, all ? 0 : 200);
	};
	
	this.setOptions = function(opt){
		options = $.extend(true, options, opt);
	};
	
	this.getOptions = function(){
		return options;
	};
	
	this.getContainer = function(){
		return container;
	};
	
	this.isDuplicate = isDuplicate;
	this.addEvent = addEvent;
	this.removeEvent = removeEvent;
	this.fireEvent = fireEvent;
	this.create = create;
	this.clear = clear;
	this.add = add;
	this.getValues = getValues;
	this.plugins = [];
	init();
};

$.TextboxListBit = function(type, value, textboxlist, _options){
	
	var element, bit, prefix, typeprefix, close, hidden, focused = false, name = capitalize(type); 
	var options = $.extend(true, type == 'box' ? {
		deleteButton: true
  } : {
		tabIndex: null,
		growing: true,
		growingOptions: {},
		stopEnter: true,
		addOnBlur: false,
		addKeys: [13]
	}, _options);
	
	this.type = type;
	this.value = value;
	
	var self = this;
	var init = function(){
		prefix = textboxlist.getOptions().prefix + '-bit';
		typeprefix = prefix + '-' + type;
		bit = $('<li />').addClass(prefix).addClass(typeprefix)
			.data('textboxlist:bit', self)
			.hover(function(){ 
				bit.addClass(prefix + '-hover').addClass(typeprefix + '-hover'); 
			}, function(){
				bit.removeClass(prefix + '-hover').removeClass(typeprefix + '-hover'); 
			});
		if (type == 'box')
		{
			if (chk(self.value[2]))
				var htm = self.value[2];
			else
			{
				var htm = self.value[1];
				htm = htm.replace("<", "&lt;");
				htm = htm.replace(">", "&gt;");
			}
					
			// chk(self.value[2]) ? self.value[2] : self.value[1]
			bit.html(htm).click(focus);
			if (options.deleteButton)
			{
				bit.addClass(typeprefix + '-deletable');
				close = $('<a href="javascript:void(0);" class="'+ typeprefix +'-deletebutton" />').click(remove).appendTo(bit);
			}
			bit.children().click(function(e){ e.stopPropagation(); e.preventDefault(); });
		} 
		else 
		{
			element = $('<input type="text" class="'+ typeprefix +'-input" autocomplete="off" />').val(self.value ? self.value[1] : '').appendTo(bit);
			if (chk(options.tabIndex)) element.tabIndex = options.tabIndex;
			if (options.growing) new $.GrowingInput(element, options.growingOptions);		
			element.focus(function(){ focus(true); }).blur(function(){
				blur(true);
				if (options.addOnBlur) toBox(); 
			});				
			if (options.addKeys || options.stopEnter){
				element.keydown(function(ev){
					if (!focused) return;
					var evStop = function(){ ev.stopPropagation(); ev.preventDefault(); };
					if (options.stopEnter && ev.which === 13) evStop();
					if ($.inArray(ev.which, splat(options.addKeys)) != -1){
						evStop();
						toBox();
					}
				});
			}
		}
	};
	
	var inject = function(el, where){
		switch(where || 'bottom'){
			case 'top': bit.prependTo(el); break;
			case 'bottom': bit.appendTo(el); break;
			case 'before': bit.insertBefore(el); break;			
			case 'after': bit.insertAfter(el); break;						
		}
		textboxlist.onAdd(self);	
		return fireBitEvent('add');
	};
	
	var focus = function(noReal){
		if (focused) return self;
		show();
		focused = true;
		textboxlist.onFocus(self);
		bit.addClass(prefix + '-focus').addClass(prefix + '-' + type + '-focus');
		fireBitEvent('focus');		
		if (type == 'editable' && !noReal) element.focus();
		return self;
	};
	
	var blur = function(noReal){
		if (!focused) return self;
		focused = false;
		textboxlist.onBlur(self);
		bit.removeClass(prefix + '-focus').removeClass(prefix + '-' + type + '-focus');
		fireBitEvent('blur');
		if (type == 'editable'){
			if (!noReal) element.blur();
			if (hidden && !element.val().length) hide();
		}
		return self;
	};
	
	var remove = function(){
		blur();		
		textboxlist.onRemove(self);
		bit.remove();
		return fireBitEvent('remove');
	};
	
	var show = function(){
		bit.css('display', 'block');
		return self;
	};
	
	var hide = function(){
		bit.css('display', 'none');		
		hidden = true;
		return self;
	};
	
	var fireBitEvent = function(type){
		type = capitalize(type);
		textboxlist.fireEvent('bit' + type, self).fireEvent('bit' + name + type, self);
		return self;
	};
	
  this.is = function(t){
    return type == t;
  };

	this.setValue = function(v){
		if (type == 'editable'){
			element.val(chk(v[0]) ? v[0] : v[1]);
			if (options.growing) element.data('growing').resize();
		} else value = v;
		return self;
	};

 	this.getValue = function(){
		return type == 'editable' ? [null, element.val(), null] : value;
	};
	
	if (type == 'editable'){
		this.getCaret = function(){
 			var el = element.get(0);
			if (el.createTextRange){
		    var r = document.selection.createRange().duplicate();		
		  	r.moveEnd('character', el.value.length);
		  	if (r.text === '') return el.value.length;
		  	return el.value.lastIndexOf(r.text);
		  } else return el.selectionStart;
		};

		this.getCaretEnd = function(){
 			var el = element.get(0);			
			if (el.createTextRange){
				var r = document.selection.createRange().duplicate();
				r.moveStart('character', -el.value.length);
				return r.text.length;
			} else return el.selectionEnd;
		};
		
		this.isSelected = function(){
			return focused && (self.getCaret() !== self.getCaretEnd());
		};
		
		var toBox = function(){
			var value = self.getValue();
			if (value[0] || value[1])
			{
				var b = textboxlist.create('box', value);
				if (b){
					b.inject(bit, 'before');
					self.setValue([null, '', null]);
					return b;
				}
			}
			return null;
		};
		
		this.toBox = toBox;
	}
	
	this.toElement = function(){
		return bit;
	};
	
	this.focus = focus;
	this.blur = blur;
	this.remove = remove;
	this.inject = inject;
	this.show = show;
	this.hide = hide;
	this.fireBitEvent = fireBitEvent;
	init();
};

var chk = function(v){ return !!(v || v === 0); };
var splat = function(a){ return $.isArray(a) ? a : [a]; };
var camelCase = function(str){ return str.replace(/-\D/g, function(match){ return match.charAt(1).toUpperCase(); }); };
var capitalize = function(str){ return str.replace(/\b[a-z]/g, function(A){ return A.toUpperCase(); }); };

$.fn.extend({
	
	textboxlist: function(options){
		return this.each(function(){
			new $.TextboxList(this, options);
		});
	}
	
});

})(jQuery);

/*
Script: TextboxList.Autocomplete.js
	TextboxList Autocomplete plugin

	Authors:
		Guillermo Rauch
	
	Note:
		TextboxList is not priceless for commercial use. See <http://devthought.com/projects/jquery/textboxlist/>
		Purchase to remove this message.
*/

(function(){
	
$.TextboxList.Autocomplete = function(textboxlist, _options){
	
  var index, prefix, method, container, list, values = [], searchValues = [], results = [], placeholder = false, current, currentInput, hidetimer, doAdd, currentSearch, currentRequest;
	var options = $.extend(true, {
		minLength: 1,
		maxResults: 10,
		insensitive: true,
		highlight: true,
		highlightSelector: null,
		mouseInteraction: true,
		onlyFromValues: false,
		queryRemote: false,
    remote: {
			url: '',
			param: 'search',
			extraParams: {},
			loadPlaceholder: 'Please wait...'
    },
		method: 'standard',
		placeholder: 'Type to receive suggestions'
	}, _options);
	
	// This was below .addEvent('bitEditableBlur', hide) under addEvent
	//  .setOptions({bitsOptions: {editable: {addKeys: false, stopEnter: false}}})
	var init = function(){
		textboxlist.addEvent('bitEditableAdd', setupBit)
			.addEvent('bitEditableFocus', search)
			.addEvent('bitEditableBlur', hide)
			.setOptions({bitsOptions: {editable: {addKeys: false, stopEnter: false}}});
		if ($.browser.msie) textboxlist.setOptions({bitsOptions: {editable: {addOnBlur: false}}});
		prefix = textboxlist.getOptions().prefix + '-autocomplete';
		method = $.TextboxList.Autocomplete.Methods[options.method];
		container = $('<div class="'+ prefix +'" />').width(textboxlist.getContainer().width()).appendTo(textboxlist.getContainer());
		if (chk(options.placeholder)) placeholder = $('<div class="'+ prefix +'-placeholder" />').html(options.placeholder).appendTo(container);		
		list = $('<ul class="'+ prefix +'-results" />').appendTo(container).click(function(ev){
			ev.stopPropagation(); ev.preventDefault();
		});
	};
	
	var setupBit = function(bit){
		bit.toElement().keydown(navigate).keyup(function(){ search(); });
	};
	
	var search = function(bit){
		// joe - Reposition in case the element is the child of a scrolled container
		// in google chrome. All other browsers seem to handle correctly with postion absolute.
		var pos = $(textboxlist.getContainer()).offset();
		container.css('top', (pos.top + $(textboxlist.getContainer()).height()) + "px");

		if (bit) currentInput = bit;
		if (!options.queryRemote && !values.length) return;
		var search = $.trim(currentInput.getValue()[1]);
		if (search.length < options.minLength) showPlaceholder();
		if (search == currentSearch) return;
		currentSearch = search;
		list.css('display', 'none');
		if (search.length < options.minLength) return;
		if (options.queryRemote){
			if (searchValues[search]){
				values = searchValues[search];
			} else {
				var data = options.remote.extraParams;
				data[options.remote.param] = search;
				if (currentRequest) currentRequest.abort();
				currentRequest = $.ajax({
					url: options.remote.url,
					data: data,
					dataType: 'json',
					success: function(r){
						searchValues[search] = r;
						values = r;
						showResults(search);
					}
				});
			}
		}
		showResults(search);
	};
	
	var showResults = function(search)
	{
		container.width(textboxlist.getContainer().width());

		var results = method.filter(values, search, options.insensitive, options.maxResults);
		if (textboxlist.getOptions().unique){
			results = $.grep(results, function(v){ return textboxlist.isDuplicate(v) == -1; });		
		}
		hidePlaceholder();
		if (!results.length) return;
		blur();
		list.empty().css('display', 'block');
		$.each(results, function(i, r){ addResult(r, search); });
		if (options.onlyFromValues) focusFirst();
		results = results;
	};
	
	var addResult = function(r, searched){
		var element = $('<li class="'+ prefix +'-result" />').html(r[3] ? r[3] : r[1]).data('textboxlist:auto:value', r);		
		element.appendTo(list);
		if (options.highlight) $(options.highlightSelector ? element.find(options.highlightSelector) : element).each(function(){
			if ($(this).html()) method.highlight($(this), searched, options.insensitive, prefix + '-highlight');
		});
		if (options.mouseInteraction){
			element.css('cursor', 'pointer').hover(function(){ focus(element); }).mousedown(function(ev){
				ev.stopPropagation(); 
				ev.preventDefault();
				clearTimeout(hidetimer);
				doAdd = true;
			}).mouseup(function(){
				if (doAdd){
					addCurrent();
					currentInput.focus();
					search();
					doAdd = false;
				}
			});
			if (!options.onlyFromValues) element.mouseleave(function(){ if (current && (current.get(0) == element.get(0))) blur(); });	
		}
	};
	
	var hide = function(){
		hidetimer = setTimeout(function(){
			hidePlaceholder();
			list.css('display', 'none');
			currentSearch = null;			
		}, $.browser.msie ? 150 : 0);
	};
	
	var showPlaceholder = function(){
		if (placeholder) placeholder.css('display', 'block');		
	};
	
	var hidePlaceholder = function(){
		if (placeholder) placeholder.css('display', 'none');
	};
	
	var focus = function(element){
		if (!element || !element.length) return;
		blur();
		current = element.addClass(prefix + '-result-focus');
	};
	
	var blur = function(){
		if (current && current.length){
			current.removeClass(prefix + '-result-focus');
			current = null;
		}
	};
	
	var focusFirst = function(){
		return focus(list.find(':first'));
	};
	
	var focusRelative = function(dir){
		if (!current || !current.length) return self;
		return focus(current[dir]());
	};
	
	var addCurrent = function(){
		var value = current.data('textboxlist:auto:value');
		var b = textboxlist.create('box', value.slice(0, 3));
		if (b){
			b.autoValue = value;
			if ($.isArray(index)) index.push(value);
			currentInput.setValue([null, '', null]);
			b.inject(currentInput.toElement(), 'before');
		}
		blur();
		return self;
	};
	
	var navigate = function(ev){
		var evStop = function(){ ev.stopPropagation(); ev.preventDefault(); };
		switch (ev.which){
			case 38:			
				evStop();
				(!options.onlyFromValues && current && current.get(0) === list.find(':first').get(0)) ? blur() : focusRelative('prev');
				break;
			case 40:			
				evStop();
				(current && current.length) ? focusRelative('next') : focusFirst();
				break;
			case 13:
				evStop();
				if (current && current.length) addCurrent();
				else if (!options.onlyFromValues){
					var value = currentInput.getValue();				
					var b = textboxlist.create('box', value);
					if (b){
						b.inject(currentInput.toElement(), 'before');
						currentInput.setValue([null, '', null]);
					}
				}
		}
	};
	
	this.setValues = function(v){
		values = v;
	};
	
	init();
};

$.TextboxList.Autocomplete.Methods = {
	
	standard: {
		filter: function(values, search, insensitive, max){
			var newvals = [], regexp = new RegExp('\\b' + escapeRegExp(search), insensitive ? 'i' : '');
			try
			{
				for (var i = 0; i < values.length; i++){
					if (newvals.length === max) break;
					if (regexp.test(values[i][1])) newvals.push(values[i]);
				}
			} catch (e) {}
			return newvals;
		},
		
		highlight: function(element, search, insensitive, klass){
			var regex = new RegExp('(<[^>]*>)|(\\b'+ escapeRegExp(search) +')', insensitive ? 'ig' : 'g');
			return element.html(element.html().replace(regex, function(a, b, c){
				return (a.charAt(0) == '<') ? a : '<strong class="'+ klass +'">' + c + '</strong>'; 
			}));
		}
	}
	
};

var chk = function(v){ return !!(v || v === 0); };
var escapeRegExp = function(str){ return str.replace(/([-.*+?^${}()|[\]\/\\])/g, "\\$1"); };

})();

/*
Script: TextboxList.Autocomplete.Binary.js
	TextboxList Autocomplete binary search extension

	Authors:
		Guillermo Rauch
	
	Note:
		TextboxList is not priceless for commercial use. See <http://devthought.com/projects/jquery/textboxlist/>
		Purchase to remove this message.
*/

$.TextboxList.Autocomplete.Methods.binary = {
	filter: function(values, search, insensitive, max){
		var method = insensitive ? 'toLowerCase' : 'toString', low = 0, high = values.length - 1, lastTry;
		search = search[method]();
		while (high >= low){
			var mid = parseInt((low + high) / 2);
			var curr = values[mid][1].substr(0, search.length)[method]();			
			var result = ((search == curr) ? 0 : ((search > curr) ? 1 : -1));
			if (result < 0) { high = mid - 1; continue; }
			if (result > 0) { low = mid + 1; continue; }
			if (result === 0) break;
		}				
		if (high < low) return [];
		var newvalues = [values[mid]], checkNext = true, checkPrev = true, v1, v2;
		for (var i = 1; i <= values.length - mid; i++){			
			if (newvalues.length === max) break;
			if (checkNext) v1 = values[mid + i] ? values[mid + i][1].substr(0, search.length)[method]() : false;
			if (checkPrev) v2 = values[mid - i] ? values[mid - i][1].substr(0, search.length)[method]() : false;
			checkNext = checkPrev = false;
			if (v1 === search) { newvalues.push(values[mid + i]); checkNext = true; }
			if (v2 === search) { newvalues.unshift(values[mid - i]); checkPrev = true; }
			if (! (checkNext || checkPrev)) break;
		}
		return newvalues;
	},
	
	highlight: function(element, search, insensitive, klass){
		var regex = new RegExp('(<[^>]*>)|(\\b'+ search.replace(/([-.*+?^${}()|[\]\/\\])/g,"\\$1") +')', insensitive ? 'ig' : 'g');
		return element.html(element.html().replace(regex, function(a, b, c, d){
			return (a.charAt(0) == '<') ? a : '<strong class="'+ klass +'">' + c + '</strong>'; 
		}));
	}
};
window.CodeMirror=function(){"use strict";function v(a,c){if(!(this instanceof v))return new v(a,c);this.options=c=c||{};for(var d in Dc)!c.hasOwnProperty(d)&&Dc.hasOwnProperty(d)&&(c[d]=Dc[d]);H(c);var e="string"==typeof c.value?0:c.value.first,f=this.display=w(a,e);f.wrapper.CodeMirror=this,E(this),c.autofocus&&!o&&Ab(this),this.state={keyMaps:[],overlays:[],modeGen:0,overwrite:!1,focused:!1,suppressEdits:!1,pasteIncoming:!1,draggingText:!1,highlight:new ue},this.nextOpId=0,C(this),c.lineWrapping&&(this.display.wrapper.className+=" CodeMirror-wrap");var g=c.value;"string"==typeof g&&(g=new Hd(c.value,c.mode)),sb(this,Ld)(this,g),b&&setTimeout(Ee(zb,this,!0),20),Cb(this);var h;try{h=document.activeElement==f.input}catch(i){}h||c.autofocus&&!o?setTimeout(Ee(Yb,this),20):Zb(this),sb(this,function(){for(var a in Cc)Cc.propertyIsEnumerable(a)&&Cc[a](this,c[a],Fc);for(var b=0;Jc.length>b;++b)Jc[b](this)})()}function w(a,b){var d={},f=d.input=Je("textarea",null,null,"position: absolute; padding: 0; width: 1px; height: 1em; outline: none;");e?f.style.width="1000px":f.setAttribute("wrap","off"),f.setAttribute("autocorrect","off"),f.setAttribute("autocapitalize","off"),d.inputDiv=Je("div",[f],null,"overflow: hidden; position: relative; width: 3px; height: 0px;"),d.scrollbarH=Je("div",[Je("div",null,null,"height: 1px")],"CodeMirror-hscrollbar"),d.scrollbarV=Je("div",[Je("div",null,null,"width: 1px")],"CodeMirror-vscrollbar"),d.scrollbarFiller=Je("div",null,"CodeMirror-scrollbar-filler"),d.lineDiv=Je("div"),d.selectionDiv=Je("div",null,null,"position: relative; z-index: 1"),d.cursor=Je("div","\u00a0","CodeMirror-cursor"),d.otherCursor=Je("div","\u00a0","CodeMirror-cursor CodeMirror-secondarycursor"),d.measure=Je("div",null,"CodeMirror-measure"),d.lineSpace=Je("div",[d.measure,d.selectionDiv,d.lineDiv,d.cursor,d.otherCursor],null,"position: relative; outline: none"),d.mover=Je("div",[Je("div",[d.lineSpace],"CodeMirror-lines")],null,"position: relative"),d.sizer=Je("div",[d.mover],"CodeMirror-sizer"),d.heightForcer=Je("div","\u00a0",null,"position: absolute; height: "+se+"px"),d.gutters=Je("div",null,"CodeMirror-gutters"),d.lineGutter=null;var g=Je("div",[d.sizer,d.heightForcer,d.gutters],null,"position: relative; min-height: 100%");return d.scroller=Je("div",[g],"CodeMirror-scroll"),d.scroller.setAttribute("tabIndex","-1"),d.wrapper=Je("div",[d.inputDiv,d.scrollbarH,d.scrollbarV,d.scrollbarFiller,d.scroller],"CodeMirror"),c&&(d.gutters.style.zIndex=-1,d.scroller.style.paddingRight=0),a.appendChild?a.appendChild(d.wrapper):a(d.wrapper),n&&(f.style.width="0px"),e||(d.scroller.draggable=!0),j?(d.inputDiv.style.height="1px",d.inputDiv.style.position="absolute"):c&&(d.scrollbarH.style.minWidth=d.scrollbarV.style.minWidth="18px"),d.viewOffset=d.lastSizeC=0,d.showingFrom=d.showingTo=b,d.lineNumWidth=d.lineNumInnerWidth=d.lineNumChars=null,d.prevInput="",d.alignWidgets=!1,d.pollingFast=!1,d.poll=new ue,d.draggingText=!1,d.cachedCharWidth=d.cachedTextHeight=null,d.measureLineCache=[],d.measureLineCachePos=0,d.inaccurateSelection=!1,d.maxLine=null,d.maxLineLength=0,d.maxLineChanged=!1,d.wheelDX=d.wheelDY=d.wheelStartX=d.wheelStartY=null,d}function x(a){a.doc.mode=v.getMode(a.options,a.doc.modeOption),a.doc.iter(function(a){a.stateAfter&&(a.stateAfter=null),a.styles&&(a.styles=null)}),a.doc.frontier=a.doc.first,$(a,100),a.state.modeGen++,a.curOp&&vb(a)}function y(a){a.options.lineWrapping?(a.display.wrapper.className+=" CodeMirror-wrap",a.display.sizer.style.minWidth=""):(a.display.wrapper.className=a.display.wrapper.className.replace(" CodeMirror-wrap",""),G(a)),A(a),vb(a),hb(a),setTimeout(function(){I(a.display,a.doc.height)},100)}function z(a){var b=ob(a.display),c=a.options.lineWrapping,d=c&&Math.max(5,a.display.scroller.clientWidth/pb(a.display)-3);return function(a){return gd(a)?0:c?(Math.ceil(a.text.length/d)||1)*b:b}}function A(a){var b=a.doc,c=z(a);b.iter(function(a){var b=c(a);b!=a.height&&Pd(a,b)})}function B(a){var b=Nc[a.options.keyMap].style;a.display.wrapper.className=a.display.wrapper.className.replace(/\s*cm-keymap-\S+/g,"")+(b?" cm-keymap-"+b:"")}function C(a){a.display.wrapper.className=a.display.wrapper.className.replace(/\s*cm-s-\S+/g,"")+a.options.theme.replace(/(^|\s)\s*/g," cm-s-"),hb(a)}function D(a){E(a),vb(a)}function E(a){var b=a.display.gutters,c=a.options.gutters;Ke(b);for(var d=0;c.length>d;++d){var e=c[d],f=b.appendChild(Je("div",null,"CodeMirror-gutter "+e));"CodeMirror-linenumbers"==e&&(a.display.lineGutter=f,f.style.width=(a.display.lineNumWidth||1)+"px")}b.style.display=d?"":"none"}function F(a,b){if(0==b.height)return 0;for(var d,c=b.text.length,e=b;d=dd(e);){var f=d.find();e=Md(a,f.from.line),c+=f.from.ch-f.to.ch}for(e=b;d=ed(e);){var f=d.find();c-=e.text.length-f.from.ch,e=Md(a,f.to.line),c+=e.text.length-f.to.ch}return c}function G(a){var b=a.display,c=a.doc;b.maxLine=Md(c,c.first),b.maxLineLength=F(c,b.maxLine),b.maxLineChanged=!0,c.iter(function(a){var d=F(c,a);d>b.maxLineLength&&(b.maxLineLength=d,b.maxLine=a)})}function H(a){for(var b=!1,c=0;a.gutters.length>c;++c)"CodeMirror-linenumbers"==a.gutters[c]&&(a.lineNumbers?b=!0:a.gutters.splice(c--,1));!b&&a.lineNumbers&&a.gutters.push("CodeMirror-linenumbers")}function I(a,b){var c=b+2*cb(a);a.sizer.style.minHeight=a.heightForcer.style.top=c+"px";var d=Math.max(c,a.scroller.scrollHeight),e=a.scroller.scrollWidth>a.scroller.clientWidth,f=d>a.scroller.clientHeight;f?(a.scrollbarV.style.display="block",a.scrollbarV.style.bottom=e?Qe(a.measure)+"px":"0",a.scrollbarV.firstChild.style.height=d-a.scroller.clientHeight+a.scrollbarV.clientHeight+"px"):a.scrollbarV.style.display="",e?(a.scrollbarH.style.display="block",a.scrollbarH.style.right=f?Qe(a.measure)+"px":"0",a.scrollbarH.firstChild.style.width=a.scroller.scrollWidth-a.scroller.clientWidth+a.scrollbarH.clientWidth+"px"):a.scrollbarH.style.display="",e&&f?(a.scrollbarFiller.style.display="block",a.scrollbarFiller.style.height=a.scrollbarFiller.style.width=Qe(a.measure)+"px"):a.scrollbarFiller.style.display="",k&&0===Qe(a.measure)&&(a.scrollbarV.style.minWidth=a.scrollbarH.style.minHeight=l?"18px":"12px")}function J(a,b,c){var d=a.scroller.scrollTop,e=a.wrapper.clientHeight;"number"==typeof c?d=c:c&&(d=c.top,e=c.bottom-c.top),d=Math.floor(d-cb(a));var f=Math.ceil(d+e);return{from:Sd(b,d),to:Sd(b,f)}}function K(a){var b=a.display;if(b.alignWidgets||b.gutters.firstChild&&a.options.fixedGutter){for(var c=N(b)-b.scroller.scrollLeft+a.doc.scrollLeft,d=b.gutters.offsetWidth,e=c+"px",f=b.lineDiv.firstChild;f;f=f.nextSibling)if(f.alignable)for(var g=0,h=f.alignable;h.length>g;++g)h[g].style.left=e;a.options.fixedGutter&&(b.gutters.style.left=c+d+"px")}}function L(a){if(!a.options.lineNumbers)return!1;var b=a.doc,c=M(a.options,b.first+b.size-1),d=a.display;if(c.length!=d.lineNumChars){var e=d.measure.appendChild(Je("div",[Je("div",c)],"CodeMirror-linenumber CodeMirror-gutter-elt")),f=e.firstChild.offsetWidth,g=e.offsetWidth-f;return d.lineGutter.style.width="",d.lineNumInnerWidth=Math.max(f,d.lineGutter.offsetWidth-g),d.lineNumWidth=d.lineNumInnerWidth+g,d.lineNumChars=d.lineNumInnerWidth?c.length:-1,d.lineGutter.style.width=d.lineNumWidth+"px",!0}return!1}function M(a,b){return a.lineNumberFormatter(b+a.firstLineNumber)+""}function N(a){return a.scroller.getBoundingClientRect().left-a.sizer.getBoundingClientRect().left}function O(a,b,c){var d=a.display.showingFrom,e=a.display.showingTo,f=P(a,b,c);return f&&(qe(a,"update",a),(a.display.showingFrom!=d||a.display.showingTo!=e)&&qe(a,"viewportChange",a,a.display.showingFrom,a.display.showingTo)),W(a),I(a.display,a.doc.height),f}function P(a,b,d){var e=a.display,f=a.doc;if(!e.wrapper.clientWidth)return e.showingFrom=e.showingTo=f.first,e.viewOffset=0,void 0;var g=J(e,f,d);if(!(0==b.length&&g.from>e.showingFrom&&g.to<e.showingTo)){L(a)&&(b=[{from:f.first,to:f.first+f.size}]);var h=e.sizer.style.marginLeft=e.gutters.offsetWidth+"px";if(e.scrollbarH.style.left=a.options.fixedGutter?h:"0",u)for(var i=0;b.length>i;++i)for(var k,j=b[i];k=dd(Md(f,j.from));){var l=k.find().from.line;j.diff&&(j.diff-=j.from-l),j.from=l}var m=1/0;if(a.options.lineNumbers)for(var i=0;b.length>i;++i)if(b[i].diff){m=b[i].from;break}var n=f.first+f.size,l=Math.max(g.from-a.options.viewportMargin,f.first),o=Math.min(n,g.to+a.options.viewportMargin);if(l>e.showingFrom&&20>l-e.showingFrom&&(l=Math.max(f.first,e.showingFrom)),e.showingTo>o&&20>e.showingTo-o&&(o=Math.min(n,e.showingTo)),u)for(l=Qd(fd(f,Md(f,l)));n>o&&gd(Md(f,o));)++o;for(var p=R([{from:e.showingFrom,to:e.showingTo}],b),q=0,i=0;p.length>i;++i){var r=p[i];l>r.from&&(r.from=l),r.to>o&&(r.to=o),r.from>=r.to?p.splice(i--,1):q+=r.to-r.from}if(q==o-l&&l==e.showingFrom&&o==e.showingTo)return Q(a),void 0;p.sort(function(a,b){return a.from-b.from});var s=document.activeElement;.7*(o-l)>q&&(e.lineDiv.style.display="none"),T(a,l,o,p,m),e.lineDiv.style.display="",document.activeElement!=s&&s.offsetHeight&&s.focus();var t=l!=e.showingFrom||o!=e.showingTo||e.lastSizeC!=e.wrapper.clientHeight;t&&(e.lastSizeC=e.wrapper.clientHeight),e.showingFrom=l,e.showingTo=o,$(a,100);for(var x,v=e.lineDiv.offsetTop,w=e.lineDiv.firstChild;w;w=w.nextSibling)if(w.lineObj){if(c){var y=w.offsetTop+w.offsetHeight;x=y-v,v=y}else{var z=w.getBoundingClientRect();x=z.bottom-z.top}var A=w.lineObj.height-x;if(2>x&&(x=ob(e)),A>.001||-.001>A){Pd(w.lineObj,x);var B=w.lineObj.widgets;if(B)for(var i=0;B.length>i;++i)B[i].height=B[i].node.offsetHeight}}return Q(a),J(e,f,d).to>=o&&P(a,[],d),!0}}function Q(a){var b=a.display.viewOffset=Td(a,Md(a.doc,a.display.showingFrom));a.display.mover.style.top=b+"px"}function R(a,b){for(var c=0,d=b.length||0;d>c;++c){for(var e=b[c],f=[],g=e.diff||0,h=0,i=a.length;i>h;++h){var j=a[h];e.to<=j.from&&e.diff?f.push({from:j.from+g,to:j.to+g}):e.to<=j.from||e.from>=j.to?f.push(j):(e.from>j.from&&f.push({from:j.from,to:e.from}),e.to<j.to&&f.push({from:e.to+g,to:j.to+g}))}a=f}return a}function S(a){for(var b=a.display,c={},d={},e=b.gutters.firstChild,f=0;e;e=e.nextSibling,++f)c[a.options.gutters[f]]=e.offsetLeft,d[a.options.gutters[f]]=e.offsetWidth;return{fixedPos:N(b),gutterTotalWidth:b.gutters.offsetWidth,gutterLeft:c,gutterWidth:d,wrapperWidth:b.wrapper.clientWidth}}function T(a,b,c,d,f){function l(b){var c=b.nextSibling;return e&&p&&a.display.currentWheelTarget==b?(b.style.display="none",b.lineObj=null):b.parentNode.removeChild(b),c}var g=S(a),h=a.display,i=a.options.lineNumbers;d.length||e&&a.display.currentWheelTarget||Ke(h.lineDiv);var j=h.lineDiv,k=j.firstChild,m=d.shift(),n=b;for(a.doc.iter(b,c,function(b){if(m&&m.to==n&&(m=d.shift()),gd(b)){if(0!=b.height&&Pd(b,0),b.widgets&&k.previousSibling)for(var c=0;b.widgets.length>c;++c)if(b.widgets[c].showIfHidden){var e=k.previousSibling;if(/pre/i.test(e.nodeName)){var h=Je("div",null,null,"position: relative");e.parentNode.replaceChild(h,e),h.appendChild(e),e=h}e.appendChild(V(b.widgets[c],e,g))}}else if(m&&n>=m.from&&m.to>n){for(;k.lineObj!=b;)k=l(k);i&&n>=f&&k.lineNumber&&Me(k.lineNumber,M(a.options,n)),k=k.nextSibling}else{if(b.widgets)for(var q,o=0,p=k;p&&20>o;++o,p=p.nextSibling)if(p.lineObj==b&&/div/i.test(p.nodeName)){q=p;break}var r=U(a,b,n,g,q);if(r!=q)j.insertBefore(r,k);else{for(;k!=q;)k=l(k);k=k.nextSibling}r.lineObj=b}++n});k;)k=l(k)}function U(a,b,d,e,f){var j,g=xd(a,b),h=b.gutterMarkers,i=a.display;if(!(a.options.lineNumbers||h||b.bgClass||b.wrapClass||b.widgets))return g;if(f){for(var n,k=!0,l=0,m=f.firstChild;m;m=n)if(n=m.nextSibling,/\bCodeMirror-linewidget\b/.test(m.className)){for(var o=0,p=!0;b.widgets.length>o;++o){var q=b.widgets[o],r=!1;if(q.above||(r=p,p=!1),q.node==m.firstChild){l++,r&&f.insertBefore(g,m);break}}if(o==b.widgets.length){k=!1;break}}else f.removeChild(m);k&&l==b.widgets.length&&(j=f,f.className=b.wrapClass||"",f.alignable=null)}if(j||(j=Je("div",null,b.wrapClass,"position: relative"),j.appendChild(g)),b.bgClass&&j.insertBefore(Je("div","\u00a0",b.bgClass+" CodeMirror-linebackground"),j.firstChild),a.options.lineNumbers||h){var s=j.insertBefore(Je("div",null,null,"position: absolute; left: "+(a.options.fixedGutter?e.fixedPos:-e.gutterTotalWidth)+"px"),j.firstChild);if(a.options.fixedGutter&&(j.alignable=[s]),!a.options.lineNumbers||h&&h["CodeMirror-linenumbers"]||(j.lineNumber=s.appendChild(Je("div",M(a.options,d),"CodeMirror-linenumber CodeMirror-gutter-elt","left: "+e.gutterLeft["CodeMirror-linenumbers"]+"px; width: "+i.lineNumInnerWidth+"px"))),h)for(var t=0;a.options.gutters.length>t;++t){var u=a.options.gutters[t],v=h.hasOwnProperty(u)&&h[u];v&&s.appendChild(Je("div",[v],"CodeMirror-gutter-elt","left: "+e.gutterLeft[u]+"px; width: "+e.gutterWidth[u]+"px"))}}if(c&&(j.style.zIndex=2),b.widgets&&j!=f)for(var o=0,w=b.widgets;w.length>o;++o){var q=w[o],x=V(q,j,e);q.above?j.insertBefore(x,a.options.lineNumbers&&0!=b.height?s:g):j.appendChild(x),qe(q,"redraw")}return j}function V(a,b,c){var d=Je("div",[a.node],"CodeMirror-linewidget");if(d.widget=a,a.noHScroll){(b.alignable||(b.alignable=[])).push(d);var e=c.wrapperWidth;d.style.left=c.fixedPos+"px",a.coverGutter||(e-=c.gutterTotalWidth,d.style.paddingLeft=c.gutterTotalWidth+"px"),d.style.width=e+"px"}return a.coverGutter&&(d.style.zIndex=5,d.style.position="relative",a.noHScroll||(d.style.marginLeft=-c.gutterTotalWidth+"px")),d}function W(a){var b=a.display,c=jc(a.doc.sel.from,a.doc.sel.to);c||a.options.showCursorWhenSelecting?X(a):b.cursor.style.display=b.otherCursor.style.display="none",c?b.selectionDiv.style.display="none":Y(a);var d=kb(a,a.doc.sel.head,"div"),e=b.wrapper.getBoundingClientRect(),f=b.lineDiv.getBoundingClientRect();b.inputDiv.style.top=Math.max(0,Math.min(b.wrapper.clientHeight-10,d.top+f.top-e.top))+"px",b.inputDiv.style.left=Math.max(0,Math.min(b.wrapper.clientWidth-10,d.left+f.left-e.left))+"px"}function X(a){var b=a.display,c=kb(a,a.doc.sel.head,"div");b.cursor.style.left=c.left+"px",b.cursor.style.top=c.top+"px",b.cursor.style.height=Math.max(0,c.bottom-c.top)*a.options.cursorHeight+"px",b.cursor.style.display="",c.other?(b.otherCursor.style.display="",b.otherCursor.style.left=c.other.left+"px",b.otherCursor.style.top=c.other.top+"px",b.otherCursor.style.height=.85*(c.other.bottom-c.other.top)+"px"):b.otherCursor.style.display="none"}function Y(a){function h(a,b,c,d){0>b&&(b=0),e.appendChild(Je("div",null,"CodeMirror-selected","position: absolute; left: "+a+"px; top: "+b+"px; width: "+(null==c?f-a:c)+"px; height: "+(d-b)+"px"))}function i(b,d,e,i){function m(c){return jb(a,{line:b,ch:c},"div",j)}var j=Md(c,b),k=j.text.length,l=i?1/0:-1/0;return Xe(Ud(j),d||0,null==e?k:e,function(a,b,c){var j=m("rtl"==c?b-1:a),n=m("rtl"==c?a:b-1),o=j.left,p=n.right;n.top-j.top>3&&(h(o,j.top,null,j.bottom),o=g,j.bottom<n.top&&h(o,j.bottom,null,n.top)),null==e&&b==k&&(p=f),null==d&&0==a&&(o=g),l=i?Math.min(n.top,l):Math.max(n.bottom,l),g+1>o&&(o=g),h(o,n.top,p-o,n.bottom)}),l}var b=a.display,c=a.doc,d=a.doc.sel,e=document.createDocumentFragment(),f=b.lineSpace.offsetWidth,g=db(a.display);if(d.from.line==d.to.line)i(d.from.line,d.from.ch,d.to.ch);else{for(var l,n,j=Md(c,d.from.line),k=j,m=[d.from.line,d.from.ch];l=ed(k);){var o=l.find();if(m.push(o.from.ch,o.to.line,o.to.ch),o.to.line==d.to.line){m.push(d.to.ch),n=!0;break}k=Md(c,o.to.line)}if(n)for(var p=0;m.length>p;p+=3)i(m[p],m[p+1],m[p+2]);else{var q,r,s=Md(c,d.to.line);q=d.from.ch?i(d.from.line,d.from.ch,null,!1):Td(a,j)-b.viewOffset,r=d.to.ch?i(d.to.line,dd(s)?null:0,d.to.ch,!0):Td(a,s)-b.viewOffset,r>q&&h(g,q,null,r)}}Le(b.selectionDiv,e),b.selectionDiv.style.display=""}function Z(a){var b=a.display;clearInterval(b.blinker);var c=!0;b.cursor.style.visibility=b.otherCursor.style.visibility="",b.blinker=setInterval(function(){b.cursor.offsetHeight&&(b.cursor.style.visibility=b.otherCursor.style.visibility=(c=!c)?"":"hidden")},a.options.cursorBlinkRate)}function $(a,b){a.doc.mode.startState&&a.doc.frontier<a.display.showingTo&&a.state.highlight.set(b,Ee(_,a))}function _(a){var b=a.doc;if(b.frontier<b.first&&(b.frontier=b.first),!(b.frontier>=a.display.showingTo)){var f,c=+new Date+a.options.workTime,d=Kc(b.mode,bb(a,b.frontier)),e=[];b.iter(b.frontier,Math.min(b.first+b.size,a.display.showingTo+500),function(g){if(b.frontier>=a.display.showingFrom){var h=g.styles;g.styles=sd(a,g,d);for(var i=!h||h.length!=g.styles.length,j=0;!i&&h.length>j;++j)i=h[j]!=g.styles[j];i&&(f&&f.end==b.frontier?f.end++:e.push(f={start:b.frontier,end:b.frontier+1})),g.stateAfter=Kc(b.mode,d)}else ud(a,g,d),g.stateAfter=0==b.frontier%5?Kc(b.mode,d):null;return++b.frontier,+new Date>c?($(a,a.options.workDelay),!0):void 0}),e.length&&sb(a,function(){for(var a=0;e.length>a;++a)vb(this,e[a].start,e[a].end)})()}}function ab(a,b){for(var c,d,e=a.doc,f=b,g=b-100;f>g;--f){if(e.first>=f)return e.first;var h=Md(e,f-1);if(h.stateAfter)return f;var i=ve(h.text,null,a.options.tabSize);(null==d||c>i)&&(d=f-1,c=i)}return d}function bb(a,b){var c=a.doc,d=a.display;if(!c.mode.startState)return!0;var e=ab(a,b),f=e>c.first&&Md(c,e-1).stateAfter;return f=f?Kc(c.mode,f):Lc(c.mode),c.iter(e,b,function(g){ud(a,g,f);var h=e==b-1||0==e%5||e>=d.showingFrom&&d.showingTo>e;g.stateAfter=h?Kc(c.mode,f):null,++e}),f}function cb(a){return a.lineSpace.offsetTop}function db(a){var b=Le(a.measure,Je("pre")).appendChild(Je("span","x"));return b.offsetLeft}function eb(a,b,c,d){var e=-1;d=d||fb(a,b);for(var f=c;;f+=e){var g=d[f];if(g)break;0>e&&0==f&&(e=1)}return{left:c>f?g.right:g.left,right:f>c?g.left:g.right,top:g.top,bottom:g.bottom}}function fb(a,b){for(var c=a.display,d=a.display.measureLineCache,e=0;d.length>e;++e){var f=d[e];if(f.text==b.text&&f.markedSpans==b.markedSpans&&c.scroller.clientWidth==f.width)return f.measure}var g=gb(a,b),f={text:b.text,width:c.scroller.clientWidth,markedSpans:b.markedSpans,measure:g};return 16==d.length?d[++c.measureLineCachePos%16]=f:d.push(f),g}function gb(a,d){var e=a.display,f=De(d.text.length),g=xd(a,d,f);if(b&&!c&&!a.options.lineWrapping&&g.childNodes.length>100){for(var h=document.createDocumentFragment(),i=10,j=g.childNodes.length,k=0,l=Math.ceil(j/i);l>k;++k){for(var m=Je("div",null,null,"display: inline-block"),n=0;i>n&&j;++n)m.appendChild(g.firstChild),--j;h.appendChild(m)}g.appendChild(h)}Le(e.measure,g);for(var s,o=e.lineDiv.getBoundingClientRect(),p=[],q=De(d.text.length),r=g.offsetHeight,k=0;f.length>k;++k)if(s=f[k]){for(var t=s.getBoundingClientRect(),u=Math.max(0,t.top-o.top),v=Math.min(t.bottom-o.top,r),n=0;p.length>n;n+=2){var w=p[n],x=p[n+1];if(!(w>v||u>x)&&(u>=w&&x>=v||w>=u&&v>=x||Math.min(v,x)-Math.max(u,w)>=v-u>>1)){p[n]=Math.min(u,w),p[n+1]=Math.max(v,x);break}}n==p.length&&p.push(u,v),q[k]={left:t.left-o.left,right:t.right-o.left,top:n}}for(var s,k=0;q.length>k;++k)if(s=q[k]){var y=s.top;s.top=p[y],s.bottom=p[y+1]}return q}function hb(a){a.display.measureLineCache.length=a.display.measureLineCachePos=0,a.display.cachedCharWidth=a.display.cachedTextHeight=null,a.display.maxLineChanged=!0}function ib(a,b,c,d){if(b.widgets)for(var e=0;b.widgets.length>e;++e)if(b.widgets[e].above){var f=md(b.widgets[e]);c.top+=f,c.bottom+=f}if("line"==d)return c;d||(d="local");var g=Td(a,b);if("local"!=d&&(g-=a.display.viewOffset),"page"==d){var h=a.display.lineSpace.getBoundingClientRect();g+=h.top+(window.pageYOffset||(document.documentElement||document.body).scrollTop);var i=h.left+(window.pageXOffset||(document.documentElement||document.body).scrollLeft);c.left+=i,c.right+=i}return c.top+=g,c.bottom+=g,c}function jb(a,b,c,d){return d||(d=Md(a.doc,b.line)),ib(a,d,eb(a,d,b.ch),c)}function kb(a,b,c,d,e){function f(b,f){var g=eb(a,d,b,e);return f?g.left=g.right:g.right=g.left,ib(a,d,g,c)}d=d||Md(a.doc,b.line),e||(e=fb(a,d));var g=Ud(d),h=b.ch;if(!g)return f(h);for(var i,j,k=g[0].level,l=0;g.length>l;++l){var o,p,m=g[l],n=m.level%2;if(h>m.from&&m.to>h)return f(h,n);var q=n?m.to:m.from,r=n?m.from:m.to;if(q==h)p=l&&m.level<(o=g[l-1]).level?f(o.level%2?o.from:o.to-1,!0):f(n&&m.from!=m.to?h-1:h),n==k?i=p:j=p;else if(r==h){var o=g.length-1>l&&g[l+1];if(!n&&o&&o.from==o.to)continue;p=o&&m.level<o.level?f(o.level%2?o.to-1:o.from):f(n?h:h-1,!0),n==k?i=p:j=p}}return k&&!h&&(j=f(g[0].to-1)),i?(j&&(i.other=j),i):j}function lb(a,b,c){var d=a.doc;if(c+=a.display.viewOffset,0>c)return{line:d.first,ch:0,outside:!0};var e=Sd(d,c),f=d.first+d.size-1;if(e>f)return{line:d.size-1,ch:Md(d,f).text.length};for(0>b&&(b=0);;){var g=Md(d,e),h=mb(a,g,e,b,c),i=ed(g),j=i&&i.find();if(!(i&&h.ch>=j.from.ch))return h;e=j.to.line}}function mb(a,b,c,d,e){function j(d){var e=kb(a,{line:c,ch:d},"line",b,i);return g=!0,f>e.bottom?Math.max(0,e.left-h):e.top>f?e.left+h:(g=!1,e.left)}var f=e-Td(a,b),g=!1,h=a.display.wrapper.clientWidth,i=fb(a,b),k=Ud(b),l=b.text.length,m=$e(b),n=_e(b),o=db(a.display),p=j(n);if(d>p)return{line:c,ch:n,outside:g};for(;;){if(k?n==m||n==cf(b,m,1):1>=n-m){for(var q=p-d>d-o,r=q?m:n;Ie.test(b.text.charAt(r));)++r;return{line:c,ch:r,after:q,outside:g}}var s=Math.ceil(l/2),t=m+s;if(k){t=m;for(var u=0;s>u;++u)t=cf(b,t,1)}var v=j(t);v>d?(n=t,p=v,g&&(p+=1e3),l-=s):(m=t,o=v,l=s)}}function ob(a){if(null!=a.cachedTextHeight)return a.cachedTextHeight;if(null==nb){nb=Je("pre");for(var b=0;49>b;++b)nb.appendChild(document.createTextNode("x")),nb.appendChild(Je("br"));nb.appendChild(document.createTextNode("x"))}Le(a.measure,nb);var c=nb.offsetHeight/50;return c>3&&(a.cachedTextHeight=c),Ke(a.measure),c||1}function pb(a){if(null!=a.cachedCharWidth)return a.cachedCharWidth;var b=Je("span","x"),c=Je("pre",[b]);Le(a.measure,c);var d=b.offsetWidth;return d>2&&(a.cachedCharWidth=d),d||10}function qb(a){a.curOp={changes:[],updateInput:null,userSelChange:null,textChanged:null,selectionChanged:!1,updateMaxLine:!1,updateScrollPos:!1,id:++a.nextOpId},pe++||(oe=[])}function rb(a){var d,b=a.curOp,c=a.doc;--pe||(d=oe,oe=null),a.curOp=null;var e=a.display;if(b.updateMaxLine&&G(a),a.display.maxLineChanged&&!a.options.lineWrapping){var f=eb(a,a.display.maxLine,a.display.maxLine.text.length).right;e.sizer.style.minWidth=f+3+se+"px",a.display.maxLineChanged=!1;var g=Math.max(0,e.sizer.offsetLeft+e.sizer.offsetWidth-e.scroller.clientWidth);c.scrollLeft>g&&!b.updateScrollPos&&Mb(a,Math.min(e.scroller.scrollLeft,g),!0)}var h,i;if(b.updateScrollPos)h=b.updateScrollPos;else if(b.selectionChanged){var j=kb(a,c.sel.head);h=wc(a,j.left,j.top,j.left,j.bottom)}(b.changes.length||h&&null!=h.scrollTop)&&(i=O(a,b.changes,h&&h.scrollTop)),!i&&b.selectionChanged&&W(a),b.updateScrollPos?(a.display.scroller.scrollTop=a.display.scrollbarV.scrollTop=c.scrollTop=h.scrollTop,a.display.scroller.scrollLeft=a.display.scrollbarH.scrollLeft=c.scrollLeft=h.scrollLeft,K(a)):h&&tc(a),b.selectionChanged&&Z(a),a.state.focused&&b.updateInput&&zb(a,b.userSelChange);var k=b.maybeHiddenMarkers,l=b.maybeUnhiddenMarkers;if(k)for(var m=0;k.length>m;++m)k[m].lines.length||ne(k[m],"hide");if(l)for(var m=0;l.length>m;++m)l[m].lines.length&&ne(l[m],"unhide");if(b.textChanged&&ne(a,"change",a,b.textChanged),b.selectionChanged&&ne(a,"cursorActivity",a),d)for(var m=0;d.length>m;++m)d[m](a)}function sb(a,b){return function(){var c=a||this,d=!c.curOp;d&&qb(c);try{var e=b.apply(c,arguments)}finally{d&&rb(c)}return e}}function tb(a){return function(){var c,b=this.cm&&!this.cm.curOp;b&&qb(this.cm);try{c=a.apply(this,arguments)}finally{b&&rb(this.cm)}return c}}function ub(a,b){var d,c=!a.curOp;c&&qb(a);try{d=b()}finally{c&&rb(a)}return d}function vb(a,b,c,d){null==b&&(b=a.doc.first),null==c&&(c=a.doc.first+a.doc.size),a.curOp.changes.push({from:b,to:c,diff:d})}function wb(a){a.display.pollingFast||a.display.poll.set(a.options.pollInterval,function(){yb(a),a.state.focused&&wb(a)})}function xb(a){function c(){var d=yb(a);d||b?(a.display.pollingFast=!1,wb(a)):(b=!0,a.display.poll.set(60,c))}var b=!1;a.display.pollingFast=!0,a.display.poll.set(20,c)}function yb(a){var b=a.display.input,c=a.display.prevInput,d=a.doc,e=d.sel;if(!a.state.focused||Ue(b)||Bb(a))return!1;var f=b.value;if(f==c&&jc(e.from,e.to))return!1;var g=!a.curOp;g&&qb(a),e.shift=!1;for(var h=0,i=Math.min(c.length,f.length);i>h&&c[h]==f[h];)++h;var j=e.from,k=e.to;c.length>h?j={line:j.line,ch:j.ch-(c.length-h)}:a.state.overwrite&&jc(j,k)&&!a.state.pasteIncoming&&(k={line:k.line,ch:Math.min(Md(d,k.line).text.length,k.ch+(f.length-h))});var l=a.curOp.updateInput;return cc(a.doc,{from:j,to:k,text:Te(f.slice(h)),origin:a.state.pasteIncoming?"paste":"input"},"end"),a.curOp.updateInput=l,f.length>1e3?b.value=a.display.prevInput="":a.display.prevInput=f,g&&rb(a),a.state.pasteIncoming=!1,!0}function zb(a,b){var c,d,e=a.doc;jc(e.sel.from,e.sel.to)?b&&(a.display.prevInput=a.display.input.value=""):(a.display.prevInput="",c=Ve&&(e.sel.to.line-e.sel.from.line>100||(d=a.getSelection()).length>1e3),a.display.input.value=c?"-":d||a.getSelection(),a.state.focused&&ze(a.display.input)),a.display.inaccurateSelection=c}function Ab(a){"nocursor"==a.options.readOnly||!b&&document.activeElement==a.display.input||a.display.input.focus()}function Bb(a){return a.options.readOnly||a.doc.cantEdit}function Cb(b){function d(){b.state.focused&&setTimeout(Ee(Ab,b),0)}function e(){c.cachedCharWidth=c.cachedTextHeight=null,hb(b),ub(b,Ee(vb,b))}function f(){for(var a=c.wrapper.parentNode;a&&a!=document.body;a=a.parentNode);a?setTimeout(f,5e3):me(window,"resize",e)}function g(a){b.options.onDragEvent&&b.options.onDragEvent(b,ee(a))||he(a)}function h(){c.inaccurateSelection&&(c.prevInput="",c.inaccurateSelection=!1,c.input.value=b.getSelection(),ze(c.input))}var c=b.display;le(c.scroller,"mousedown",sb(b,Hb)),le(c.scroller,"dblclick",sb(b,fe)),le(c.lineSpace,"selectstart",function(a){Db(c,a)||fe(a)}),a||le(c.scroller,"contextmenu",function(a){_b(b,a)}),le(c.scroller,"scroll",function(){Lb(b,c.scroller.scrollTop),Mb(b,c.scroller.scrollLeft,!0),ne(b,"scroll",b)}),le(c.scrollbarV,"scroll",function(){Lb(b,c.scrollbarV.scrollTop)}),le(c.scrollbarH,"scroll",function(){Mb(b,c.scrollbarH.scrollLeft)}),le(c.scroller,"mousewheel",function(a){Pb(b,a)}),le(c.scroller,"DOMMouseScroll",function(a){Pb(b,a)}),le(c.scrollbarH,"mousedown",d),le(c.scrollbarV,"mousedown",d),le(c.wrapper,"scroll",function(){c.wrapper.scrollTop=c.wrapper.scrollLeft=0}),le(window,"resize",e),setTimeout(f,5e3),le(c.input,"keyup",sb(b,function(a){b.options.onKeyEvent&&b.options.onKeyEvent(b,ee(a))||16==ke(a,"keyCode")&&(b.doc.sel.shift=!1)})),le(c.input,"input",Ee(xb,b)),le(c.input,"keydown",sb(b,Wb)),le(c.input,"keypress",sb(b,Xb)),le(c.input,"focus",Ee(Yb,b)),le(c.input,"blur",Ee(Zb,b)),b.options.dragDrop&&(le(c.scroller,"dragstart",function(a){Kb(b,a)}),le(c.scroller,"dragenter",g),le(c.scroller,"dragover",g),le(c.scroller,"drop",sb(b,Ib))),le(c.scroller,"paste",function(a){Db(c,a)||(Ab(b),xb(b))}),le(c.input,"paste",function(){b.state.pasteIncoming=!0,xb(b)}),le(c.input,"cut",h),le(c.input,"copy",h),j&&le(c.sizer,"mouseup",function(){document.activeElement==c.input&&c.input.blur(),Ab(b)})}function Db(a,b){for(var c=ie(b);c!=a.wrapper;c=c.parentNode){if(!c)return!0;if(/\bCodeMirror-(?:line)?widget\b/.test(c.className)||c.parentNode==a.sizer&&c!=a.mover)return!0}}function Eb(a,b,c){var d=a.display;if(!c){var e=ie(b);if(e==d.scrollbarH||e==d.scrollbarH.firstChild||e==d.scrollbarV||e==d.scrollbarV.firstChild||e==d.scrollbarFiller)return null}var f,g,h=d.lineSpace.getBoundingClientRect();try{f=b.clientX,g=b.clientY}catch(b){return null}return lb(a,f-h.left,g-h.top)}function Hb(c){function q(a){if("single"==k)return pc(d.doc,nc(g,i),a),void 0;if(o=nc(g,o),p=nc(g,p),"double"==k){var b=Ac(Md(g,a.line).text,a);kc(a,o)?pc(d.doc,b.from,p):pc(d.doc,o,b.to)}else"triple"==k&&(kc(a,o)?pc(d.doc,p,nc(g,{line:a.line,ch:0})):pc(d.doc,o,nc(g,{line:a.line+1,ch:0})))}function t(a){var b=++s,c=Eb(d,a,!0);if(c)if(jc(c,m)){var h=a.clientY<r.top?-20:a.clientY>r.bottom?20:0;h&&setTimeout(sb(d,function(){s==b&&(f.scroller.scrollTop+=h,t(a))}),50)}else{d.state.focused||Yb(d),m=c,q(c);var e=J(f,g);(c.line>=e.to||c.line<e.from)&&setTimeout(sb(d,function(){s==b&&t(a)}),150)}}function u(a){s=1/0;var b=Eb(d,a);b&&q(b),fe(a),Ab(d),me(document,"mousemove",v),me(document,"mouseup",w)}var d=this,f=d.display,g=d.doc,h=g.sel;if(h.shift=ke(c,"shiftKey"),Db(f,c))return e||(f.scroller.draggable=!1,setTimeout(function(){f.scroller.draggable=!0},100)),void 0;if(!Jb(d,c)){var i=Eb(d,c);switch(je(c)){case 3:return a&&_b.call(d,d,c),void 0;case 2:return i&&pc(d.doc,i),setTimeout(Ee(Ab,d),20),fe(c),void 0}if(!i)return ie(c)==f.scroller&&fe(c),void 0;d.state.focused||Yb(d);var j=+new Date,k="single";if(Gb&&Gb.time>j-400&&jc(Gb.pos,i))k="triple",fe(c),setTimeout(Ee(Ab,d),20),Bc(d,i.line);else if(Fb&&Fb.time>j-400&&jc(Fb.pos,i)){k="double",Gb={time:j,pos:i},fe(c);var l=Ac(Md(g,i.line).text,i);pc(d.doc,l.from,l.to)}else Fb={time:j,pos:i};var m=i;if(d.options.dragDrop&&Ne&&!Bb(d)&&!jc(h.from,h.to)&&!kc(i,h.from)&&!kc(h.to,i)&&"single"==k){var n=sb(d,function(a){e&&(f.scroller.draggable=!1),d.state.draggingText=!1,me(document,"mouseup",n),me(f.scroller,"drop",n),10>Math.abs(c.clientX-a.clientX)+Math.abs(c.clientY-a.clientY)&&(fe(a),pc(d.doc,i),Ab(d))});return e&&(f.scroller.draggable=!0),d.state.draggingText=n,f.scroller.dragDrop&&f.scroller.dragDrop(),le(document,"mouseup",n),le(f.scroller,"drop",n),void 0}fe(c),"single"==k&&pc(d.doc,nc(g,i));var o=h.from,p=h.to,r=f.wrapper.getBoundingClientRect(),s=0,v=sb(d,function(a){b||je(a)?t(a):u(a)}),w=sb(d,u);le(document,"mousemove",v),le(document,"mouseup",w)}}function Ib(a){var b=this;if(!(Db(b.display,a)||b.options.onDragEvent&&b.options.onDragEvent(b,ee(a)))){fe(a);var c=Eb(b,a,!0),d=a.dataTransfer.files;if(c&&!Bb(b))if(d&&d.length&&window.FileReader&&window.File)for(var e=d.length,f=Array(e),g=0,h=function(a,d){var h=new FileReader;h.onload=function(){f[d]=h.result,++g==e&&(c=nc(b.doc,c),ic(b.doc,f.join(""),c,"around","paste"))},h.readAsText(a)},i=0;e>i;++i)h(d[i],i);else{if(b.state.draggingText&&!kc(c,b.doc.sel.from)&&!kc(b.doc.sel.to,c))return b.state.draggingText(a),setTimeout(Ee(Ab,b),20),void 0;try{var f=a.dataTransfer.getData("Text");if(f){var j=b.doc.sel.from,k=b.doc.sel.to;qc(b.doc,c,c),b.state.draggingText&&ic(b.doc,"",j,k,"paste"),b.replaceSelection(f,null,"paste"),Ab(b),Yb(b)}}catch(a){}}}}function Jb(a,b){var c=a.display;try{var d=b.clientX,e=b.clientY}catch(b){return!1}if(d>=Math.floor(c.gutters.getBoundingClientRect().right))return!1;if(fe(b),!re(a,"gutterClick"))return!0;var f=c.lineDiv.getBoundingClientRect();if(e>f.bottom)return!0;e-=f.top-c.viewOffset;for(var g=0;a.options.gutters.length>g;++g){var h=c.gutters.childNodes[g];if(h&&h.getBoundingClientRect().right>=d){var i=Sd(a.doc,e),j=a.options.gutters[g];qe(a,"gutterClick",a,i,j,b);break}}return!0}function Kb(a,b){if(!Db(a.display,b)){var c=a.getSelection();if(b.dataTransfer.setData("Text",c),b.dataTransfer.setDragImage&&!i){var d=Je("img",null,null,"position: fixed; left: 0; top: 0;");h&&(d.width=d.height=1,a.display.wrapper.appendChild(d),d._top=d.offsetTop),b.dataTransfer.setDragImage(d,0,0),h&&d.parentNode.removeChild(d)}}}function Lb(b,c){2>Math.abs(b.doc.scrollTop-c)||(b.doc.scrollTop=c,a||O(b,[],c),b.display.scroller.scrollTop!=c&&(b.display.scroller.scrollTop=c),b.display.scrollbarV.scrollTop!=c&&(b.display.scrollbarV.scrollTop=c),a&&O(b,[]))}function Mb(a,b,c){(c?b==a.doc.scrollLeft:2>Math.abs(a.doc.scrollLeft-b))||(b=Math.min(b,a.display.scroller.scrollWidth-a.display.scroller.clientWidth),a.doc.scrollLeft=b,K(a),a.display.scroller.scrollLeft!=b&&(a.display.scroller.scrollLeft=b),a.display.scrollbarH.scrollLeft!=b&&(a.display.scrollbarH.scrollLeft=b))}function Pb(b,c){var d=c.wheelDeltaX,f=c.wheelDeltaY;if(null==d&&c.detail&&c.axis==c.HORIZONTAL_AXIS&&(d=c.detail),null==f&&c.detail&&c.axis==c.VERTICAL_AXIS?f=c.detail:null==f&&(f=c.wheelDelta),f&&p&&e)for(var g=c.target;g!=j;g=g.parentNode)if(g.lineObj){b.display.currentWheelTarget=g;break}var i=b.display,j=i.scroller;if(d&&!a&&!h&&null!=Ob)return f&&Lb(b,Math.max(0,Math.min(j.scrollTop+f*Ob,j.scrollHeight-j.clientHeight))),Mb(b,Math.max(0,Math.min(j.scrollLeft+d*Ob,j.scrollWidth-j.clientWidth))),fe(c),i.wheelStartX=null,void 0;
if(f&&null!=Ob){var k=f*Ob,l=b.doc.scrollTop,m=l+i.wrapper.clientHeight;0>k?l=Math.max(0,l+k-50):m=Math.min(b.doc.height,m+k+50),O(b,[],{top:l,bottom:m})}20>Nb&&(null==i.wheelStartX?(i.wheelStartX=j.scrollLeft,i.wheelStartY=j.scrollTop,i.wheelDX=d,i.wheelDY=f,setTimeout(function(){if(null!=i.wheelStartX){var a=j.scrollLeft-i.wheelStartX,b=j.scrollTop-i.wheelStartY,c=b&&i.wheelDY&&b/i.wheelDY||a&&i.wheelDX&&a/i.wheelDX;i.wheelStartX=i.wheelStartY=null,c&&(Ob=(Ob*Nb+c)/(Nb+1),++Nb)}},200)):(i.wheelDX+=d,i.wheelDY+=f))}function Qb(a,b,c){if("string"==typeof b&&(b=Mc[b],!b))return!1;a.display.pollingFast&&yb(a)&&(a.display.pollingFast=!1);var d=a.doc,e=d.sel.shift;try{Bb(a)&&(a.state.suppressEdits=!0),c&&(d.sel.shift=!1),b(a)}catch(f){if(f!=te)throw f;return!1}finally{d.sel.shift=e,a.state.suppressEdits=!1}return!0}function Rb(a){var b=a.state.keyMaps.slice(0);return b.push(a.options.keyMap),a.options.extraKeys&&b.unshift(a.options.extraKeys),b}function Tb(a,b){function i(){h=!0}var c=Oc(a.options.keyMap),e=c.auto;clearTimeout(Sb),e&&!Qc(b)&&(Sb=setTimeout(function(){Oc(a.options.keyMap)==c&&(a.options.keyMap=e.call?e.call(null,a):e)},50));var f=We[ke(b,"keyCode")],g=!1;if(null==f||b.altGraphKey)return!1;ke(b,"altKey")&&(f="Alt-"+f),ke(b,s?"metaKey":"ctrlKey")&&(f="Ctrl-"+f),ke(b,s?"ctrlKey":"metaKey")&&(f="Cmd-"+f);var h=!1,j=Rb(a);return g=ke(b,"shiftKey")?Pc("Shift-"+f,j,function(b){return Qb(a,b,!0)},i)||Pc(f,j,function(b){return"string"==typeof b&&/^go[A-Z]/.test(b)?Qb(a,b):void 0},i):Pc(f,j,function(b){return Qb(a,b)},i),h&&(g=!1),g&&(fe(b),Z(a),d&&(b.oldKeyCode=b.keyCode,b.keyCode=0)),g}function Ub(a,b,c){var d=Pc("'"+c+"'",Rb(a),function(b){return Qb(a,b,!0)});return d&&(fe(b),Z(a)),d}function Wb(a){var c=this;if(c.state.focused||Yb(c),b&&27==a.keyCode&&(a.returnValue=!1),!c.options.onKeyEvent||!c.options.onKeyEvent(c,ee(a))){var d=ke(a,"keyCode");c.doc.sel.shift=16==d||ke(a,"shiftKey");var e=Tb(c,a);h&&(Vb=e?d:null,e||88!=d||Ve||!ke(a,p?"metaKey":"ctrlKey")||c.replaceSelection(""))}}function Xb(a){var b=this;if(!b.options.onKeyEvent||!b.options.onKeyEvent(b,ee(a))){var c=ke(a,"keyCode"),d=ke(a,"charCode");if(h&&c==Vb)return Vb=null,fe(a),void 0;if(!(h&&(!a.which||10>a.which)||j)||!Tb(b,a)){var e=String.fromCharCode(null==d?c:d);this.options.electricChars&&this.doc.mode.electricChars&&this.options.smartIndent&&!Bb(this)&&this.doc.mode.electricChars.indexOf(e)>-1&&setTimeout(sb(b,function(){xc(b,b.doc.sel.to.line,"smart")}),75),Ub(b,a,e)||xb(b)}}}function Yb(a){"nocursor"!=a.options.readOnly&&(a.state.focused||(ne(a,"focus",a),a.state.focused=!0,-1==a.display.wrapper.className.search(/\bCodeMirror-focused\b/)&&(a.display.wrapper.className+=" CodeMirror-focused"),zb(a,!0)),wb(a),Z(a))}function Zb(a){a.state.focused&&(ne(a,"blur",a),a.state.focused=!1,a.display.wrapper.className=a.display.wrapper.className.replace(" CodeMirror-focused","")),clearInterval(a.display.blinker),setTimeout(function(){a.state.focused||(a.doc.sel.shift=!1)},150)}function _b(b,c){function k(){if(e.inputDiv.style.position="relative",e.input.style.cssText=j,d&&(e.scrollbarV.scrollTop=e.scroller.scrollTop=i),wb(b),null!=e.input.selectionStart){clearTimeout($b);var a=e.input.value=" "+(jc(f.from,f.to)?"":e.input.value),c=0;e.prevInput=" ",e.input.selectionStart=1,e.input.selectionEnd=a.length;var g=function(){" "==e.prevInput&&0==e.input.selectionStart?sb(b,Mc.selectAll)(b):10>c++?$b=setTimeout(g,500):zb(b)};$b=setTimeout(g,200)}}var e=b.display,f=b.doc.sel;if(!Db(e,c)){var g=Eb(b,c),i=e.scroller.scrollTop;if(g&&!h){(jc(f.from,f.to)||kc(g,f.from)||!kc(g,f.to))&&sb(b,qc)(b.doc,g,g);var j=e.input.style.cssText;if(e.inputDiv.style.position="absolute",e.input.style.cssText="position: fixed; width: 30px; height: 30px; top: "+(c.clientY-5)+"px; left: "+(c.clientX-5)+"px; z-index: 1000; background: white; outline: none;"+"border-width: 0; outline: none; overflow: hidden; opacity: .05; filter: alpha(opacity=5);",Ab(b),zb(b,!0),jc(f.from,f.to)&&(e.input.value=e.prevInput=" "),a){he(c);var l=function(){me(window,"mouseup",l),setTimeout(k,20)};le(window,"mouseup",l)}else setTimeout(k,50)}}}function ac(a){return{line:a.from.line+a.text.length-1,ch:ye(a.text).length+(1==a.text.length?a.from.ch:0)}}function bc(a,b,c){if(c&&"object"==typeof c)return c;if("start"==c)return{anchor:b.from,head:b.from};var d=ac(b);if("around"==c)return{anchor:b.from,head:d};if("end"==c)return{anchor:d,head:d};var e=function(a){if(kc(a,b.from))return a;if(!kc(b.to,a))return d;var c=a.line+b.text.length-(b.to.line-b.from.line)-1,e=a.ch;return a.line==b.to.line&&(e+=d.ch-b.to.ch),{line:c,ch:e}};return{anchor:e(a.anchor),head:e(a.head)}}function cc(a,b,c,d){if(a.cm){if(!a.cm.curOp)return sb(a.cm,cc)(a,b,c,d);if(a.cm.state.suppressEdits)return}var e=t&&!d&&bd(a,b.from,b.to);if(e){for(var f=e.length-1;f>=1;--f)dc(a,{from:e[f].from,to:e[f].to,text:[""]});e.length&&dc(a,{from:e[0].from,to:e[0].to,text:b.text},c)}else dc(a,b,c)}function dc(a,b,c){var d=bc(a.sel,b,c);Yd(a,b,d,a.cm?a.cm.curOp.id:0/0),gc(a,b,d,_c(a,b));var e=[];Kd(a,function(a,c){c||-1!=Ae(e,a.history)||(ce(a.history,b),e.push(a.history)),gc(a,b,null,_c(a,b))})}function ec(a,b){var c=a.history,d=("undo"==b?c.done:c.undone).pop();if(d){c.dirtyCounter+="undo"==b?-1:1;var e={changes:[],anchorBefore:d.anchorAfter,headBefore:d.headAfter,anchorAfter:d.anchorBefore,headAfter:d.headBefore};("undo"==b?c.undone:c.done).push(e);for(var f=d.changes.length-1;f>=0;--f){var g=d.changes[f];g.origin=b,e.changes.push(Xd(a,g));var h=f?bc(a.sel,g,null):{anchor:d.anchorBefore,head:d.headBefore};gc(a,g,h,ad(a,g));var i=[];Kd(a,function(a,b){b||-1!=Ae(i,a.history)||(ce(a.history,g),i.push(a.history)),gc(a,g,null,ad(a,g))})}}}function fc(a,b){function c(a){return{line:a.line+b,ch:a.ch}}a.first+=b,a.cm&&vb(a.cm,a.first,a.first,b),a.sel.head=c(a.sel.head),a.sel.anchor=c(a.sel.anchor),a.sel.from=c(a.sel.from),a.sel.to=c(a.sel.to)}function gc(a,b,c,d){if(a.cm&&!a.cm.curOp)return sb(a.cm,gc)(a,b,c,d);if(b.to.line<a.first)return fc(a,b.text.length-1-(b.to.line-b.from.line)),void 0;if(!(b.from.line>a.lastLine())){if(b.from.line<a.first){var e=b.text.length-1-(a.first-b.from.line);fc(a,e),b={from:{line:a.first,ch:0},to:{line:b.to.line+e,ch:b.to.ch},text:[ye(b.text)],origin:b.origin}}var f=a.lastLine();b.to.line>f&&(b={from:b.from,to:{line:f,ch:Md(a,f).text.length},text:[b.text[0]],origin:b.origin}),c||(c=bc(a.sel,b,null)),a.cm?hc(a.cm,b,d,c):Dd(a,b,d,c)}}function hc(a,b,c,d){var e=a.doc,f=a.display,g=b.from,h=b.to,i=!1,j=g.line;a.options.lineWrapping||(j=Qd(fd(e,Md(e,g.line))),e.iter(j,h.line+1,function(a){return a==f.maxLine?(i=!0,!0):void 0})),Dd(e,b,c,d,z(a)),a.options.lineWrapping||(e.iter(j,g.line+b.text.length,function(a){var b=F(e,a);b>f.maxLineLength&&(f.maxLine=a,f.maxLineLength=b,f.maxLineChanged=!0,i=!1)}),i&&(a.curOp.updateMaxLine=!0)),e.frontier=Math.min(e.frontier,g.line),$(a,400);var k=b.text.length-(h.line-g.line)-1;if(vb(a,g.line,h.line+1,k),re(a,"change")){var l={from:g,to:h,text:b.text,origin:b.origin};if(a.curOp.textChanged){for(var m=a.curOp.textChanged;m.next;m=m.next);m.next=l}else a.curOp.textChanged=l}}function ic(a,b,c,d,e){if(d||(d=c),kc(d,c)){var f=d;d=c,c=f}"string"==typeof b&&(b=Te(b)),cc(a,{from:c,to:d,text:b,origin:e},null)}function jc(a,b){return a.line==b.line&&a.ch==b.ch}function kc(a,b){return a.line<b.line||a.line==b.line&&a.ch<b.ch}function lc(a){return{line:a.line,ch:a.ch}}function mc(a,b){return Math.max(a.first,Math.min(b,a.first+a.size-1))}function nc(a,b){if(b.line<a.first)return{line:a.first,ch:0};var c=a.first+a.size-1;if(b.line>c)return{line:c,ch:Md(a,c).text.length};var d=b.ch,e=Md(a,b.line).text.length;return null==d||d>e?{line:b.line,ch:e}:0>d?{line:b.line,ch:0}:b}function oc(a,b){return b>=a.first&&a.first+a.size>b}function pc(a,b,c,d){if(a.sel.shift||a.sel.extend){var e=a.sel.anchor;if(c){var f=kc(b,e);f!=kc(c,e)?(e=b,b=c):f!=kc(b,c)&&(b=c)}qc(a,e,b,d)}else qc(a,b,c||b,d);a.cm&&(a.cm.curOp.userSelChange=!0)}function qc(a,b,c,d,e){var f=a.sel;if(f.goalColumn=null,(e||!jc(b,f.anchor))&&(b=sc(a,b,d,"push"!=e)),(e||!jc(c,f.head))&&(c=sc(a,c,d,"push"!=e)),!jc(f.anchor,b)||!jc(f.head,c)){f.anchor=b,f.head=c;var g=kc(c,b);f.from=g?c:b,f.to=g?b:c,a.cm&&(a.cm.curOp.updateInput=a.cm.curOp.selectionChanged=!0)}}function rc(a){qc(a.doc,a.doc.sel.from,a.doc.sel.to,null,"push")}function sc(a,b,c,d){var e=!1,f=b,g=c||1;a.cantEdit=!1;a:for(;;){var i,h=Md(a,f.line);if(h.markedSpans){for(var j=0;h.markedSpans.length>j;++j){var k=h.markedSpans[j],l=k.marker;if((null==k.from||(l.inclusiveLeft?k.from<=f.ch:k.from<f.ch))&&(null==k.to||(l.inclusiveRight?k.to>=f.ch:k.to>f.ch))){if(d&&l.clearOnEnter){(i||(i=[])).push(l);continue}if(!l.atomic)continue;var m=l.find()[0>g?"from":"to"];if(jc(m,f)&&(m.ch+=g,0>m.ch?m=m.line>a.first?nc(a,{line:m.line-1}):null:m.ch>h.text.length&&(m=m.line<a.first+a.size-1?{line:m.line+1,ch:0}:null),!m)){if(e)return d?(a.cantEdit=!0,{line:a.first,ch:0}):sc(a,b,c,!0);e=!0,m=b,g=-g}f=m;continue a}}if(i)for(var j=0;i.length>j;++j)i[j].clear()}return f}}function tc(a){var b=uc(a,a.doc.sel.head);if(a.state.focused){var c=a.display,d=c.sizer.getBoundingClientRect(),e=null;if(0>b.top+d.top?e=!0:b.bottom+d.top>(window.innerHeight||document.documentElement.clientHeight)&&(e=!1),null!=e&&!m){var f="none"==c.cursor.style.display;f&&(c.cursor.style.display="",c.cursor.style.left=b.left+"px",c.cursor.style.top=b.top-c.viewOffset+"px"),c.cursor.scrollIntoView(e),f&&(c.cursor.style.display="none")}}}function uc(a,b){for(;;){var c=!1,d=kb(a,b),e=wc(a,d.left,d.top,d.left,d.bottom),f=a.doc.scrollTop,g=a.doc.scrollLeft;if(null!=e.scrollTop&&(Lb(a,e.scrollTop),Math.abs(a.doc.scrollTop-f)>1&&(c=!0)),null!=e.scrollLeft&&(Mb(a,e.scrollLeft),Math.abs(a.doc.scrollLeft-g)>1&&(c=!0)),!c)return d}}function vc(a,b,c,d,e){var f=wc(a,b,c,d,e);null!=f.scrollTop&&Lb(a,f.scrollTop),null!=f.scrollLeft&&Mb(a,f.scrollLeft)}function wc(a,b,c,d,e){var f=a.display,g=cb(f);c+=g,e+=g;var h=f.scroller.clientHeight-se,i=f.scroller.scrollTop,j={},k=a.doc.height+2*g,l=g+10>c,m=e+g>k-10;i>c?j.scrollTop=l?0:Math.max(0,c):e>i+h&&(j.scrollTop=(m?k:e)-h);var n=f.scroller.clientWidth-se,o=f.scroller.scrollLeft;b+=f.gutters.offsetWidth,d+=f.gutters.offsetWidth;var p=f.gutters.offsetWidth,q=p+10>b;return o+p>b||q?(q&&(b=0),j.scrollLeft=Math.max(0,b-10-p)):d>n+o-3&&(j.scrollLeft=d+10-n),j}function xc(a,b,c,d){var e=a.doc;if(c||(c="add"),"smart"==c)if(a.doc.mode.indent)var f=bb(a,b);else c="prev";var k,g=a.options.tabSize,h=Md(e,b),i=ve(h.text,null,g),j=h.text.match(/^\s*/)[0];if("smart"==c&&(k=a.doc.mode.indent(f,h.text.slice(j.length),h.text),k==te)){if(!d)return;c="prev"}"prev"==c?k=b>e.first?ve(Md(e,b-1).text,null,g):0:"add"==c?k=i+a.options.indentUnit:"subtract"==c&&(k=i-a.options.indentUnit),k=Math.max(0,k);var l="",m=0;if(a.options.indentWithTabs)for(var n=Math.floor(k/g);n;--n)m+=g,l+="	";k>m&&(l+=xe(k-m)),l!=j&&ic(a.doc,l,{line:b,ch:0},{line:b,ch:j.length},"input"),h.stateAfter=null}function yc(a,b,c){var d=b,e=b,f=a.doc;return"number"==typeof b?e=Md(f,mc(f,b)):d=Qd(b),null==d?null:c(e,d)?(vb(a,d,d+1),e):null}function zc(a,b,c,d){function i(){var c=f+b;return a.first>c||c>=a.first+a.size?!1:(f=c,h=Md(a,c))}function j(a){var c=(d?cf:df)(h,g,b,!0);if(null==c){if(a||!i())return!1;g=d?(0>b?_e:$e)(h):0>b?h.text.length:0}else g=c;return!0}var e=a.sel.head,f=e.line,g=e.ch,h=Md(a,f);if("char"==c)j();else if("column"==c)j(!0);else if("word"==c)for(var k=!1;!(0>b)||j();){if(Ge(h.text.charAt(g)))k=!0;else if(k){0>b&&(b=1,j());break}if(b>0&&!j())break}return sc(a,{line:f,ch:g},b,!0)}function Ac(a,b){var c=b.ch,d=b.ch;if(a){b.after===!1||d==a.length?--c:++d;for(var e=a.charAt(c),f=Ge(e)?Ge:/\s/.test(e)?function(a){return/\s/.test(a)}:function(a){return!/\s/.test(a)&&!Ge(a)};c>0&&f(a.charAt(c-1));)--c;for(;a.length>d&&f(a.charAt(d));)++d}return{from:{line:b.line,ch:c},to:{line:b.line,ch:d}}}function Bc(a,b){pc(a.doc,{line:b,ch:0},nc(a.doc,{line:b+1,ch:0}))}function Ec(a,b,c,d){v.defaults[a]=b,c&&(Cc[a]=d?function(a,b,d){d!=Fc&&c(a,b,d)}:c)}function Kc(a,b){if(b===!0)return b;if(a.copyState)return a.copyState(b);var c={};for(var d in b){var e=b[d];e instanceof Array&&(e=e.concat([])),c[d]=e}return c}function Lc(a,b,c){return a.startState?a.startState(b,c):!0}function Oc(a){return"string"==typeof a?Nc[a]:a}function Pc(a,b,c,d){function e(b){b=Oc(b);var f=b[a];if(f===!1)return d&&d(),!0;if(null!=f&&c(f))return!0;if(b.nofallthrough)return d&&d(),!0;var g=b.fallthrough;if(null==g)return!1;if("[object Array]"!=Object.prototype.toString.call(g))return e(g);for(var h=0,i=g.length;i>h;++h)if(e(g[h]))return!0;return!1}for(var f=0;b.length>f;++f)if(e(b[f]))return!0}function Qc(a){var b=We[ke(a,"keyCode")];return"Ctrl"==b||"Alt"==b||"Shift"==b||"Mod"==b}function Rc(a,b){this.pos=this.start=0,this.string=a,this.tabSize=b||8}function Sc(a,b){this.lines=[],this.type=b,this.doc=a}function Tc(a,b,c,d,e){if(d&&d.shared)return Vc(a,b,c,d,e);if(a.cm&&!a.cm.curOp)return sb(a.cm,Tc)(a,b,c,d,e);var f=new Sc(a,e);if("range"==e&&!kc(b,c))return f;d&&Ce(d,f),f.replacedWith&&(f.collapsed=!0,f.replacedWith=Je("span",[f.replacedWith],"CodeMirror-widget")),f.collapsed&&(u=!0);var i,j,l,g=b.line,h=0,k=a.cm;if(a.iter(g,c.line+1,function(d){k&&f.collapsed&&!k.options.lineWrapping&&fd(a,d)==k.display.maxLine&&(l=!0);var e={from:null,to:null,marker:f};h+=d.text.length,g==b.line&&(e.from=b.ch,h-=b.ch),g==c.line&&(e.to=c.ch,h-=d.text.length-c.ch),f.collapsed&&(g==c.line&&(j=cd(d,c.ch)),g==b.line?i=cd(d,b.ch):Pd(d,0)),Yc(d,e),++g}),f.collapsed&&a.iter(b.line,c.line+1,function(a){gd(a)&&Pd(a,0)}),f.readOnly&&(t=!0,(a.history.done.length||a.history.undone.length)&&a.clearHistory()),f.collapsed){if(i!=j)throw Error("Inserting collapsed marker overlapping an existing one");f.size=h,f.atomic=!0}return k&&(l&&(k.curOp.updateMaxLine=!0),(f.className||f.startStyle||f.endStyle||f.collapsed)&&vb(k,b.line,c.line+1),f.atomic&&rc(k)),f}function Uc(a,b){this.markers=a,this.primary=b;for(var c=0,d=this;a.length>c;++c)a[c].parent=this,le(a[c],"clear",function(){d.clear()})}function Vc(a,b,c,d,e){d=Ce(d),d.shared=!1;var f=[Tc(a,b,c,d,e)],g=f[0];return Kd(a,function(a){f.push(Tc(a,nc(a,b),nc(a,c),d,e));for(var h=0;a.linked.length>h;++h)if(a.linked[h].isParent)return;g=ye(f)}),new Uc(f,g)}function Wc(a,b){if(a)for(var c=0;a.length>c;++c){var d=a[c];if(d.marker==b)return d}}function Xc(a,b){for(var c,d=0;a.length>d;++d)a[d]!=b&&(c||(c=[])).push(a[d]);return c}function Yc(a,b){a.markedSpans=a.markedSpans?a.markedSpans.concat([b]):[b],b.marker.attachLine(a)}function Zc(a,b){if(a)for(var d,c=0;a.length>c;++c){var e=a[c],f=e.marker,g=null==e.from||(f.inclusiveLeft?b>=e.from:b>e.from);if(g||"bookmark"==f.type&&e.from==b){var h=null==e.to||(f.inclusiveRight?e.to>=b:e.to>b);(d||(d=[])).push({from:e.from,to:h?null:e.to,marker:f})}}return d}function $c(a,b,c){if(a)for(var e,d=0;a.length>d;++d){var f=a[d],g=f.marker,h=null==f.to||(g.inclusiveRight?f.to>=c:f.to>c);if(h||"bookmark"==g.type&&f.from==c&&f.from!=b){var i=null==f.from||(g.inclusiveLeft?c>=f.from:c>f.from);(e||(e=[])).push({from:i?null:f.from-c,to:null==f.to?null:f.to-c,marker:g})}}return e}function _c(a,b){var c=oc(a,b.from.line)&&Md(a,b.from.line).markedSpans,d=oc(a,b.to.line)&&Md(a,b.to.line).markedSpans;if(!c&&!d)return null;var e=b.from.ch,f=b.to.ch,g=Zc(c,e),h=$c(d,b.from.line==b.to.line?e:0/0,f),i=1==b.text.length,j=ye(b.text).length+(i?e:0);if(g)for(var k=0;g.length>k;++k){var l=g[k];if(null==l.to){var m=Wc(h,l.marker);m?i&&(l.to=null==m.to?null:m.to+j):l.to=e}}if(h)for(var k=0;h.length>k;++k){var l=h[k];if(null!=l.to&&(l.to+=j),null==l.from){var m=Wc(g,l.marker);m||(l.from=j,i&&(g||(g=[])).push(l))}else l.from+=j,i&&(g||(g=[])).push(l)}var n=[g];if(!i){var p,o=b.text.length-2;if(o>0&&g)for(var k=0;g.length>k;++k)null==g[k].to&&(p||(p=[])).push({from:null,to:null,marker:g[k].marker});for(var k=0;o>k;++k)n.push(p);n.push(h)}return n}function ad(a,b){var c=$d(a,b),d=_c(a,b);if(!c)return d;if(!d)return c;for(var e=0;c.length>e;++e){var f=c[e],g=d[e];if(f&&g)a:for(var h=0;g.length>h;++h){for(var i=g[h],j=0;f.length>j;++j)if(f[j].marker==i.marker)continue a;f.push(i)}else g&&(c[e]=g)}return c}function bd(a,b,c){var d=null;if(a.iter(b.line,c.line+1,function(a){if(a.markedSpans)for(var b=0;a.markedSpans.length>b;++b){var c=a.markedSpans[b].marker;!c.readOnly||d&&-1!=Ae(d,c)||(d||(d=[])).push(c)}}),!d)return null;for(var e=[{from:b,to:c}],f=0;d.length>f;++f)for(var g=d[f].find(),h=0;e.length>h;++h){var i=e[h];if(kc(g.from,i.to)&&!kc(g.to,i.from)){var j=[h,1];kc(i.from,g.from)&&j.push({from:i.from,to:g.from}),kc(g.to,i.to)&&j.push({from:g.to,to:i.to}),e.splice.apply(e,j),h+=j.length-1}}return e}function cd(a,b){var d,c=u&&a.markedSpans;if(c)for(var e,f=0;c.length>f;++f)e=c[f],e.marker.collapsed&&(null==e.from||b>e.from)&&(null==e.to||e.to>b)&&(!d||d.width<e.marker.width)&&(d=e.marker);return d}function dd(a){return cd(a,-1)}function ed(a){return cd(a,a.text.length+1)}function fd(a,b){for(var c;c=dd(b);)b=Md(a,c.find().from.line);return b}function gd(a){var b=u&&a.markedSpans;if(b)for(var c,d=0;b.length>d;++d)if(c=b[d],c.marker.collapsed){if(null==c.from)return!0;if(0==c.from&&c.marker.inclusiveLeft&&hd(a,c))return!0}}function hd(a,b){if(null==b.to){var c=b.marker.find().to,d=Md(Rd(a),c.line);return hd(d,Wc(d.markedSpans,b.marker))}if(b.marker.inclusiveRight&&b.to==a.text.length)return!0;for(var e,f=0;a.markedSpans.length>f;++f)if(e=a.markedSpans[f],e.marker.collapsed&&e.from==b.to&&(e.marker.inclusiveLeft||b.marker.inclusiveRight)&&hd(a,e))return!0}function id(a){var b=a.markedSpans;if(b){for(var c=0;b.length>c;++c)b[c].marker.detachLine(a);a.markedSpans=null}}function jd(a,b){if(b){for(var c=0;b.length>c;++c)b[c].marker.attachLine(a);a.markedSpans=b}}function ld(a){return function(){var b=!this.cm.curOp;b&&qb(this.cm);try{var c=a.apply(this,arguments)}finally{b&&rb(this.cm)}return c}}function md(a){return null!=a.height?a.height:(a.node.parentNode&&1==a.node.parentNode.nodeType||Le(a.cm.display.measure,Je("div",[a.node],null,"position: relative")),a.height=a.node.offsetHeight)}function nd(a,b,c,d){var e=new kd(a,c,d);return e.noHScroll&&(a.display.alignWidgets=!0),yc(a,b,function(b){if((b.widgets||(b.widgets=[])).push(e),e.line=b,!gd(b)||e.showIfHidden){var c=Td(a,b)<a.display.scroller.scrollTop;Pd(b,b.height+md(e)),c&&(a.curOp.updateScrollPos={scrollTop:a.doc.scrollTop+e.height,scrollLeft:a.doc.scrollLeft})}return!0}),e}function od(a,b,c){var d={text:a};return jd(d,b),d.height=c?c(d):1,d}function pd(a,b,c,d){a.text=b,a.stateAfter&&(a.stateAfter=null),a.styles&&(a.styles=null),null!=a.order&&(a.order=null),id(a),jd(a,c);var e=d?d(a):1;e!=a.height&&Pd(a,e),qe(a,"change")}function qd(a){a.parent=null,id(a)}function rd(a,b,c,d,e){var f=a.options.flattenSpans,g="",h=null,i=new Rc(b,a.options.tabSize);for(""==b&&c.blankLine&&c.blankLine(d);!i.eol();){var j=c.token(i,d);i.pos>5e3&&(f=!1,i.pos=Math.min(b.length,i.start+5e4),j=null);var k=i.current();i.start=i.pos,f&&h==j?g+=k:(g&&e(g,h),g=k,h=j)}g&&e(g,h)}function sd(a,b,c){var d=[a.state.modeGen];rd(a,b.text,a.doc.mode,c,function(a,b){d.push(a,b)});for(var e=0;a.state.overlays.length>e;++e){var f=a.state.overlays[e],g=1;rd(a,b.text,f.mode,!0,function(a,b){for(var c=g,e=a.length;e;){var h=d[g],i=h.length;e>=i?e-=i:(d.splice(g,1,h.slice(0,e),d[g+1],h.slice(e)),e=0),g+=2}if(b)if(f.opaque)d.splice(c,g-c,a,b),g=c+2;else for(;g>c;c+=2){var h=d[c+1];d[c+1]=h?h+" "+b:b}})}return d}function td(a,b){return b.styles&&b.styles[0]==a.state.modeGen||(b.styles=sd(a,b,b.stateAfter=bb(a,Qd(b)))),b.styles}function ud(a,b,c){var d=a.doc.mode,e=new Rc(b.text,a.options.tabSize);for(""==b.text&&d.blankLine&&d.blankLine(c);!e.eol()&&5e3>=e.pos;)d.token(e,c),e.start=e.pos}function wd(a){return a?vd[a]||(vd[a]="cm-"+a.replace(/ +/g," cm-")):null}function xd(a,b,c){for(var d,f,g,e=b,h=!0;d=dd(e);)h=!1,e=Md(a.doc,d.find().from.line),f||(f=e);var i={pre:Je("pre"),col:0,pos:0,display:!c,measure:null,addedOne:!1,cm:a};e.textClass&&(i.pre.className=e.textClass);do{i.measure=e==b&&c,i.pos=0,i.addToken=i.measure?Ad:zd,c&&g&&e!=b&&!i.addedOne&&(c[0]=i.pre.appendChild(Se(a.display.measure)),i.addedOne=!0);var j=Cd(e,i,td(a,e));g=e==f,j&&(e=Md(a.doc,j.to.line),h=!1)}while(j);return c&&!i.addedOne&&(c[0]=i.pre.appendChild(h?Je("span","\u00a0"):Se(a.display.measure))),i.pre.firstChild||gd(b)||i.pre.appendChild(document.createTextNode("\u00a0")),i.pre}function zd(a,b,c,d,e){if(b){if(yd.test(b))for(var f=document.createDocumentFragment(),g=0;;){yd.lastIndex=g;var h=yd.exec(b),i=h?h.index-g:b.length-g;if(i&&(f.appendChild(document.createTextNode(b.slice(g,g+i))),a.col+=i),!h)break;if(g+=i+1,"	"==h[0]){var j=a.cm.options.tabSize,k=j-a.col%j;f.appendChild(Je("span",xe(k),"cm-tab")),a.col+=k}else{var l=Je("span","\u2022","cm-invalidchar");l.title="\\u"+h[0].charCodeAt(0).toString(16),f.appendChild(l),a.col+=1}}else{a.col+=b.length;var f=document.createTextNode(b)}if(c||d||e||a.measure){var m=c||"";return d&&(m+=d),e&&(m+=e),a.pre.appendChild(Je("span",[f],m))}a.pre.appendChild(f)}}function Ad(a,b,c,d,e){for(var f=0;b.length>f;++f)f&&b.length>f&&a.cm.options.lineWrapping&&Oe.test(b.slice(f-1,f+1))&&a.pre.appendChild(Je("wbr")),a.measure[a.pos++]=zd(a,b.charAt(f),c,0==f&&d,f==b.length-1&&e);b.length&&(a.addedOne=!0)}function Bd(a,b,c){c&&(a.display||(c=c.cloneNode(!0)),a.pre.appendChild(c),a.measure&&b&&(a.measure[a.pos]=c,a.addedOne=!0)),a.pos+=b}function Cd(a,b,c){var d=a.markedSpans;if(d)for(var j,l,m,n,o,f=a.text,g=f.length,h=0,e=1,i="",k=0;;){if(k==h){l=m=n="",o=null,k=1/0;for(var p=null,q=0;d.length>q;++q){var r=d[q],s=r.marker;h>=r.from&&(null==r.to||r.to>h)?(null!=r.to&&k>r.to&&(k=r.to,m=""),s.className&&(l+=" "+s.className),s.startStyle&&r.from==h&&(n+=" "+s.startStyle),s.endStyle&&r.to==k&&(m+=" "+s.endStyle),s.collapsed&&(!o||o.marker.width<s.width)&&(o=r)):r.from>h&&k>r.from&&(k=r.from),"bookmark"==s.type&&r.from==h&&s.replacedWith&&(p=s.replacedWith)}if(o&&(o.from||0)==h&&(Bd(b,(null==o.to?g:o.to)-h,null!=o.from&&o.marker.replacedWith),null==o.to))return o.marker.find();p&&!o&&Bd(b,0,p)}if(h>=g)break;for(var t=Math.min(g,k);;){if(i){var u=h+i.length;if(!o){var v=u>t?i.slice(0,t-h):i;b.addToken(b,v,j+l,n,h+v.length==k?m:"")}if(u>=t){i=i.slice(t-h),h=t;break}h=u,n=""}i=c[e++],j=wd(c[e++])}}else for(var e=1;c.length>e;e+=2)b.addToken(b,c[e],wd(c[e+1]))}function Dd(a,b,c,d,e){function f(a){return c?c[a]:null}var g=b.from,h=b.to,i=b.text,j=Md(a,g.line),k=Md(a,h.line),l=ye(i),m=f(i.length-1),n=h.line-g.line;if(0==g.ch&&0==h.ch&&""==l){for(var o=0,p=i.length-1,q=[];p>o;++o)q.push(od(i[o],f(o),e));pd(k,k.text,m,e),n&&a.remove(g.line,n),q.length&&a.insert(g.line,q)}else if(j==k)if(1==i.length)pd(j,j.text.slice(0,g.ch)+l+j.text.slice(h.ch),m,e);else{for(var q=[],o=1,p=i.length-1;p>o;++o)q.push(od(i[o],f(o),e));q.push(od(l+j.text.slice(h.ch),m,e)),pd(j,j.text.slice(0,g.ch)+i[0],f(0),e),a.insert(g.line+1,q)}else if(1==i.length)pd(j,j.text.slice(0,g.ch)+i[0]+k.text.slice(h.ch),f(0),e),a.remove(g.line+1,n);else{pd(j,j.text.slice(0,g.ch)+i[0],f(0),e),pd(k,l+k.text.slice(h.ch),m,e);for(var o=1,p=i.length-1,q=[];p>o;++o)q.push(od(i[o],f(o),e));n>1&&a.remove(g.line+1,n-1),a.insert(g.line+1,q)}qc(a,d.anchor,d.head,null,!0)}function Ed(a){this.lines=a,this.parent=null;for(var b=0,c=a.length,d=0;c>b;++b)a[b].parent=this,d+=a[b].height;this.height=d}function Fd(a){this.children=a;for(var b=0,c=0,d=0,e=a.length;e>d;++d){var f=a[d];b+=f.chunkSize(),c+=f.height,f.parent=this}this.size=b,this.height=c,this.parent=null}function Kd(a,b,c){function d(a,e,f){if(a.linked)for(var g=0;a.linked.length>g;++g){var h=a.linked[g];if(h.doc!=e){var i=f&&h.sharedHist;(!c||i)&&(b(h.doc,i),d(h.doc,a,i))}}}d(a,null,!0)}function Ld(a,b){if(b.cm)throw Error("This document is already in use.");a.doc=b,b.cm=a,A(a),x(a),a.options.lineWrapping||G(a),a.options.mode=b.modeOption,vb(a)}function Md(a,b){for(b-=a.first;!a.lines;)for(var c=0;;++c){var d=a.children[c],e=d.chunkSize();if(e>b){a=d;break}b-=e}return a.lines[b]}function Nd(a,b,c){var d=[],e=b.line;return a.iter(b.line,c.line+1,function(a){var f=a.text;e==c.line&&(f=f.slice(0,c.ch)),e==b.line&&(f=f.slice(b.ch)),d.push(f),++e}),d}function Od(a,b,c){var d=[];return a.iter(b,c,function(a){d.push(a.text)}),d}function Pd(a,b){for(var c=b-a.height,d=a;d;d=d.parent)d.height+=c}function Qd(a){if(null==a.parent)return null;for(var b=a.parent,c=Ae(b.lines,a),d=b.parent;d;b=d,d=d.parent)for(var e=0;d.children[e]!=b;++e)c+=d.children[e].chunkSize();return c+b.first}function Rd(a){for(var b=a.parent;b.parent;b=b.parent);return b}function Sd(a,b){var c=a.first;a:do{for(var d=0,e=a.children.length;e>d;++d){var f=a.children[d],g=f.height;if(g>b){a=f;continue a}b-=g,c+=f.chunkSize()}return c}while(!a.lines);for(var d=0,e=a.lines.length;e>d;++d){var h=a.lines[d],i=h.height;if(i>b)break;b-=i}return c+d}function Td(a,b){b=fd(a.doc,b);for(var c=0,d=b.parent,e=0;d.lines.length>e;++e){var f=d.lines[e];if(f==b)break;c+=f.height}for(var g=d.parent;g;d=g,g=d.parent)for(var e=0;g.children.length>e;++e){var h=g.children[e];if(h==d)break;c+=h.height}return c}function Ud(a){var b=a.order;return null==b&&(b=a.order=ef(a.text)),b}function Vd(){return{done:[],undone:[],undoDepth:1/0,lastTime:0,lastOp:null,lastOrigin:null,dirtyCounter:0}}function Wd(a,b,c,d){var e=b["spans_"+a.id],f=0;a.iter(Math.max(a.first,c),Math.min(a.first+a.size,d),function(c){c.markedSpans&&((e||(e=b["spans_"+a.id]={}))[f]=c.markedSpans),++f})}function Xd(a,b){var c={from:b.from,to:ac(b),text:Nd(a,b.from,b.to)};return Wd(a,c,b.from.line,b.to.line+1),Kd(a,function(a){Wd(a,c,b.from.line,b.to.line+1)},!0),c}function Yd(a,b,c,d){var e=a.history;e.undone.length=0;var f=+new Date,g=ye(e.done);if(g&&(e.lastOp==d||e.lastOrigin==b.origin&&("input"==b.origin||"delete"==b.origin)&&e.lastTime>f-600)){var h=ye(g.changes);jc(b.from,b.to)&&jc(b.from,h.to)?h.to=ac(b):g.changes.push(Xd(a,b)),g.anchorAfter=c.anchor,g.headAfter=c.head}else{for(g={changes:[Xd(a,b)],anchorBefore:a.sel.anchor,headBefore:a.sel.head,anchorAfter:c.anchor,headAfter:c.head},e.done.push(g);e.done.length>e.undoDepth;)e.done.shift();0>e.dirtyCounter?e.dirtyCounter=0/0:e.dirtyCounter++}e.lastTime=f,e.lastOp=d,e.lastOrigin=b.origin}function Zd(a){if(!a)return null;for(var c,b=0;a.length>b;++b)a[b].marker.explicitlyCleared?c||(c=a.slice(0,b)):c&&c.push(a[b]);return c?c.length?c:null:a}function $d(a,b){var c=b["spans_"+a.id];if(!c)return null;for(var d=0,e=[];b.text.length>d;++d)e.push(Zd(c[d]));return e}function _d(a,b){for(var c=0,d=[];a.length>c;++c){var e=a[c],f=e.changes,g=[];d.push({changes:g,anchorBefore:e.anchorBefore,headBefore:e.headBefore,anchorAfter:e.anchorAfter,headAfter:e.headAfter});for(var h=0;f.length>h;++h){var j,i=f[h];if(g.push({from:i.from,to:i.to,text:i.text}),b)for(var k in i)(j=k.match(/^spans_(\d+)$/))&&Ae(b,Number(j[1]))>-1&&(ye(g)[k]=i[k],delete i[k])}}return d}function ae(a,b,c,d){a.line>c?a.line+=d:a.line>b&&(a.line=b,a.ch=0)}function be(a,b,c,d){for(var e=0;a.length>e;++e){for(var f=a[e],g=!0,h=0;f.changes.length>h;++h){var i=f.changes[h];if(f.copied||(i.from=lc(i.from),i.to=lc(i.to)),i.from.line>c)i.from.line+=d,i.to.line+=d;else if(i.to.line>=b){g=!1;break}}f.copied||(f.anchorBefore=lc(f.anchorBefore),f.headBefore=lc(f.headBefore),f.anchorAfter=lc(f.anchorAfter),f.readAfter=lc(f.headAfter),f.copied=!0),g?(ae(f.anchorBefore),ae(f.headBefore),ae(f.anchorAfter),ae(f.headAfter)):(a.splice(0,e+1),e=0)}}function ce(a,b){var c=b.from.line,d=b.to.line,e=b.text.length-(d-c)-1;be(a.done,c,d,e),be(a.undone,c,d,e)}function de(){he(this)}function ee(a){return a.stop||(a.stop=de),a}function fe(a){a.preventDefault?a.preventDefault():a.returnValue=!1}function ge(a){a.stopPropagation?a.stopPropagation():a.cancelBubble=!0}function he(a){fe(a),ge(a)}function ie(a){return a.target||a.srcElement}function je(a){var b=a.which;return null==b&&(1&a.button?b=1:2&a.button?b=3:4&a.button&&(b=2)),p&&a.ctrlKey&&1==b&&(b=3),b}function ke(a,b){var c=a.override&&a.override.hasOwnProperty(b);return c?a.override[b]:a[b]}function le(a,b,c){if(a.addEventListener)a.addEventListener(b,c,!1);else if(a.attachEvent)a.attachEvent("on"+b,c);else{var d=a._handlers||(a._handlers={}),e=d[b]||(d[b]=[]);e.push(c)}}function me(a,b,c){if(a.removeEventListener)a.removeEventListener(b,c,!1);else if(a.detachEvent)a.detachEvent("on"+b,c);else{var d=a._handlers&&a._handlers[b];if(!d)return;for(var e=0;d.length>e;++e)if(d[e]==c){d.splice(e,1);break}}}function ne(a,b){var c=a._handlers&&a._handlers[b];if(c)for(var d=Array.prototype.slice.call(arguments,2),e=0;c.length>e;++e)c[e].apply(null,d)}function qe(a,b){function e(a){return function(){a.apply(null,d)}}var c=a._handlers&&a._handlers[b];if(c)for(var d=Array.prototype.slice.call(arguments,2),f=0;c.length>f;++f)oe?oe.push(e(c[f])):c[f].apply(null,d)}function re(a,b){var c=a._handlers&&a._handlers[b];return c&&c.length>0}function ue(){this.id=null}function ve(a,b,c){null==b&&(b=a.search(/[^\s\u00a0]/),-1==b&&(b=a.length));for(var d=0,e=0;b>d;++d)"	"==a.charAt(d)?e+=c-e%c:++e;return e}function xe(a){for(;a>=we.length;)we.push(ye(we)+" ");return we[a]}function ye(a){return a[a.length-1]}function ze(a){n?(a.selectionStart=0,a.selectionEnd=a.value.length):a.select()}function Ae(a,b){if(a.indexOf)return a.indexOf(b);for(var c=0,d=a.length;d>c;++c)if(a[c]==b)return c;return-1}function Be(a,b){if(a){Be.prototype=a;var c=new Be;return b&&Ce(b,c),c}}function Ce(a,b){b||(b={});for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c]);return b}function De(a){for(var b=[],c=0;a>c;++c)b.push(void 0);return b}function Ee(a){var b=Array.prototype.slice.call(arguments,1);return function(){return a.apply(null,b)}}function Ge(a){return/\w/.test(a)||a>"\u0080"&&(a.toUpperCase()!=a.toLowerCase()||Fe.test(a))}function He(a){for(var b in a)if(a.hasOwnProperty(b)&&a[b])return!1;return!0}function Je(a,b,c,d){var e=document.createElement(a);if(c&&(e.className=c),d&&(e.style.cssText=d),"string"==typeof b)Me(e,b);else if(b)for(var f=0;b.length>f;++f)e.appendChild(b[f]);return e}function Ke(a){if(b)for(;a.firstChild;)a.removeChild(a.firstChild);else a.innerHTML="";return a}function Le(a,b){return Ke(a).appendChild(b)}function Me(a,b){d?(a.innerHTML="",a.appendChild(document.createTextNode(b))):a.textContent=b}function Qe(a){if(null!=Pe)return Pe;var b=Je("div",null,null,"width: 50px; height: 50px; overflow-x: scroll");return Le(a,b),b.offsetWidth&&(Pe=b.offsetHeight-b.clientHeight),Pe||0}function Se(a){if(null==Re){var b=Je("span","\u200b");Le(a,Je("span",[b,document.createTextNode("x")])),0!=a.firstChild.offsetHeight&&(Re=1>=b.offsetWidth&&b.offsetHeight>2&&!c)}return Re?Je("span","\u200b"):Je("span","\u00a0",null,"display: inline-block; width: 1px; margin-right: -1px")}function Xe(a,b,c,d){if(!a)return d(b,c,"ltr");for(var e=0;a.length>e;++e){var f=a[e];(c>f.from&&f.to>b||b==c&&f.to==b)&&d(Math.max(f.from,b),Math.min(f.to,c),1==f.level?"rtl":"ltr")}}function Ye(a){return a.level%2?a.to:a.from}function Ze(a){return a.level%2?a.from:a.to}function $e(a){var b=Ud(a);return b?Ye(b[0]):0}function _e(a){var b=Ud(a);return b?Ze(ye(b)):a.text.length}function af(a,b){var c=Md(a.doc,b),d=fd(a.doc,c);d!=c&&(b=Qd(d));var e=Ud(d),f=e?e[0].level%2?_e(d):$e(d):0;return{line:b,ch:f}}function bf(a,b){for(var c,d;c=ed(d=Md(a.doc,b));)b=c.find().to.line;var e=Ud(d),f=e?e[0].level%2?$e(d):_e(d):d.text.length;return{line:b,ch:f}}function cf(a,b,c,d){var e=Ud(a);if(!e)return df(a,b,c,d);for(var f=d?function(b,c){do b+=c;while(b>0&&Ie.test(a.text.charAt(b)));return b}:function(a,b){return a+b},g=e[0].level,h=0;e.length>h;++h){var i=e[h],j=i.level%2==g;if(b>i.from&&i.to>b||j&&(i.from==b||i.to==b))break}for(var k=f(b,i.level%2?-c:c);null!=k;)if(i.level%2==g){if(!(i.from>k||k>i.to))break;i=e[h+=c],k=i&&(c>0==i.level%2?f(i.to,-1):f(i.from,1))}else if(k==Ye(i))i=e[--h],k=i&&Ze(i);else{if(k!=Ze(i))break;i=e[++h],k=i&&Ye(i)}return 0>k||k>a.text.length?null:k}function df(a,b,c,d){var e=b+c;if(d)for(;e>0&&Ie.test(a.text.charAt(e));)e+=c;return 0>e||e>a.text.length?null:e
}var a=/gecko\/\d/i.test(navigator.userAgent),b=/MSIE \d/.test(navigator.userAgent),c=b&&(null==document.documentMode||8>document.documentMode),d=b&&(null==document.documentMode||9>document.documentMode),e=/WebKit\//.test(navigator.userAgent),f=e&&/Qt\/\d+\.\d+/.test(navigator.userAgent),g=/Chrome\//.test(navigator.userAgent),h=/Opera\//.test(navigator.userAgent),i=/Apple Computer/.test(navigator.vendor),j=/KHTML\//.test(navigator.userAgent),k=/Mac OS X 1\d\D([7-9]|\d\d)\D/.test(navigator.userAgent),l=/Mac OS X 1\d\D([8-9]|\d\d)\D/.test(navigator.userAgent),m=/PhantomJS/.test(navigator.userAgent),n=/AppleWebKit/.test(navigator.userAgent)&&/Mobile\/\w+/.test(navigator.userAgent),o=n||/Android|webOS|BlackBerry|Opera Mini|Opera Mobi|IEMobile/i.test(navigator.userAgent),p=n||/Mac/.test(navigator.platform),q=/windows/i.test(navigator.platform),r=h&&navigator.userAgent.match(/Version\/(\d*\.\d*)/);r&&(r=Number(r[1]));var nb,Fb,Gb,s=p&&(f||h&&(null==r||12.11>r)),t=!1,u=!1,Nb=0,Ob=null;b?Ob=-.53:a?Ob=15:g?Ob=-.7:i&&(Ob=-1/3);var Sb,$b,Vb=null;v.prototype={focus:function(){window.focus(),Ab(this),Yb(this),xb(this)},setOption:function(a,b){var c=this.options,d=c[a];(c[a]!=b||"mode"==a)&&(c[a]=b,Cc.hasOwnProperty(a)&&sb(this,Cc[a])(this,b,d))},getOption:function(a){return this.options[a]},getDoc:function(){return this.doc},addKeyMap:function(a){this.state.keyMaps.push(a)},removeKeyMap:function(a){for(var b=this.state.keyMaps,c=0;b.length>c;++c)if(("string"==typeof a?b[c].name:b[c])==a)return b.splice(c,1),!0},addOverlay:sb(null,function(a,b){var c=a.token?a:v.getMode(this.options,a);if(c.startState)throw Error("Overlays may not be stateful.");this.state.overlays.push({mode:c,modeSpec:a,opaque:b&&b.opaque}),this.state.modeGen++,vb(this)}),removeOverlay:sb(null,function(a){for(var b=this.state.overlays,c=0;b.length>c;++c)if(b[c].modeSpec==a)return b.splice(c,1),this.state.modeGen++,vb(this),void 0}),indentLine:sb(null,function(a,b,c){"string"!=typeof b&&(b=null==b?this.options.smartIndent?"smart":"prev":b?"add":"subtract"),oc(this.doc,a)&&xc(this,a,b,c)}),indentSelection:sb(null,function(a){var b=this.doc.sel;if(jc(b.from,b.to))return xc(this,b.from.line,a);for(var c=b.to.line-(b.to.ch?0:1),d=b.from.line;c>=d;++d)xc(this,d,a)}),getTokenAt:function(a){var b=this.doc;a=nc(b,a);for(var c=bb(this,a.line),d=this.doc.mode,e=Md(b,a.line),f=new Rc(e.text,this.options.tabSize);f.pos<a.ch&&!f.eol();){f.start=f.pos;var g=d.token(f,c)}return{start:f.start,end:f.pos,string:f.current(),className:g||null,type:g||null,state:c}},getStateAfter:function(a){var b=this.doc;return a=mc(b,null==a?b.first+b.size-1:a),bb(this,a+1)},cursorCoords:function(a,b){var c,d=this.doc.sel;return c=null==a?d.head:"object"==typeof a?nc(this.doc,a):a?d.from:d.to,kb(this,c,b||"page")},charCoords:function(a,b){return jb(this,nc(this.doc,a),b||"page")},coordsChar:function(a){var b=this.display.lineSpace.getBoundingClientRect();return lb(this,a.left-b.left,a.top-b.top)},defaultTextHeight:function(){return ob(this.display)},setGutterMarker:sb(null,function(a,b,c){return yc(this,a,function(a){var d=a.gutterMarkers||(a.gutterMarkers={});return d[b]=c,!c&&He(d)&&(a.gutterMarkers=null),!0})}),clearGutter:sb(null,function(a){var b=this,c=b.doc,d=c.first;c.iter(function(c){c.gutterMarkers&&c.gutterMarkers[a]&&(c.gutterMarkers[a]=null,vb(b,d,d+1),He(c.gutterMarkers)&&(c.gutterMarkers=null)),++d})}),addLineClass:sb(null,function(a,b,c){return yc(this,a,function(a){var d="text"==b?"textClass":"background"==b?"bgClass":"wrapClass";if(a[d]){if(RegExp("\\b"+c+"\\b").test(a[d]))return!1;a[d]+=" "+c}else a[d]=c;return!0})}),removeLineClass:sb(null,function(a,b,c){return yc(this,a,function(a){var d="text"==b?"textClass":"background"==b?"bgClass":"wrapClass",e=a[d];if(!e)return!1;if(null==c)a[d]=null;else{var f=e.replace(RegExp("^"+c+"\\b\\s*|\\s*\\b"+c+"\\b"),"");if(f==e)return!1;a[d]=f||null}return!0})}),addLineWidget:sb(null,function(a,b,c){return nd(this,a,b,c)}),removeLineWidget:function(a){a.clear()},lineInfo:function(a){if("number"==typeof a){if(!oc(this.doc,a))return null;var b=a;if(a=Md(this.doc,a),!a)return null}else{var b=Qd(a);if(null==b)return null}return{line:b,handle:a,text:a.text,gutterMarkers:a.gutterMarkers,textClass:a.textClass,bgClass:a.bgClass,wrapClass:a.wrapClass,widgets:a.widgets}},getViewport:function(){return{from:this.display.showingFrom,to:this.display.showingTo}},addWidget:function(a,b,c,d,e){var f=this.display;a=kb(this,nc(this.doc,a));var g=a.top,h=a.left;if(b.style.position="absolute",f.sizer.appendChild(b),"over"==d)g=a.top;else if("near"==d){var i=Math.max(f.wrapper.clientHeight,this.doc.height),j=Math.max(f.sizer.clientWidth,f.lineSpace.clientWidth);a.bottom+b.offsetHeight>i&&a.top>b.offsetHeight&&(g=a.top-b.offsetHeight),h+b.offsetWidth>j&&(h=j-b.offsetWidth)}b.style.top=g+cb(f)+"px",b.style.left=b.style.right="","right"==e?(h=f.sizer.clientWidth-b.offsetWidth,b.style.right="0px"):("left"==e?h=0:"middle"==e&&(h=(f.sizer.clientWidth-b.offsetWidth)/2),b.style.left=h+"px"),c&&vc(this,h,g,h+b.offsetWidth,g+b.offsetHeight)},triggerOnKeyDown:sb(null,Wb),execCommand:function(a){return Mc[a](this)},moveH:sb(null,function(a,b){var c=this.doc.sel,d=0>a?c.from:c.to;(c.shift||c.extend||jc(c.from,c.to))&&(d=zc(this.doc,a,b,this.options.rtlMoveVisually)),pc(this.doc,d,d,a)}),deleteH:sb(null,function(a,b){var c=this.doc.sel;jc(c.from,c.to)?ic(this.doc,"",c.from,zc(this.doc,a,b,!1),"delete"):ic(this.doc,"",c.from,c.to,"delete"),this.curOp.userSelChange=!0}),moveV:sb(null,function(a,b){var h,c=this.doc,d=this.display,e=c.sel.head,f=kb(this,e,"div"),g=f.left;if(null!=c.sel.goalColumn&&(g=c.sel.goalColumn),"page"==b){var i=Math.min(d.wrapper.clientHeight,window.innerHeight||document.documentElement.clientHeight);h=f.top+a*i}else"line"==b&&(h=a>0?f.bottom+3:f.top-3);do{var j=lb(this,g,h);h+=5*a}while(j.outside&&(0>a?h>0:c.height>h));"page"==b&&(d.scrollbarV.scrollTop+=jb(this,j,"div").top-f.top),pc(this.doc,j,j,a),c.sel.goalColumn=g}),toggleOverwrite:function(){(this.state.overwrite=!this.state.overwrite)?this.display.cursor.className+=" CodeMirror-overwrite":this.display.cursor.className=this.display.cursor.className.replace(" CodeMirror-overwrite","")},scrollTo:function(a,b){null!=a&&(this.display.scrollbarH.scrollLeft=this.display.scroller.scrollLeft=a),null!=b&&(this.display.scrollbarV.scrollTop=this.display.scroller.scrollTop=b),O(this,[])},getScrollInfo:function(){var a=this.display.scroller,b=se;return{left:a.scrollLeft,top:a.scrollTop,height:a.scrollHeight-b,width:a.scrollWidth-b,clientHeight:a.clientHeight-b,clientWidth:a.clientWidth-b}},scrollIntoView:function(a){"number"==typeof a&&(a={line:a,ch:0}),a&&null==a.line?vc(this,a.left,a.top,a.right,a.bottom):(a=a?nc(this.doc,a):this.doc.sel.head,uc(this,a))},setSize:function(a,b){function c(a){return"number"==typeof a||/^\d+$/.test(a+"")?a+"px":a}null!=a&&(this.display.wrapper.style.width=c(a)),null!=b&&(this.display.wrapper.style.height=c(b)),this.refresh()},on:function(a,b){le(this,a,b)},off:function(a,b){me(this,a,b)},operation:function(a){return ub(this,a)},refresh:sb(null,function(){hb(this),this.curOp.updateScrollPos={scrollTop:this.doc.scrollTop,scrollLeft:this.doc.scrollLeft},vb(this)}),swapDoc:sb(null,function(a){var b=this.doc;return b.cm=null,Ld(this,a),hb(this),this.curOp.updateScrollPos={scrollTop:a.scrollTop,scrollLeft:a.scrollLeft},b}),getInputField:function(){return this.display.input},getWrapperElement:function(){return this.display.wrapper},getScrollerElement:function(){return this.display.scroller},getGutterElement:function(){return this.display.gutters}};var Cc=v.optionHandlers={},Dc=v.defaults={},Fc=v.Init={toString:function(){return"CodeMirror.Init"}};Ec("value","",function(a,b){a.setValue(b)},!0),Ec("mode",null,function(a,b){a.doc.modeOption=b,x(a)},!0),Ec("indentUnit",2,x,!0),Ec("indentWithTabs",!1),Ec("smartIndent",!0),Ec("tabSize",4,function(a){x(a),hb(a),vb(a)},!0),Ec("electricChars",!0),Ec("rtlMoveVisually",!q),Ec("theme","default",function(a){C(a),D(a)},!0),Ec("keyMap","default",B),Ec("extraKeys",null),Ec("onKeyEvent",null),Ec("onDragEvent",null),Ec("lineWrapping",!1,y,!0),Ec("gutters",[],function(a){H(a.options),D(a)},!0),Ec("fixedGutter",!0,function(a,b){a.display.gutters.style.left=b?N(a.display)+"px":"0",a.refresh()},!0),Ec("lineNumbers",!1,function(a){H(a.options),D(a)},!0),Ec("firstLineNumber",1,D,!0),Ec("lineNumberFormatter",function(a){return a},D,!0),Ec("showCursorWhenSelecting",!1,W,!0),Ec("readOnly",!1,function(a,b){"nocursor"==b?(Zb(a),a.display.input.blur()):b||zb(a,!0)}),Ec("dragDrop",!0),Ec("cursorBlinkRate",530),Ec("cursorHeight",1),Ec("workTime",100),Ec("workDelay",100),Ec("flattenSpans",!0),Ec("pollInterval",100),Ec("undoDepth",40,function(a,b){a.doc.history.undoDepth=b}),Ec("viewportMargin",10,function(a){a.refresh()},!0),Ec("tabindex",null,function(a,b){a.display.input.tabIndex=b||""}),Ec("autofocus",null);var Gc=v.modes={},Hc=v.mimeModes={};v.defineMode=function(a,b){if(v.defaults.mode||"null"==a||(v.defaults.mode=a),arguments.length>2){b.dependencies=[];for(var c=2;arguments.length>c;++c)b.dependencies.push(arguments[c])}Gc[a]=b},v.defineMIME=function(a,b){Hc[a]=b},v.resolveMode=function(a){if("string"==typeof a&&Hc.hasOwnProperty(a))a=Hc[a];else if("string"==typeof a&&/^[\w\-]+\/[\w\-]+\+xml$/.test(a))return v.resolveMode("application/xml");return"string"==typeof a?{name:a}:a||{name:"null"}},v.getMode=function(a,b){b=v.resolveMode(b);var c=Gc[b.name];if(!c)return v.getMode(a,"text/plain");var d=c(a,b);if(Ic.hasOwnProperty(b.name)){var e=Ic[b.name];for(var f in e)e.hasOwnProperty(f)&&(d.hasOwnProperty(f)&&(d["_"+f]=d[f]),d[f]=e[f])}return d.name=b.name,d},v.defineMode("null",function(){return{token:function(a){a.skipToEnd()}}}),v.defineMIME("text/plain","null");var Ic=v.modeExtensions={};v.extendMode=function(a,b){var c=Ic.hasOwnProperty(a)?Ic[a]:Ic[a]={};Ce(b,c)},v.defineExtension=function(a,b){v.prototype[a]=b},v.defineOption=Ec;var Jc=[];v.defineInitHook=function(a){Jc.push(a)},v.copyState=Kc,v.startState=Lc,v.innerMode=function(a,b){for(;a.innerMode;){var c=a.innerMode(b);b=c.state,a=c.mode}return c||{mode:a,state:b}};var Mc=v.commands={selectAll:function(a){a.setSelection({line:a.firstLine(),ch:0},{line:a.lastLine()})},killLine:function(a){var b=a.getCursor(!0),c=a.getCursor(!1),d=!jc(b,c);d||a.getLine(b.line).length!=b.ch?a.replaceRange("",b,d?c:{line:b.line},"delete"):a.replaceRange("",b,{line:b.line+1,ch:0},"delete")},deleteLine:function(a){var b=a.getCursor().line;a.replaceRange("",{line:b,ch:0},{line:b},"delete")},undo:function(a){a.undo()},redo:function(a){a.redo()},goDocStart:function(a){a.extendSelection({line:a.firstLine(),ch:0})},goDocEnd:function(a){a.extendSelection({line:a.lastLine()})},goLineStart:function(a){a.extendSelection(af(a,a.getCursor().line))},goLineStartSmart:function(a){var b=a.getCursor(),c=af(a,b.line),d=a.getLineHandle(c.line),e=Ud(d);if(e&&0!=e[0].level)a.extendSelection(c);else{var f=Math.max(0,d.text.search(/\S/)),g=b.line==c.line&&f>=b.ch&&b.ch;a.extendSelection({line:c.line,ch:g?0:f})}},goLineEnd:function(a){a.extendSelection(bf(a,a.getCursor().line))},goLineUp:function(a){a.moveV(-1,"line")},goLineDown:function(a){a.moveV(1,"line")},goPageUp:function(a){a.moveV(-1,"page")},goPageDown:function(a){a.moveV(1,"page")},goCharLeft:function(a){a.moveH(-1,"char")},goCharRight:function(a){a.moveH(1,"char")},goColumnLeft:function(a){a.moveH(-1,"column")},goColumnRight:function(a){a.moveH(1,"column")},goWordLeft:function(a){a.moveH(-1,"word")},goWordRight:function(a){a.moveH(1,"word")},delCharBefore:function(a){a.deleteH(-1,"char")},delCharAfter:function(a){a.deleteH(1,"char")},delWordBefore:function(a){a.deleteH(-1,"word")},delWordAfter:function(a){a.deleteH(1,"word")},indentAuto:function(a){a.indentSelection("smart")},indentMore:function(a){a.indentSelection("add")},indentLess:function(a){a.indentSelection("subtract")},insertTab:function(a){a.replaceSelection("	","end","input")},defaultTab:function(a){a.somethingSelected()?a.indentSelection("add"):a.replaceSelection("	","end","input")},transposeChars:function(a){var b=a.getCursor(),c=a.getLine(b.line);b.ch>0&&b.ch<c.length-1&&a.replaceRange(c.charAt(b.ch)+c.charAt(b.ch-1),{line:b.line,ch:b.ch-1},{line:b.line,ch:b.ch+1})},newlineAndIndent:function(a){sb(a,function(){a.replaceSelection("\n","end","input"),a.indentLine(a.getCursor().line,null,!0)})()},toggleOverwrite:function(a){a.toggleOverwrite()}},Nc=v.keyMap={};Nc.basic={Left:"goCharLeft",Right:"goCharRight",Up:"goLineUp",Down:"goLineDown",End:"goLineEnd",Home:"goLineStartSmart",PageUp:"goPageUp",PageDown:"goPageDown",Delete:"delCharAfter",Backspace:"delCharBefore",Tab:"defaultTab","Shift-Tab":"indentAuto",Enter:"newlineAndIndent",Insert:"toggleOverwrite"},Nc.pcDefault={"Ctrl-A":"selectAll","Ctrl-D":"deleteLine","Ctrl-Z":"undo","Shift-Ctrl-Z":"redo","Ctrl-Y":"redo","Ctrl-Home":"goDocStart","Alt-Up":"goDocStart","Ctrl-End":"goDocEnd","Ctrl-Down":"goDocEnd","Ctrl-Left":"goWordLeft","Ctrl-Right":"goWordRight","Alt-Left":"goLineStart","Alt-Right":"goLineEnd","Ctrl-Backspace":"delWordBefore","Ctrl-Delete":"delWordAfter","Ctrl-S":"save","Ctrl-F":"find","Ctrl-G":"findNext","Shift-Ctrl-G":"findPrev","Shift-Ctrl-F":"replace","Shift-Ctrl-R":"replaceAll","Ctrl-[":"indentLess","Ctrl-]":"indentMore",fallthrough:"basic"},Nc.macDefault={"Cmd-A":"selectAll","Cmd-D":"deleteLine","Cmd-Z":"undo","Shift-Cmd-Z":"redo","Cmd-Y":"redo","Cmd-Up":"goDocStart","Cmd-End":"goDocEnd","Cmd-Down":"goDocEnd","Alt-Left":"goWordLeft","Alt-Right":"goWordRight","Cmd-Left":"goLineStart","Cmd-Right":"goLineEnd","Alt-Backspace":"delWordBefore","Ctrl-Alt-Backspace":"delWordAfter","Alt-Delete":"delWordAfter","Cmd-S":"save","Cmd-F":"find","Cmd-G":"findNext","Shift-Cmd-G":"findPrev","Cmd-Alt-F":"replace","Shift-Cmd-Alt-F":"replaceAll","Cmd-[":"indentLess","Cmd-]":"indentMore",fallthrough:["basic","emacsy"]},Nc["default"]=p?Nc.macDefault:Nc.pcDefault,Nc.emacsy={"Ctrl-F":"goCharRight","Ctrl-B":"goCharLeft","Ctrl-P":"goLineUp","Ctrl-N":"goLineDown","Alt-F":"goWordRight","Alt-B":"goWordLeft","Ctrl-A":"goLineStart","Ctrl-E":"goLineEnd","Ctrl-V":"goPageDown","Shift-Ctrl-V":"goPageUp","Ctrl-D":"delCharAfter","Ctrl-H":"delCharBefore","Alt-D":"delWordAfter","Alt-Backspace":"delWordBefore","Ctrl-K":"killLine","Ctrl-T":"transposeChars"},v.isModifierKey=Qc,v.fromTextArea=function(a,b){function e(){a.value=i.getValue()}if(b||(b={}),b.value=a.value,!b.tabindex&&a.tabindex&&(b.tabindex=a.tabindex),null==b.autofocus){var c=document.body;try{c=document.activeElement}catch(d){}b.autofocus=c==a||null!=a.getAttribute("autofocus")&&c==document.body}if(a.form){le(a.form,"submit",e);var f=a.form,g=f.submit;try{var h=f.submit=function(){e(),f.submit=g,f.submit(),f.submit=h}}catch(d){}}a.style.display="none";var i=v(function(b){a.parentNode.insertBefore(b,a.nextSibling)},b);return i.save=e,i.getTextArea=function(){return a},i.toTextArea=function(){e(),a.parentNode.removeChild(i.getWrapperElement()),a.style.display="",a.form&&(me(a.form,"submit",e),"function"==typeof a.form.submit&&(a.form.submit=g))},i},Rc.prototype={eol:function(){return this.pos>=this.string.length},sol:function(){return 0==this.pos},peek:function(){return this.string.charAt(this.pos)||void 0},next:function(){return this.pos<this.string.length?this.string.charAt(this.pos++):void 0},eat:function(a){var b=this.string.charAt(this.pos);if("string"==typeof a)var c=b==a;else var c=b&&(a.test?a.test(b):a(b));return c?(++this.pos,b):void 0},eatWhile:function(a){for(var b=this.pos;this.eat(a););return this.pos>b},eatSpace:function(){for(var a=this.pos;/[\s\u00a0]/.test(this.string.charAt(this.pos));)++this.pos;return this.pos>a},skipToEnd:function(){this.pos=this.string.length},skipTo:function(a){var b=this.string.indexOf(a,this.pos);return b>-1?(this.pos=b,!0):void 0},backUp:function(a){this.pos-=a},column:function(){return ve(this.string,this.start,this.tabSize)},indentation:function(){return ve(this.string,null,this.tabSize)},match:function(a,b,c){if("string"!=typeof a){var e=this.string.slice(this.pos).match(a);return e&&e.index>0?null:(e&&b!==!1&&(this.pos+=e[0].length),e)}var d=function(a){return c?a.toLowerCase():a};return d(this.string).indexOf(d(a),this.pos)==this.pos?(b!==!1&&(this.pos+=a.length),!0):void 0},current:function(){return this.string.slice(this.start,this.pos)}},v.StringStream=Rc,v.TextMarker=Sc,Sc.prototype.clear=function(){if(!this.explicitlyCleared){var a=this.doc.cm,b=a&&!a.curOp;b&&qb(a);for(var c=null,d=null,e=0;this.lines.length>e;++e){var f=this.lines[e],g=Wc(f.markedSpans,this);null!=g.to&&(d=Qd(f)),f.markedSpans=Xc(f.markedSpans,g),null!=g.from?c=Qd(f):this.collapsed&&!gd(f)&&a&&Pd(f,ob(a.display))}if(a&&this.collapsed&&!a.options.lineWrapping)for(var e=0;this.lines.length>e;++e){var h=fd(a.doc,this.lines[e]),i=F(a.doc,h);i>a.display.maxLineLength&&(a.display.maxLine=h,a.display.maxLineLength=i,a.display.maxLineChanged=!0)}null!=c&&a&&vb(a,c,d+1),this.lines.length=0,this.explicitlyCleared=!0,this.collapsed&&this.doc.cantEdit&&(this.doc.cantEdit=!1,a&&rc(a)),b&&rb(a),qe(this,"clear")}},Sc.prototype.find=function(){for(var a,b,c=0;this.lines.length>c;++c){var d=this.lines[c],e=Wc(d.markedSpans,this);if(null!=e.from||null!=e.to){var f=Qd(d);null!=e.from&&(a={line:f,ch:e.from}),null!=e.to&&(b={line:f,ch:e.to})}}return"bookmark"==this.type?a:a&&{from:a,to:b}},Sc.prototype.getOptions=function(a){var b=this.replacedWith;return{className:this.className,inclusiveLeft:this.inclusiveLeft,inclusiveRight:this.inclusiveRight,atomic:this.atomic,collapsed:this.collapsed,clearOnEnter:this.clearOnEnter,replacedWith:a?b&&b.cloneNode(!0):b,readOnly:this.readOnly,startStyle:this.startStyle,endStyle:this.endStyle}},Sc.prototype.attachLine=function(a){if(!this.lines.length&&this.doc.cm){var b=this.doc.cm.curOp;b.maybeHiddenMarkers&&-1!=Ae(b.maybeHiddenMarkers,this)||(b.maybeUnhiddenMarkers||(b.maybeUnhiddenMarkers=[])).push(this)}this.lines.push(a)},Sc.prototype.detachLine=function(a){if(this.lines.splice(Ae(this.lines,a),1),!this.lines.length&&this.doc.cm){var b=this.doc.cm.curOp;(b.maybeHiddenMarkers||(b.maybeHiddenMarkers=[])).push(this)}},v.SharedTextMarker=Uc,Uc.prototype.clear=function(){if(!this.explicitlyCleared){this.explicitlyCleared=!0;for(var a=0;this.markers.length>a;++a)this.markers[a].clear();qe(this,"clear")}},Uc.prototype.find=function(){return this.primary.find()},Uc.prototype.getOptions=function(a){var b=this.primary.getOptions(a);return b.shared=!0,b};var kd=v.LineWidget=function(a,b,c){for(var d in c)c.hasOwnProperty(d)&&(this[d]=c[d]);this.cm=a,this.node=b};kd.prototype.clear=ld(function(){var a=this.line.widgets,b=Qd(this.line);if(null!=b&&a){for(var c=0;a.length>c;++c)a[c]==this&&a.splice(c--,1);a.length||(this.line.widgets=null),Pd(this.line,Math.max(0,this.line.height-md(this))),vb(this.cm,b,b+1)}}),kd.prototype.changed=ld(function(){var a=this.height;this.height=null;var b=md(this)-a;if(b){Pd(this.line,this.line.height+b);var c=Qd(this.line);vb(this.cm,c,c+1)}});var vd={},yd=/[\t\u0000-\u0019\u200b\u2028\u2029\uFEFF]/g;Ed.prototype={chunkSize:function(){return this.lines.length},removeInner:function(a,b){for(var c=a,d=a+b;d>c;++c){var e=this.lines[c];this.height-=e.height,qd(e),qe(e,"delete")}this.lines.splice(a,b)},collapse:function(a){a.splice.apply(a,[a.length,0].concat(this.lines))},insertInner:function(a,b,c){this.height+=c,this.lines=this.lines.slice(0,a).concat(b).concat(this.lines.slice(a));for(var d=0,e=b.length;e>d;++d)b[d].parent=this},iterN:function(a,b,c){for(var d=a+b;d>a;++a)if(c(this.lines[a]))return!0}},Fd.prototype={chunkSize:function(){return this.size},removeInner:function(a,b){this.size-=b;for(var c=0;this.children.length>c;++c){var d=this.children[c],e=d.chunkSize();if(e>a){var f=Math.min(b,e-a),g=d.height;if(d.removeInner(a,f),this.height-=g-d.height,e==f&&(this.children.splice(c--,1),d.parent=null),0==(b-=f))break;a=0}else a-=e}if(25>this.size-b){var h=[];this.collapse(h),this.children=[new Ed(h)],this.children[0].parent=this}},collapse:function(a){for(var b=0,c=this.children.length;c>b;++b)this.children[b].collapse(a)},insertInner:function(a,b,c){this.size+=b.length,this.height+=c;for(var d=0,e=this.children.length;e>d;++d){var f=this.children[d],g=f.chunkSize();if(g>=a){if(f.insertInner(a,b,c),f.lines&&f.lines.length>50){for(;f.lines.length>50;){var h=f.lines.splice(f.lines.length-25,25),i=new Ed(h);f.height-=i.height,this.children.splice(d+1,0,i),i.parent=this}this.maybeSpill()}break}a-=g}},maybeSpill:function(){if(!(10>=this.children.length)){var a=this;do{var b=a.children.splice(a.children.length-5,5),c=new Fd(b);if(a.parent){a.size-=c.size,a.height-=c.height;var e=Ae(a.parent.children,a);a.parent.children.splice(e+1,0,c)}else{var d=new Fd(a.children);d.parent=a,a.children=[d,c],a=d}c.parent=a.parent}while(a.children.length>10);a.parent.maybeSpill()}},iterN:function(a,b,c){for(var d=0,e=this.children.length;e>d;++d){var f=this.children[d],g=f.chunkSize();if(g>a){var h=Math.min(b,g-a);if(f.iterN(a,h,c))return!0;if(0==(b-=h))break;a=0}else a-=g}}};var Gd=0,Hd=v.Doc=function(a,b,c){if(!(this instanceof Hd))return new Hd(a,b,c);null==c&&(c=0),Fd.call(this,[new Ed([od("",null)])]),this.first=c,this.scrollTop=this.scrollLeft=0,this.cantEdit=!1,this.history=Vd(),this.frontier=c;var d={line:c,ch:0};this.sel={from:d,to:d,head:d,anchor:d,shift:!1,extend:!1,goalColumn:null},this.id=++Gd,this.modeOption=b,"string"==typeof a&&(a=Te(a)),Dd(this,{from:d,to:d,text:a},null,{head:d,anchor:d})};Hd.prototype=Be(Fd.prototype,{iter:function(a,b,c){c?this.iterN(a-this.first,b-(a-this.first),c):this.iterN(this.first,this.first+this.size,a)},insert:function(a,b){for(var c=0,d=0,e=b.length;e>d;++d)c+=b[d].height;this.insertInner(a-this.first,b,c)},remove:function(a,b){this.removeInner(a-this.first,b)},getValue:function(a){var b=Od(this,this.first,this.first+this.size);return a===!1?b:b.join(a||"\n")},setValue:function(a){var b={line:this.first,ch:0},c=this.first+this.size-1;cc(this,{from:b,to:{line:c,ch:Md(this,c).text.length},text:Te(a),origin:"setValue"},{head:b,anchor:b},!0)},replaceRange:function(a,b,c){b=nc(this,b),c=c?nc(this,c):b,ic(this,a,b,c)},getRange:function(a,b,c){var d=Nd(this,nc(this,a),nc(this,b));return c===!1?d:d.join(c||"\n")},getLine:function(a){var b=this.getLineHandle(a);return b&&b.text},setLine:function(a,b){oc(this,a)&&ic(this,b,{line:a,ch:0},{line:a,ch:Md(this,a).text.length})},removeLine:function(a){oc(this,a)&&ic(this,"",{line:a,ch:0},nc(this,{line:a+1,ch:0}))},getLineHandle:function(a){return oc(this,a)?Md(this,a):void 0},getLineNumber:function(a){return Qd(a)},lineCount:function(){return this.size},firstLine:function(){return this.first},lastLine:function(){return this.first+this.size-1},clipPos:function(a){return nc(this,a)},getCursor:function(a){var c,b=this.sel;return c=null==a||"head"==a?b.head:"anchor"==a?b.anchor:"end"==a||a===!1?b.to:b.from,lc(c)},somethingSelected:function(){return!jc(this.sel.head,this.sel.anchor)},setCursor:tb(function(a,b,c){var d=nc(this,"number"==typeof a?{line:a,ch:b||0}:a);c?pc(this,d):qc(this,d,d)}),setSelection:tb(function(a,b){qc(this,nc(this,a),nc(this,b||a))}),extendSelection:tb(function(a,b){pc(this,nc(this,a),b&&nc(this,b))}),getSelection:function(a){return this.getRange(this.sel.from,this.sel.to,a)},replaceSelection:function(a,b,c){cc(this,{from:this.sel.from,to:this.sel.to,text:Te(a),origin:c},b||"around")},undo:function(){ec(this,"undo")},redo:function(){ec(this,"redo")},setExtending:function(a){this.sel.extend=a},historySize:function(){var a=this.history;return{undo:a.done.length,redo:a.undone.length}},clearHistory:function(){this.history=Vd()},markClean:function(){this.history.dirtyCounter=0,this.history.lastOp=this.history.lastOrigin=null},isClean:function(){return 0==this.history.dirtyCounter},getHistory:function(){return{done:_d(this.history.done),undone:_d(this.history.undone)}},setHistory:function(a){var b=this.history=Vd();b.done=a.done.slice(0),b.undone=a.undone.slice(0)},markText:function(a,b,c){return Tc(this,nc(this,a),nc(this,b),c,"range")},setBookmark:function(a,b){return a=nc(this,a),Tc(this,a,a,b?{replacedWith:b}:{},"bookmark")},findMarksAt:function(a){a=nc(this,a);var b=[],c=Md(this,a.line).markedSpans;if(c)for(var d=0;c.length>d;++d){var e=c[d];(null==e.from||e.from<=a.ch)&&(null==e.to||e.to>=a.ch)&&b.push(e.marker.parent||e.marker)}return b},posFromIndex:function(a){var b,c=this.first;return this.iter(function(d){var e=d.text.length+1;return e>a?(b=a,!0):(a-=e,++c,void 0)}),nc(this,{line:c,ch:b})},indexFromPos:function(a){a=nc(this,a);var b=a.ch;return a.line<this.first||0>a.ch?0:(this.iter(this.first,a.line,function(a){b+=a.text.length+1}),b)},copy:function(a){var b=new Hd(Od(this,this.first,this.first+this.size),this.modeOption,this.first);return b.scrollTop=this.scrollTop,b.scrollLeft=this.scrollLeft,b.sel={from:this.sel.from,to:this.sel.to,head:this.sel.head,anchor:this.sel.anchor,shift:this.sel.shift,extend:!1,goalColumn:this.sel.goalColumn},a&&(b.history.undoDepth=this.history.undoDepth,b.setHistory(this.getHistory())),b},linkedDoc:function(a){a||(a={});var b=this.first,c=this.first+this.size;null!=a.from&&a.from>b&&(b=a.from),null!=a.to&&c>a.to&&(c=a.to);var d=new Hd(Od(this,b,c),a.mode||this.modeOption,b);return a.sharedHist&&(d.history=this.history),(this.linked||(this.linked=[])).push({doc:d,sharedHist:a.sharedHist}),d.linked=[{doc:this,isParent:!0,sharedHist:a.sharedHist}],d},unlinkDoc:function(a){if(a instanceof v&&(a=a.doc),this.linked)for(var b=0;this.linked.length>b;++b){var c=this.linked[b];if(c.doc==a){this.linked.splice(b,1),a.unlinkDoc(this);break}}if(a.history==this.history){var d=[a.id];Kd(a,function(a){d.push(a.id)},!0),a.history=Vd(),a.history.done=_d(this.history.done,d),a.history.undone=_d(this.history.undone,d)}},iterLinkedDocs:function(a){Kd(this,a)},getMode:function(){return this.mode},getEditor:function(){return this.cm}});for(var Id="setValue getValue getSelection replaceSelection undo redo historySize clearHistory markClean isClean getHistory setHistory markText setBookmark findMarksAt lineCount firstLine lastLine clipPos getCursor somethingSelected setCursor setSelection extendSelection setExtending getLine setLine removeLine getMode replaceRange getRange getLineHandle getLineNumber posFromIndex indexFromPos linkedDoc unlinkDoc iterLinkedDocs".split(" "),Jd=0;Id.length>Jd;++Jd)(function(a){var b=Hd.prototype[a];v.prototype[a]=function(){return b.apply(this.doc,arguments)}})(Id[Jd]);v.e_stop=he,v.e_preventDefault=fe,v.e_stopPropagation=ge;var oe,pe=0;v.on=le,v.off=me,v.signal=ne;var se=30,te=v.Pass={toString:function(){return"CodeMirror.Pass"}};ue.prototype={set:function(a,b){clearTimeout(this.id),this.id=setTimeout(b,a)}},v.countColumn=ve;var we=[""],Fe=/[\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc]/,Ie=/[\u0300-\u036F\u0483-\u0487\u0488-\u0489\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\uA66F\uA670-\uA672\uA674-\uA67D\uA69F]/,Ne=function(){if(d)return!1;var a=Je("div");return"draggable"in a||"dragDrop"in a}(),Oe=/^$/;a?Oe=/$'/:i?Oe=/\-[^ \-?]|\?[^ !'\"\),.\-\/:;\?\]\}]/:g&&(Oe=/\-[^ \-\.?]|\?[^ \-\.?\]\}:;!'\"\),\/]|[\.!\"#&%\)*+,:;=>\]|\}~][\(\{\[<]|\$'/);var Pe,Re,Te=3!="\n\nb".split(/\n/).length?function(a){for(var b=0,c=[],d=a.length;d>=b;){var e=a.indexOf("\n",b);-1==e&&(e=a.length);var f=a.slice(b,"\r"==a.charAt(e-1)?e-1:e),g=f.indexOf("\r");-1!=g?(c.push(f.slice(0,g)),b+=g+1):(c.push(f),b=e+1)}return c}:function(a){return a.split(/\r\n?|\n/)};v.splitLines=Te;var Ue=window.getSelection?function(a){try{return a.selectionStart!=a.selectionEnd}catch(b){return!1}}:function(a){try{var b=a.ownerDocument.selection.createRange()}catch(c){}return b&&b.parentElement()==a?0!=b.compareEndPoints("StartToEnd",b):!1},Ve=function(){var a=Je("div");return"oncopy"in a?!0:(a.setAttribute("oncopy","return;"),"function"==typeof a.oncopy)}(),We={3:"Enter",8:"Backspace",9:"Tab",13:"Enter",16:"Shift",17:"Ctrl",18:"Alt",19:"Pause",20:"CapsLock",27:"Esc",32:"Space",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"Left",38:"Up",39:"Right",40:"Down",44:"PrintScrn",45:"Insert",46:"Delete",59:";",91:"Mod",92:"Mod",93:"Mod",109:"-",107:"=",127:"Delete",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",63276:"PageUp",63277:"PageDown",63275:"End",63273:"Home",63234:"Left",63232:"Up",63235:"Right",63233:"Down",63302:"Insert",63272:"Delete"};v.keyNames=We,function(){for(var a=0;10>a;a++)We[a+48]=a+"";for(var a=65;90>=a;a++)We[a]=String.fromCharCode(a);for(var a=1;12>=a;a++)We[a+111]=We[a+63235]="F"+a}();var ef=function(){function c(c){return 255>=c?a.charAt(c):c>=1424&&1524>=c?"R":c>=1536&&1791>=c?b.charAt(c-1536):c>=1792&&2220>=c?"r":"L"}var a="bbbbbbbbbtstwsbbbbbbbbbbbbbbssstwNN%%%NNNNNN,N,N1111111111NNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNbbbbbbsbbbbbbbbbbbbbbbbbbbbbbbbbb,N%%%%NNNNLNNNNN%%11NLNNN1LNNNNNLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNLLLLLLLL",b="rrrrrrrrrrrr,rNNmmmmmmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmrrrrrrrnnnnnnnnnn%nnrrrmrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrmmmmmmmmmmmmmmmmmmmNmmmmrrrrrrrrrrrrrrrrrr",d=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/,e=/[stwN]/,f=/[LRr]/,g=/[Lb1n]/,h=/[1n]/,i="L";return function(a){if(!d.test(a))return!1;for(var l,b=a.length,j=[],k=0;b>k;++k)j.push(l=c(a.charCodeAt(k)));for(var k=0,m=i;b>k;++k){var l=j[k];"m"==l?j[k]=m:m=l}for(var k=0,n=i;b>k;++k){var l=j[k];"1"==l&&"r"==n?j[k]="n":f.test(l)&&(n=l,"r"==l&&(j[k]="R"))}for(var k=1,m=j[0];b-1>k;++k){var l=j[k];"+"==l&&"1"==m&&"1"==j[k+1]?j[k]="1":","!=l||m!=j[k+1]||"1"!=m&&"n"!=m||(j[k]=m),m=l}for(var k=0;b>k;++k){var l=j[k];if(","==l)j[k]="N";else if("%"==l){for(var o=k+1;b>o&&"%"==j[o];++o);for(var p=k&&"!"==j[k-1]||b-1>o&&"1"==j[o]?"1":"N",q=k;o>q;++q)j[q]=p;k=o-1}}for(var k=0,n=i;b>k;++k){var l=j[k];"L"==n&&"1"==l?j[k]="L":f.test(l)&&(n=l)}for(var k=0;b>k;++k)if(e.test(j[k])){for(var o=k+1;b>o&&e.test(j[o]);++o);for(var r="L"==(k?j[k-1]:i),s="L"==(b-1>o?j[o]:i),p=r||s?"L":"R",q=k;o>q;++q)j[q]=p;k=o-1}for(var u,t=[],k=0;b>k;)if(g.test(j[k])){var v=k;for(++k;b>k&&g.test(j[k]);++k);t.push({from:v,to:k,level:0})}else{var w=k,x=t.length;for(++k;b>k&&"L"!=j[k];++k);for(var q=w;k>q;)if(h.test(j[q])){q>w&&t.splice(x,0,{from:w,to:q,level:1});var y=q;for(++q;k>q&&h.test(j[q]);++q);t.splice(x,0,{from:y,to:q,level:2}),w=q}else++q;k>w&&t.splice(x,0,{from:w,to:k,level:1})}return 1==t[0].level&&(u=a.match(/^\s+/))&&(t[0].from=u[0].length,t.unshift({from:0,to:u[0].length,level:0})),1==ye(t).level&&(u=a.match(/\s+$/))&&(ye(t).to-=u[0].length,t.push({from:b-u[0].length,to:b,level:0})),t[0].level!=ye(t).level&&t.push({from:b,to:b,level:t[0].level}),t}}();return v.version="3.02 +",v}(),CodeMirror.defineMode("clike",function(a,b){function n(a,b){var c=a.next();if(j[c]){var d=j[c](a,b);if(d!==!1)return d}if('"'==c||"'"==c)return b.tokenize=o(c),b.tokenize(a,b);if(/[\[\]{}\(\),;\:\.]/.test(c))return m=c,null;if(/\d/.test(c))return a.eatWhile(/[\w\.]/),"number";if("/"==c){if(a.eat("*"))return b.tokenize=p,p(a,b);if(a.eat("/"))return a.skipToEnd(),"comment"}if(l.test(c))return a.eatWhile(l),"operator";a.eatWhile(/[\w\$_]/);var e=a.current();return f.propertyIsEnumerable(e)?(h.propertyIsEnumerable(e)&&(m="newstatement"),"keyword"):g.propertyIsEnumerable(e)?(h.propertyIsEnumerable(e)&&(m="newstatement"),"builtin"):i.propertyIsEnumerable(e)?"atom":"variable"}function o(a){return function(b,c){for(var e,d=!1,f=!1;null!=(e=b.next());){if(e==a&&!d){f=!0;break}d=!d&&"\\"==e}return(f||!d&&!k)&&(c.tokenize=null),"string"}}function p(a,b){for(var d,c=!1;d=a.next();){if("/"==d&&c){b.tokenize=null;break}c="*"==d}return"comment"}function q(a,b,c,d,e){this.indented=a,this.column=b,this.type=c,this.align=d,this.prev=e}function r(a,b,c){var d=a.indented;
return a.context&&"statement"==a.context.type&&(d=a.context.indented),a.context=new q(d,b,c,null,a.context)}function s(a){var b=a.context.type;return(")"==b||"]"==b||"}"==b)&&(a.indented=a.context.indented),a.context=a.context.prev}var m,c=a.indentUnit,d=b.statementIndentUnit||c,e=b.dontAlignCalls,f=b.keywords||{},g=b.builtin||{},h=b.blockKeywords||{},i=b.atoms||{},j=b.hooks||{},k=b.multiLineStrings,l=/[+\-*&%=<>!?|\/]/;return{startState:function(a){return{tokenize:null,context:new q((a||0)-c,0,"top",!1),indented:0,startOfLine:!0}},token:function(a,b){var c=b.context;if(a.sol()&&(null==c.align&&(c.align=!1),b.indented=a.indentation(),b.startOfLine=!0),a.eatSpace())return null;m=null;var d=(b.tokenize||n)(a,b);if("comment"==d||"meta"==d)return d;if(null==c.align&&(c.align=!0),";"!=m&&":"!=m&&","!=m||"statement"!=c.type)if("{"==m)r(b,a.column(),"}");else if("["==m)r(b,a.column(),"]");else if("("==m)r(b,a.column(),")");else if("}"==m){for(;"statement"==c.type;)c=s(b);for("}"==c.type&&(c=s(b));"statement"==c.type;)c=s(b)}else m==c.type?s(b):(("}"==c.type||"top"==c.type)&&";"!=m||"statement"==c.type&&"newstatement"==m)&&r(b,a.column(),"statement");else s(b);return b.startOfLine=!1,d},indent:function(a,b){if(a.tokenize!=n&&null!=a.tokenize)return CodeMirror.Pass;var f=a.context,g=b&&b.charAt(0);"statement"==f.type&&"}"==g&&(f=f.prev);var h=g==f.type;return"statement"==f.type?f.indented+("{"==g?0:d):e&&")"==f.type&&!h?f.indented+d:f.align?f.column+(h?0:1):f.indented+(h?0:c)},electricChars:"{}"}}),function(){function a(a){for(var b={},c=a.split(" "),d=0;c.length>d;++d)b[c[d]]=!0;return b}function c(a,b){if(!b.startOfLine)return!1;for(;;){if(!a.skipTo("\\")){a.skipToEnd(),b.tokenize=null;break}if(a.next(),a.eol()){b.tokenize=c;break}}return"meta"}function d(a,b){for(var c;null!=(c=a.next());)if('"'==c&&!a.eat('"')){b.tokenize=null;break}return"string"}function e(a,b){for(var c=0;a.length>c;++c)CodeMirror.defineMIME(a[c],b)}var b="auto if break int case long char register continue return default short do sizeof double static else struct entry switch extern typedef float union for unsigned goto while enum void const signed volatile";e(["text/x-csrc","text/x-c","text/x-chdr"],{name:"clike",keywords:a(b),blockKeywords:a("case do else for if switch while struct"),atoms:a("null"),hooks:{"#":c}}),e(["text/x-c++src","text/x-c++hdr"],{name:"clike",keywords:a(b+" asm dynamic_cast namespace reinterpret_cast try bool explicit new "+"static_cast typeid catch operator template typename class friend private "+"this using const_cast inline public throw virtual delete mutable protected "+"wchar_t"),blockKeywords:a("catch class do else finally for if struct switch try while"),atoms:a("true false null"),hooks:{"#":c}}),CodeMirror.defineMIME("text/x-java",{name:"clike",keywords:a("abstract assert boolean break byte case catch char class const continue default do double else enum extends final finally float for goto if implements import instanceof int interface long native new package private protected public return short static strictfp super switch synchronized this throw throws transient try void volatile while"),blockKeywords:a("catch class do else finally for if switch try while"),atoms:a("true false null"),hooks:{"@":function(a){return a.eatWhile(/[\w\$_]/),"meta"}}}),CodeMirror.defineMIME("text/x-csharp",{name:"clike",keywords:a("abstract as base break case catch checked class const continue default delegate do else enum event explicit extern finally fixed for foreach goto if implicit in interface internal is lock namespace new operator out override params private protected public readonly ref return sealed sizeof stackalloc static struct switch this throw try typeof unchecked unsafe using virtual void volatile while add alias ascending descending dynamic from get global group into join let orderby partial remove select set value var yield"),blockKeywords:a("catch class do else finally for foreach if struct switch try while"),builtin:a("Boolean Byte Char DateTime DateTimeOffset Decimal Double Guid Int16 Int32 Int64 Object SByte Single String TimeSpan UInt16 UInt32 UInt64 bool byte char decimal double short int long object sbyte float string ushort uint ulong"),atoms:a("true false null"),hooks:{"@":function(a,b){return a.eat('"')?(b.tokenize=d,d(a,b)):(a.eatWhile(/[\w\$_]/),"meta")}}}),CodeMirror.defineMIME("text/x-scala",{name:"clike",keywords:a("abstract case catch class def do else extends false final finally for forSome if implicit import lazy match new null object override package private protected return sealed super this throw trait try trye type val var while with yield _ : = => <- <: <% >: # @ assert assume require print println printf readLine readBoolean readByte readShort readChar readInt readLong readFloat readDouble AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either Enumeration Equiv Error Exception Fractional Function IndexedSeq Integral Iterable Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector :: #:: Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable Compiler Double Exception Float Integer Long Math Number Object Package Pair Process Runtime Runnable SecurityManager Short StackTraceElement StrictMath String StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"),blockKeywords:a("catch class do else finally for forSome if match switch try while"),atoms:a("true false null"),hooks:{"@":function(a){return a.eatWhile(/[\w\$_]/),"meta"}}})}(),CodeMirror.defineMode("css",function(a){function i(a){for(var b={},c=0;a.length>c;++c)b[a[c]]=!0;return b}function j(a,b){return c=b,a}function k(a,b){var c=a.next();if("@"==c)return a.eatWhile(/[\w\\\-]/),j("def",a.current());if("/"==c&&a.eat("*"))return b.tokenize=l,l(a,b);if("<"==c&&a.eat("!"))return b.tokenize=m,m(a,b);if("="==c)j(null,"compare");else{if(("~"==c||"|"==c)&&a.eat("="))return j(null,"compare");if('"'==c||"'"==c)return b.tokenize=n(c),b.tokenize(a,b);if("#"==c)return a.eatWhile(/[\w\\\-]/),j("atom","hash");if("!"==c)return a.match(/^\s*\w*/),j("keyword","important");if(/\d/.test(c))return a.eatWhile(/[\w.%]/),j("number","unit");if("-"!==c)return/[,+>*\/]/.test(c)?j(null,"select-op"):"."==c&&a.match(/^-?[_a-z][_a-z0-9-]*/i)?j("qualifier","qualifier"):":"==c?j("operator",c):/[;{}\[\]\(\)]/.test(c)?j(null,c):"u"==c&&a.match("rl(")?(a.backUp(1),b.tokenize=o,j("property","variable")):(a.eatWhile(/[\w\\\-]/),j("property","variable"));if(/\d/.test(a.peek()))return a.eatWhile(/[\w.%]/),j("number","unit");if(a.match(/^[^-]+-/))return j("meta","meta")}}function l(a,b){for(var d,c=!1;null!=(d=a.next());){if(c&&"/"==d){b.tokenize=k;break}c="*"==d}return j("comment","comment")}function m(a,b){for(var d,c=0;null!=(d=a.next());){if(c>=2&&">"==d){b.tokenize=k;break}c="-"==d?c+1:0}return j("comment","comment")}function n(a,b){return function(c,d){for(var f,e=!1;null!=(f=c.next())&&(f!=a||e);)e=!e&&"\\"==f;return e||(b&&c.backUp(1),d.tokenize=k),j("string","string")}}function o(a,b){return a.next(),b.tokenize=a.match(/\s*[\"\']/,!1)?k:n(")",!0),j(null,"(")}var c,b=a.indentUnit,d=i(["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"]),e=i(["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid"]),f=i(["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid-cell","grid-column","grid-column-align","grid-column-sizing","grid-column-span","grid-columns","grid-flow","grid-row","grid-row-align","grid-row-sizing","grid-row-span","grid-rows","grid-template","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marker-offset","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","play-during","position","presentation-level","punctuation-trim","quotes","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-shadow","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","word-break","word-spacing","word-wrap","z-index"]),g=i(["black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua"]),h=i(["above","absolute","activeborder","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","auto","avoid","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break-all","break-word","button","button-bevel","buttonface","buttonhighlight","buttonshadow","buttontext","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","compact","condensed","contain","content","content-box","context-menu","continuous","copy","cover","crop","cross","crosshair","currentcolor","cursive","dashed","decimal","decimal-leading-zero","default","default-button","destination-atop","destination-in","destination-out","destination-over","devanagari","disc","discard","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ew-resize","expanded","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","footnotes","forwards","from","geometricPrecision","georgian","graytext","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hebrew","help","hidden","hide","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-table","inset","inside","intrinsic","invert","italic","justify","kannada","katakana","katakana-iroha","khmer","landscape","lao","large","larger","left","level","lighter","line-through","linear","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","malayalam","match","media-controls-background","media-current-time-display","media-fullscreen-button","media-mute-button","media-play-button","media-return-to-realtime-button","media-rewind-button","media-seek-back-button","media-seek-forward-button","media-slider","media-sliderthumb","media-time-remaining-display","media-volume-slider","media-volume-slider-container","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menulist-text","menulist-textfield","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","myanmar","n-resize","narrower","navy","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","nw-resize","nwse-resize","oblique","octal","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","overlay","overline","padding","padding-box","painted","paused","persian","plus-darker","plus-lighter","pointer","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radio","read-only","read-write","read-write-plaintext-only","relative","repeat","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","round","row-resize","rtl","run-in","running","s-resize","sans-serif","scroll","scrollbar","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","semi-condensed","semi-expanded","separate","serif","show","sidama","single","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","solid","somali","source-atop","source-in","source-out","source-over","space","square","square-button","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","transparent","ultra-condensed","ultra-expanded","underline","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","white","wider","window","windowframe","windowtext","x-large","x-small","xor","xx-large","xx-small","yellow"]);return{startState:function(a){return{tokenize:k,baseIndent:a||0,stack:[]}},token:function(a,b){if(b.tokenize==k&&a.eatSpace())return null;var i=b.tokenize(a,b),j=b.stack[b.stack.length-1];return"property"==i?"propertyValue"==j?i=h[a.current()]?"string-2":g[a.current()]?"keyword":"variable-2":"rule"==j?f[a.current()]||(i+=" error"):j&&"@media{"!=j?"@media"==j?i=d[a.current()]?"attribute":/^(only|not)$/i.test(a.current())?"keyword":"and"==a.current().toLowerCase()?"error":e[a.current()]?"error":"attribute error":"@mediaType"==j?i=d[a.current()]?"attribute":"and"==a.current().toLowerCase()?"operator":/^(only|not)$/i.test(a.current())?"error":e[a.current()]?"error":"error":"@mediaType("==j?f[a.current()]||(d[a.current()]?i="error":"and"==a.current().toLowerCase()?i="operator":/^(only|not)$/i.test(a.current())?i="error":i+=" error"):i="error":i="tag":"atom"==i?j&&"@media{"!=j?"propertyValue"==j?/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(a.current())||(i+=" error"):i="error":i="builtin":"@media"==j&&"{"==c&&(i="error"),"{"==c?"@media"==j||"@mediaType"==j?(b.stack.pop(),b.stack[b.stack.length-1]="@media{"):b.stack.push("rule"):"}"==c?(b.stack.pop(),"propertyValue"==j&&b.stack.pop()):"@media"==c?b.stack.push("@media"):"@media"==j&&/\b(keyword|attribute)\b/.test(i)?b.stack.push("@mediaType"):"@mediaType"==j&&","==a.current()?b.stack.pop():"@mediaType"==j&&"("==c?b.stack.push("@mediaType("):"@mediaType("==j&&")"==c?b.stack.pop():"rule"==j&&":"==c?b.stack.push("propertyValue"):"propertyValue"==j&&";"==c&&b.stack.pop(),i},indent:function(a,c){var d=a.stack.length;return/^\}/.test(c)&&(d-="propertyValue"==a.stack[a.stack.length-1]?2:1),a.baseIndent+d*b},electricChars:"}"}}),CodeMirror.defineMIME("text/css","css"),CodeMirror.defineMode("htmlmixed",function(a){function e(a,e){var f=b.token(a,e.htmlState);return/(?:^|\s)tag(?:\s|$)/.test(f)&&">"==a.current()&&e.htmlState.context&&(/^script$/i.test(e.htmlState.context.tagName)?(e.token=g,e.localState=c.startState(b.indent(e.htmlState,""))):/^style$/i.test(e.htmlState.context.tagName)&&(e.token=h,e.localState=d.startState(b.indent(e.htmlState,"")))),f}function f(a,b,c){var f,d=a.current(),e=d.search(b);return e>-1?a.backUp(d.length-e):(f=d.match(/<\/?$/))&&(a.backUp(d.length),a.match(b,!1)||a.match(d[0])),c}function g(a,b){return a.match(/^<\/\s*script\s*>/i,!1)?(b.token=e,b.localState=null,e(a,b)):f(a,/<\/\s*script\s*>/,c.token(a,b.localState))}function h(a,b){return a.match(/^<\/\s*style\s*>/i,!1)?(b.token=e,b.localState=null,e(a,b)):f(a,/<\/\s*style\s*>/,d.token(a,b.localState))}var b=CodeMirror.getMode(a,{name:"xml",htmlMode:!0}),c=CodeMirror.getMode(a,"javascript"),d=CodeMirror.getMode(a,"css");return{startState:function(){var a=b.startState();return{token:e,localState:null,mode:"html",htmlState:a}},copyState:function(a){if(a.localState)var e=CodeMirror.copyState(a.token==h?d:c,a.localState);return{token:a.token,localState:e,mode:a.mode,htmlState:CodeMirror.copyState(b,a.htmlState)}},token:function(a,b){return b.token(a,b)},indent:function(a,f){return a.token==e||/^\s*<\//.test(f)?b.indent(a.htmlState,f):a.token==g?c.indent(a.localState,f):d.indent(a.localState,f)},electricChars:"/{}:",innerMode:function(a){var f=a.token==e?b:a.token==g?c:d;return{state:a.localState||a.htmlState,mode:f}}}},"xml","javascript","css"),CodeMirror.defineMIME("text/html","htmlmixed"),CodeMirror.defineMode("javascript",function(a,b){function h(a,b,c){return b.tokenize=c,c(a,b)}function i(a,b){for(var d,c=!1;null!=(d=a.next());){if(d==b&&!c)return!1;c=!c&&"\\"==d}return c}function l(a,b,c){return j=a,k=c,b}function m(a,b){var c=a.next();if('"'==c||"'"==c)return h(a,b,n(c));if(/[\[\]{}\(\),;\:\.]/.test(c))return l(c);if("0"==c&&a.eat(/x/i))return a.eatWhile(/[\da-f]/i),l("number","number");if(/\d/.test(c)||"-"==c&&a.eat(/\d/))return a.match(/^\d*(?:\.\d*)?(?:[eE][+\-]?\d+)?/),l("number","number");if("/"==c)return a.eat("*")?h(a,b,o):a.eat("/")?(a.skipToEnd(),l("comment","comment")):"operator"==b.lastType||"keyword c"==b.lastType||/^[\[{}\(,;:]$/.test(b.lastType)?(i(a,"/"),a.eatWhile(/[gimy]/),l("regexp","string-2")):(a.eatWhile(g),l("operator",null,a.current()));if("#"==c)return a.skipToEnd(),l("error","error");if(g.test(c))return a.eatWhile(g),l("operator",null,a.current());a.eatWhile(/[\w\$_]/);var d=a.current(),e=f.propertyIsEnumerable(d)&&f[d];return e&&"."!=b.lastType?l(e.type,e.style,d):l("variable","variable",d)}function n(a){return function(b,c){return i(b,a)||(c.tokenize=m),l("string","string")}}function o(a,b){for(var d,c=!1;d=a.next();){if("/"==d&&c){b.tokenize=m;break}c="*"==d}return l("comment","comment")}function q(a,b,c,d,e,f){this.indented=a,this.column=b,this.type=c,this.prev=e,this.info=f,null!=d&&(this.align=d)}function r(a,b){for(var c=a.localVars;c;c=c.next)if(c.name==b)return!0}function s(a,b,c,e,f){var g=a.cc;for(t.state=a,t.stream=f,t.marked=null,t.cc=g,a.lexical.hasOwnProperty("align")||(a.lexical.align=!0);;){var h=g.length?g.pop():d?E:D;if(h(c,e)){for(;g.length&&g[g.length-1].lex;)g.pop()();return t.marked?t.marked:"variable"==c&&r(a,e)?"variable-2":b}}}function u(){for(var a=arguments.length-1;a>=0;a--)t.cc.push(arguments[a])}function v(){return u.apply(null,arguments),!0}function w(a){function b(b){for(var c=b;c;c=c.next)if(c.name==a)return!0;return!1}var c=t.state;if(c.context){if(t.marked="def",b(c.localVars))return;c.localVars={name:a,next:c.localVars}}else{if(b(c.globalVars))return;c.globalVars={name:a,next:c.globalVars}}}function y(){t.state.context={prev:t.state.context,vars:t.state.localVars},t.state.localVars=x}function z(){t.state.localVars=t.state.context.vars,t.state.context=t.state.context.prev}function A(a,b){var c=function(){var c=t.state;c.lexical=new q(c.indented,t.stream.column(),a,null,c.lexical,b)};return c.lex=!0,c}function B(){var a=t.state;a.lexical.prev&&(")"==a.lexical.type&&(a.indented=a.lexical.indented),a.lexical=a.lexical.prev)}function C(a){return function(b){return b==a?v():";"==a?u():v(arguments.callee)}}function D(a){return"var"==a?v(A("vardef"),O,C(";"),B):"keyword a"==a?v(A("form"),E,D,B):"keyword b"==a?v(A("form"),D,B):"{"==a?v(A("}"),L,B):";"==a?v():"function"==a?v(U):"for"==a?v(A("form"),C("("),A(")"),Q,C(")"),B,D,B):"variable"==a?v(A("stat"),H):"switch"==a?v(A("form"),E,A("}","switch"),C("{"),L,B,B):"case"==a?v(E,C(":")):"default"==a?v(C(":")):"catch"==a?v(A("form"),y,C("("),V,C(")"),D,B,z):u(A("stat"),E,C(";"),B)}function E(a){return p.hasOwnProperty(a)?v(G):"function"==a?v(U):"keyword c"==a?v(F):"("==a?v(A(")"),F,C(")"),B,G):"operator"==a?v(E):"["==a?v(A("]"),K(E,"]"),B,G):"{"==a?v(A("}"),K(J,"}"),B,G):v()}function F(a){return a.match(/[;\}\)\],]/)?u():u(E)}function G(a,b){if("operator"==a&&/\+\+|--/.test(b))return v(G);if("operator"==a&&"?"==b)return v(E,C(":"),E);if(";"!=a)return"("==a?v(A(")"),K(E,")"),B,G):"."==a?v(I,G):"["==a?v(A("]"),E,C("]"),B,G):void 0}function H(a){return":"==a?v(B,D):u(G,C(";"),B)}function I(a){return"variable"==a?(t.marked="property",v()):void 0}function J(a){return"variable"==a&&(t.marked="property"),p.hasOwnProperty(a)?v(C(":"),E):void 0}function K(a,b){function c(d){return","==d?v(a,c):d==b?v():v(C(b))}return function(d){return d==b?v():u(a,c)}}function L(a){return"}"==a?v():u(D,L)}function M(a){return":"==a?v(N):u()}function N(a){return"variable"==a?(t.marked="variable-3",v()):u()}function O(a,b){return"variable"==a?(w(b),e?v(M,P):v(P)):u()}function P(a,b){return"="==b?v(E,P):","==a?v(O):void 0}function Q(a){return"var"==a?v(O,C(";"),S):";"==a?v(S):"variable"==a?v(R):v(S)}function R(a,b){return"in"==b?v(E):v(G,S)}function S(a,b){return";"==a?v(T):"in"==b?v(E):v(E,C(";"),T)}function T(a){")"!=a&&v(E)}function U(a,b){return"variable"==a?(w(b),v(U)):"("==a?v(A(")"),y,K(V,")"),B,D,z):void 0}function V(a,b){return"variable"==a?(w(b),e?v(M):v()):void 0}var j,k,c=a.indentUnit,d=b.json,e=b.typescript,f=function(){function a(a){return{type:a,style:"keyword"}}var b=a("keyword a"),c=a("keyword b"),d=a("keyword c"),f=a("operator"),g={type:"atom",style:"atom"},h={"if":b,"while":b,"with":b,"else":c,"do":c,"try":c,"finally":c,"return":d,"break":d,"continue":d,"new":d,"delete":d,"throw":d,"var":a("var"),"const":a("var"),let:a("var"),"function":a("function"),"catch":a("catch"),"for":a("for"),"switch":a("switch"),"case":a("case"),"default":a("default"),"in":f,"typeof":f,"instanceof":f,"true":g,"false":g,"null":g,undefined:g,NaN:g,Infinity:g};if(e){var i={type:"variable",style:"variable-3"},j={"interface":a("interface"),"class":a("class"),"extends":a("extends"),constructor:a("constructor"),"public":a("public"),"private":a("private"),"protected":a("protected"),"static":a("static"),"super":a("super"),string:i,number:i,bool:i,any:i};for(var k in j)h[k]=j[k]}return h}(),g=/[+\-*&%=<>!?|]/,p={atom:!0,number:!0,variable:!0,string:!0,regexp:!0},t={state:null,column:null,marked:null,cc:null},x={name:"this",next:{name:"arguments"}};return B.lex=!0,{startState:function(a){return{tokenize:m,lastType:null,cc:[],lexical:new q((a||0)-c,0,"block",!1),localVars:b.localVars,globalVars:b.globalVars,context:b.localVars&&{vars:b.localVars},indented:0}},token:function(a,b){if(a.sol()&&(b.lexical.hasOwnProperty("align")||(b.lexical.align=!1),b.indented=a.indentation()),a.eatSpace())return null;var c=b.tokenize(a,b);return"comment"==j?c:(b.lastType=j,s(b,c,j,k,a))},indent:function(a,b){if(a.tokenize==o)return CodeMirror.Pass;if(a.tokenize!=m)return 0;var d=b&&b.charAt(0),e=a.lexical;"stat"==e.type&&"}"==d&&(e=e.prev);var f=e.type,g=d==f;return"vardef"==f?e.indented+("operator"==a.lastType||","==a.lastType?4:0):"form"==f&&"{"==d?e.indented:"form"==f?e.indented+c:"stat"==f?e.indented+("operator"==a.lastType||","==a.lastType?c:0):"switch"!=e.info||g?e.align?e.column+(g?0:1):e.indented+(g?0:c):e.indented+(/^(?:case|default)\b/.test(b)?c:2*c)},electricChars:":{}",jsonMode:d}}),CodeMirror.defineMIME("text/javascript","javascript"),CodeMirror.defineMIME("text/ecmascript","javascript"),CodeMirror.defineMIME("application/javascript","javascript"),CodeMirror.defineMIME("application/ecmascript","javascript"),CodeMirror.defineMIME("application/json",{name:"javascript",json:!0}),CodeMirror.defineMIME("text/typescript",{name:"javascript",typescript:!0}),CodeMirror.defineMIME("application/typescript",{name:"javascript",typescript:!0}),function(){function a(a){for(var b={},c=a.split(" "),d=0;c.length>d;++d)b[c[d]]=!0;return b}function b(a){return function(b,c){return b.match(a)?c.tokenize=null:b.skipToEnd(),"string"}}var c={name:"clike",keywords:a("abstract and array as break case catch class clone const continue declare default do else elseif enddeclare endfor endforeach endif endswitch endwhile extends final for foreach function global goto if implements interface instanceof namespace new or private protected public static switch throw trait try use var while xor die echo empty exit eval include include_once isset list require require_once return print unset __halt_compiler self static parent"),blockKeywords:a("catch do else elseif for foreach if switch try while"),atoms:a("true false null TRUE FALSE NULL __CLASS__ __DIR__ __FILE__ __LINE__ __METHOD__ __FUNCTION__ __NAMESPACE__"),builtin:a("func_num_args func_get_arg func_get_args strlen strcmp strncmp strcasecmp strncasecmp each error_reporting define defined trigger_error user_error set_error_handler restore_error_handler get_declared_classes get_loaded_extensions extension_loaded get_extension_funcs debug_backtrace constant bin2hex sleep usleep time mktime gmmktime strftime gmstrftime strtotime date gmdate getdate localtime checkdate flush wordwrap htmlspecialchars htmlentities html_entity_decode md5 md5_file crc32 getimagesize image_type_to_mime_type phpinfo phpversion phpcredits strnatcmp strnatcasecmp substr_count strspn strcspn strtok strtoupper strtolower strpos strrpos strrev hebrev hebrevc nl2br basename dirname pathinfo stripslashes stripcslashes strstr stristr strrchr str_shuffle str_word_count strcoll substr substr_replace quotemeta ucfirst ucwords strtr addslashes addcslashes rtrim str_replace str_repeat count_chars chunk_split trim ltrim strip_tags similar_text explode implode setlocale localeconv parse_str str_pad chop strchr sprintf printf vprintf vsprintf sscanf fscanf parse_url urlencode urldecode rawurlencode rawurldecode readlink linkinfo link unlink exec system escapeshellcmd escapeshellarg passthru shell_exec proc_open proc_close rand srand getrandmax mt_rand mt_srand mt_getrandmax base64_decode base64_encode abs ceil floor round is_finite is_nan is_infinite bindec hexdec octdec decbin decoct dechex base_convert number_format fmod ip2long long2ip getenv putenv getopt microtime gettimeofday getrusage uniqid quoted_printable_decode set_time_limit get_cfg_var magic_quotes_runtime set_magic_quotes_runtime get_magic_quotes_gpc get_magic_quotes_runtime import_request_variables error_log serialize unserialize memory_get_usage var_dump var_export debug_zval_dump print_r highlight_file show_source highlight_string ini_get ini_get_all ini_set ini_alter ini_restore get_include_path set_include_path restore_include_path setcookie header headers_sent connection_aborted connection_status ignore_user_abort parse_ini_file is_uploaded_file move_uploaded_file intval floatval doubleval strval gettype settype is_null is_resource is_bool is_long is_float is_int is_integer is_double is_real is_numeric is_string is_array is_object is_scalar ereg ereg_replace eregi eregi_replace split spliti join sql_regcase dl pclose popen readfile rewind rmdir umask fclose feof fgetc fgets fgetss fread fopen fpassthru ftruncate fstat fseek ftell fflush fwrite fputs mkdir rename copy tempnam tmpfile file file_get_contents stream_select stream_context_create stream_context_set_params stream_context_set_option stream_context_get_options stream_filter_prepend stream_filter_append fgetcsv flock get_meta_tags stream_set_write_buffer set_file_buffer set_socket_blocking stream_set_blocking socket_set_blocking stream_get_meta_data stream_register_wrapper stream_wrapper_register stream_set_timeout socket_set_timeout socket_get_status realpath fnmatch fsockopen pfsockopen pack unpack get_browser crypt opendir closedir chdir getcwd rewinddir readdir dir glob fileatime filectime filegroup fileinode filemtime fileowner fileperms filesize filetype file_exists is_writable is_writeable is_readable is_executable is_file is_dir is_link stat lstat chown touch clearstatcache mail ob_start ob_flush ob_clean ob_end_flush ob_end_clean ob_get_flush ob_get_clean ob_get_length ob_get_level ob_get_status ob_get_contents ob_implicit_flush ob_list_handlers ksort krsort natsort natcasesort asort arsort sort rsort usort uasort uksort shuffle array_walk count end prev next reset current key min max in_array array_search extract compact array_fill range array_multisort array_push array_pop array_shift array_unshift array_splice array_slice array_merge array_merge_recursive array_keys array_values array_count_values array_reverse array_reduce array_pad array_flip array_change_key_case array_rand array_unique array_intersect array_intersect_assoc array_diff array_diff_assoc array_sum array_filter array_map array_chunk array_key_exists pos sizeof key_exists assert assert_options version_compare ftok str_rot13 aggregate session_name session_module_name session_save_path session_id session_regenerate_id session_decode session_register session_unregister session_is_registered session_encode session_start session_destroy session_unset session_set_save_handler session_cache_limiter session_cache_expire session_set_cookie_params session_get_cookie_params session_write_close preg_match preg_match_all preg_replace preg_replace_callback preg_split preg_quote preg_grep overload ctype_alnum ctype_alpha ctype_cntrl ctype_digit ctype_lower ctype_graph ctype_print ctype_punct ctype_space ctype_upper ctype_xdigit virtual apache_request_headers apache_note apache_lookup_uri apache_child_terminate apache_setenv apache_response_headers apache_get_version getallheaders mysql_connect mysql_pconnect mysql_close mysql_select_db mysql_create_db mysql_drop_db mysql_query mysql_unbuffered_query mysql_db_query mysql_list_dbs mysql_list_tables mysql_list_fields mysql_list_processes mysql_error mysql_errno mysql_affected_rows mysql_insert_id mysql_result mysql_num_rows mysql_num_fields mysql_fetch_row mysql_fetch_array mysql_fetch_assoc mysql_fetch_object mysql_data_seek mysql_fetch_lengths mysql_fetch_field mysql_field_seek mysql_free_result mysql_field_name mysql_field_table mysql_field_len mysql_field_type mysql_field_flags mysql_escape_string mysql_real_escape_string mysql_stat mysql_thread_id mysql_client_encoding mysql_get_client_info mysql_get_host_info mysql_get_proto_info mysql_get_server_info mysql_info mysql mysql_fieldname mysql_fieldtable mysql_fieldlen mysql_fieldtype mysql_fieldflags mysql_selectdb mysql_createdb mysql_dropdb mysql_freeresult mysql_numfields mysql_numrows mysql_listdbs mysql_listtables mysql_listfields mysql_db_name mysql_dbname mysql_tablename mysql_table_name pg_connect pg_pconnect pg_close pg_connection_status pg_connection_busy pg_connection_reset pg_host pg_dbname pg_port pg_tty pg_options pg_ping pg_query pg_send_query pg_cancel_query pg_fetch_result pg_fetch_row pg_fetch_assoc pg_fetch_array pg_fetch_object pg_fetch_all pg_affected_rows pg_get_result pg_result_seek pg_result_status pg_free_result pg_last_oid pg_num_rows pg_num_fields pg_field_name pg_field_num pg_field_size pg_field_type pg_field_prtlen pg_field_is_null pg_get_notify pg_get_pid pg_result_error pg_last_error pg_last_notice pg_put_line pg_end_copy pg_copy_to pg_copy_from pg_trace pg_untrace pg_lo_create pg_lo_unlink pg_lo_open pg_lo_close pg_lo_read pg_lo_write pg_lo_read_all pg_lo_import pg_lo_export pg_lo_seek pg_lo_tell pg_escape_string pg_escape_bytea pg_unescape_bytea pg_client_encoding pg_set_client_encoding pg_meta_data pg_convert pg_insert pg_update pg_delete pg_select pg_exec pg_getlastoid pg_cmdtuples pg_errormessage pg_numrows pg_numfields pg_fieldname pg_fieldsize pg_fieldtype pg_fieldnum pg_fieldprtlen pg_fieldisnull pg_freeresult pg_result pg_loreadall pg_locreate pg_lounlink pg_loopen pg_loclose pg_loread pg_lowrite pg_loimport pg_loexport echo print global static exit array empty eval isset unset die include require include_once require_once"),multiLineStrings:!0,hooks:{$:function(a){return a.eatWhile(/[\w\$_]/),"variable-2"
},"<":function(a,c){return a.match(/<</)?(a.eatWhile(/[\w\.]/),c.tokenize=b(a.current().slice(3)),c.tokenize(a,c)):!1},"#":function(a){for(;!a.eol()&&!a.match("?>",!1);)a.next();return"comment"},"/":function(a){if(a.eat("/")){for(;!a.eol()&&!a.match("?>",!1);)a.next();return"comment"}return!1}}};CodeMirror.defineMode("php",function(a,b){function f(a,b){var c=b.curMode==e;if(a.sol()&&'"'!=b.pending&&(b.pending=null),c)return c&&null==b.php.tokenize&&a.match("?>")?(b.curMode=d,b.curState=b.html,"meta"):e.token(a,b.curState);if(a.match(/^<\?\w*/))return b.curMode=e,b.curState=b.php,"meta";if('"'==b.pending){for(;!a.eol()&&'"'!=a.next(););var f="string"}else if(b.pending&&a.pos<b.pending.end){a.pos=b.pending.end;var f=b.pending.style}else var f=d.token(a,b.curState);b.pending=null;var g=a.current(),h=g.search(/<\?/);return-1!=h&&(b.pending="string"==f&&/\"$/.test(g)&&!/\?>/.test(g)?'"':{end:a.pos,style:f},a.backUp(g.length-h)),f}var d=CodeMirror.getMode(a,"text/html"),e=CodeMirror.getMode(a,c);return{startState:function(){var a=CodeMirror.startState(d),c=CodeMirror.startState(e);return{html:a,php:c,curMode:b.startOpen?e:d,curState:b.startOpen?c:a,pending:null}},copyState:function(a){var h,b=a.html,c=CodeMirror.copyState(d,b),f=a.php,g=CodeMirror.copyState(e,f);return h=a.curMode==d?c:g,{html:c,php:g,curMode:a.curMode,curState:h,pending:a.pending}},token:f,indent:function(a,b){return a.curMode!=e&&/^\s*<\//.test(b)||a.curMode==e&&/^\?>/.test(b)?d.indent(a.html,b):a.curMode.indent(a.curState,b)},electricChars:"/{}:",innerMode:function(a){return{state:a.curState,mode:a.curMode}}}},"htmlmixed"),CodeMirror.defineMIME("application/x-httpd-php","php"),CodeMirror.defineMIME("application/x-httpd-php-open",{name:"php",startOpen:!0}),CodeMirror.defineMIME("text/x-php",c)}(),CodeMirror.defineMode("xml",function(a,b){function h(a,b){function c(c){return b.tokenize=c,c(a,b)}var d=a.next();if("<"==d){if(a.eat("!"))return a.eat("[")?a.match("CDATA[")?c(k("atom","]]>")):null:a.match("--")?c(k("comment","-->")):a.match("DOCTYPE",!0,!0)?(a.eatWhile(/[\w\._\-]/),c(l(1))):null;if(a.eat("?"))return a.eatWhile(/[\w\._\-]/),b.tokenize=k("meta","?>"),"meta";var e=a.eat("/");f="";for(var h;h=a.eat(/[^\s\u00a0=<>\"\'\/?]/);)f+=h;return f?(g=e?"closeTag":"openTag",b.tokenize=i,"tag"):"error"}if("&"==d){var j;return j=a.eat("#")?a.eat("x")?a.eatWhile(/[a-fA-F\d]/)&&a.eat(";"):a.eatWhile(/[\d]/)&&a.eat(";"):a.eatWhile(/[\w\.\-:]/)&&a.eat(";"),j?"atom":"error"}return a.eatWhile(/[^&<]/),null}function i(a,b){var c=a.next();return">"==c||"/"==c&&a.eat(">")?(b.tokenize=h,g=">"==c?"endTag":"selfcloseTag","tag"):"="==c?(g="equals",null):/[\'\"]/.test(c)?(b.tokenize=j(c),b.tokenize(a,b)):(a.eatWhile(/[^\s\u00a0=<>\"\']/),"word")}function j(a){return function(b,c){for(;!b.eol();)if(b.next()==a){c.tokenize=i;break}return"string"}}function k(a,b){return function(c,d){for(;!c.eol();){if(c.match(b)){d.tokenize=h;break}c.next()}return a}}function l(a){return function(b,c){for(var d;null!=(d=b.next());){if("<"==d)return c.tokenize=l(a+1),c.tokenize(b,c);if(">"==d){if(1==a){c.tokenize=h;break}return c.tokenize=l(a-1),c.tokenize(b,c)}}return"meta"}}function o(){for(var a=arguments.length-1;a>=0;a--)m.cc.push(arguments[a])}function p(){return o.apply(null,arguments),!0}function q(a,b){var c=d.doNotIndent.hasOwnProperty(a)||m.context&&m.context.noIndent;m.context={prev:m.context,tagName:a,indent:m.indented,startOfLine:b,noIndent:c}}function r(){m.context&&(m.context=m.context.prev)}function s(a){if("openTag"==a)return m.tagName=f,p(w,t(m.startOfLine));if("closeTag"==a){var b=!1;return m.context?m.context.tagName!=f&&(d.implicitlyClosed.hasOwnProperty(m.context.tagName.toLowerCase())&&r(),b=!m.context||m.context.tagName!=f):b=!0,b&&(n="error"),p(u(b))}return p()}function t(a){return function(b){var c=m.tagName;return m.tagName=null,"selfcloseTag"==b||"endTag"==b&&d.autoSelfClosers.hasOwnProperty(c.toLowerCase())?(v(c.toLowerCase()),p()):"endTag"==b?(v(c.toLowerCase()),q(c,a),p()):p()}}function u(a){return function(b){return a&&(n="error"),"endTag"==b?(r(),p()):(n="error",p(arguments.callee))}}function v(a){for(var b;;){if(!m.context)return;if(b=m.context.tagName.toLowerCase(),!d.contextGrabbers.hasOwnProperty(b)||!d.contextGrabbers[b].hasOwnProperty(a))return;r()}}function w(a){return"word"==a?(n="attribute",p(x,w)):"endTag"==a||"selfcloseTag"==a?o():(n="error",p(w))}function x(a){return"equals"==a?p(y,w):(d.allowMissing?"word"==a&&(n="attribute"):n="error","endTag"==a||"selfcloseTag"==a?o():p())}function y(a){return"string"==a?p(z):"word"==a&&d.allowUnquoted?(n="string",p()):(n="error","endTag"==a||"selfCloseTag"==a?o():p())}function z(a){return"string"==a?p(z):o()}var f,g,m,n,c=a.indentUnit,d=b.htmlMode?{autoSelfClosers:{area:!0,base:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},implicitlyClosed:{dd:!0,li:!0,optgroup:!0,option:!0,p:!0,rp:!0,rt:!0,tbody:!0,td:!0,tfoot:!0,th:!0,tr:!0},contextGrabbers:{dd:{dd:!0,dt:!0},dt:{dd:!0,dt:!0},li:{li:!0},option:{option:!0,optgroup:!0},optgroup:{optgroup:!0},p:{address:!0,article:!0,aside:!0,blockquote:!0,dir:!0,div:!0,dl:!0,fieldset:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,menu:!0,nav:!0,ol:!0,p:!0,pre:!0,section:!0,table:!0,ul:!0},rp:{rp:!0,rt:!0},rt:{rp:!0,rt:!0},tbody:{tbody:!0,tfoot:!0},td:{td:!0,th:!0},tfoot:{tbody:!0},th:{td:!0,th:!0},thead:{tbody:!0,tfoot:!0},tr:{tr:!0}},doNotIndent:{pre:!0},allowUnquoted:!0,allowMissing:!0}:{autoSelfClosers:{},implicitlyClosed:{},contextGrabbers:{},doNotIndent:{},allowUnquoted:!1,allowMissing:!1},e=b.alignCDATA;return{startState:function(){return{tokenize:h,cc:[],indented:0,startOfLine:!0,tagName:null,context:null}},token:function(a,b){if(a.sol()&&(b.startOfLine=!0,b.indented=a.indentation()),a.eatSpace())return null;n=g=f=null;var c=b.tokenize(a,b);if(b.type=g,(c||g)&&"comment"!=c)for(m=b;;){var d=b.cc.pop()||s;if(d(g||c))break}return b.startOfLine=!1,n||c},indent:function(a,b,d){var f=a.context;if(a.tokenize!=i&&a.tokenize!=h||f&&f.noIndent)return d?d.match(/^(\s*)/)[0].length:0;if(e&&/<!\[CDATA\[/.test(b))return 0;for(f&&/^<\//.test(b)&&(f=f.prev);f&&!f.startOfLine;)f=f.prev;return f?f.indent+c:0},electricChars:"/",configuration:b.htmlMode?"html":"xml"}}),CodeMirror.defineMIME("text/xml","xml"),CodeMirror.defineMIME("application/xml","xml"),CodeMirror.mimeModes.hasOwnProperty("text/html")||CodeMirror.defineMIME("text/html",{name:"xml",htmlMode:!0});

/**
* @fileOverview Main loader class for the aereus library
*
* This is the base class for the entire Alib framework
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * @define {boolean} Overridden to true by the compiler when --closure_pass
 *     or --mark_as_compiled is specified.
 */
var COMPILED = true;

/**
 * The base root where the areus library is being defined
 */
var ALIB_ROOT = ALIB_ROOT || null;

/**
 * The base namespace for the alib library.
 *
 * @const
 */
var alib = alib || {}; // Identifies this file as the alib base.

/**
 * Alib class
 *
 * @constructor
 */
function Alib()
{
	this.m_appcontainer = null;

	this.setDocument();	
	this.m_evwnd = window;

	this.m_debug = false; // Used for tracing output
}

/***********************************************************************
*	Function:	setDocument
*
*	Purpose:	Used to set working ducument if different from 'document'
*
************************************************************************/
Alib.prototype.setDocument = function(doc)
{
	this.m_document = document;

	/* No longer needed - joe
	alib.dom.m_browser = this.m_browser;
	this.Effect.m_browser = this.m_browser;

	if (doc)
	{
		this.m_document = doc;
		alib.dom.setCurrentDoc(doc);
	}
	else
	{
		this.m_document = document;
		alib.dom.setCurrentDoc(document);
	}
	*/
}

/***********************************************************************
*	Function:	statusShowAlert
*
*	Arguments:	1.	content - either an element or text to display
*				2.	timeout - number of mili-seconds to display
*				3.	valign - top, middle, bottom (default=middle)
*				4.	halign - left, center, right (default=center)
*
*	Purpose:	Show status messages on document (absolute positioned)
*
************************************************************************/
Alib.prototype.statusShowAlert = function(content, timeout, valign, halign, exclusive)
{
	var vert_align = (valign) ? valign : 'middle';
	var horiz_align = (halign) ? halign : 'center';
	var modal = (exclusive) ? exclusive : false;

	if (!this.m_alert_id)
		this.m_alert_id = 0;

	try 
	{
		this.m_alert_id++;

		// Create status div
		var dv_status = this.m_document.createElement('div');
		dv_status.id = "alib_statusalert_"+this.m_alert_id;
		alib.dom.styleSetClass(dv_status, "statusAlert");
		alib.dom.styleSet(dv_status, "position", "absolute");
		alib.dom.styleSet(dv_status, "top", "150px");
			
		if (typeof content == "string" || typeof content == "number")
			dv_status.innerHTML = content;
		else
			dv_status.appendChild(content);

		this.m_document.body.appendChild(dv_status);

		// Center and display the loading div
		var ht = dv_status.offsetHeight;
		var wd = dv_status.offsetWidth;

		var sptop = alib.dom.getScrollPosTop();
		var spleft = alib.dom.getScrollPosLeft();

		// Set aligned position
		switch (vert_align)
		{
		case "top":
			var tp= sptop + 3;
			break;
		case "middle":
			var tp= sptop +((alib.dom.getClientHeight()-ht)/2)-12;
			break;
		case "bottom":
			var tp= sptop +(alib.dom.getClientHeight()-ht)-12;
			break;
		}

		switch (horiz_align)
		{
		case "left":
			var lt= spleft + 3;
			break;
		case "center":
			var lt= spleft +((alib.dom.getClientWidth()-wd)/2)-12;
			break;
		case "right":
			var lt= spleft +(alib.dom.getClientWidth()-wd)-12;
			break;
		}
		
		alib.dom.styleSet(dv_status, "left", lt + "px");
		alib.dom.styleSet(dv_status, "top", tp + "px");

		if (modal)
			this.Dlg.showOverlay();
		else
			this.Effect.fadein(dv_status, 200);

		dv_status.style.zIndex = "999";
        
		if (timeout)
		{
			var fctn = function()
			{
                dv_status.parentNode.removeChild(dv_status);
                
				if (modal)
					ALib.Dlg.hideOverlay();
			};

			window.setTimeout(fctn, timeout);
		}
		
	} catch (e) {}

	return dv_status;
}

/***********************************************************************
*	Function:	statusHideAlert
*
*	Arguments:	1.	Status alert container
*
*	Purpose:	Show status messages on document (absolute positioned)
*
************************************************************************/
Alib.prototype.statusHideAlert = function(dv_status)
{
	try
	{
		alib.dom.styleSet(dv_status, "visibility", "hidden");
	} catch (e) {}
}

/***********************************************************************
*	Function:	trace
*
*	Purpose:	Create popup and send debug info
*
************************************************************************/
Alib.prototype.trace = function (txt)
{
	// Right now this only works in firefox and opera
	try
	{
		if (!this.m_debug)
			return;

		if (!this.m_debug_wnd || !this.m_debug_wnd.document)
		{
			var attribs = 'top=200,left=100,width=450,height=350,toolbar=no,menubar=no,scrollbars=yes,' +
						  'location=no,directories=no,status=no,resizable=yes';
			this.m_debug_wnd = window.open('about:blank', 'ALIB Debuger', attribs);	

			var frameHtml = "<!DOCTYPE html PUBLIC ";
			frameHtml += "\"-//W3C//DTD XHTML 1.0 Strict//EN\" ";
			frameHtml += "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">";
			frameHtml += "\n";
			frameHtml += "<html>\n";
			frameHtml += "<head>\n";
			frameHtml += "<title>ALib Debugger</title>\n";
			frameHtml += "</head>\n";
			frameHtml += "<body id='debugger' style='color: white; background-color: black;'>\n";
			frameHtml += "</body>\n";
			frameHtml += "</html>";

			this.m_debug_wnd.document.open();
			this.m_debug_wnd.document.write(frameHtml);
			this.m_debug_wnd.document.close();
		}

		var dv = this.m_debug_wnd.document.createElement("div");
		dv.innerHTML = "<pre>"+txt+"</pre>";

		this.m_debug_wnd.document.body.appendChild(dv);
	}
	catch (e) {}
}

/**
 * Get the base path for alib
 */
Alib.prototype.getBasePath = function()
{
	// Find out the editor directory path, based on its <script> tag.
	var path = ALIB_ROOT || '';

	if (!path)
	{
		var scripts = document.getElementsByTagName('script');

		for ( var i = 0 ; i < scripts.length ; i++ )
		{
			//var match = scripts[i].src.match( /(^|.*[\\\/])alib(?:_basic)?(?:_source)?.js(?:\?.*)?$/i );
			var match = scripts[i].src.match( /(^|.*[\\\/])alib(.*).js(.*)$/i );

			if (match)
			{
				path = match[1];
				break;
			}
		}
	}

	// In IE (only) the script.src string is the raw value entered in the
	// HTML source. Other browsers return the full resolved URL instead.
	if ( path.indexOf(':/') == -1 )
	{
		// Absolute path.
		if ( path.indexOf( '/' ) === 0 )
			path = location.href.match( /^.*?:\/\/[^\/]*/ )[0] + path;
		// Relative path.
		else
			path = location.href.match( /^[^\?]*\/(?:)/ )[0] + path;
	}

	if (!path)
		throw 'The alib installation path could not be automatically detected. Please set the global variable "ALIB_ROOT" before using the library.';

	return path;
}

/**
 * Get the index of a value for a given array
 *
 * @param {Array} arr The array to query
 * @param {mixed} value The value to check for
 * @return {int} will be index of value if found and -1 if not found
 */
Alib.prototype.indexOf = function(arr, value)
{
	return $.inArray(value, arr);
}

// Initialize AntMain();
var alib = new Alib();
var ALib = alib; // for backward compatibility

/**
 * Inherit the prototype methods from one funciton
 *
 * <pre>
 * function ParentClass(a, b) { }
 * ParentClass.prototype.foo = function(a) { }
 *
 * function ChildClass(a, b, c) {
 *   alib.base(this, a, b);
 * }
 * goog.inherits(ChildClass, ParentClass);
 *
 * var child = new ChildClass('a', 'b', 'see');
 * child.foo(); // works
 * </pre>
 *
 * In addition, a parent class' implementation of a method can be invoked
 * as follows:
 *
 * <pre>
 * ChildClass.prototype.foo = function(a) {
 *   ChildClass.parentClass_.foo.call(this, a);
 *   // other code
 * };
 * </pre>
 *
 * @param {Function} childCtor Child class.
 * @param {Function} parentCtor Parent class.
 */
alib.inherits = function(childCtor, parentCtor) 
{
  /** @constructor */
  function tempCtor() {};
  tempCtor.prototype = parentCtor.prototype;
  childCtor.parentClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor();
  /** @override */
  childCtor.prototype.constructor = childCtor;
}


/**
 * Call up to the parent class.
 *
 * If this is called from a constructor, then this calls the superclass
 * contructor with arguments 1-N.
 *
 * If this is called from a prototype method, then you must pass
 * the name of the method as the second argument to this function. If
 * you do not, you will get a runtime error. This calls the superclass'
 * method with arguments 2-N.
 *
 * This function only works if you use alib.inherits to express
 * inheritance relationships between your classes.
 *
 * This function is a compiler primitive. At compile-time, the
 * compiler will do macro expansion to remove a lot of
 * the extra overhead that this function introduces. The compiler
 * will also enforce a lot of the assumptions that this function
 * makes, and treat it as a compiler error if you break them.
 *
 * @param {!Object} me Should always be "this".
 * @param {*=} opt_methodName The method name if calling a super method.
 * @param {...*} var_args The rest of the arguments.
 * @return {*} The return value of the superclass method.
 */
alib.base = function(me, opt_methodName, var_args) 
{
	var caller = arguments.callee.caller;

	if (alib.DEBUG) 
	{
		if (!caller) 
		{
			throw Error('arguments.caller not defined.  alib.base() expects not ' +
			'to be running in strict mode. See ' +
			'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
		}
	}

	if (caller.parentClass_) 
	{
		// This is a constructor. Call the superclass constructor.
		return caller.parentClass_.constructor.apply(
			me, Array.prototype.slice.call(arguments, 1)
		);
	}

	var args = Array.prototype.slice.call(arguments, 2);
	var foundCaller = false;
	for (var ctor = me.constructor; ctor; ctor = ctor.parentClass_ && ctor.parentClass_.constructor) 
	{
		if (ctor.prototype[opt_methodName] === caller) {
			foundCaller = true;
		} 
		else if (foundCaller) 
		{
			return ctor.prototype[opt_methodName].apply(me, args);
		}
	}

	// If we did not find the caller in the prototype chain,
	// then one of two things happened:
	// 1) The caller is an instance method.
	// 2) This method was not called by the right caller.
	if (me[opt_methodName] === caller) 
	{
		return me.constructor.prototype[opt_methodName].apply(me, args);
	} 
	else 
	{
		throw Error(
		'alib.base called from a method of one name ' +
		'to a method of a different name');
	}
};

/**
 * Used to manage dependencies at compile time or run-time if a callback is specified
 *
 * @param {string|string[]} mDeps Mixeed, can be a string or array of strings indicating required namespaces
 * @param {function} opt_methodName Optional callback function to be called once all dependencies are loaded
 */
 alib.require = function(mDeps, opt_methodName)
 {
 	// TODO: currently a stub for the compiler
 }

 /**
  * Declare a namespace
  *
  * @param {string} sName The full path of the namespace to provide
  */
alib.declare = function(sName) 
{
	alib.exportPath_(sName);
};


/**
 * Create object structure for a namespace path and make sure existing object are NOT overwritten
 *
 * @param {string} path oath of the object that this file defines.
 * @param {*=} opt_object the object to expose at the end of the path.
 * @param {Object=} opt_objectToExportTo The object to add the path to; default this
 * @private
 */
alib.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
	var parts = name.split('.');
	var cur = opt_objectToExportTo || this;

	// Internet Explorer exhibits strange behavior when throwing errors from
	// methods externed in this manner.
	if (!(parts[0] in cur) && cur.execScript) {
		cur.execScript('var ' + parts[0]);
	}

	// Parentheses added to eliminate strict JS warning in Firefox.
	for (var part; parts.length && (part = parts.shift());) {
		if (!parts.length && opt_object) {
			// last part and we have an object; use it
			cur[part] = opt_object;
		} else if (cur[part]) {
			cur = cur[part];
		} else {
			cur = cur[part] = {};
		}
	}
};


/****************************************************************************
*	
*	Section:	Global Functions
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
if (typeof insertAfter == "undefined")
{
	function insertAfter(parnt, node, referenceNode) 
	{
		if (referenceNode.nextSibling)
			parnt.insertBefore(node, referenceNode.nextSibling);
		else
			parnt.appendChild(node);
	}
}

if (typeof(Math.sqr) == "undefined")
{
	Math.sqr = function (x)
	{
		return x*x;
	};
}

function rgb2hex(value)
{
	var x = 255;
	var hex = '';
	var i;
	var regexp=/([0-9]+)[, ]+([0-9]+)[, ]+([0-9]+)/;
	var array=regexp.exec(value);
	for(i=1;i<4;i++) hex += ('0'+parseInt(array[i]).toString(16)).slice(-2);
	return '#'+hex;
}

function encode_utf8( s )
{
  return unescape(encodeURIComponent(s));
}

function escape_utf8( s )
{
  return encodeURIComponent(s);
}

function decode_utf8(s)
{
  return decodeURIComponent(escape(s));
}

function unescape_utf8(s)
{
  return decodeURIComponent(s);
}

function rawurlencode (str) 
{
    // URL-encodes string  
    // 
    // version: 1109.2015
    // discuss at: http://phpjs.org/functions/rawurlencode
    // +   original by: Brett Zamir (http://brett-zamir.me)
    // +      input by: travc
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Michael Grier
    // +   bugfixed by: Brett Zamir (http://brett-zamir.me)
    // +      input by: Ratheous
    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Joris
    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
    // %          note 1: This reflects PHP 5.3/6.0+ behavior
    // %        note 2: Please be aware that this function expects to encode into UTF-8 encoded strings, as found on
    // %        note 2: pages served as UTF-8
    // *     example 1: rawurlencode('Kevin van Zonneveld!');
    // *     returns 1: 'Kevin%20van%20Zonneveld%21'
    // *     example 2: rawurlencode('http://kevin.vanzonneveld.net/');
    // *     returns 2: 'http%3A%2F%2Fkevin.vanzonneveld.net%2F'
    // *     example 3: rawurlencode('http://www.google.nl/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a');
    // *     returns 3: 'http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a'
    str = (str + '').toString();
 
    // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current
    // PHP behavior, you would need to add ".replace(/~/g, '%7E');" to the following.
    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').
    replace(/\)/g, '%29').replace(/\*/g, '%2A');
}

function rawurldecode (str) 
{
    // Decodes URL-encodes string  
    // 
    // version: 1109.2015
    // discuss at: http://phpjs.org/functions/rawurldecode
    // +   original by: Brett Zamir (http://brett-zamir.me)
    // +      input by: travc
    // +      input by: Brett Zamir (http://brett-zamir.me)
    // +   bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +      input by: Ratheous
    // +      reimplemented by: Brett Zamir (http://brett-zamir.me)
    // %        note 1: Please be aware that this function expects to decode from UTF-8 encoded strings, as found on
    // %        note 1: pages served as UTF-8
    // *     example 1: rawurldecode('Kevin+van+Zonneveld%21');
    // *     returns 1: 'Kevin+van+Zonneveld!'
    // *     example 2: rawurldecode('http%3A%2F%2Fkevin.vanzonneveld.net%2F');
    // *     returns 2: 'http://kevin.vanzonneveld.net/'
    // *     example 3: rawurldecode('http%3A%2F%2Fwww.google.nl%2Fsearch%3Fq%3Dphp.js%26ie%3Dutf-8%26oe%3Dutf-8%26aq%3Dt%26rls%3Dcom.ubuntu%3Aen-US%3Aunofficial%26client%3Dfirefox-a');
    // *     returns 3: 'http://www.google.nl/search?q=php.js&ie=utf-8&oe=utf-8&aq=t&rls=com.ubuntu:en-US:unofficial&client=firefox-a'
    // *     example 4: rawurldecode('-22%97bc%2Fbc');
    // *     returns 4: '-22�bc/bc'
    return decodeURIComponent(str + '');
}

String.prototype.trim = function() 
{
	return this.replace(/^\s+|\s+$/g,"");
}
String.prototype.ltrim = function() 
{
	return this.replace(/^\s+/,"");
}
String.prototype.rtrim = function() 
{
	return this.replace(/\s+$/,"");
}
String.prototype.escapeHTML = function(){
    var result = "";
    for(var i = 0; i < this.length; i++){
        if(this.charAt(i) == "&" 
              && this.length-i-1 >= 4 
              && this.substr(i, 4) != "&amp;"){
            result = result + "&amp;";
        } else if(this.charAt(i)== "<"){
            result = result + "&lt;";
        } else if(this.charAt(i)== ">"){
            result = result + "&gt;";
        } else {
            result = result + this.charAt(i);
        }
    }
    return result;
};


// Base64
var Base64 = {
 
	// private property
	_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
 
	// public method for encoding
	encode : function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = Base64._utf8_encode(input);
 
		while (i < input.length) {
 
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
 
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
 
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
 
			output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);
 
		}
 
		return output;
	},
 
	// public method for decoding
	decode : function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
 
		input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 
		while (i < input.length) {
 
			enc1 = this._keyStr.indexOf(input.charAt(i++));
			enc2 = this._keyStr.indexOf(input.charAt(i++));
			enc3 = this._keyStr.indexOf(input.charAt(i++));
			enc4 = this._keyStr.indexOf(input.charAt(i++));
 
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
 
			output = output + String.fromCharCode(chr1);
 
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
 
		}
 
		output = Base64._utf8_decode(output);
 
		return output;
 
	},
 
	// private method for UTF-8 encoding
	_utf8_encode : function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
 
		for (var n = 0; n < string.length; n++) {
 
			var c = string.charCodeAt(n);
 
			if (c < 128) {
				utftext += String.fromCharCode(c);
			}
			else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			}
			else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
 
		}
 
		return utftext;
	},
 
	// private method for UTF-8 decoding
	_utf8_decode : function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
 
		while ( i < utftext.length ) {
 
			c = utftext.charCodeAt(i);
 
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			}
			else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			}
			else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
 
		}
 
		return string;
	}
 
}

/* Event Functions */

// Add an event to the obj given
// event_name refers to the event trigger, without the "on", like click or mouseover
// func_name refers to the function callback when event is triggered


// Get the obj that starts the event
function getElement(evt){
	if (window.event){
		return window.event.srcElement;
	}else{
		return evt.currentTarget;
	}
}
// Get the obj that triggers off the event
function getTargetElement(evt){
	if (window.event){
		return window.event.srcElement;
	}else{
		return evt.target;
	}
}
// For IE only, stops the obj from being selected
function stopSelect(obj){
	if (typeof obj.onselectstart != 'undefined'){
		alib.dom.addEvent(obj,"selectstart",function(){ return false;});
	}
}



/*    Escape function   */
String.prototype.addslashes = function(){
	return this.replace(/(["\\\.\|\[\]\^\*\+\?\$\(\)])/g, '\\$1');
}
String.prototype.trim = function () {
    return this.replace(/^\s*(\S*(\s+\S+)*)\s*$/, "$1");
};
/* --- Escape --- */

/* Offset position from top of the screen */
function curTop(obj){
	toreturn = 0;
	while(obj){
		toreturn += obj.offsetTop;
		obj = obj.offsetParent;
	}
	return toreturn;
}
function curLeft(obj){
	toreturn = 0;
	while(obj){
		toreturn += obj.offsetLeft;
		obj = obj.offsetParent;
	}
	return toreturn;
}
/* ------ End of Offset function ------- */

/* Types Function */

// is a given input a number?
function isNumber(a) {
    return typeof a == 'number' && isFinite(a);
}

/* Object Functions */

function replaceHTML(obj,text){
	while(el = obj.childNodes[0]){
		obj.removeChild(el);
	};
	obj.appendChild(document.createTextNode(text));
}



Number.prototype.format = function(format) {
   var hasComma = -1 < format.indexOf(','),
     psplit = format.stripNonNumeric().split('.'),
     that = this;
  
   // compute precision
   if (1 < psplit.length) {
     // fix number precision
     that = that.toFixed(psplit[1].length);
   }
   // error: too many periods
   else if (2 < psplit.length) {
     throw('NumberFormatException: invalid format, formats should have no more than 1 period: ' + format);
   }
   // remove precision
   else {
     that = that.toFixed(0);
   } 
  
   // get the string now that precision is correct
   var fnum = that.toString();
 
   // format has comma, then compute commas
   if (hasComma) {
     // remove precision for computation
     psplit = fnum.split('.');
  
     var cnum = psplit[0],
       parr = [],
       j = cnum.length,
       m = Math.floor(j / 3),
       n = cnum.length % 3 || 3; // n cannot be ZERO or causes infinite loop
  
     // break the number into chunks of 3 digits; first chunk may be less than 3
     for (var i = 0; i < j; i += n) {
       if (i != 0) {n = 3;}
       parr[parr.length] = cnum.substr(i, n);
       m -= 1;
     }
  
     // put chunks back together, separated by comma
     fnum = parr.join(',');
  
    // add the precision back in
    if (psplit[1]) {fnum += '.' + psplit[1];}
  } 
 
  // replace the number portion of the format with fnum
  return format.replace(/[\d,?\.?]+/, fnum);
};


// Number Functions
//
// obj.value = new NumberFormat(obj.value, 2).toFormatted();	
// nf.setCurrency(true); // add $
// .toUnformatted = get the original number
//
// -----------------------------------------------------------------------
function NumberFormat(num, inputDecimal)
{
	this.VERSION = 'Number Format v1.5.4';
	this.COMMA = ',';
	this.PERIOD = '.';
	this.DASH = '-'; 
	this.LEFT_PAREN = '('; 
	this.RIGHT_PAREN = ')'; 
	this.LEFT_OUTSIDE = 0; 
	this.LEFT_INSIDE = 1;  
	this.RIGHT_INSIDE = 2;  
	this.RIGHT_OUTSIDE = 3;  
	this.LEFT_DASH = 0; 
	this.RIGHT_DASH = 1; 
	this.PARENTHESIS = 2; 
	this.NO_ROUNDING = -1 
	this.num;
	this.numOriginal;
	this.hasSeparators = false;  
	this.separatorValue;  
	this.inputDecimalValue; 
	this.decimalValue;  
	this.negativeFormat; 
	this.negativeRed; 
	this.hasCurrency;  
	this.currencyPosition;  
	this.currencyValue;  
	this.places;
	this.roundToPlaces; 
	this.truncate; 
	this.setNumber = setNumberNF;
	this.toUnformatted = toUnformattedNF;
	this.setInputDecimal = setInputDecimalNF; 
	this.setSeparators = setSeparatorsNF; 
	this.setCommas = setCommasNF;
	this.setNegativeFormat = setNegativeFormatNF; 
	this.setNegativeRed = setNegativeRedNF; 
	this.setCurrency = setCurrencyNF;
	this.setCurrencyPrefix = setCurrencyPrefixNF;
	this.setCurrencyValue = setCurrencyValueNF; 
	this.setCurrencyPosition = setCurrencyPositionNF; 
	this.setPlaces = setPlacesNF;
	this.toFormatted = toFormattedNF;
	this.toPercentage = toPercentageNF;
	this.getOriginal = getOriginalNF;
	this.moveDecimalRight = moveDecimalRightNF;
	this.moveDecimalLeft = moveDecimalLeftNF;
	this.getRounded = getRoundedNF;
	this.preserveZeros = preserveZerosNF;
	this.justNumber = justNumberNF;
	this.expandExponential = expandExponentialNF;
	this.getZeros = getZerosNF;
	this.moveDecimalAsString = moveDecimalAsStringNF;
	this.moveDecimal = moveDecimalNF;
	this.addSeparators = addSeparatorsNF;
	if (inputDecimal == null) {
	this.setNumber(num, this.PERIOD);
	} else {
	this.setNumber(num, inputDecimal); 
	}
	this.setCommas(true);
	this.setNegativeFormat(this.LEFT_DASH); 
	this.setNegativeRed(false); 
	this.setCurrency(false); 
	this.setCurrencyPrefix('$');
	this.setPlaces(2);
}

function setInputDecimalNF(val)
{
	this.inputDecimalValue = val;
}

function setNumberNF(num, inputDecimal)
{
	if (inputDecimal != null) 
	{
		this.setInputDecimal(inputDecimal); 
	}
	this.numOriginal = num;
	this.num = this.justNumber(num);
}
function toUnformattedNF()
{
	return (this.num);
}

function getOriginalNF()
{
	return (this.numOriginal);
}

function setNegativeFormatNF(format)
{
	this.negativeFormat = format;
}
function setNegativeRedNF(isRed)
{
	this.negativeRed = isRed;
}
function setSeparatorsNF(isC, separator, decimal)
{
	this.hasSeparators = isC;
	if (separator == null) separator = this.COMMA;
	if (decimal == null) decimal = this.PERIOD;
	if (separator == decimal) 
	{
		this.decimalValue = (decimal == this.PERIOD) ? this.COMMA : this.PERIOD;
	} 
	else 
	{
		this.decimalValue = decimal;
	}
	this.separatorValue = separator;
}
function setCommasNF(isC)
{
	this.setSeparators(isC, this.COMMA, this.PERIOD);
}
function setCurrencyNF(isC)
{
	this.hasCurrency = isC;
}

function setCurrencyValueNF(val)
{
	this.currencyValue = val;
}
function setCurrencyPrefixNF(cp)
{
	this.setCurrencyValue(cp);
	this.setCurrencyPosition(this.LEFT_OUTSIDE);
}

function setCurrencyPositionNF(cp)
{
	this.currencyPosition = cp
}

function setPlacesNF(p, tr)
{
	this.roundToPlaces = !(p == this.NO_ROUNDING); 
	this.truncate = (tr != null && tr); 
	this.places = (p < 0) ? 0 : p; 
}

function addSeparatorsNF(nStr, inD, outD, sep)
{
	nStr += '';
	var dpos = nStr.indexOf(inD);
	var nStrEnd = '';
	if (dpos != -1) 
	{
		nStrEnd = outD + nStr.substring(dpos + 1, nStr.length);
		nStr = nStr.substring(0, dpos);
	}

	var rgx = /(\d+)(\d{3})/;
	while (rgx.test(nStr)) 
	{
		nStr = nStr.replace(rgx, '$1' + sep + '$2');
	}
	return nStr + nStrEnd;
}
function toFormattedNF()
{	
var pos;
var nNum = this.num; 
var nStr;            
var splitString = new Array(2);   
if (this.roundToPlaces) {
nNum = this.getRounded(nNum);
nStr = this.preserveZeros(Math.abs(nNum)); 
} else {
nStr = this.expandExponential(Math.abs(nNum)); 
}
if (this.hasSeparators) {
nStr = this.addSeparators(nStr, this.PERIOD, this.decimalValue, this.separatorValue);
} else {
nStr = nStr.replace(new RegExp('\\' + this.PERIOD), this.decimalValue); 
}
var c0 = '';
var n0 = '';
var c1 = '';
var n1 = '';
var n2 = '';
var c2 = '';
var n3 = '';
var c3 = '';
var negSignL = (this.negativeFormat == this.PARENTHESIS) ? this.LEFT_PAREN : this.DASH;
var negSignR = (this.negativeFormat == this.PARENTHESIS) ? this.RIGHT_PAREN : this.DASH;
if (this.currencyPosition == this.LEFT_OUTSIDE) {
if (nNum < 0) {
if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
}
if (this.hasCurrency) c0 = this.currencyValue;
} else if (this.currencyPosition == this.LEFT_INSIDE) {
if (nNum < 0) {
if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
}
if (this.hasCurrency) c1 = this.currencyValue;
}
else if (this.currencyPosition == this.RIGHT_INSIDE) {
if (nNum < 0) {
if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n0 = negSignL;
if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n3 = negSignR;
}
if (this.hasCurrency) c2 = this.currencyValue;
}
else if (this.currencyPosition == this.RIGHT_OUTSIDE) {
if (nNum < 0) {
if (this.negativeFormat == this.LEFT_DASH || this.negativeFormat == this.PARENTHESIS) n1 = negSignL;
if (this.negativeFormat == this.RIGHT_DASH || this.negativeFormat == this.PARENTHESIS) n2 = negSignR;
}
if (this.hasCurrency) c3 = this.currencyValue;
}
nStr = c0 + n0 + c1 + n1 + nStr + n2 + c2 + n3 + c3;
if (this.negativeRed && nNum < 0) {
nStr = '<font color="red">' + nStr + '</font>';
}
return (nStr);
}
function toPercentageNF()
{
nNum = this.num * 100;
nNum = this.getRounded(nNum);
return nNum + '%';
}
function getZerosNF(places)
{
var extraZ = '';
var i;
for (i=0; i<places; i++) {
extraZ += '0';
}
return extraZ;
}
function expandExponentialNF(origVal)
{
if (isNaN(origVal)) return origVal;
var newVal = parseFloat(origVal) + ''; 
var eLoc = newVal.toLowerCase().indexOf('e');
if (eLoc != -1) {
var plusLoc = newVal.toLowerCase().indexOf('+');
var negLoc = newVal.toLowerCase().indexOf('-', eLoc); 
var justNumber = newVal.substring(0, eLoc);
if (negLoc != -1) {
var places = newVal.substring(negLoc + 1, newVal.length);
justNumber = this.moveDecimalAsString(justNumber, true, parseInt(places));
} else {
if (plusLoc == -1) plusLoc = eLoc;
var places = newVal.substring(plusLoc + 1, newVal.length);
justNumber = this.moveDecimalAsString(justNumber, false, parseInt(places));
}
newVal = justNumber;
}
return newVal;
} 
function moveDecimalRightNF(val, places)
{
var newVal = '';
if (places == null) {
newVal = this.moveDecimal(val, false);
} else {
newVal = this.moveDecimal(val, false, places);
}
return newVal;
}
function moveDecimalLeftNF(val, places)
{
var newVal = '';
if (places == null) {
newVal = this.moveDecimal(val, true);
} else {
newVal = this.moveDecimal(val, true, places);
}
return newVal;
}
function moveDecimalAsStringNF(val, left, places)
{
var spaces = (arguments.length < 3) ? this.places : places;
if (spaces <= 0) return val; 
var newVal = val + '';
var extraZ = this.getZeros(spaces);
var re1 = new RegExp('([0-9.]+)');
if (left) {
newVal = newVal.replace(re1, extraZ + '$1');
var re2 = new RegExp('(-?)([0-9]*)([0-9]{' + spaces + '})(\\.?)');		
newVal = newVal.replace(re2, '$1$2.$3');
} else {
var reArray = re1.exec(newVal); 
if (reArray != null) {
newVal = newVal.substring(0,reArray.index) + reArray[1] + extraZ + newVal.substring(reArray.index + reArray[0].length); 
}
var re2 = new RegExp('(-?)([0-9]*)(\\.?)([0-9]{' + spaces + '})');
newVal = newVal.replace(re2, '$1$2$4.');
}
newVal = newVal.replace(/\.$/, ''); 
return newVal;
}
function moveDecimalNF(val, left, places)
{
var newVal = '';
if (places == null) {
newVal = this.moveDecimalAsString(val, left);
} else {
newVal = this.moveDecimalAsString(val, left, places);
}
return parseFloat(newVal);
}
function getRoundedNF(val)
{
val = this.moveDecimalRight(val);
if (this.truncate) {
val = val >= 0 ? Math.floor(val) : Math.ceil(val); 
} else {
val = Math.round(val);
}
val = this.moveDecimalLeft(val);
return val;
}
function preserveZerosNF(val)
{
var i;
val = this.expandExponential(val);
if (this.places <= 0) return val; 
var decimalPos = val.indexOf('.');
if (decimalPos == -1) {
val += '.';
for (i=0; i<this.places; i++) {
val += '0';
}
} else {
var actualDecimals = (val.length - 1) - decimalPos;
var difference = this.places - actualDecimals;
for (i=0; i<difference; i++) {
val += '0';
}
}
return val;
}
function justNumberNF(val)
{
newVal = val + '';
var isPercentage = false;
if (newVal.indexOf('%') != -1) {
newVal = newVal.replace(/\%/g, '');
isPercentage = true; 
}
var re = new RegExp('[^\\' + this.inputDecimalValue + '\\d\\-\\+\\(\\)eE]', 'g');	
newVal = newVal.replace(re, '');
var tempRe = new RegExp('[' + this.inputDecimalValue + ']', 'g');
var treArray = tempRe.exec(newVal); 
if (treArray != null) {
var tempRight = newVal.substring(treArray.index + treArray[0].length); 
newVal = newVal.substring(0,treArray.index) + this.PERIOD + tempRight.replace(tempRe, ''); 
}
if (newVal.charAt(newVal.length - 1) == this.DASH ) {
newVal = newVal.substring(0, newVal.length - 1);
newVal = '-' + newVal;
}
else if (newVal.charAt(0) == this.LEFT_PAREN
&& newVal.charAt(newVal.length - 1) == this.RIGHT_PAREN) {
newVal = newVal.substring(1, newVal.length - 1);
newVal = '-' + newVal;
}
newVal = parseFloat(newVal);
if (!isFinite(newVal)) {
newVal = 0;
}
if (isPercentage) {
newVal = this.moveDecimalLeft(newVal, 2);
}
return newVal;
}


/*======================================================================================
	
	Module:		CXml

	Purpose:	Handle working with xml documents

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2011 Aereus Corporation. All rights reserved.
	
	Usage:		

======================================================================================*/

/***********************************************************************************
 *
 *	Class: 		CXml
 *
 *	Purpose:	This is the node linked list
 *
 *	Arguements:	name	- string: the name of the node
 *				text	- string: the value of the node
 *
 ***********************************************************************************/
function CXml(name, text)
{
	this.m_name = name;
	this.m_text = (text)?text:"";
	this.m_attributes = new Array();
	this.m_children = new Array();
	this.m_xmlcld = null; // Reference to DOM xml node
}

/***********************************************************************************
 *
 *	Function: 	getNumChildren
 *
 *	Purpose:	Get number of children (try not to access vars directly)
 *
 ***********************************************************************************/
CXml.prototype.getNumChildren = function ()
{
	if (this.m_children)
		return this.m_children.length;
	else
		return 0;
}

/***********************************************************************************
 *
 *	Function: 	getChildNode
 *
 *	Purpose:	Retrieve a node at a specific index
 *
 *	Arguements:	iIndex	- integer: index of node to retrieve
 *
 ***********************************************************************************/
CXml.prototype.getChildNode = function(iIndex)
{
	return this.m_children[iIndex];
}

/***********************************************************************************
 *
 *	Function: 	getChildNodesByName
 *
 *	Purpose:	Retrieve nodes by name
 *
 *	Arguements:	name	- string: name of nodes to retrieve
 *
 ***********************************************************************************/
CXml.prototype.getChildNodesByName = function(name)
{
	if (this.m_query_res && this.m_query_res.length)
		delete this.m_query_res;
	
	// mres is used as a temporary storage array of node references
	this.m_query_res = new Array();
	
	// Loop through children looking for 'name'
	var num = this.getNumChildren();
	var iFound = 0;
	for (i = 0; i < num; i++)
	{
		if (this.getChildNode(i).m_name == name)
		{
			this.m_query_res[iFound] = this.getChildNode(i);
			iFound++;
		}
	}

	return this.m_query_res;
}

/***********************************************************************************
 *
 *	Function: 	getChildNodeByName
 *
 *	Purpose:	Retrieve a single node by name
 *
 *	Arguements:	name	- string: name of nodes to retrieve
 *
 ***********************************************************************************/
CXml.prototype.getChildNodeByName = function (name)
{
	var val = null;

	// Loop through children looking for 'name'
	for (var p = 0; p < this.getNumChildren(); p++)
	{
		if (this.getChildNode(p).m_name == name)
		{
			val = this.getChildNode(p);
			break;
		}
	}

	return val;
}

/***********************************************************************************
 *
 *	Function: 	getChildNodesValByName
 *
 *	Purpose:	Retrieve node value by name. If more than one node with that name
 *				is found it will return the first value. This is best used where
 *				you know for sure there will only be one child node with that name.
 *
 *	Arguements:	name	- string: name of nodes to retrieve
 *
 ***********************************************************************************/
CXml.prototype.getChildNodeValByName = function(name)
{
	var val = "";

	// Loop through children looking for 'name'
	for (var p = 0; p < this.getNumChildren(); p++)
	{
		if (this.getChildNode(p).m_name == name)
		{
			val = this.getChildNode(p).m_text;
			break;
		}
	}

	return val;
}

/***********************************************************************************
 *
 *	Function: 	getAttribute
 *
 *	Purpose:	Get node attribute by name
 *
 *	Arguements:	name	- string: name of attribute to retrieve
 *
 ***********************************************************************************/
CXml.prototype.getAttribute = function(name)
{
	var val = this.m_xmlcld.getAttribute(name);
	if (!val)
		val = "";
	return val;
}

/***********************************************************************************
 *
 *	Function: 	getNodeValue
 *
 *	Purpose:	Get the text of a node
 *
 ***********************************************************************************/
CXml.prototype.getValue = function()
{
	//return this.m_xmlcld.nodeValue;
	return this.m_text;
}

/***********************************************************************************
 *
 *	Function: 	text
 *
 *	Purpose:	Get the text of a node
 *
 ***********************************************************************************/
CXml.prototype.text = function()
{
	return this.getValue();
}

/***********************************************************************************
 *
 *	Function: 	name
 *
 *	Purpose:	Get the name of a node
 *
 ***********************************************************************************/
CXml.prototype.name = function()
{
	return this.m_name;
}

/*======================================================================================
	
	Module:		CAjax

	Purpose:	Handle remote XML documents

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2006 Aereus Corporation. All rights reserved.
	
	Usage:		// XML
				ajax = new CAjax('xml');
				ajax.onload = function(root)
				{
					// Get first node
					var num = root.getNumChildren();
					for (i = 0; i < num; i++)
					{
						// Get child nodes
						var model = root.getChildNode(i);
						if (model.m_name == "mynode")
						{
							document.write(model.m_name);
							document.write(model.m_text);
						}
					}
				};
				ajax.exec("/path/to/xml.xml");

				// HTML
				ajax = new CAjax('html');
				ajax.onload = function(data)
				{
					alert("This is my html: " + data);
				};
				ajax.exec("/path/to/html.html");

======================================================================================*/

// Define constants
// -----------------------------------------------------------
var AJAX_POST = 1;
var AJAX_GET = 2;

// Node Types
var AJAX_NODE_TEXT = 3;
var AJAX_NODE_HTML = 1;

// Debugging
var AJAX_TRACE_RESPONSE = false;


/***********************************************************************************
 *
 *	Class: 		CAjax
 *
 *	Purpose:	Encapsulate AJAX functionality
 *
 ***********************************************************************************/
function CAjax(dataType)
{
	this.m_xmlLocal = null;
	this.m_response = null;
	//this.m_firstNode = null;
	this.m_method = AJAX_POST;
	this.dataType = (dataType) ? dataType : "xml";
	this.cbData = new Object();
	this.debug = false;
	
	/*
	if (window.XMLHttpRequest) 
	{
		this.m_xmlLocal = new XMLHttpRequest();
	}
	else
	{
		var msxmlhttp = new Array('Msxml2.XMLHTTP.5.0',
								  'Msxml2.XMLHTTP.4.0',
								  'Msxml2.XMLHTTP.3.0',
								  'Msxml2.XMLHTTP',
								  'Microsoft.XMLHTTP');

		for (var i = 0; i < msxmlhttp.length; i++) 
		{
			try 
			{
				this.m_xmlLocal = new ActiveXObject(msxmlhttp[i]);
			} 
			catch (e) 
			{
				this.m_xmlLocal = null;
			}
		}
	}
	*/

	/**
	 * Alias to Xhr object
	 *
	 * @var {alib.net.Xhr}
	 */
	this.Xhr = new alib.net.Xhr();
}

/**
 * Alias to new alib.net.Xhr.send function
 *
 * @param string url The remote url
 * @param array args Array to convert to object to send to Xhr
 * @param bool asycn If true then this is asycn (default) if false, then sync
 * @return Null if async, data if sync
 */
CAjax.prototype.exec = function(url, args, async)
{
	this.async = (async != null) ? async : true;
	var post_data = null;
	//var xmlLocal = this.m_xmlLocal;
	this.wasaborted = false;
	var objref = this;

	this.loading = true;
	this.Xhr.setAsync(this.async);
	this.Xhr.setReturnType(this.dataType);

    // If this is a syncronus request we don't need callback
    if (this.async == true)
    {
		// Listen for load event
		alib.events.listen(this.Xhr, "load", function(evt) { 

			// Make sure object is still loaded, it may have been destroyed
			if (evt.data.ajaxCls.dataType == "xml")
				evt.data.ajaxCls.onload(evt.data.ajaxCls.parseXml(this.getResponseXML()));
			else
				evt.data.ajaxCls.onload(this.getResponse());

		}, {ajaxCls:this});

		alib.events.listen(this.Xhr, "error", function(evt) { 
			evt.data.ajaxCls.onload(false);
		}, {ajaxCls:this});
	}

	// Set data
	var data = "";
	if (typeof args === 'string') {
		data = args;
	} else if (typeof args != "undefined" && args!=null) {
		/*
		var data = new Object();
		if (args.length)
		{
			// Arguments are pass as [[name, value]]
			for (i = 0; i < args.length; i++)
				data[args[i][0]] = args[i][1];
		}
		*/

		numargs = args.length;
		if (numargs)
		{
			// Arguments are pass as {name, value}
			for (i = 0; i < numargs; i++)
			{
				if (data) 
					data += "&";
				else
					data = "";

				data += args[i][0] + "=";
				if (typeof args[i][1] != "undefined" && args[i][1] != null)
				 data += escape_utf8(args[i][1]);
			}
		}
	}

	this.Xhr.send(url, ((this.m_method == AJAX_GET) ? "GET" : "POST"), data);

	if (this.async == false)
	{
		switch (this.dataType)
		{
		case "xml":
			return this.parseXml(this.Xhr.getResponseXML());
		case "json":
			if (this.Xhr.getResponseText())
			{
				try
				{
					if (typeof JSON != "undefined")
						return JSON.parse(this.Xhr.getResponseText());
					else
						return eval('(' + this.Xhr.getResponseText() + ')');
				}
				catch (e)
				{
					if (AJAX_TRACE_RESPONSE || alib.m_debug)
					{
						if (typeof JSON == "undefined")
							ALib.trace("Ajax Error: JSON was undefined: <pre>" + this.Xhr.getResponseText()+"</pre>");
						else
							ALib.trace("Ajax Error: Problem parsing JSON object with eval: <pre>" + this.Xhr.getResponseText()+"</pre>");
					}
				}
			}
			break;
		default:
			return this.Xhr.getResponseText();
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	exec
 *
 *	Purpose:	Send request to server using http get
 *
 *	Arguements:	url   - string: path to xml document
 *				async - bool: defaults to true. Be careful if set to false, it can
 *						hang the browser until the xml doc is loaded. Users generally
 *						don't like that too much.
 *
 ***********************************************************************************/
CAjax.prototype.execOld = function(url, args, async)
{
	this.async = (async != null) ? async : true;
	var post_data = null;
	var xmlLocal = this.m_xmlLocal;
	this.wasaborted = false;
	var objref = this;

	//ALib.m_debug = true;
	//ALib.trace("AJAX GET: " + url);
    
    // If this is a syncronus request we don't need callback
    if (this.async == true)
    {
	    //this.m_xmlLocal.onreadystatechange = inlineLoaded;
		this.m_xmlLocal.ajaxClsRef = this;
	    this.m_xmlLocal.onreadystatechange = function() { 
			// May not be set anymore if the ajax object got distroyed
			if (this.ajaxClsRef)
				this.ajaxClsRef.readyStateChange(); 
		}
	}

	this.loading = true;

	if (this.m_method == AJAX_GET)
	{
		this.m_xmlLocal.open("GET", url, this.async);
	}
	else if (this.m_method == AJAX_POST)
	{
		// Get arguments
		var numargs = 0;
		if (typeof args != "undefined" && args!=null)
		{
			numargs = args.length;
			if (numargs)
			{
				// Arguments are pass as {name, value}
				for (i = 0; i < numargs; i++)
				{
					if (post_data) 
						post_data += "&";
					else
						post_data = "";

					post_data += args[i][0] + "=";
					if (typeof args[i][1] != "undefined" && args[i][1] != null)
					 post_data += escape_utf8(args[i][1]);
				}
			}
		}

		this.m_xmlLocal.open("POST", url, this.async);
		//Send the proper header information along with the request
		this.m_xmlLocal.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
		//this.m_xmlLocal.setRequestHeader("Content-length", post_data.length);
		//this.m_xmlLocal.setRequestHeader("Connection", "close");
	}

	this.m_xmlLocal.send(post_data);

    // If this is a syncronus request we don't need callback, just process data
    if (this.async == false)
    {
        return this.readyStateChange();
    }
}

/***********************************************************************************
 *
 *	Function: 	readyStateChange
 *
 *	Purpose:	Private function that handles readystate change for request.
 *
 ***********************************************************************************/
CAjax.prototype.readyStateChange = function ()
{
	if (this.m_xmlLocal && this.m_xmlLocal.readyState == 4) 
	{
		if (this.m_xmlLocal.status == 200) 
		{
			var data = null;

			if (AJAX_TRACE_RESPONSE)
				ALib.trace("Response: <pre>" + this.m_xmlLocal.responseText+"</pre>");

			switch (this.dataType)
			{
				case 'xml':

					// If a valid xml document has not been loaded then exit gracefully
					if (this.m_xmlLocal.responseXML == null)
					{
						if (ALib.m_debug == true)
							ALib.trace("XML Failed: " + this.m_xmlLocal.responseText);
					}
					else if (this.m_xmlLocal.responseXML.documentElement == null)
					{
						if (ALib.m_debug == true)
							ALib.trace("XML Failed: " + this.m_xmlLocal.responseText);
					}
					else
					{
						data = this.parseXml(this.m_xmlLocal.responseXML);
						//data = this.m_firstNode;
					}
					break;
				case 'json':
					if (this.m_xmlLocal.responseText)
					{
						try
						{
							if (typeof JSON != "undefined")
								data = JSON.parse(this.m_xmlLocal.responseText);
							else
								data = eval('(' + this.m_xmlLocal.responseText + ')');
						}
						catch (e)
						{
							if (AJAX_TRACE_RESPONSE || alib.m_debug)
							{
								if (typeof JSON == "undefined")
									ALib.trace("Ajax Error: JSON was undefined: <pre>" + this.m_xmlLocal.responseText+"</pre>");
								else
									ALib.trace("Ajax Error: Problem parsing JSON object with eval: <pre>" + this.m_xmlLocal.responseText+"</pre>");
							}
						}
					}
					break;
				case 'html':
				case 'text':
					data = this.m_xmlLocal.responseText;
					break;
				case 'script':
					data = this.m_xmlLocal.responseText;
					break;
			}
			
			// Populate text
			this.responseText = this.m_xmlLocal.responseText;

			this.loading = false;

			// Call user defined loaded
			if (!this.wasaborted)
				this.onload(data);

			if (!this.async)
				return data;
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	parseXml
 *
 *	Purpose:	Private function that parses the xml document once it is loaded
 *
 ***********************************************************************************/
CAjax.prototype.parseXml = function (responseXML)
{
	// Get the parent node
	this.m_response  = responseXML.documentElement;
	
	var rootNode = new CXml("root", "");
	rootNode.m_xmlcld = this.m_response;

	// Parse tree
	this.parseNodes(rootNode, this.m_response);
	return rootNode;
}

/***********************************************************************************
 *
 *	Function: 	abort
 *
 *	Purpose:	Stop Processing
 *
 ***********************************************************************************/
CAjax.prototype.abort = function ()
{
	/*
	try
	{
		this.m_xmlLocal.abort();
		this.wasaborted = true;
	}
	catch (e) {}
	*/
	try
	{
		this.Xhr.abort();
	}
	catch (e) {}
}

/***********************************************************************************
 *
 *	Function: 	parseNodes
 *
 *	Purpose:	Private function that parses each xml node
 *
 *	Arguements:	ajax_node   - CXml: Branch to parse
 *				xml_child	- xml_node: xml object node to copy in CXml
 *
 ***********************************************************************************/
CAjax.prototype.parseNodes = function (ajax_node, xml_child)
{
	if (!ajax_node || !xml_child)
		return 0;
	
	var iNumSubNodes = ajax_node.m_children.length;
	var children  = xml_child.childNodes;
	var iNewIndex = 0;

	if (children)
	{
		var num = children.length;
		for(var i = 0; i < num; i++)
		{
			var child = children[i];

			// Element Node
			if (child.nodeType == AJAX_NODE_HTML)
			{
				ajax_node.m_children[iNumSubNodes + iNewIndex] = new CXml(child.nodeName, "");
				ajax_node.m_children[iNumSubNodes + iNewIndex].m_xmlcld = child;

				if (child.childNodes && child.childNodes.length)
					this.parseNodes(ajax_node.m_children[iNumSubNodes + iNewIndex], child);

				iNewIndex++;
			}

			// Text Node
			if (child.nodeType == AJAX_NODE_TEXT)
			{
				ajax_node.m_text += child.nodeValue;
			}
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	onload
 *
 *	Purpose:	This function should be redefined by the public calling procedure.
 *
 ***********************************************************************************/
CAjax.prototype.onload = function(data)
{
}

/*======================================================================================
	
	Module:		CAjaxRpc

	Purpose:	Execute remote procedures and return value via ajax

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2006 Aereus Corporation. All rights reserved.
	
	Usage:		// Create ajaxrpc object
				var rpc = new CAjaxRpc("/path/to/xml.xml", "function_name", 
									   [["argument_name", "value"]], callback_function, cb_args);

======================================================================================*/

// Define globals
// -----------------------------------------------------------
var g_CAjaxRpc = new Array();


/***********************************************************************
*	Class:		CAjaxRpc
*
*	Purpose:	Create CAjaxRpc class
*
*	Arguments:	url			- string: path to server file
*				f_name 		- string: name of function to process on server
*				args		- array[][]: arguments to send to server.
*						      Sent via get using name=value
*				finished_cb	- string or function ref: function to call
*							  with return value after server has processed
*							  request. Define: function name(retval);
*
************************************************************************/
function CAjaxRpc(url, f_name, args, finished_cb, cb_args, method, async, dataType)
{
	var send_method = (method) ? method : AJAX_GET;
    var is_async = (async != null) ? async : true;
	var resp_type = (dataType) ? dataType : "xml";

	// Get last index
	var ind = g_CAjaxRpc.length;
	g_CAjaxRpc[ind] = new CAjax(resp_type);
	g_CAjaxRpc[ind].m_method = send_method;

	if (typeof cb_args != "undefined")
		g_CAjaxRpc[ind].m_cb_args = cb_args;
	else
		g_CAjaxRpc[ind].m_cb_args = null;

	g_CAjaxRpc[ind].onload = function(root)
	{
		var retval = null;

		// The result will be held in a variable called 'retval'
		if (root)
		{
			if (this.dataType == "xml")
			{
				var num = root.getNumChildren();
				if (num)
				{
					for (i = 0; i < num; i++)
					{
						var child = root.getChildNode(i);
						if (child.m_name == "retval")
						{
							if (child.m_text)
								retval = unescape_utf8(child.m_text);
						}

						if (child.m_name == "message")
						{
							if (child.m_text)
								this.message = unescape_utf8(child.m_text);
						}
					}
					
				}
			}
			else // All other formats just return object/string
			{
				retval = root;
			}


			if (this.cb_function)
			{
				try
				{
					if (typeof this.cb_function == "string")
					{
						if (this.m_cb_args)
						{
							var passargs = "\"" + retval + "\"";
							for (var j = 0; j < m_cb_args.length; j++)
							{
								passargs += ", \"" + m_cb_args[j] + "\"";
							}

							eval(this.cb_function + "(" + passargs + ")");
						}
						else
						{
							eval(this.cb_function + "(\"" + retval + "\")");
						}
					}
					else
					{
						if (this.m_cb_args)
						{
							switch (this.m_cb_args.length)
							{
							case 1:
								this.cb_function(retval, this.m_cb_args[0]);
								break;
							case 2:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1]);
								break;
							case 3:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], this.m_cb_args[2]);
								break;
							case 4:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3]);
								break;
							case 5:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4]);
								break;
							case 6:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
												 this.m_cb_args[5]);
								break;
							case 7:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
												 this.m_cb_args[5], this.m_cb_args[6]);
								break;
							case 8:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
												 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7]);
								break;
							case 9:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
												 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7],
												 this.m_cb_args[8]);
								break;
							case 10:
								this.cb_function(retval, this.m_cb_args[0], this.m_cb_args[1], 
												 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
												 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7],
												 this.m_cb_args[8], this.m_cb_args[9]);
								break;
							}
						}
						else
						{
							this.cb_function(retval);
						}
					}
				}
				catch (e) { alert(e); }
			}

			CAjaxRpcCleanup(this);
		}
	};

	var exec_url = url;
	exec_url += "?function=" + f_name;
	
	// Get callback (optional)
	if (finished_cb)
		g_CAjaxRpc[ind].cb_function = finished_cb;
	
	if (send_method == AJAX_POST && typeof args != "undefined")
	{
		g_CAjaxRpc[ind].exec(exec_url, args);
	}
	else
	{
		if (typeof args != "undefined" && args!=null)
		{
			var numargs = args.length;
			if (numargs)
			{
				// Arguments are pass as {name, value}
				for (i = 0; i < numargs; i++)
				{
					var val = (args[i][1]) ? escape_utf8(args[i][1]) : "";
					exec_url += "&" + args[i][0] + "=" + val;
				}
			}
		}
		g_CAjaxRpc[ind].exec(exec_url);
	}
}


/***********************************************************************
*	Function:	CAjaxRpcCleanup
*
*	Purpose:	Removes reference to ajax from global array
*
************************************************************************/
function CAjaxRpcCleanup(ref)
{
	var num = g_CAjaxRpc.length;
	for (i = 0; i < num; i++)
	{
		if (g_CAjaxRpc[i] == ref)
		{
			g_CAjaxRpc[i] = null;
		}
	}
}


/*======================================================================================
	
	Module:		CBrowserInfo

	Purpose:	Gather and make available info about the user's browser

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2006 Aereus Corporation. All rights reserved.
	
	Usage:		var bi = new CBrowserInfo();
				(1) Get vendor
					bi.nav, bi.ie, bi.opera, bi.hotjava, bi.webtv, bi.TVNavigator, bi.AOLTV
				(2) Get version number
					bi.major (integer indicating major version number: 2, 3, 4 ...)
					bi.minor (float   indicating full  version number: 2.02, 3.01, 4.04 ...)
				(3) Version AND vendor
					bi.nav2, bi.nav3, bi.nav4, bi.nav4up, bi.nav6, bi.nav6up, bi.gecko, bi.ie3, 
					bi.ie4, bi.ie4up, bi.ie5, bi.ie5up, bi.ie5_5, bi.ie5_5up, bi.ie6, bi.ie6up, 
					bi.ie7up, bi.hotjava3, bi.hotjava3up
				(4) JavaScript version
					bi.js (float indicating full JavaScript version number: 1, 1.1, 1.2 ...)
				(5) OS platform and version
					bi.win, bi.win16, bi.win32, bi.win31, bi.win95, bi.winnt, bi.win98, 
					bi.winme, bi.win2k, bi.winxp, bi.winvista,
					bi.os2
					bi.mac, bi.mac68k, bi.macppc
					bi.unix
					bi.sun, bi.sun4, bi.sun5, bi.suni86
					bi.irix, bi.irix5, bi.irix6
					bi.hpux, bi.hpux9, bi.hpux10
					bi.aix, bi.aix1, bi.aix2, bi.aix3, bi.aix4
					bi.linux, bi.sco, bi.unixware, bi.mpras, bi.reliant
					bi.dec, bi.sinix, bi.freebsd, bi.bsd
					bi.vms

======================================================================================*/

/**
 * Initialize namespace
 */
alib.userAgent = {}

/**
 * Initialize function
 */
alib.userAgent.init = function()
{   
    // convert all characters to lowercase to simplify testing
    var agt=navigator.userAgent.toLowerCase();

    // *** BROWSER VERSION ***
    // Note: On IE5, these return 4, so use is.ie5up to detect IE5.

    this.major = parseInt(navigator.appVersion);
    this.minor = parseFloat(navigator.appVersion);

    // Note: Opera and WebTV spoof Navigator.  We do strict client detection.
    // If you want to allow spoofing, take out the tests for opera and webtv.
    this.nav  = ((agt.indexOf('mozilla')!=-1) && (agt.indexOf('spoofer')==-1)
                && (agt.indexOf('compatible') == -1) && (agt.indexOf('opera')==-1)
                && (agt.indexOf('webtv')==-1) && (agt.indexOf('hotjava')==-1));
    this.nav2 = (this.nav && (this.major == 2));
    this.nav3 = (this.nav && (this.major == 3));
    this.nav4 = (this.nav && (this.major == 4));
    this.nav4up = (this.nav && (this.major >= 4));
    this.navonly      = (this.nav && ((agt.indexOf(";nav") != -1) ||
                          (agt.indexOf("; nav") != -1)) );
    this.nav6 = (this.nav && (this.major == 5));
    this.nav6up = (this.nav && (this.major >= 5));
    this.gecko = (agt.indexOf('gecko') != -1);

	this.firefox = agt.indexOf("firefox") > -1;

    this.ie     = ((agt.indexOf("msie") != -1) && (agt.indexOf("opera") == -1));
    this.ie3    = (this.ie && (this.major < 4));
    this.ie4    = (this.ie && (this.major == 4) && (agt.indexOf("msie 4")!=-1) );
    this.ie4up  = (this.ie  && (this.major >= 4));
    this.ie5    = (this.ie && (this.major == 4) && (agt.indexOf("msie 5.0")!=-1) );
    this.ie5_5  = (this.ie && (this.major == 4) && (agt.indexOf("msie 5.5") !=-1));
    this.ie5up  = (this.ie  && !this.ie3 && !this.ie4);
    this.ie5_5up =(this.ie && !this.ie3 && !this.ie4 && !this.ie5);
    this.ie6    = (this.ie && (this.major == 4) && (agt.indexOf("msie 6.")!=-1) );
    this.ie6up  = (this.ie  && !this.ie3 && !this.ie4 && !this.ie5 && !this.ie5_5 && !this.ie6);
    this.ie7    = (this.ie && (this.major == 4) && (agt.indexOf("msie 7.")!=-1) );
    this.ie7up  = (this.ie  && !this.ie3 && !this.ie4 && !this.ie5 && !this.ie5_5 && !this.ie6);
    this.ie7    = (this.ie && (this.major == 4) && (agt.indexOf("msie 8.")!=-1) );
    this.ie7up  = (this.ie  && !this.ie3 && !this.ie4 && !this.ie5 && !this.ie5_5 && !this.ie6 && !this.ie7);

    // KNOWN BUG: On AOL4, returns false if IE3 is embedded browser
    // or if this is the first browser window opened.  Thus the
    // variables is.aol, is.aol3, and is.aol4 aren't 100% reliable.
    this.aol   = (agt.indexOf("aol") != -1);
    this.aol3  = (this.aol && this.ie3);
    this.aol4  = (this.aol && this.ie4);
    this.aol5  = (agt.indexOf("aol 5") != -1);
    this.aol6  = (agt.indexOf("aol 6") != -1);

    this.opera = (agt.indexOf("opera") != -1);
    this.opera2 = (agt.indexOf("opera 2") != -1 || agt.indexOf("opera/2") != -1);
    this.opera3 = (agt.indexOf("opera 3") != -1 || agt.indexOf("opera/3") != -1);
    this.opera4 = (agt.indexOf("opera 4") != -1 || agt.indexOf("opera/4") != -1);
    this.opera5 = (agt.indexOf("opera 5") != -1 || agt.indexOf("opera/5") != -1);
    this.opera5up = (this.opera && !this.opera2 && !this.opera3 && !this.opera4);

	// Safari & Chrome
	this.webkit = (agt.indexOf("webkit") != -1);

    this.webtv = (agt.indexOf("webtv") != -1); 

    this.TVNavigator = ((agt.indexOf("navio") != -1) || (agt.indexOf("navio_aoltv") != -1)); 
    this.AOLTV = this.TVNavigator;

    this.hotjava = (agt.indexOf("hotjava") != -1);
    this.hotjava3 = (this.hotjava && (this.major == 3));
    this.hotjava3up = (this.hotjava && (this.major >= 3));

    // *** JAVASCRIPT VERSION CHECK ***
    if (this.nav2 || this.ie3) this.js = 1.0;
    else if (this.nav3) this.js = 1.1;
    else if (this.opera5up) this.js = 1.3;
    else if (this.opera) this.js = 1.1;
    else if ((this.nav4 && (this.minor <= 4.05)) || this.ie4) this.js = 1.2;
    else if ((this.nav4 && (this.minor > 4.05)) || this.ie5) this.js = 1.3;
    else if (this.hotjava3up) this.js = 1.4;
    else if (this.nav6 || this.gecko) this.js = 1.5;
    // NOTE: In the future, update this code when newer versions of JS
    // are released. For now, we try to provide some upward compatibility
    // so that future versions of Nav and IE will show they are at
    // *least* JS 1.x capable. Always check for JS version compatibility
    // with > or >=.
    else if (this.nav6up) this.js = 1.5;
    // note ie5up on mac is 1.4
    else if (this.ie5up) this.js = 1.3

    // HACK: no idea for other browsers; always check for JS version with > or >=
    else this.js = 0.0;

    // *** PLATFORM ***
    this.win   = ( (agt.indexOf("win")!=-1) || (agt.indexOf("16bit")!=-1) );
    // NOTE: On Opera 3.0, the userAgent string includes "Windows 95/NT4" on all
    //        Win32, so you can't distinguish between Win95 and WinNT.
    this.win95 = ((agt.indexOf("win95")!=-1) || (agt.indexOf("windows 95")!=-1));

    // is this a 16 bit compiled version?
    this.win16 = ((agt.indexOf("win16")!=-1) || 
               (agt.indexOf("16bit")!=-1) || (agt.indexOf("windows 3.1")!=-1) || 
               (agt.indexOf("windows 16-bit")!=-1) );  

    this.win31 = ((agt.indexOf("windows 3.1")!=-1) || (agt.indexOf("win16")!=-1) ||
                    (agt.indexOf("windows 16-bit")!=-1));

    // NOTE: Reliable detection of Win98 may not be possible. It appears that:
    //       - On Nav 4.x and before you'll get plain "Windows" in userAgent.
    //       - On Mercury client, the 32-bit version will return "Win98", but
    //         the 16-bit version running on Win98 will still return "Win95".
    this.win98 = ((agt.indexOf("win98")!=-1) || (agt.indexOf("windows 98")!=-1));
    this.winnt = ((agt.indexOf("winnt")!=-1) || (agt.indexOf("windows nt")!=-1));
    this.win32 = (this.win95 || this.winnt || this.win98 || 
                    ((this.major >= 4) && (navigator.platform == "Win32")) ||
                    (agt.indexOf("win32")!=-1) || (agt.indexOf("32bit")!=-1));

    this.winme = ((agt.indexOf("win 9x 4.90")!=-1));
    this.win2k = ((agt.indexOf("windows nt 5.0")!=-1));
    this.winxp = ((agt.indexOf("windows nt 5.1")!=-1));
    this.winvista = ((agt.indexOf("windows nt 6.0")!=-1));

    this.os2   = ((agt.indexOf("os/2")!=-1) || 
                    (navigator.appVersion.indexOf("OS/2")!=-1) ||   
                    (agt.indexOf("ibm-webexplorer")!=-1));

    this.mac    = (agt.indexOf("mac")!=-1);
    // hack ie5 js version for mac
    if (this.mac && this.ie5up) this.js = 1.4;
    this.mac68k = (this.mac && ((agt.indexOf("68k")!=-1) || 
                               (agt.indexOf("68000")!=-1)));
    this.macppc = (this.mac && ((agt.indexOf("ppc")!=-1) || 
                                (agt.indexOf("powerpc")!=-1)));

    this.sun   = (agt.indexOf("sunos")!=-1);
    this.sun4  = (agt.indexOf("sunos 4")!=-1);
    this.sun5  = (agt.indexOf("sunos 5")!=-1);
    this.suni86= (this.sun && (agt.indexOf("i86")!=-1));
    this.irix  = (agt.indexOf("irix") !=-1);    // SGI
    this.irix5 = (agt.indexOf("irix 5") !=-1);
    this.irix6 = ((agt.indexOf("irix 6") !=-1) || (agt.indexOf("irix6") !=-1));
    this.hpux  = (agt.indexOf("hp-ux")!=-1);
    this.hpux9 = (this.hpux && (agt.indexOf("09.")!=-1));
    this.hpux10= (this.hpux && (agt.indexOf("10.")!=-1));
    this.aix   = (agt.indexOf("aix") !=-1);      // IBM
    this.aix1  = (agt.indexOf("aix 1") !=-1);    
    this.aix2  = (agt.indexOf("aix 2") !=-1);    
    this.aix3  = (agt.indexOf("aix 3") !=-1);    
    this.aix4  = (agt.indexOf("aix 4") !=-1);    
    this.linux = (agt.indexOf("inux")!=-1);
    this.sco   = (agt.indexOf("sco")!=-1) || (agt.indexOf("unix_sv")!=-1);
    this.unixware = (agt.indexOf("unix_system_v")!=-1); 
    this.mpras    = (agt.indexOf("ncr")!=-1); 
    this.reliant  = (agt.indexOf("reliantunix")!=-1);
    this.dec   = ((agt.indexOf("dec")!=-1) || (agt.indexOf("osf1")!=-1) || 
                  (agt.indexOf("dec_alpha")!=-1) || (agt.indexOf("alphaserver")!=-1) || 
                  (agt.indexOf("ultrix")!=-1) || (agt.indexOf("alphastation")!=-1)); 
    this.sinix = (agt.indexOf("sinix")!=-1);
    this.freebsd = (agt.indexOf("freebsd")!=-1);
    this.bsd = (agt.indexOf("bsd")!=-1);
    this.unix  = ((agt.indexOf("x11")!=-1) || this.sun || this.irix || this.hpux || 
                 this.sco ||this.unixware || this.mpras || this.reliant || 
                 this.dec || this.sinix || this.aix || this.linux || this.bsd || this.freebsd);

    this.vms   = ((agt.indexOf("vax")!=-1) || (agt.indexOf("openvms")!=-1));

	// Mobile
    this.ios = (agt.indexOf("iphone")!=-1 || agt.indexOf("ipad")!=-1);
    this.android = (agt.indexOf("iphone")!=-1 || agt.indexOf("ipad")!=-1);

	/**
	 * Browser modes
	 * -----------------------------------------
	 */

	// HTML5 full screen
	this.fullScreen = (typeof document.fullScreen != "undefined") ? document.fullScreen : false;
}

// Initialize
alib.userAgent.init();

function CButton(title, funct, args, scheme, width, mouseover, mouseout, type)
{
	var opts = new Object();
	opts.onclick = funct;
	opts.onmouseover = (mouseover) ? mouseover : null;
	opts.onmouseout = (mouseout) ? mouseout : null;
	
    opts.className = (scheme) ? scheme :  null;

	opts.m_funct = funct;
	opts.m_args = args;
	opts.onclick = function ()
	{
		if (typeof this.m_funct == "string")
			eval(this.m_funct);
		else
		{
			if (this.m_args)
			{
				switch(this.m_args.length)
				{
				case 1:
					this.m_funct(this.m_args[0]);
					break;
				case 2:
					this.m_funct(this.m_args[0], this.m_args[1]);
					break;
				case 3:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2]);
					break;
				case 4:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3]);
					break;
				case 5:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3], this.m_args[4]);
					break;
				case 6:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3], this.m_args[4], this.m_args[5]);
					break;
				default:
					alert("Too many arguments");
					break;
				}
			}
			else if (this.m_funct)
				this.m_funct();
		}
	}

	var button = alib.ui.Button(title, opts, type);
	return button;

	scheme = (scheme) ? scheme : 'b1';

	this.m_scheme = scheme;
	/*
	switch (scheme)
	{
	case 'b1-pill-l':
		this.m_scheme = "b1";
		this.m_subscheme = scheme;
		break;
	case 'b1-pill-c':
		this.m_scheme = "b1";
		this.m_subscheme = scheme;
		break;
	case 'b1-pill-r':
		this.m_scheme = "b1";
		this.m_subscheme = scheme;
		break;
	default:
		this.m_scheme = scheme;
	}
	*/

	this.m_main = ALib.m_document.createElement("button");
	this.m_main.setAttribute("type", "button");
	/*alib.dom.styleSetClass(this.m_main, "CButton");*/
	alib.dom.styleAddClass(this.m_main, this.m_scheme);
	if (this.m_subscheme)
		alib.dom.styleAddClass(this.m_main, this.m_subscheme);
	/* Immediately below is a temporary hack to serve the 
	following margin values only to Gecko browsers
	Gecko browsers add an extra 3px of left/right 
	padding to button elements which can't be overriden.
	Thus, we use -3px of left/right margin to overcome this. */
	//if (alib.userAgent.gecko)
		//alib.dom.styleSet(this.m_main, "margin", "0 -3px");

	var table = alib.dom.createElement("span", this.m_main);
	var lbl = alib.dom.createElement("span", table);
	if (typeof title == "string")
		lbl.innerHTML = title;
	else
		lbl.appendChild(title);
	this.m_titleCon = lbl;

	// Set actions for button
	this.m_main.m_btnh = this;
	this.m_main.onmouseover = function ()
	{
		this.m_btnh.changeState("over");
	}
	this.m_main.onmouseout = function ()
	{
		this.m_btnh.changeState("out");
	}
	this.m_main.m_funct = funct;
	this.m_main.m_args = args;
	this.m_main.onclick = function ()
	{
		if (typeof this.m_funct == "string")
			eval(this.m_funct);
		else
		{
			if (this.m_args)
			{
				switch(this.m_args.length)
				{
				case 1:
					this.m_funct(this.m_args[0]);
					break;
				case 2:
					this.m_funct(this.m_args[0], this.m_args[1]);
					break;
				case 3:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2]);
					break;
				case 4:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3]);
					break;
				case 5:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3], this.m_args[4]);
					break;
				case 6:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3], this.m_args[4], this.m_args[5]);
					break;
				default:
					alert("Too many arguments");
					break;
				}
			}
			else
				this.m_funct();
		}
	}

	/* Set actions for div
	this.m_c.onmouseover = function ()
	{
		this.m_btnh.changeState("over");
	}
	
	this.m_c.onmouseout = function ()
	{
		this.m_btnh.changeState("out");
	}
	this.m_c.m_funct = funct;
	this.m_c.m_args = args;
	this.m_c.onclick = function ()
	{
		if (typeof this.m_funct == "string")
			eval(this.m_funct);
		else
		{
			if (this.m_args)
			{
				switch(this.m_args.length)
			{
				case 1:
					this.m_funct(this.m_args[0]);
					break;
				case 2:
					this.m_funct(this.m_args[0], this.m_args[1]);
					break;
				case 3:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2]);
					break;
				case 4:
					this.m_funct(this.m_args[0], this.m_args[1], this.m_args[2], this.m_args[3]);
					break;
				}
			}
			else
				this.m_funct();
		}
	}
	*/

	this.m_table = table;
	
	this.changeState("out");
}

CButton.prototype.changeState = function (state)
{
	/*
	switch (state)
	{
	case 'over':
		alib.dom.styleSetClass(this.m_tl, "CButtonTopLeft_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_tc, "CButtonTopCenter_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_tr, "CButtonTopRight_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_l, "CButtonBodyLeft_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_c, "CButtonBody_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_r, "CButtonBodyRight_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_bl, "CButtonBottomLeft_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_bc, "CButtonBottomCenter_"+this.m_scheme+"Over");
		alib.dom.styleSetClass(this.m_br, "CButtonBottomRight_"+this.m_scheme+"Over");	
		break;
	case 'out':
		alib.dom.styleSetClass(this.m_tl, "CButtonTopLeft_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_tc, "CButtonTopCenter_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_tr, "CButtonTopRight_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_l, "CButtonBodyLeft_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_c, "CButtonBody_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_r, "CButtonBodyRight_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_bl, "CButtonBottomLeft_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_bc, "CButtonBottomCenter_"+this.m_scheme);
		alib.dom.styleSetClass(this.m_br, "CButtonBottomRight_"+this.m_scheme);
		break;
	}
	*/
}

CButton.prototype.disable = function()
{
	this.m_main.disabled = true;
	alib.dom.styleRemoveClass(this.m_main, this.m_scheme);
}
CButton.prototype.enable= function()
{
	this.m_main.disabled = false;
	alib.dom.styleAddClass(this.m_main, this.m_scheme);
}

CButton.prototype.setText = function(text)
{
	this.m_titleCon.innerHTML = text;
}

CButton.prototype.getButton = function ()
{
	return this.m_main;
}

CButton.prototype.print = function(con)
{
	con.appendChild(this.m_main);
}

CButton.prototype.getTable = function ()
{
	return this.m_table;
}

/*======================================================================================
	
	Module:		CContentTable

	Purpose:	Kind of like a window but embedded in the document

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2006 Aereus Corporation. All rights reserved.

	Usage:
				var ccTble = new CContentTable("My Window Name", "100px", "100px");
				ccTble.print(parent_div); // If no parent div then just doc.write

======================================================================================*/

/***********************************************************************************
 *
 *	Class: 		CContentTable
 *
 *	Purpose:	Create new content table class
 *
 *	Arguements:	title	- string: the default title for this window. Can be changed later.
 *				width	- (optional) string: width in px
 *				height	- (optional) string: height in px
 *
 ***********************************************************************************/
function CContentTable(title, width, height)
{
	/* return reference to inner div for div.innerHTML or div.createDiv */	
	// Create main table
	var table = ALib.m_document.createElement("table");
	this.m_table = table;
	table.className = "ContentTable";
	table.setAttribute("cellpadding","0");
	table.cellSpacing = "0";
	table.setAttribute("cellspacing","0");
	table.cellPadding = "0";
	table.setAttribute("border","0");
	table.border = "0";
	if (width)
	{
		this.m_width = width;
		alib.dom.styleSet(table, "width", width);
	}
	try
	{
		if (height)
			table.style.height = height;
	}
	catch (e)
	{
	}

	var tbl_body = ALib.m_document.createElement("TBODY")	
	
	// Create title bar row 
	var row = ALib.m_document.createElement("tr");
	var td_left = ALib.m_document.createElement("td");
	td_left.className = "ContentTableTitleLeftCorn";
	row.appendChild(td_left);
	var td_middle = ALib.m_document.createElement("td");
	td_middle.className = "ContentTableTitleCenter";
	
	this.m_context = ALib.m_document.createElement("div");
	alib.dom.styleSet(this.m_context, "float", "right");
	//alib.dom.styleSet(this.m_context, "padding-right", "3px");
	this.m_context.className = 'ContentTableTitleContext';
	td_middle.appendChild(this.m_context);

	this.m_spTitle = ALib.m_document.createElement("div");
	this.m_spTitle.className = "ContentTableTitleLabel";
	//alib.dom.styleSet(this.m_spTitle, "float", "left");
	alib.dom.styleSet(this.m_spTitle, "margin-right", (this.m_context.offsetWidth+3) + "px");
	this.m_spTitle.innerHTML = title;
	td_middle.appendChild(this.m_spTitle);

	row.appendChild(td_middle);
	var td_right = ALib.m_document.createElement("td");
	td_right.className = "ContentTableTitleRightCorn";
	row.appendChild(td_right);
	tbl_body.appendChild(row);
	
	// Create content row and div
	var row = ALib.m_document.createElement("tr");
	row.vAlign = "top";
	row.setAttribute("valign", "top");
	var td_left = ALib.m_document.createElement("td");
	td_left.className = "ContentTableBodyLeft";
	row.appendChild(td_left);
	var divContent = ALib.m_document.createElement("td");
	divContent.className = "ContentTableBody";
	row.appendChild(divContent);
	/*
	var divContent = ALib.m_document.createElement("div");
	divContent.style.height = "100%";
	td_middle.appendChild(divContent);
	*/
	var td_right = ALib.m_document.createElement("td");
	td_right.className = "ContentTableBodyRight";
	row.appendChild(td_right);
	tbl_body.appendChild(row);
	
	// Create footer row
	var row = ALib.m_document.createElement("tr");
	row.className = "ContentTableFooterRow";
	
	var td_left = ALib.m_document.createElement("td");
	td_left.className = "ContentTableFooterLeftCorn";
	row.appendChild(td_left);
	var td_middle = ALib.m_document.createElement("td");
	td_middle.className = "ContentTableFooterCenter";
	row.appendChild(td_middle);
	var td_right = ALib.m_document.createElement("td");
	td_right.className = "ContentTableFooterRightCorn";
	row.appendChild(td_right);
	tbl_body.appendChild(row);

	table.appendChild(tbl_body);
	/* Initiate local class variables */
	this.m_table = table;
	this.m_contentdiv = divContent;
}

/***********************************************************************************
 *
 *	Function: 	print
 *
 *	Purpose:	Append the content table to parent or print using document.write
 *
 *	Arguements:	div_parent - (optional) The parent container that will hold the
 *							 table. If none is specified, use document.write()
 *
 ***********************************************************************************/
CContentTable.prototype.print = function(div_parent)
{
	try 
	{
		if (div_parent)
		{
			this.m_parentdiv = div_parent;
			div_parent.appendChild(this.m_table);
		}
		else
			document.write(this.m_table.outerHTML);
	}
	catch (e) {}
}

/***********************************************************************************
 *
 *	Function: 	write
 *
 *	Purpose:	Add html to the body of the content table
 *
 *	Arguments:	htm - any html markup or text to append to the body. Must be string
 *				
 ***********************************************************************************/
CContentTable.prototype.write = function (htm)
{
	this.m_contentdiv.innerHTML += htm;
}

/***********************************************************************************
 *
 *	Function: 	get_cdiv (depreciated)
 *
 *	Purpose:	Get the body/content container. Please use getCon instead.
 *
 ***********************************************************************************/
CContentTable.prototype.get_cdiv = function ()
{
	return this.m_contentdiv;
}

/***********************************************************************************
 *
 *	Function: 	getCon
 *
 *	Purpose:	Get the body/content container.
 *
 ***********************************************************************************/
CContentTable.prototype.getCon = function ()
{
	return this.m_contentdiv;
}

/***********************************************************************************
 *
 *	Function: 	getTitleCon
 *
 *	Purpose:	Get the container that holds the title of the window/table
 *
 ***********************************************************************************/
CContentTable.prototype.getTitleCon = function()
{
	return this.m_spTitle;
}

/***********************************************************************************
 *
 *	Function: 	setTitle
 *
 *	Purpose:	Set the title (html)
 *
 *	Arguements:	title - string
 *
 ***********************************************************************************/
CContentTable.prototype.setTitle = function (title)
{
	this.m_spTitle.innerHTML = title;
}

/***********************************************************************************
 *
 *	Function: 	getOuterCon
 *
 *	Purpose:	Get entire table
 *
 ***********************************************************************************/
CContentTable.prototype.getOuterCon = function()
{
	return this.m_table;
}

/***********************************************************************************
 *
 *	Function: 	get_ctitle (depreciated)
 *
 *	Purpose:	Get context container. Usually in the upper right for close, max, min.
 *				This function has been depreciated, please use getContextCon
 *
 ***********************************************************************************/
CContentTable.prototype.get_ctitle = function ()
{
	return this.m_context;
}

/***********************************************************************************
 *
 *	Function: 	getContextCon
 *
 *	Purpose:	Get context container. Usually in the upper right for close, max, min.
 *
 ***********************************************************************************/
CContentTable.prototype.getContextCon = function ()
{
	return this.m_context;
}

/***********************************************************************************
 *
 *	Function: 	hide
 *
 *	Purpose:	Hides the entire table.
 *
 ***********************************************************************************/
CContentTable.prototype.hide = function ()
{
	this.m_table.style.display = "none";
}

/***********************************************************************************
 *
 *	Function: 	show
 *
 *	Purpose:	Displays the entire table.
 *
 ***********************************************************************************/
CContentTable.prototype.show = function ()
{
	this.m_table.style.display = "table";

	/*
	if (this.m_width)
		alib.dom.styleSet(this.m_table, "width", this.m_width);
		*/
}

/***********************************************************************************
 *
 *	Function: 	setStyle
 *
 *	Purpose:	Set custom style for the content div
 *
 ***********************************************************************************/
CContentTable.prototype.setStyle = function(sname, sval)
{
	alib.dom.styleSet(this.m_contentdiv, sname, sval);
}

/***********************************************************************************
 *
 *	Function: 	setHeight
 *
 *	Purpose:	Set height of the outer container
 *
 ***********************************************************************************/
CContentTable.prototype.setHeight = function(height)
{
	alib.dom.styleSet(this.m_table, "height", height);
}

/***********************************************************************************
 *
 *	Function: 	unload
 *
 *	Purpose:	Delete this table
 *
 ***********************************************************************************/
CContentTable.prototype.unload = function ()
{
	if (this.m_parentdiv)
	{
		this.m_parentdiv.removeChild(this.m_table);
	}
}

/****************************************************************************
*	
*	Class:		CDatasheet
*
*	Purpose:	Editable spreadsheet table
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
var g_cdt_tind = 0;
var g_cdt_tables = new Array();

function CDatasheet(width, height, show_headers, show_rowtitle)
{
	// Set options
	this.show_rowtitles = (show_rowtitle) ? show_rowtitle : true;
	this.clicksToEdit = "double"; // This can either be double or single and will determine clicks for edit

	// Create main table
	var table = ALib.m_document.createElement("table");
	table.className = "CDatasheetMainTable";

	table.setAttribute("cellpadding","0");
	table.cellPadding = "0";	
	table.setAttribute("cellspacing","0");
	table.cellSpacing = "0";
	table.setAttribute("border","0");
	table.border = "0";
	if (width)
		table.style.width = width;
	if (height)
		table.style.height = height;

	var tbl_body = ALib.m_document.createElement("TBODY")	

	table.appendChild(tbl_body);
	// Initiate local class variables
	this.m_table = table;
	this.m_table_body = tbl_body;
	this.m_numrows = 0;
	this.m_rows = new Array();
	this.m_cols = new Array();
	this.m_rowBody = null;
	this.m_headersrow = null;

	// Set callback functions
	this.onCellChange = new Function();		// Editing of cell is finished
	this.onCellUpdate = new Function();		// Any change (keypress) to the cell

	// Set table unique id
	this.m_uni_id = "alib_cdt_" + g_cdt_tind;
	g_cdt_tables[g_cdt_tind] = this;
	g_cdt_tind++;
}

CDatasheet.prototype.addHeader = function (title, align, width, height, idname)
{
	// Initial indefined variables
	if (!align)
		var align = "left";
	//if (typeof showspacer == "undefined")
	//	var showspacer = true;	
		
	if (!this.m_headersrow)
	{
		this.m_headersrow = ALib.m_document.createElement("tr");
		this.m_table_body.appendChild(this.m_headersrow);

		// Check for row titles
		if (this.show_rowtitles)
		{
			var td_body = ALib.m_document.createElement("td");
			alib.dom.styleSetClass(td_body, "CDatasheetRowTitle");
			this.m_headersrow.appendChild(td_body);
		}
	}
	
	var td = ALib.m_document.createElement("td");
	// Content
	td.innerHTML = title;
	// Class
	alib.dom.styleSetClass(td, "CDatasheetHeaderCell");
	// Alignment
	td.align = align;
	td.setAttribute("align",align);
	// Width and Height
	if (width)
		td.style.width = width;
	if (height)
		td.style.height = height;
	// Add cell to headers row
	this.m_headersrow.appendChild(td);
	// Add to headers array
	this.m_cols[this.m_cols.length] = td;
	return td;
}

CDatasheet.prototype.addRow = function(idname, title)
{
	// Get unique id name
	var name = (idname) ? idname : this.m_numrows;
	this.m_lastRow = name;

	this.m_rows[name] = new CDatasheetRow();
	this.m_rows[name].m_hinst = this;
	this.m_rows[name].m_name = name;
	this.m_rows[name].m_uni_id = this.m_uni_id + "_row_" + name;

	this.m_rowBody = ALib.m_document.createElement("tr");
	alib.dom.styleSetClass(this.m_rowBody, "CDatasheetRow");
	this.m_rowBody.valign = "top";
	this.m_rowBody.setAttribute("valign", "top");
	this.m_table_body.appendChild(this.m_rowBody);
	this.m_rows[name].m_row = this.m_rowBody;

	this.m_numrows++;
	
	// Create row title
	if (this.show_rowtitles)
	{
		var td_body = ALib.m_document.createElement("td");
		alib.dom.styleSetClass(td_body, "CDatasheetRowTitle");
		if (typeof title != "undefined")
		{
			if (typeof title == "string" || typeof title == "number")
				td_body.innerHTML = title;
			else
			{
				try
				{
					td_body.appendChild(title);
				}
				catch (e) {}
			}
		}
		this.m_rows[name].m_titlecell = td_body;
		this.m_rows[name].m_row.appendChild(td_body);
	}

	return this.m_rows[name];
}

CDatasheet.prototype.numRows = function()
{
	return this.m_numrows;
}

CDatasheet.prototype.rows = function(name)
{
	return this.m_rows[name];
}

CDatasheet.prototype.getRows = function(name)
{
	return this.m_rows;
}

CDatasheet.prototype.removeRow = function(indx)
{
	this.m_table_body.removeChild(this.m_rows[indx].m_row);
	this.m_numrows = this.m_numrows - 1;
}

CDatasheet.prototype.addCell = function(content, align, width, height, readonly, colind, row)
{
	// Get unique id name
	var name = (row) ? row.m_name : this.m_lastRow;

	var f_readonly = (readonly) ? readonly : false;
	
	// Create body cell
	var td_body = ALib.m_document.createElement("td");
	td_body.m_row = row;
	td_body.m_colind = colind;
	td_body.f_readonly = f_readonly;
	td_body.m_tblcls = this;
	alib.dom.styleSetClass(td_body, (f_readonly) ? "CDatasheetCellRO" : "CDatasheetCell");
	td_body.align = (align) ? align : "left";
	if (width)
		td_body.style.width = width;
	if (height)
		td_body.style.width = height;
	if (typeof content == "string")
		td_body.innerHTML = content;
	else
	{
		try
		{
			td_body.appendChild(content);
		}
		catch (e) {}
	}

	if (this.clicksToEdit == "double")
	{
		var clkfctn = function()
		{
			if (this.m_tblcls.m_lastCellSelected)
				alib.dom.styleSetClass(this.m_tblcls.m_lastCellSelected, "CDatasheetCell");
			
			alib.dom.styleSetClass(this, "CDatasheetCellSelected");
			this.m_tblcls.m_lastCellSelected = this;
		}

		td_body.onclick = clkfctn;

		if (!f_readonly)
		{
			var dblclkfctn = function()
			{
				var buf = this.innerHTML;
				alib.dom.styleSetClass(this, "CDatasheetCellEdit");
				this.onclick = function() {};
				this.innerHTML = "";
				var inp = ALib.m_document.createElement("input");
				alib.dom.styleSet(inp, "width", "99%");
				alib.dom.styleSet(inp, "height", "100%");
				alib.dom.styleSet(inp, "text-align", (align) ? align : "left");
				inp.value = buf;
				inp.m_td = this;
				inp.onkeydown = function(e)
				{
					this.m_td.m_tblcls.onCellUpdate(this.m_td.m_row.m_name, this.m_td.m_colind);
				}
				inp.onblur = function ()
				{
					inp.m_td.innerHTML = this.value;
					alib.dom.styleSetClass(inp.m_td, "CDatasheetCell");

					inp.m_td.m_tblcls.onCellChange(this.m_td.m_row.m_name, this.m_td.m_colind);

					inp.m_td.onclick = clkfctn;
					inp.m_td.ondblclick = dblclkfctn;
				}
				this.appendChild(inp);
				this.ondblclick = function() {};
				inp.select();
				inp.focus();
			};

			td_body.ondblclick = dblclkfctn;
		}
	}
	else // Single click will edit
	{
		if (!f_readonly)
		{
			var clkfctn = function()
			{
				this.m_origbuf = this.innerHTML;
				alib.dom.styleSetClass(this, "CDatasheetCellEdit");
				this.onclick = function() {};
				this.innerHTML = "";
				var inp = ALib.m_document.createElement("input");
				alib.dom.styleSet(inp, "width", "100%");
				alib.dom.styleSet(inp, "height", "100%");
				alib.dom.styleSet(inp, "text-align", (align) ? align : "left");
				inp.value = this.m_origbuf;
				inp.m_td = this;
				inp.onkeyup = function(e)
				{
					this.m_td.m_tblcls.onCellUpdate(this.m_td.m_row.m_name, this.m_td.m_colind);
				}
				inp.onblur = function ()
				{
					inp.m_td.innerHTML = this.value;
					alib.dom.styleSetClass(inp.m_td, "CDatasheetCell");
					inp.m_td.onclick = clkfctn;
					if (this.value != inp.m_td.m_origbuf)
						inp.m_td.m_tblcls.onCellChange(this.m_td.m_row.m_name, this.m_td.m_colind);
				}
				this.appendChild(inp);
				this.onclick = function() {};
				inp.select();
				inp.focus();
			};

			td_body.onclick = clkfctn;
		}
	}

	this.m_rows[name].m_row.appendChild(td_body);
	
	return td_body;
}

CDatasheet.prototype.print = function (div_parent)
{

	if (div_parent)
		div_parent.appendChild(this.m_table);
	else
		document.write(this.m_table.outerHTML);

	this.fixColSize();
}

CDatasheet.prototype.getValue = function(row, col)
{
	if (this.m_rows[row].m_cols[col])
	{
		//return this.m_rows[row].m_cols[col].m_td.innerHTML;
		return this.m_rows[row].getValue(col);
	}
}

CDatasheet.prototype.setValue = function(row, col, val)
{
	if (this.m_rows[row].m_cols[col])
		this.m_rows[row].m_cols[col].m_td.innerHTML = val;
}

// Give auto cols a width so they do not resize on edit
CDatasheet.prototype.fixColSize = function()
{
	for (var i = 0; i < this.m_cols.length; i++)
	{
		var width = alib.dom.styleGet(this.m_cols[i], "width");
		alib.dom.styleSet(this.m_cols[i], "width", width);
	}
}

function CDatasheetRow()
{
	this.m_row;
	this.m_hinst;
	this.m_name;
	this.m_titlecell = null;
	this.m_uni_id = null;
	this.m_colind = 0;
	this.m_cols = new Array();
}

CDatasheetRow.prototype.setName = function(name)
{
	this.m_hinst.m_rows[name] = this.m_hinst.m_rows[this.m_name];
	this.m_hinst.m_rows[this.m_name] = null;
	this.m_name = name;
}

CDatasheetRow.prototype.setTitle = function(title)
{
	if (this.m_titlecell)
	{
		if (typeof title == "string" || typeof title == "number")
			this.m_titlecell.innerHTML = title;
		else
		{
			try
			{
				this.m_titlecell.appendChild(title);
			}
			catch (e) {}
		}
	}
}
 
CDatasheetRow.prototype.addCell = function (content, align, width, height, readonly)
{
	// Create defaults
	if (!content)
		var content = null;
	if (!align)
		var align = null;
	if (!width)
		var width = null;
	if (!height)
		var height = null;
	if (!readonly)
		var readonly = null;

	this.m_cols[this.m_colind] = new CDatasheetCell(content, this);

	this.m_cols[this.m_colind].m_td = this.m_hinst.addCell(content, align, width, height, readonly, this.m_colind, this);

	this.m_colind++;
}

CDatasheetRow.prototype.deleteRow = function()
{
	this.m_hinst.removeRow(this.m_name);
}

CDatasheetRow.prototype.getId = function()
{
	return this.m_uni_id;
}

CDatasheetRow.prototype.getValue = function(col)
{
	return this.m_cols[col].m_td.innerHTML;
}

CDatasheetRow.prototype.cols = function(colname)
{
	return this.m_cols[colname];
}

function CDatasheetCell(title, row)
{
	this.m_name = row;
	this.m_title = null;
	this.m_td = null;
}

CDatasheetCell.prototype.setTitle = function(title)
{
	if (typeof title == "string" || typeof title == "number")
		this.m_td.innerHTML = title;
	else
	{
		try
		{
			this.m_td.innerHTML = "";
			this.m_td.appendChild(title);
		}
		catch (e) {}
	}
}

/**
 * @fileOverview alib.dom Is a namespace used for interacting with the dom
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */
alib.dom = alib.dom || {}

/**
 * Flag to determine if the current window is visible
 *
 * @public
 * @var {bool}
 */
alib.dom.windowVisible = true;

/**
 * Flag to determine if the user has been active on the page within the last 5 minutes
 *
 * @public
 * @var {bool}
 */
alib.dom.userActive = true;

/**
 * Initilize namespace
 */
alib.dom.init = function()
{
	this.m_stylecache = {};
	this.m_document = document;


	// Set mouse move
	jQuery(document).ready(function(){
		$(document).mousemove(function(e){
			alib.dom.updateActive();
			alib.dom.mouse_x = e.pageX;
			alib.dom.mouse_y = e.pageY;
	   }); 
	});	


	// Set window visible
	(function() {
		var hidden = "hidden";

		// Standards:
		if (hidden in document)
			document.addEventListener("visibilitychange", onchange);
		else if ((hidden = "mozHidden") in document)
			document.addEventListener("mozvisibilitychange", onchange);
		else if ((hidden = "webkitHidden") in document)
			document.addEventListener("webkitvisibilitychange", onchange);
		else if ((hidden = "msHidden") in document)
			document.addEventListener("msvisibilitychange", onchange);
		// IE 9 and lower:
		else if ('onfocusin' in document)
			document.onfocusin = document.onfocusout = onchange;
		// All others:
		else
			window.onpageshow = window.onpagehide 
				= window.onfocus = window.onblur = onchange;

		function onchange (evt) {
			alib.m_debug = true;
			var v = 'visible', h = 'hidden',
				evtMap = { 
					focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h 
				};

			evt = evt || window.event;
			if (evt.type in evtMap)
			{
				/*
				alib.trace(evtMap[evt.type]);
				document.body.className = evtMap[evt.type];
				*/
				alib.dom.windowVisible = (evtMap[evt.type] == "visible") ? true : false;
			}
			else        
			{
				alib.dom.windowVisible = (this[hidden]) ? false : true;
				/*
				alib.trace("thhdn" + this[hidden]);
				document.body.className = this[hidden] ? "hidden" : "visible";
				*/
			}
		}
	})();
}

/***********************************************************************************
 *
 *	Function: 	setCurrentDoc
 *
 *	Purpose:	(pubic) Change local document variable to work within frames
 *
 *	Arguements:	doc		- element: the document elment to use
 *
 ***********************************************************************************/
alib.dom.setCurrentDoc = function(doc)
{


	// Reset mouse move
	/*
	var cls = this;
	if (alib.userAgent.ie)
	{
		this.m_document.detachEvent('onmousemove', cls.setMouseCoords);
		this.m_document.attachEvent('onmousemove', cls.setMouseCoords);
	}
	else
	{
		try 
		{
			this.m_document.removeEventListener('mousemove', cls.setMouseCoords, false);
			this.m_document.addEventListener('mousemove', cls.setMouseCoords, false);
		}
		catch (e) {}
	}
	*/
}

/**
 * Create a new dom element
 *
 * @public
 * @param {string} type The name of the element to create
 * @param {DOMElement} appendTo Optional parent element to append new element to
 * @param {string|DOMElement} content Either string to set innerHTML or element to append to newly created element
 */
alib.dom.createElement = function(type, appendto, content, attributes)
{
	var dv = this.m_document.createElement(type);

	if (appendto)
		appendto.appendChild(dv);

	if (typeof content != "undefined" && content != null)
	{
		if (typeof content == "string")
			dv.innerHTML = content;
		else
			dv.appendChild(content);
	}

	if (typeof attributes != "undefined" && typeof attributes != "string" && attributes != null)
	{
		for (var name in attributes)
		{
			dv.setAttribute(name, attributes[name]);
		}
	}

	return dv;
}

/**
 * Get element height
 *
 * @public
 * @this {CDom}
 * @param {DOMElement} e An element to calculate the height for
 * @return {number} The height in px of of the element
 */
alib.dom.getElementHeight = function(e, includeMargin)
{
	if (typeof includeMargin == "undefined")
		var includeMargin = true;

	return $(e).outerHeight(includeMargin);
}

/**
 * Get element width
 *
 * @public
 * @this {CDom}
 * @param {DOMElement} e An element to calculate the height for
 * @return {number} The width in px of of the element
 */
alib.dom.getElementWidth = function(e, includeMargin)
{
	if (typeof includeMargin == "undefined")
		var includeMargin = true;

	return $(e).outerWidth(includeMargin);
}

/**
 * Query - basically an alias for $("querystring")
 *
 * @param {string} qstr
 */
alib.dom.query = function(qstr, node)
{
	var pnode = node || null;
	return $(qstr, pnode);
}

/**
 * Find out if an element is scrolled into viwe
 *
 * @param {DOMElement} elem The element to check and see if it is in view
 * @param {DOMElement} parentElem An optional parent element that may contain a scroll overflow
 */
alib.dom.isScrolledIntoView = function(elem, parentElem)
{
	var pnt = parentElem || window;

    var docViewTop = $(pnt).scrollTop();
    var docViewBottom = docViewTop + $(pnt).height();

    var elemTop = $(elem).offset().top;
    var elemBottom = elemTop + $(elem).height();

    return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
}

/***********************************************************************************
 *
 *	Function: 	getElementById
 *
 *	Purpose:	(pubic) Abstract document.getElementById
 *
 *	Arguements:	id	- string: id of element to get
 *
 ***********************************************************************************/
alib.dom.getElementById = function(id)
{
	var ele = this.m_document.getElementById(id);

	return ele;
}


/***********************************************************************************
 *
 *	Function: 	addEvntListener
 *
 *	Purpose:	(pubic) Append an event listener to an object
 *
 *	Arguements:	e		- element
 *				evnt	- string: the event to capture
 *				funct	- function: function to append
 *
 ***********************************************************************************/
alib.dom.addEvntListener = function(e, evnt, funct)
{
	if (alib.userAgent.ie)
	{
		//e.detachEvent(evnt, funct);
		e.attachEvent("on"+evnt, funct);
	}
	else
	{
		try 
		{
			//e.removeEventListener(evnt, funct, false);
			e.addEventListener(evnt, funct, false);
		}
		catch (e) {}
	}
}

/**
 * Add event listener to an element
 *
 * @return bool true on if event was added, false if not
 */
alib.dom.addEvent = function(obj, event_name, func_name)
{
	var added = false;
	if(obj.addEventListener)
	{
		obj.addEventListener(event_name, func_name, true);
		added = true;
	}
	else if (obj.attachEvent)
	{
		obj.attachEvent("on"+event_name, func_name);
		added = true;
	}
	/*
	else
	{
		obj["on"+event_name] = func_name;
	}
	*/
	return added;
}

/**
 * Removes an event from the object
 *
 * @return bool true on if event was removed, false if not
 */
alib.dom.removeEvent = function(obj,event_name,func_name)
{
	var removed = false;
	if (obj.detachEvent)
	{
		obj.detachEvent("on"+event_name,func_name);
		removed = true;
	}
	else if(obj.removeEventListener)
	{
		obj.removeEventListener(event_name,func_name,true);
		removed = true;
	}
	/*
	else
	{
		obj["on"+event_name] = null;
	}
	*/
	return removed;
}

/**
 * Stop an event from bubbling up the event DOM
 */
alib.dom.stopEvent = function(evt)
{
	evt || window.event;
	if (evt.stopPropagation){
		evt.stopPropagation();
		evt.preventDefault();
	}else if(typeof evt.cancelBubble != "undefined"){
		evt.cancelBubble = true;
		evt.returnValue = false;
	}
	return false;
}

/*    Caret Functions     */

/**
 * Get the end position of the caret in the object. Note that the obj needs to be in focus first
 */
alib.dom.getCaretEnd = function(obj)
{
	if(typeof obj.selectionEnd != "undefined"){
		return obj.selectionEnd;
	}else if(document.selection&&document.selection.createRange){
		var M=document.selection.createRange();
		try{
			var Lp = M.duplicate();
			Lp.moveToElementText(obj);
		}catch(e){
			var Lp=obj.createTextRange();
		}
		Lp.setEndPoint("EndToEnd",M);
		var rb=Lp.text.length;
		if(rb>obj.value.length){
			return -1;
		}
		return rb;
	}
}
/**
 * Get the start position of the caret in the object
 */
alib.dom.getCaretStart = function(obj)
{
	if(typeof obj.selectionStart != "undefined"){
		return obj.selectionStart;
	}else if(document.selection&&document.selection.createRange){
		var M=document.selection.createRange();
		try{
			var Lp = M.duplicate();
			Lp.moveToElementText(obj);
		}catch(e){
			var Lp=obj.createTextRange();
		}
		Lp.setEndPoint("EndToStart",M);
		var rb=Lp.text.length;
		if(rb>obj.value.length){
			return -1;
		}
		return rb;
	}
}
/**
 * sets the caret position to l in the object
 */
alib.dom.setCaret = function(obj,l)
{
	obj.focus();
	if (obj.setSelectionRange)
	{
		obj.setSelectionRange(l,l);
	}
	else if(obj.createTextRange)
	{
		m = obj.createTextRange();		
		m.moveStart('character',l);
		m.collapse();
		m.select();
	}
}

/**
 * sets the caret selection from s to e in the object
 */
alib.dom.setSelection = function (obj,s,e)
{
	obj.focus();
	if (obj.setSelectionRange){
		obj.setSelectionRange(s,e);
	}else if(obj.createTextRange){
		m = obj.createTextRange();		
		m.moveStart('character',s);
		m.moveEnd('character',e);
		m.select();
	}
}

/***********************************************************************************
 *
 *	Function: 	styleToCamel
 *
 *	Purpose:	(private) Change a hyphenated style to Camel
 *
 *	Arguements:	property	- string: propertry to convert
 *
 ***********************************************************************************/
alib.dom.styleToCamel = function(property)
{
	var change = function(prop) 
	{
		var test = /(-[a-z])/i.exec(prop);
		var ret = prop.replace(RegExp.$1, RegExp.$1.substr(1).toUpperCase());
		return ret;
	};
      
	while(property.indexOf('-') > -1)
		property = change(property);

	return property;
}

/***********************************************************************************
 *
 *	Function:	styleToHyphen
 *
 *	Purpose:	(private) Change a Camle (nameName) hyphenated (name-name)
 *
 *	Arguements:	property	- string: propertry to convert
 *
 ***********************************************************************************/
alib.dom.styleToHyphen = function(property)
{
	if (property.indexOf('-') > -1)
		return property;

	var converted = '';
	for (var i = 0, len = property.length;i < len; ++i) 
	{
		if (property.charAt(i) == property.charAt(i).toUpperCase()) 
		{
			converted = converted + '-' + property.charAt(i).toLowerCase();
		} 
		else 
		{
			converted = converted + property.charAt(i);
		}
	}

	return converted;
}

/***********************************************************************************
 *
 *	Function: 	styleMakeCache
 *
 *	Purpose:	(private) cache converted styles
 *
 *	Arguements:	property	- string: propertry to cache
 *
 ***********************************************************************************/
alib.dom.styleMakeCache = function(property) 
{
	this.m_stylecache[property] = 
	{
		camel: this.styleToCamel(property),
		hyphen: this.styleToHyphen(property)
	};
};

/***********************************************************************************
 *
 *	Function:	styleGet
 *
 *	Purpose:	(public) get style of element
 *
 *	Arguements:	element		- element: element to reference
 *				property 	- string: style property to get
 *
 ***********************************************************************************/
alib.dom.styleGet = function(element, property)
{
	var val = null;
	var dv = this.m_document.defaultView;

	if (!element)
		return null;

	// Use jquery instead
	return $(element).css(property);

	/*
	if (!this.m_stylecache[property])
		this.styleMakeCache(property);

	var camel = this.m_stylecache[property]['camel'];
	var hyphen = this.m_stylecache[property]['hyphen'];
	
	// Check for IE opacity
	if (property == 'opacity' && element.filters) 
	{
		val = 1;
		try 
		{
			val = element.filters.item('DXImageTransform.Microsoft.Alpha').opacity / 100;
		} 
		catch(e) 
		{
			try 
			{
				val = element.filters.item('alpha').opacity / 100;
			} 
			catch(e) {}
		}
	} 
	else if (element.style[camel]) // get camelCase
	{ 
		val = element.style[camel];
	}
	else if (alib.userAgent.ie && element.currentStyle && element.currentStyle[camel]) // Opera 9 "currentStyle" is broken
	{ 
		// camelCase for currentStyle; isIE to workaround broken Opera 9 currentStyle
		val = element.currentStyle[camel];
	}
	else if (dv && dv.getComputedStyle ) // hyphen-case for computedStyle
	{ 
		var computed = dv.getComputedStyle(element, '');

		if (computed && computed.getPropertyValue(hyphen)) 
		{
			val = computed.getPropertyValue(hyphen);
		}
	}

	if (property == 'color')
	{
		if (val.match(/^rgb/) != null)
		{
			var arr = val.match(/\d+/g);
			val = this.rgbToHex(arr[0], arr[1], arr[2]);
		}
	}

	return val;
	*/
}

/***********************************************************************************
 *
 *	Function:	styleSet
 *
 *	Purpose:	(public) set style of element
 *
 *	Arguements:	element		- element: element to reference
 *				property 	- string: style property to set
 *				value 		- string: value to apply to property
 *
 ***********************************************************************************/
alib.dom.styleSet = function(element, property, value)
{
	$(element).css(property, value);
	return;
	/*
	if (!this.m_stylecache[property]) 
		this.styleMakeCache(property);
         
	var camel = this.m_stylecache[property]['camel'];
	switch(property) 
	{
	case 'opacity':
		if (alib.userAgent.ie && typeof element.style.filter == 'string') 
		{ 
			// not appended
			element.style.filter = 'alpha(opacity=' + value * 100 + ')';

			if (!element.currentStyle || !element.currentStyle.hasLayout) 
			{
				// no layout or cant tell
				element.style.zoom = 1; 
			}
		} 
		else 
		{
			element.style.opacity = value;
			element.style['-moz-opacity'] = value;
			element.style['-khtml-opacity'] = value;
		}
		break;
	case 'float':
		if (alib.userAgent.ie)
			element.style['styleFloat'] = value;
		else
			element.style['cssFloat'] = value;
		break;
	default:
		try
		{
			element.style[camel] = value;
		}
		catch (e) {}
	}
	*/
}

/***********************************************************************************
 *
 *	Function: 	getClientHeight
 *
 *	Purpose:	(public) get the height of the client (window)
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getClientHeight = function()
{

	/*
	var height = -1;
    var mode = this.m_document.compatMode;
      
	if ( (mode || alib.userAgent.ie) && !alib.userAgent.opera ) 
	{
		// IE - Gecko
		switch (mode) 
		{
			case 'CSS1Compat': // Standards mode
				height = this.m_document.documentElement.clientHeight;
				break;
      
			default: // Quirks
				height = this.m_document.body.clientHeight;
		}
	} 
	else // Safari - Opera
	{ 
		height = self.innerHeight;
	}
      
	return height;
	*/
	
	// Get document height from jquery
	return $(window).height();
}
alib.dom.GetClientHeight = function()
{
	return this.getClientHeight();
}

/***********************************************************************************
 *
 *	Function:	getClientWidth
 *
 *	Purpose:	(public) get the width of the client (window)
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getClientWidth = function()
{
	/*
	var width = -1;
	var mode = this.m_document.compatMode;
      
	// IE, Gecko, Opera
	if (mode || alib.userAgent.ie) 
	{ 
		switch (mode) 
		{
		case 'CSS1Compat': // Standards mode 
			width = this.m_document.documentElement.clientWidth;
			break;

		default: // Quirks
			width = this.m_document.body.clientWidth;
		}
	} 
	else // Safari
	{ 
		width = self.innerWidth;
	}

	return width;
	*/

	return $(window).width();
}

alib.dom.GetClientWidth = function()
{
	this.getClientWidth();
}

/***********************************************************************************
 *
 *	Function: 	getDocumentHeight
 *
 *	Purpose:	(public) get the height of the entire document
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getDocumentHeight = function()
{
	// Get document height via jquery
	return $(this.m_document).height();
/*
	var scrollHeight=-1;
	ALib.m_evwnd.eight=-1;
	var bodyHeight=-1;

	var marginTop = parseInt(this.styleGet(this.m_document.body, 'marginTop'), 10);

	var marginBottom = parseInt(this.styleGet(this.m_document.body, 'marginBottom'), 10);
         
	var mode = this.m_document.compatMode;
         
	if ((mode || alib.userAgent.ie) && !alib.userAgent.opera) // IE - Gecko
	{ 
		switch (mode) 
		{
		case 'CSS1Compat': // Standards mode
			scrollHeight = ((ALib.m_evwnd.innerHeight && ALib.m_evwnd.scrollMaxY) 
					?  ALib.m_evwnd.innerHeight+ALib.m_evwnd.scrollMaxY : -1);

			ALib.m_evwnd.eight = [this.m_document.documentElement.clientHeight, self.innerHeight||-1].sort(function(a, b){return(a-b);})[1];
			bodyHeight = this.m_document.body.offsetHeight + marginTop + marginBottom;
			break;

		default: // Quirks
			scrollHeight = this.m_document.body.scrollHeight;
			bodyHeight = this.m_document.body.clientHeight;
		}
		
	} 
	else // Safari - Opera
	{ 
		scrollHeight = this.m_document.documentElement.scrollHeight;
		ALib.m_evwnd.eight = self.innerHeight;
		bodyHeight = this.m_document.documentElement.clientHeight;
	}
	
	//var h = this.getDocumentHeights();
	var h = [scrollHeight,ALib.m_evwnd.eight,bodyHeight].sort(function(a, b){return(a-b);});
	return h[2];
*/
}

alib.dom.GetDocumentHeight = function()
{
	return this.getDocumentHeight();
}


/***********************************************************************************
 *
 *	Function: 	getDocumentHeights
 *
 *	Purpose:	(public) get the height of the entire document in scroll and more
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getDocumentHeights = function()
{
	var scrollHeight=-1;
	ALib.m_evwnd.eight=-1;
	var bodyHeight=-1;

	var marginTop = parseInt(this.styleGet(this.m_document.body, 'marginTop'), 10);

	var marginBottom = parseInt(this.styleGet(this.m_document.body, 'marginBottom'), 10);
         
	var mode = this.m_document.compatMode;
         
	if ((mode || alib.userAgent.ie) && !alib.userAgent.opera) // IE - Gecko
	{ 
		switch (mode) 
		{
		case 'CSS1Compat': // Standards mode
			scrollHeight = ((ALib.m_evwnd.innerHeight && ALib.m_evwnd.scrollMaxY) 
					?  ALib.m_evwnd.innerHeight+ALib.m_evwnd.scrollMaxY : -1);

			ALib.m_evwnd.eight = [this.m_document.documentElement.clientHeight, self.innerHeight||-1].sort(function(a, b){return(a-b);})[1];
			bodyHeight = this.m_document.body.offsetHeight + marginTop + marginBottom;
			break;

		default: // Quirks
			scrollHeight = this.m_document.body.scrollHeight;
			bodyHeight = this.m_document.body.clientHeight;
		}
		
	} 
	else // Safari - Opera
	{ 
		scrollHeight = this.m_document.documentElement.scrollHeight;
		ALib.m_evwnd.eight = self.innerHeight;
		bodyHeight = this.m_document.documentElement.clientHeight;
	}
	
	var h = [scrollHeight,ALib.m_evwnd.eight,bodyHeight];
	return h;
}

/***********************************************************************************
 *
 *	Function: 	getDocumentWidth
 *
 *	Purpose:	(public) get the width of the entire document
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getDocumentWidth = function()
{
	return $(this.m_document).width();

	/*
	var docWidth=-1,bodyWidth=-1,winWidth=-1;
	var marginRight = parseInt(this.styleGet(this.m_document.body, 'marginRight'), 10);
	var marginLeft = parseInt(this.styleGet(this.m_document.body, 'marginLeft'), 10);

	var mode = this.m_document.compatMode;
	
	// (IE, Gecko, Opera)
	if (mode || isIE) 
	{ 
		switch (mode) 
		{
		case 'CSS1Compat': // Standards
			docWidth = this.m_document.documentElement.clientWidth;
			bodyWidth = this.m_document.body.offsetWidth + marginLeft + marginRight;
			winWidth = self.innerWidth || -1;
			break;

		default: // Quirks
			bodyWidth = this.m_document.body.clientWidth;
			winWidth = this.m_document.body.scrollWidth;
			break;
		}
	} 
	else // safari
	{
		docWidth = this.m_document.documentElement.clientWidth;
		bodyWidth = this.m_document.body.offsetWidth + marginLeft + marginRight;
		winWidth = self.innerWidth;
	}

	var w = [docWidth,bodyWidth,winWidth].sort(function(a, b){return(a-b);});
	return w[2];
	*/
}

alib.dom.GetDocumentWidth = function()
{
	return this.getDocumentWidth();
}

/**
 * get the current position (scrolled) on the document - top
 *
 * @param {DOMElement} ele Optional element to check overflow scrolling for
 * @return {int} px from top scrolled
 */
alib.dom.getScrollPosTop = function(ele)
{
	var ele = ele || this.m_document;

	return $(ele).scrollTop();

	/*
	return typeof ALib.m_evwnd.pageYOffset != 'undefined' ? ALib.m_evwnd.pageYOffset
			: ALib.m_document.documentElement && ALib.m_document.documentElement.scrollTop
			? ALib.m_document.documentElement.scrollTop
			: ALib.m_document.body.scrollTop ? ALib.m_document.body.scrollTop:0;
			*/
}


/**
 * Get the corrent position (scrolled) on the element or document to left
 *
 * @param {DOMElement} ele Optional element to check overflow scrolling for
 * @return {int} px from left scrolled
 */
alib.dom.getScrollPosLeft = function(ele)
{
	var ele = ele || this.m_document;

	return $(ele).scrollLeft();

	/*
	return typeof ALib.m_evwnd.pageXOffset != 'undefined' ? ALib.m_evwnd.pageXOffset
			: ALib.m_document.documentElement && ALib.m_document.documentElement.scrollLeft
			? ALib.m_document.documentElement.scrollLeft
			: ALib.m_document.body.scrollLeft ? ALib.m_document.body.scrollLeft:0;
	*/
}

/***********************************************************************************
 *
 *	Function: 	setScrollPosTop
 *
 *	Purpose:	(public) get the current position (scrolled) on the document - top
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.setScrollPosTop = function(topy)
{
	ALib.m_evwnd.scrollBy(0,topy);
}

/***********************************************************************************
 *
 *	Function: 	styleAddClass
 *
 *	Purpose:	(public) append a class to an element
 *
 *	Arguements:	element		- element: element to modify
 *				className	- string: class to add
 *
 ***********************************************************************************/
alib.dom.styleAddClass = function(element, className)
{
	$(element).addClass(className);
}

alib.dom.StyleAddClass = function(element, className)
{
	this.styleAddClass(element, className);
}

/***********************************************************************************
 *
 *	Function: 	styleRemoveClass
 *
 *	Purpose:	(public) remove a class from an element
 *
 *	Arguements:	element		- element: element to modify
 *				className	- string: class to remove
 *
 ***********************************************************************************/
alib.dom.styleRemoveClass = function(element, strClass)
{
	$(element).removeClass(strClass);
}

/***********************************************************************************
 *
 *	Function: 	styleSetClass
 *
 *	Purpose:	(public) change class of element. This will replace current class
 *
 *	Arguements:	element		- element: element to modify
 *				className	- string: class to add
 *
 ***********************************************************************************/
alib.dom.styleSetClass = function(element, className)
{
	try
	{
		element['className'] = className;
	}
	catch (e) {}
}
alib.dom.setClass = function(element, className)
{
	this.styleSetClass(element, className);
}

/***********************************************************************************
 *
 *	Function:	getElementPosition
 *
 *	Purpose:	(public) get the position of an emelment in relation to doc
 *
 *	Arguements:	o		- element: element to locate
 *
 ***********************************************************************************/
alib.dom.getElementPosition = function(o)
{
	var pos = $(o).offset();
	var left	= pos.left;
	var top 	= pos.top;
	var right 	= o.offsetWidth + left;
	var bottom 	= o.offsetHeight + top;

	/*
	try
	{
		while (o.offsetParent)
		{
			left += o.offsetLeft;
			top  += o.offsetTop;
			if (o != document.body && o != document.documentElement && o != orig)
			{
				left -= o.scrollLeft;
				top  -= o.scrollTop;

				//ALib.trace(o);
				//ALib.trace("Scroll Top: " +  o.id + " " + o.scrollTop);
			}

			o = o.offsetParent;
		}
	}
	catch(e) {}
	*/

	return {x:left, y:top, r:right, b:bottom};
}

/***********************************************************************************
 *
 *	Function:	setMouseCoords
 *
 *	Purpose:	(private) set the current position of the mouse (for tracking clicks)
 *
 *	Arguements:	ev		- event: event to process
 *
 ***********************************************************************************/
alib.dom.setMouseCoords = function (ev)
{
	alib.dom.updateActive();

	ev = CDomFixEvent(ev);
	if(ev.pageX || ev.pageY)
	{
		alib.dom.mouse_x = ev.pageX;
		alib.dom.mouse_y = ev.pageY;
	}
	else
	{
		try
		{
			alib.dom.mouse_x = ev.clientX + ALib.m_document.body.scrollLeft - ALib.m_document.body.clientLeft;
			alib.dom.mouse_y = ev.clientY + ALib.m_document.body.scrollTop  - ALib.m_document.body.clientTop;
		}
		catch (e) {}
	}
}

/***********************************************************************************
 *
 *	Function:	 getMouseCoords
 *
 *	Purpose:	(public) return x and y of current mouse position
 *
 *	Arguements:	
 *
 ***********************************************************************************/
alib.dom.getMouseCoords = function ()
{
	return { x:alib.dom.mouse_x, y:alib.dom.mouse_y	};

}

/**
 * Set flag that the user is interacting with the document
 *
 * @private
 */
alib.dom.updateActive = function ()
{
	if (this.acTimer)
		clearTimeout(this.acTimer);

	alib.dom.userActive = true;

	this.acTimer = setTimeout(function() { alib.dom.userActive = false; }, 1000*60*3); // 3 minutes 
}

/***********************************************************************************
 *
 *	Function:	changeFontSize
 *
 *	Purpose:	(public) change the size of font inside any container
 *
 *	Arguements:	e	- string/element : the id of the container or the container
 *				type - string : + or -
 *
 ***********************************************************************************/
alib.dom.changeFontSize = function(e, type, min, max)
{
	if (typeof e == "string")
		e = this.getElementById(e);

	if (!min)
		var min = 8;

	if (!max)
		var max = 18;

    if(e.style.fontSize) 
	{
	    var s = parseInt(e.style.fontSize.replace("px",""));
    } 
	else 
	{
    	var s = 12;
    }

	if (type == "-")
	{
		if(s!=min) 
		{
			s -= 1;
		}
	}
	else
	{
		if(s!=max) 
		{
			s += 1;
		}
	}
	
 	e.style.fontSize = s+"px"
	
}

/***********************************************************************************
 *
 * @depricated This is no longer needed now that HTML5 suports .placeholder attribute
 *
 *	Function:	setInputBlurText
 *
 *	Purpose:	(public) Put text inside input until user clicks on it
 *
 *	Arguements:	e	- string/input : the id of the container or the container
 *				type - string : + or -
 *
 ***********************************************************************************/
alib.dom.setInputBlurText = function(e, text, blurclass, onclass, overclass)
{
	if (typeof e == "string")
		e = this.getElementById(e);

	e.placeholder = text;

	/*
	if (onclass)
		e.onclass = onclass;
	if (blurclass)
		e.blurclass = blurclass;
	if (overclass)
		e.overclass = overclass;

	e.blurtext = text;
	e.value = text;

	if (blurclass)
		this.styleSetClass(e, blurclass);
        
	e.onfocus = function() { 
		if (this.overclass)
		{
			this.onmouseover = function()
			{
				alib.dom.styleAddClass(this, this.overclass); 
			}

			this.onmouseout = function()
			{
				alib.dom.styleRemoveClass(this, this.overclass); 

				if (this.onclass)
					alib.dom.styleAddClass(this, this.onclass); 
			}
		}

		if (this.value == this.blurtext)
			this.value = ""; 

		if (this.onclass)
			alib.dom.styleAddClass(this, this.onclass); 
		else if (this.blurclass)
			alib.dom.styleRemoveClass(this, this.blurclass); 
	};

	e.onblur = function()
	{ 
		if (this.overclass)
		{
			this.onmouseover = function()
			{
				alib.dom.styleRemoveClass(this, this.blurclass); 
				alib.dom.styleAddClass(this, this.overclass); 
			}

			this.onmouseout = function()
			{
				if (this.blurclass)
					alib.dom.styleAddClass(this, this.blurclass); 
				else
					alib.dom.styleRemoveClass(this, this.overclass); 
			}
		}

		if (this.blurclass)
				alib.dom.styleAddClass(this, this.blurclass); 

		if (this.value == "")
		{
			this.value = this.blurtext;
		}
	}

	if (overclass)
	{
		e.onmouseover = function()
		{
			alib.dom.styleaAddClass(this, this.overclass); 
		}

		e.onmouseout = function()
		{
			if (this.blurclass)
				alib.dom.styleAddtClass(this, this.blurclass); 
			else
				alib.dom.styleRemoveClass(this, this.overclass); 
		}
	}
	*/
}

/***********************************************************************************
 *
 *	Function:	textAreaAutoResize
 *
 *	Purpose:	(public) Make a textarea autoresize
 *
 *	Arguements:	e	- string/input : the id of the container or the container
 *				type - string : + or -
 *				min	- minimum height
 *				max	- maximum height
 *
 ***********************************************************************************/
alib.dom.textAreaAutoResizeHeight = function(e, min_height, max_height)
{
	var minHeight = (typeof min_height != "undefined") ? min_height : null;
	var maxHeight = (typeof max_height != "undefined") ? max_height : null;

	if (typeof e == "string")
		e = this.getElementById(e);

	e.minHeight = minHeight;
	e.maxHeight = maxHeight;
	e.style.resize = 'none';

	// Create a clone
	var ta = alib.dom.createElement("textarea");
	ta.setAttribute("tabIndex", "-1");
	alib.dom.styleSet(ta, "position", "absolute");
	alib.dom.styleSet(ta, "top", "0");
	alib.dom.styleSet(ta, "left", "-9999px");
	if (e.placeholder)
		ta.value = e.placeholder; // use this to set initial height
	e.parentNode.insertBefore(ta, e);
	e.ta = ta;
	e.autoResizeHeight = function()
	{
		if (!alib.userAgent.ie)
		{
			if (e.minHeight)
				this.ta.style.height = this.minHeight + "px";
			else
				this.ta.style.height = "0px";

			this.ta.style.width = alib.dom.getElementWidth(this) + "px";

			this.ta.value = this.value;

			// Firefox does not account for padding, so add 10px for safety
			if (alib.userAgent.firefox)
				var height = this.ta.scrollHeight + 10;
			else
				var height = this.ta.scrollHeight;
		}
		else
		{
			var height = this.scrollHeight;
		}

		alib.dom.styleSet(this, "overflow-y", "hidden");

		if (this.minHeight && height < this.minHeight)
		{
			if (!alib.userAgent.ie)
				this.style.height = this.minHeight + "px";
			return true;
		}
		else if (this.maxHeight && height > this.maxHeight)
		{
			alib.dom.styleSet(this, "overflow-y", "auto");
			alib.dom.styleSet(this, "height", this.maxHeight + 5 + "px");
			//return true;
		}
		else
		{
			this.style.height = height+"px";
		}

		return height;
	}

	function intervalMethod() 
	{
		var res = e.autoResizeHeight();
		if (res)
		{
			clearInterval(e.initInterval);
		}
	}
	e.initInterval = setInterval(intervalMethod, 200);

	var funct = function(e)
	{
		if (alib.userAgent.ie)
			var ta = ALib.m_evwnd.event.srcElement;
		else
			var ta = this;

		ta.autoResizeHeight();
	}

	if (alib.userAgent.ie)
	{
		e.attachEvent('onkeyup', funct);
		e.attachEvent('onfocus', funct);
	}
	else
	{
		try 
		{
			e.addEventListener('keyup', funct, false);
			e.addEventListener('focus', funct, false);
		}
		catch (e) {}
	}
}

/***********************************************************************************
 *
 *	Function: 	getContentHeight
 *
 *	Purpose:	(public) get the content height of an element (minus px)
 *
 *	Arguements:	e = element
 *
 ***********************************************************************************/
alib.dom.getContentHeight = function(e)
{
	var height = $(e).height();
	/*
	var height = -1;
    
	var marginTop = parseInt(this.styleGet(this.m_document.body, 'marginTop'), 10);
	var marginBottom = parseInt(this.styleGet(this.m_document.body, 'marginBottom'), 10);
	var paddingTop = parseInt(this.styleGet(this.m_document.body, 'paddingTop'), 10);
	var paddingBottom = parseInt(this.styleGet(this.m_document.body, 'paddingBottom'), 10);

	height = e.offsetHeight-marginTop-marginBottom-paddingTop-paddingBottom;
	*/

	/*
	if (alib.userAgent.ie)
		height = height - 20;
		*/
      
	return height;
}

/***********************************************************************************
 *
 *	Function: 	getScrollBarWidth
 *
 *	Purpose:	(public) get the width of the system scrollbar
 *
 *	Arguements:	e = element
 *
 ***********************************************************************************/
alib.dom.getScrollBarWidth = function(e)
{
	var inner = this.createElement('p');
	inner.style.width = "100%";
	inner.style.height = "100px";

	var outer = this.createElement('div');
	outer.style.position = "absolute";
	outer.style.top = "0px";
	outer.style.left = "0px";
	outer.style.visibility = "hidden";
	outer.style.width = "50px";
	outer.style.height = "50px";
	outer.style.overflow = "hidden";
	outer.appendChild (inner);

	this.m_document.body.appendChild(outer);
	var w1 = inner.offsetWidth;
	outer.style.overflow = 'scroll';
	var w2 = inner.offsetWidth;
	if (w1 == w2) w2 = outer.clientWidth;

	this.m_document.body.removeChild (outer);

	return (w1 - w2);
}

/***********************************************************************************
 *
 *	Function: 	function
 *
 *	Purpose:	(public) get the hex value for an RGB structure
 *
 *	Arguements:	red, green, blue = 1-255 color values
 *
 ***********************************************************************************/
alib.dom.rgbToHex = function(red, green, blue)
{
	return this.intToHex(red) + this.intToHex(green) + this.intToHex(blue);
}

/***********************************************************************************
 *
 *	Function: 	intToHex
 *
 *	Purpose:	(public) convert an integer to a hex
 *
 *	Arguements:	integer value
 *
 ***********************************************************************************/
alib.dom.intToHex = function(value)
{
	value = parseInt(value).toString(16);
	return value.length < 2 ? value + "0" : value;
}

/***********************************************************************************
 *
 *	Function:	getEventSource
 *
 *	Purpose:	(public) get the source element from an event
 *
 *	Arguements:	e	- event: event to process/translate
 *
 ***********************************************************************************/
alib.dom.getEventSource = function(evt)
{
	evt = CDomFixEvent(evt);

	if (evt)
	{
		if (alib.userAgent.ie)
		{
			return rvt.srcElement;
		}
		else
		{
			return evt.target;
		}
	}
}

/**
 * Place text into an element safely
 *
 * @param {DOMElement} e The element to put text into
 * @param {string} html The text to put in the element
 */
alib.dom.setText = function(e, text)
{
	$(e).text(text);
}

/**
 * Place HTML into an element safely
 *
 * @param {DOMElement} e The element to put text into
 * @param {string} html The html to put in the element
 */
alib.dom.setHtml = function(e, html)
{
	$(e).html(html);
}

/*************************************************************************
*    Function:    buildTdLabel
* 
*    Purpose:    Build Td Row for every form input
**************************************************************************/
alib.dom.buildTdLabel = function(tbody, label, width)
{
    var tr = alib.dom.createElement("tr", tbody);
    var td = alib.dom.createElement("td", tr);
    alib.dom.styleSet(td, "fontSize", "12px");
    alib.dom.styleSet(td, "verticalAlign", "middle");
    alib.dom.styleSet(td, "paddingBottom", "8px");
    if(width)
        td.setAttribute("width", width);
    
    if(label)
        td.innerHTML = label;
        
    return tr;
}

/*************************************************************************
*    Function:    setElementAttr - (New)
* 
*    Purpose:    Sets Element attribute 
**************************************************************************/
alib.dom.setElementAttr = function(input, attrData)
{ 
    for(attribute in attrData)
    {
        var attr = attrData[attribute][0];
        var value = attrData[attribute][1];
        
        switch(attr)
        {
            case "padding":
            case "margin":
            case "margin-right":
            case "margin-left":
            case "margin-bottom":
            case "margin-top":
            case "width":
            case "height":
            case "font-weight":
            case "font-size":
            case "border":
            case "cursor":
            case "overflow":
            case "float":
            case "clear":
                alib.dom.styleSet(input, attr, value);
            default:
                input[attr] = value;
                break;
        }
    }
    
    return input;
}

/*************************************************************************
*    Function:    divClear
* 
*    Purpose:    clear the divs
**************************************************************************/
alib.dom.divClear = function(parentDiv)
{
    var divClear = alib.dom.createElement("div", parentDiv);
    alib.dom.styleSet(divClear, "clear", "both");
    alib.dom.styleSet(divClear, "visibility", "hidden");
}

/***********************************************************************************
 *
 *    Function:    styleSet Using a class name
 *
 *    Purpose:    (public) set style of element
 *
 *    Arguements: className    - string: Name of the class
 *                property     - string: style property to set
 *                value        - string: value to apply to property
 *
 ***********************************************************************************/
alib.dom.styleSetUsingClass = function(className, property, value)
{
    $("." + className).css(property, value);
}

// Initialize dom
alib.dom.init();

/***********************************************************************************
 *
 *	Function:	CDomFixEvent
 *
 *	Purpose:	(private) process and return standard event
 *
 *	Arguements:	e	- event: event to process/translate
 *
 ***********************************************************************************/
function CDomFixEvent(e)
{
	if (typeof e == 'undefined') 
	{
		if (ALib.m_evwnd)
			e = ALib.m_evwnd.event;
		else
			e = window.event;
	}
	
	if (e)
	{
		if (typeof e.layerX == 'undefined') e.layerX = e.offsetX;
		if (typeof e.layerY == 'undefined') e.layerY = e.offsetY;
		return e;
	}
	else
		return null;
}

/** 
 *  Another TextArea Autogrow plugin (0.2) alpha's alpha
 *  by Nikolay Borisov aka KOSIASIK
 *  mne@figovo.com
 *
 *  http://figovo.com/
 *
 *  Example: 
 *  $('textarea').ata();
 *
 *  jQuery required. Download it at http://jquery.com/
 *
 */
(function(jQuery){

	jQuery.fn.ata = function(options){

		options = jQuery.extend({
			timer:100
		}, options);
	
		return this.each(function(i){
	
			var $t = jQuery(this),
				t = this;

			t.style.resize = 'none';
			t.style.overflow = 'hidden';

			var tVal = t.value;			
			t.style.height = '0px';
			t.value = "W\nW\nW";
			var H3 = t.scrollHeight;
			t.value = "W\nW\nW\nW";
			var H4 = t.scrollHeight;
			var H = H4 - H3;
			t.value = tVal;
			tVal = null;

			$t.before("<div id=\"ataa_"+i+"\"></div>");

			var $c = jQuery('#ataa_'+i),
				c = $c.get(0);

			c.style.padding = '0px';
			c.style.margin = '0px';

			$t.appendTo($c);

			$t.bind('focus', function(){
				t.startUpdating()
			}).bind('blur', function(){
				t.stopUpdating()
			});

			this.heightUpdate = function(){

				if (tVal != t.value){

					tVal = t.value;
					t.style.height = '0px';
					var tH = t.scrollHeight + H;
					t.style.height = tH + 'px';
					c.style.height = 'auto';
					c.style.height = c.offsetHeight + 'px';

				}

			}

			this.startUpdating = function(){
				t.interval = window.setInterval(function(){
					t.heightUpdate()
				}, options.timer);
			}

			this.stopUpdating = function(){
				clearInterval(t.interval);	
			}

			jQuery(function(){
				t.heightUpdate()
			});

		});

	};

})(jQuery);

/**
 * @fileOverview alib.ui.fs Is used to add effects using jquery
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Create fx namespace
 *
 * @var {Object}
 */
alib.fx = {};

/**
 * SlideUp effect
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.slideUp = function(e, cbFun, duration)
{
	var dur = duration || 400;
	var cb = cbFun || null;

	$(e).slideUp(duration, cb);
}

/**
 * SlideDown effect
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.slideDown = function(e, cbFun, duration)
{
	var dur = duration || 400;
	var cb = cbFun || null;

	$(e).slideDown(duration, cb);
}

/**
 * Hide by sliding out to the left
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.hideLeft = function(e, cbFun, duration)
{
	var dur = duration || 1000;
	var cb = cbFun || null;

	$(e).hide('slide', {direction: 'left'}, duration);
}

/**
 * Show by sliding in from the left
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.showLeft = function(e, cbFun, duration)
{
	var dur = duration || 1000;
	var cb = cbFun || null;

	$(e).show('slide', {direction: 'left'}, duration);
}

/**
 * Hide by sliding out to the right
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.hideRight = function(e, cbFun, duration)
{
	var dur = duration || 1000;
	var cb = cbFun || null;

	$(e).hide('slide', {direction: 'right'}, duration);
}

/**
 * Show by sliding in from the right
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.showRight = function(e, cbFun, duration)
{
	var dur = duration || 1000;
	var cb = cbFun || null;

	$(e).show('slide', {direction: 'right'}, duration);
}

/**
 * Fade in effect
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.fadeIn = function(e, cbFun, duration)
{
	var dur = duration || 400;
	var cb = cbFun || null;

	$(e).fadeIn(duration, cb);
}

/**
 * Fade out effect
 *
 * @param {DOMElement} e
 * @param {function} cbFun
 * @param {duration}
 */
alib.fx.fadeOut = function(e, cbFun, duration)
{
	var dur = duration || 400;
	var cb = cbFun || null;

	$(e).fadeOut(duration, cb);
}

/**
 * @fileOverview alib.ui.dateTime Date and time functions, mostly wraps jquery-dateFormat
 *
 * Date Time Patterns
 * yy = short year
 * yyyy = long year
 * M = month (1-12)
 * MM = month (01-12)
 * MMM = month abbreviation (Jan, Feb � Dec)
 * MMMM = long month (January, February � December)
 * d = day (1 - 31)
 * dd = day (01 - 31)
 * ddd = day of the week in words (Monday, Tuesday � Sunday)
 * D - Ordinal day (1st, 2nd, 3rd, 21st, 22nd, 23rd, 31st, 4th�)
 * h = hour in am/pm (0-12)
 * hh = hour in am/pm (00-12)
 * H = hour in day (0-23)
 * HH = hour in day (00-23)
 * mm = minute
 * ss = second
 * SSS = milliseconds
 * a = AM/PM marker
 * p = a.m./p.m. marker
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2014 Aereus Corporation. All rights reserved.
 */

/**
 * Create dateTime namespace
 *
 * @var {Object}
 */
alib.dateTime = {};

/**
 * Format a date value into the format provided
 *
 * @param {string|Date} value The date to format
 * @param {string} format The string to use as the format template
 */
alib.dateTime.format = function(value, format)
{
	if (format == "long_ago")
		return jQuery.format.prettyDate(value);
	else
		return jQuery.format.date(value, format);
}

/**
 * Convert a date with a timezone to browser time
 *
 * @param {string|Date} value The date to format
 */
alib.dateTime.toBrowserTimeZone = function(value)
{
	return jQuery.format.toBrowserTimeZone(value);
}

/****************************************************************************
*	
*	Class:		CDragAndDrop
*
*	Purpose:	Add Drag&Drop functionality
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

/*
*	Notes
* 	
*	1.	If there is no drop zone defined then just drag the entire if (if absolute positioned)
*		Otherwise, if there are dropzones, create a dummy div(absoutle) with a copy of source to drag.
*		That way if the user does not drop into a drop zone then we can just return to our previous position.
*/
var drag_id = 0;
var DragAndDrop = {

    obj : null,
	dropzones : new Array,
	
	registerDragable : function (o, oRoot, dzgroup, minX, maxX, minY, maxY)
	{
		o.onmousedown	= DragAndDrop.init;
		o.onselectstart	= function() { return false; } // Disable text selection
		o.startdrag		= DragAndDrop.start;
        o.hmode			= true ;
        o.vmode			= true ;

        o.root = (oRoot && oRoot != null) ? oRoot : o ;
		
		// We can restrict this drag item to a groups of dropzones with dzgroup
		if (dzgroup)
			o.m_groupName = dzgroup;

		// Create new element that will hold copy of orig
		o.m_dragCon = ALib.m_document.createElement("div");
		ALib.m_document.body.appendChild(o.m_dragCon);
		o.m_dragCon.style.position = "absolute";
		o.m_dragCon.style.top = "0px";
		o.m_dragCon.style.left = "0px";
		o.m_dragCon.style.display = "none";

        o.minX = typeof minX != 'undefined' ? minX : null;
        o.minY = typeof minY != 'undefined' ? minY : null;
        o.maxX = typeof maxX != 'undefined' ? maxX : null;
        o.maxY = typeof maxY != 'undefined' ? maxY : null;

        o.root.onDragStart	= new Function();
        o.root.onDragEnd	= new Function();
        o.root.onDrag		= new Function();
	},	

	/***********************************************************************************
	 *
	 *	Function: 	registerDragableChild
	 *
	 *	Purpose:	Allows for nestled dragable objects
	 *
	 *	Arguements:	p = parent of o, p must be o.parentNode 
	 *				o = child object to be set as dragable
	 *
	 ***********************************************************************************/
	registerDragableChild : function (p, o, oRoot, dzgroup, minX, maxX, minY, maxY)
	{
		// If child has a parent
		if(p)
		{
			// set drag_id, initialize object as dragable
			drag_id++;
			o.drag_id = drag_id;
			o.dragable = true;

			// parent is only dragable when child is not being dragged 
			o.parent = p;
			
			DragAndDrop.registerDragable(o, oRoot, dzgroup, minX, maxX, minY, maxY);
		}
		// Else, parent is child of root
		else
		{
			// set drag_id, initialize object as dragable
			drag_id++;
			o.drag_id = drag_id;			
			o.dragable = true;
			
			// parent is only dragable when child is not being dragged 
			o.parent = null;

			DragAndDrop.registerDragable(o, oRoot, dzgroup, minX, maxX, minY, maxY);
		}
	},
	
	init : function(e)
    {
        var o = DragAndDrop.obj = this;
		//e = DragAndDrop.fixE(e);
		var ev = e | window.event;
        var ey = ev.clientY;
        var ex = ev.clientX;
		var dz = DragAndDrop.inDropZone(o, ex, ey);
		
		// If object has a drag_id, disable parent nodes from being dragged
		if(o.drag_id)
		{
			// make sure parent has not changed
			if(dz && o.parent)
				o.parent = dz.parentNode;
			
			// disable parent nodes
			if(o.parent)
				o.parent.dragable = false;
			
			if(o.dragable == true)
			{
				DragAndDrop.startCoords = alib.dom.getMouseCoords();

				ALib.m_document.onmousemove = function(e)
				{
					var cur_pos = alib.dom.getMouseCoords();

					if (cur_pos.x >(DragAndDrop.startCoords.x+1) || cur_pos.x <(DragAndDrop.startCoords.x-1)
						|| cur_pos.y >(DragAndDrop.startCoords.y+1) || cur_pos.y <(DragAndDrop.startCoords.y-1))
					{
						o.startdrag(e);
					}
				}

				ALib.m_document.onmouseup = function(e)
				{
					ALib.m_document.onmousemove = function() {}
				}

				return false;
			}
		}
		else
		{
			DragAndDrop.startCoords = alib.dom.getMouseCoords();

			ALib.m_document.onmousemove = function(e)
			{
				var cur_pos = alib.dom.getMouseCoords();

				if (cur_pos.x >(DragAndDrop.startCoords.x+1) || cur_pos.x <(DragAndDrop.startCoords.x-1)
					|| cur_pos.y >(DragAndDrop.startCoords.y+1) || cur_pos.y <(DragAndDrop.startCoords.y-1))
				{
					o.startdrag(e);
				}
			}

			ALib.m_document.onmouseup = function(e)
			{
				ALib.m_document.onmousemove = function() {}
			}

			return false;
		}
    },

    start : function(e)
    {
        var o = DragAndDrop.obj = this;
        e = DragAndDrop.fixE(e);
		var pos = alib.dom.getElementPosition(DragAndDrop.obj.root);
        var y = pos.y;
        var x = pos.x;
        o.root.onDragStart(x, y);
		
		// Now create a default setDragGuiCon if not already called	
		if (typeof o.m_dragConSet == "undefined")
		{
			var icon = ALib.m_document.createElement("div");
			alib.dom.styleSet(icon, "border", o.style.border);
			alib.dom.styleSet(icon, "width", (pos.r - pos.x) + "px");
			alib.dom.styleSet(icon, "height", (pos.b - pos.y) + "px");
			icon.innerHTML = o.root.innerHTML;
			DragAndDrop.setDragGuiCon(o, icon);
		}

		o.m_dragCon.style.display = "block";
		o.m_dragCon.style.top = y + "px";
		o.m_dragCon.style.left = x+ "px";

        o.lastMouseX = e.clientX;
        o.lastMouseY = e.clientY;

		if (o.minX != null) o.minMouseX = e.clientX - x + o.minX;
		if (o.maxX != null) o.maxMouseX = o.minMouseX + o.maxX - o.minX;

		if (o.minY != null) o.minMouseY = e.clientY - y + o.minY;
		if (o.maxY != null) o.maxMouseY = o.minMouseY + o.maxY - o.minY;

        ALib.m_document.onmousemove = DragAndDrop.drag;
        ALib.m_document.onmouseup	 = DragAndDrop.end;

        return false;
    },

    drag : function(e)
    {
        e = DragAndDrop.fixE(e);
        var o = DragAndDrop.obj;

        var ey = e.clientY;
        var ex = e.clientX;
        var y = parseInt(o.m_dragCon.style.top);
        var x = parseInt(o.m_dragCon.style.left);
        var nx, ny;

        if (o.minX != null) ex = Math.max(ex, o.minMouseX);
        if (o.maxX != null) ex = Math.min(ex, o.maxMouseX);
        if (o.minY != null) ey = Math.max(ey, o.minMouseY);
        if (o.maxY != null) ey = Math.min(ey, o.maxMouseY);

        nx = x + (ex - o.lastMouseX);
        ny = y + (ey - o.lastMouseY);
	
		// Check if we are over a drop zone
		var dz = DragAndDrop.inDropZone(o, ex, ey);
		if (o.m_dz)
		{
			if (dz)
			{
				if (dz != o.m_dz)
				{
					DragAndDrop.dzDragExit(o.m_dz, o);
					o.m_dz = dz;
					DragAndDrop.dzDragEnter(dz, o, ex, ey);
				}
			}
			else
			{
				DragAndDrop.dzDragExit(o.m_dz, o);
				o.m_dz = null;
			}
		}
		else
		{
			if (dz)
			{
				o.m_dz = dz;
				DragAndDrop.dzDragEnter(dz, o, ex, ey);
			}
		}

		// Check sortable
		if (dz)
		{
			if (dz.m_isSortable)
			{
				// Find out what element the dragged element is over
				for (var i = 0; i < dz.childNodes.length; i++)
				{
					var node = dz.childNodes.item(i);
					var objPos = alib.dom.getElementPosition(node, true);

					// test to see if x and y are in object region
					if (ex >= objPos.x && ey >= objPos.y
						&& ey <= objPos.b && ex <= objPos.r)
					{
						if (node != o)
						{
							var before = (ey < (objPos.y+((objPos.b-objPos.y)/2))) ? true : false;
							if (before)
								dz.insertBefore(o, node);
							else
								insertAfter(dz, o, node);
						}
					}
				}
			}
		}

		if (DragAndDrop.obj.m_dragOffsetX)
	        DragAndDrop.obj.m_dragCon.style["left"] = (ex + DragAndDrop.obj.m_dragOffsetX) + "px";
		else
	        DragAndDrop.obj.m_dragCon.style["left"] = nx + "px";
		
		if (DragAndDrop.obj.m_dragOffsetY)
        	DragAndDrop.obj.m_dragCon.style["top"] = (ey + DragAndDrop.obj.m_dragOffsetY) + "px";
		else
			DragAndDrop.obj.m_dragCon.style["top"] = ny + "px";

        DragAndDrop.obj.lastMouseX    = ex;
        DragAndDrop.obj.lastMouseY    = ey;
		
		// If we are offsetting the container then report mouse pos
		if (DragAndDrop.obj.m_dragOffsetX)
			nx = ex;
		if (DragAndDrop.obj.m_dragOffsetY)
			ny = ey;
        DragAndDrop.obj.root.onDrag(nx, ny);
        return false;	
    },

    end : function()
    {
        var o = DragAndDrop.obj;
		if(o.drag_id)
		{
			// Restore all parents to dragable
			while(o.parent)
			{
				o.parent.dragable = true;
				o = o.parent;
			}
		}

        ALib.m_document.onmousemove = null;
        ALib.m_document.onmouseup   = null;
		var x = DragAndDrop.obj.lastMouseX;
		var y = DragAndDrop.obj.lastMouseY;
		var pos = alib.dom.getElementPosition(DragAndDrop.obj.m_dragCon);
		var reportX = pos.x;
		var reportY = pos.y;
		// If we are offsetting the container then report mouse pos
		if (DragAndDrop.obj.m_dragOffsetX)
			reportX = x;
		if (DragAndDrop.obj.m_dragOffsetY)
			reportY = y;

		if (!DragAndDrop.dropzones.length || (DragAndDrop.dropzones.length 
			&& DragAndDrop.obj.m_dz) || !DragAndDrop.obj.m_groupName)
		{
			DragAndDrop.obj.root.onDragEnd(reportX, reportY);
		}

		// Move original object
		DragAndDrop.obj.m_dragCon.style.display = "none";

		if(DragAndDrop.obj.m_dz)
		{
			DragAndDrop.dzDragDrop(DragAndDrop.obj.m_dz, DragAndDrop.obj);
		}

        DragAndDrop.obj = null;
    },

    fixE : function(e)
    {
        if (typeof e == 'undefined') 
		{
			if (ALib.m_evwnd)
				e = ALib.m_evwnd.event;
			else
				e = window.event;
		}
        if (typeof e.layerX == 'undefined') e.layerX = e.offsetX;
        if (typeof e.layerY == 'undefined') e.layerY = e.offsetY;
        return e;
    },

	// The below function will set the icon/container under the cursor when dragged (can be object)
	setDragGuiCon : function(obj, con, offsetX, offsetY)
	{
		DragAndDrop.clearDragGuiCon(obj.m_dragCon);
		obj.m_dragCon.appendChild(con);
		obj.m_dragConSet = true;

		// offsetX and offsetY are used to position div relative to mouse
		obj.m_dragOffsetX = null;
		obj.m_dragOffsetY = null;

		if (offsetX)
			obj.m_dragOffsetX = offsetX;
		
		if (offsetY)
			obj.m_dragOffsetY = offsetY;
	},

	clearDragGuiCon : function(con)
	{
		con.innerHTML = "";
	},

	inDropZone : function(e, x, y)
	{
		var objPos = [];

		for (var i = 0; i < this.dropzones.length; i++)
		{
			if (this.dropzones[i])
			{
				// IE never clears dropsozes if new pages are reloaded
				// so we have to skip over null dropzones
				// These should eventually be purged
				try 
				{
					objPos = alib.dom.getElementPosition(this.dropzones[i], true);	

					// test to see if x and y are in object region
					if (x >= objPos.x && y >= objPos.y
						&& y <= objPos.b && x <= objPos.r)
					{
						if (e.m_groupName)
						{
							if (e.m_groupName == this.dropzones[i].m_groupName)
								return this.dropzones[i];
						}
						//else
						//	return this.dropzones[i];
					}
				}
				catch (e) { }
			}
		}
		
		return null;
	},

	mouseCoords : function(ev)
	{
		if(ev.pageX || ev.pageY)
			return {x:ev.pageX, y:ev.pageY};
		
		return {
			x:ev.clientX + ALib.m_document.body.scrollLeft - ALib.m_document.body.clientLeft,
			y:ev.clientY + ALib.m_document.body.scrollTop  - ALib.m_document.body.clientTop
		};
	},

	/* Dropzone functions */
	registerDropzone : function (o, groupname)
	{
		var ind = this.dropzones.length;
		this.dropzones[ind] = o;

		// set group name
		o.m_groupName = groupname;

		o.onDragEnter = new Function;
		o.onDragExit = new Function;
		o.onDragDrop = new Function;
	},

	registerSortable : function (o)
	{
		o.m_isSortable = true;

		o.dzGetSortOrder = function()
		{
			var sorder = new Array();

			for (var i = 0; i < this.childNodes.length; i++)
			{
				sorder[sorder.length] = this.childNodes.item(i).id;
			}

			return sorder;
		}
		/*
		for (var i = 0; i < o.childNodes.length; i++)
		{
			var node = o.childNodes.item(i);
			DragAndDrop.registerDragable(node);
		}
		*/
	},

	dzDragEnter : function(dz, e, ex, ey)
	{
		// Call in dropzone when item is dragged over it
		dz.onDragEnter(e);
	},

	dzDragExit : function(dz, e)
	{
		// Call in dropzone when item leaves drop zone
		dz.onDragExit(e);
	},
	
	dzDragDrop : function(dz, e)
	{
		/*
		if (dz.m_isSortable)
		{
			if (dz.m_overNode)
			{
				insertAfter(dz, e, dz.m_overNode);
			}
		}
		*/

		// Call in dropzone when item leaves drop zone
		dz.onDragDrop(e);
	}
};


/*======================================================================================
	
	Module:		CDropdownMenu

	Purpose:	Kind of like a window but embedded in the document

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2006 Aereus Corporation. All rights reserved.

	Usage:
				var ccTble = new CContentTable("My Window Name", "100px", "100px");
				ccTble.print(parent_div); // If no parent div then just doc.write

======================================================================================*/

// Define globals
// -----------------------------------------------------------
var g_mRootDiv = null;
var g_mClearTimer = null;
var g_mClearObj = new Object();

var mDivMClicked = null;
var mDivRootMenu = null;
var GTIMERCLEAR = null;

var mRootBtn = null;

var mChildActive = null;

var g_CDMenues = new Array();
var g_CDMenCount = 0;

function CDropAddHandler(doc)
{
	doc.onclick = function() 
	{
		if (g_mRootDiv)
		{
			if ((g_mRootDiv.m_HaveMouseFocus == false || !g_mRootDiv.m_HaveMouseFocus))
			{
				g_mRootDiv.unloadMe();
				g_mRootDiv = null;
			}
		}
	}
}

function CDropdownMenuDocClick()
{
	try
	{
		if (g_mRootDiv)
		{
			if ((g_mRootDiv.m_HaveMouseFocus == false || !g_mRootDiv.m_HaveMouseFocus))
			{
				if (g_mRootDiv.m_button.onclickold)
					g_mRootDiv.m_button.onclick = g_mRootDiv.m_button.onclickold;

				g_mRootDiv.unloadMe();
				g_mRootDiv = null;
			}
		}
	}
	catch (e) {}
}

function CDropdownMenu(pnt)
{
	if (pnt)
		this.m_parent = pnt;
	
	// Create an absolutely positioned invisible (for now) div
	this.zIndex = (pnt) ? pnt.zIndex+1 : 800;
	//this.m_div = ALib.m_document.createElement("div", alib.dom.m_document.body);
	this.m_div = ALib.m_document.createElement("div");
	this.m_div.style.position = "absolute";
	this.m_div.style.top = "0px";
	this.m_div.style.left = "0px";
	this.m_div.style.zIndex = this.zIndex ;
	this.m_div.menuref = this;
	this.m_div.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
	}
	this.m_div.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
	}
	this.m_div.style.display = "none";
	
	// Put table inside of div
	this.m_table = ALib.m_document.createElement("table");
	this.m_table.setAttribute("border","0");
	this.m_table.border = "0";
	this.m_table.setAttribute("cellpadding","0");
	this.m_table.cellPadding = "0";	
	this.m_table.setAttribute("cellspacing","0");
	this.m_table.cellSpacing = "0";
	this.m_table.className = "CDropdownMenuContainer";
	this.m_tbody = ALib.m_document.createElement("tbody");
	
	// Add table body
	this.m_table.appendChild(this.m_tbody);
	this.m_div.appendChild(this.m_table);
	this.m_fulldiv = ALib.m_document.createElement("span");
	this.m_id = g_CDMenCount;

	// Set type (rght, down, left, up)
	if (pnt)
		this.m_droptype = 'right';
	else
		this.m_droptype = 'down';

	// This is used for ANT
	if (typeof Ant != 'undefined')
		this.m_themename = Ant.m_theme;
	else
		this.m_themename = 'default';
	
	g_CDMenues[g_CDMenCount] = this;
	g_CDMenCount++;	
    
    // Handle Duplicate Menus
    this.handleDuplicates = false;
    this.dmTitles = new Array();
}

CDropdownMenu.prototype.destroyMenu = function (title)
{
	if(this.m_parent)
	{
		g_mRootDiv.destroyMenu();
	}
	else
	{
		//g_CDMenues.splice(index, howMany
		this.unloadMe();
		delete g_CDMenues[this.m_id];
	}
} 

CDropdownMenu.prototype.createLinkMenu = function (title)
{
	var div = ALib.m_document.createElement("a");
	div.href = "javascript:void(0);";
	div.menuref = this;
	div.onclick = function()
	{
		this.menuref.toggleMenu();
	}
	div.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
	}
	div.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
	}
	div.style.cursor = "pointer";
	div.innerHTML = title;
	
	this.m_button = div;
	
	this.m_fulldiv.appendChild(div);
	alib.dom.m_document.body.appendChild(this.m_div);
	//this.m_fulldiv.appendChild(this.m_div);
	
	return this.m_fulldiv;
}

// Create a right-click context menu
CDropdownMenu.prototype.createContextMenu = function(e, cls_out, cls_over, cls_on)
{
	// You can pass the id of an element
	if (typeof e == "string")
		e = ALib.getElementById(e);

	// Create a test button
	if (cls_out)
		this.m_clsOut = cls_out;
	
	if (cls_over)
		this.m_clsOver = cls_over;
	
	if (cls_on)
		this.m_clsOn = cls_on;
	
	e.menuref = this;

	e.m_cls = this;
	e.oncontextmenu= function() 
	{
		// Temporarily disable the onclick event (store in onclickold)
		this.onclickold = this.onclick;
		this.onclick = null;
	 	var cls = this.m_cls; cls.toggleMenu(); 
		// Resture onclick event
		this.onclick = function() { this.onclick = this.onclickold; };
		//this.onclick = onclickold;
		return false; 
	};

	var funover = function()
	{
		this.m_cls.handleMouseOver();
		
		if (this.menuref.m_clsOver && this.menuref.m_div.style.display == "none")
			alib.dom.styleSetClass(this, this.menuref.m_clsOver);
	}

	var funout = function()
	{
		this.m_cls.handleMouseOut();
		
		if (this.menuref.m_clsOut && this.menuref.m_div.style.display == "none")
			alib.dom.styleSetClass(this, this.menuref.m_clsOut);
	}

	if (alib.userAgent.ie)
	{
		
		e.attachEvent('mouseover', funover);
		e.attachEvent('mouseout', funout);
	}
	else
	{
		e.addEventListener('mouseover', funover, false);
		e.addEventListener('mouseout', funout, false);
	}

	this.m_button = e;
	//this.m_fulldiv.appendChild(this.m_div);
	alib.dom.m_document.body.appendChild(this.m_div);
	e.appendChild(this.m_fulldiv);
	
	//return this.m_fulldiv;
}

CDropdownMenu.prototype.createImageMenu = function (img_out, img_over, img_on)
{
	if (img_out)
		this.m_imageOut = img_out;
	else if (Ant)
		this.m_imageOut = "/images/themes/" + Ant.m_theme + "/buttons/dropdownOut.gif";
	
	if (img_over)
		this.m_imageOver = img_over;
	else if (Ant)
		this.m_imageOver = "/images/themes/" + Ant.m_theme + "/buttons/dropdownOver.gif";
	
	if (img_on)
		this.m_imageOn = img_on;
	else if (Ant)
		this.m_imageOn = "/images/themes/" + Ant.m_theme + "/buttons/dropdownOn.gif";

	var div = ALib.m_document.createElement("span");
	div.menuref = this;
	
	div.style.cursor = "pointer";
	div.m_image = ALib.m_document.createElement("img");
	div.m_image.border = "0";
	div.m_image.src = this.m_imageOut;
	div.appendChild(div.m_image);
	//div.innerHTML = "<img src='" + this.m_imageOut + "' border='0' />";

	div.m_imageOut = this.m_imageOut;
	div.m_imageOver = this.m_imageOver;

	div.onclick = function()
	{
		this.menuref.toggleMenu();
	}
	div.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
		if (this.menuref.m_div.style.display == "none")
			div.m_image.src = this.m_imageOver;
	}
	div.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
		if (this.menuref.m_div.style.display == "none")
			div.m_image.src = this.m_imageOut;
	}
	if (this.onmousedown)
		div.onmousedown = function() { this.menuref.onmousedown(); };

	this.m_button = div;
	this.m_fulldiv.appendChild(div);
	//this.m_fulldiv.appendChild(this.m_div);
	alib.dom.m_document.body.appendChild(this.m_div);
	
	return this.m_fulldiv;
}

CDropdownMenu.prototype.createButtonMenu = function(title, onclk_funct, args, className)
{
	if (!args)
		var args = null;
	if (!onclk_funct)
		var onclk_funct = null;

	var clsName = (className) ? className : "b1";

	/*
	var full_title = "<div style='float:left;' class='CDropdownMenuButtonPrefix'></div>";
	full_title += (title) ? title : '';
	full_title += "<div style='clear:both'></div>";
	*/
	var full_title = alib.dom.createElement("div");

	if (typeof title == "string")
		full_title.innerHTML = title;
	else
		full_title.appendChild(title);

	var icon = alib.dom.createElement("span");
	alib.dom.styleSetClass(icon, "CDropdownMenuButtonPrefix");
	icon.innerHTML = "&nbsp;&nbsp;";
	full_title.appendChild(icon);

	// Create a test button
	var clk = function(mid, onclk_funct, args)
	{
		g_CDMenues[mid].toggleMenu();

		if (typeof onclk_funct == "string")
			eval(onclk_funct);
		else
		{
			if (args)
			{
				switch(args.length)
				{
				case 1:
					onclk_funct(args[0]);
					break;
				case 2:
					onclk_funct(args[0], args[1]);
					break;
				case 3:
					onclk_funct(args[0], args[1], args[2]);
					break;
				case 4:
					onclk_funct(args[0], args[1], args[2], args[3]);
					break;
				case 5:
					onclk_funct(args[0], args[1], args[2], args[3], args[4]);
					break;
				case 6:
					onclk_funct(args[0], args[1], args[2], args[3], args[4], args[5]);
					break;
				default:
					alert("Too many arguments");
					break;
				}
			}
			else if (onclk_funct)
				onclk_funct();
		}
	}

	var btn = new CButton(full_title, clk, [this.m_id, onclk_funct, args], clsName);
	var button_con = btn.getButton();
	var button_tbl = btn.getTable();

	button_con.menuref = this;
	button_con.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
	}
	button_con.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
	}
	if (this.onmousedown)
		button_con.onmousedown = function() { this.menuref.onmousedown(); };
	if (typeof this.tabIndex != "undefined")
	{
		button_con.tabIndex = this.tabIndex;
	}
	
	this.m_button = button_con;
	this.m_fulldiv.appendChild(button_con);
	//this.m_fulldiv.appendChild(this.m_div);
	alib.dom.m_document.body.appendChild(this.m_div);
	
	return this.m_fulldiv;
}

CDropdownMenu.prototype.createCustomnMenu = function(element, cls_out, cls_over, cls_on)
{
	// Create a test button
	if (cls_out)
		this.m_clsOut = cls_out;
	
	if (cls_over)
		this.m_clsOver = cls_over;
	
	if (cls_on)
		this.m_clsOn = cls_on;
	
	element.menuref = this;

	element.onclick = function()
	{
		this.menuref.toggleMenu();
	}

	element.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
		if (this.menuref.m_clsOver && this.menuref.m_div.style.display == "non")
			alib.dom.styleSetClass(this, this.menuref.m_clsOver);
	}
	element.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
		if (this.menuref.m_clsOut && this.menuref.m_div.style.display == "none")
			alib.dom.styleSetClass(this, this.menuref.m_clsOut);
	}
	
	this.m_button = element;
	this.m_fulldiv.appendChild(element);
	//this.m_fulldiv.appendChild(this.m_div);
	alib.dom.m_document.body.appendChild(this.m_div);
	
	return this.m_fulldiv;
}

CDropdownMenu.prototype.addEntry = function (title, funct, icon, icon_text, fargs)
{
    // if duplicate is found and check duplicate is set to true, do not continue
    if(this.checkDuplicates(title))
        return;
    
	var row = ALib.m_document.createElement("tr");
	row.menuref = this;
	
	// Create icon cell
	var cell_icon = ALib.m_document.createElement("td");
	cell_icon.className = "CDropdownMenuIcon";
	cell_icon.style.whiteSpace = "nowrap";
	if (icon)
	{
		cell_icon.innerHTML = "<img border='0' src='"+icon+"' style='padding: 0px; margin: 0px;' />";
	}
	else
	{
		cell_icon.innerHTML = "<div>"+((icon_text) ? icon_text : '')+"</div>";
	}
	row.appendChild(cell_icon);	
    
	// Create link cell
	var cell_link = ALib.m_document.createElement("td");
	cell_link.className = "CDropdownMenuLink";
	cell_link.nowrap = true;
	cell_link.style.whiteSpace = "nowrap";
	cell_link.innerHTML = title;
	row.appendChild(cell_link);
    
	// Create right arrow cell
	var cell_right = ALib.m_document.createElement("td");
	cell_right.className = "CDropdownMenuRight";
	cell_right.nowrap = true;
	cell_right.style.whiteSpace = "nowrap";
	cell_right.innerHTML = "&nbsp;";
	row.appendChild(cell_right);
    
	if (funct)
	{
		row.style.cursor = "pointer";
		row.functname = funct;
		row.onclick = function ()
		{
			if (typeof this.functname != "string")
			{
				if (typeof fargs != "undefined" && fargs)
				{
					switch (fargs.length)
					{
					case 1:
						this.functname(fargs[0]);
						break;
					case 2:
						this.functname(fargs[0], fargs[1]);
						break;
					case 3:
						this.functname(fargs[0], fargs[1], fargs[2]);
						break;
					case 4:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3]);
						break;
					case 5:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4]);
						break;
					case 6:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5]);
						break;
					case 7:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5], fargs[6]);
						break;
					}
				}
				else
					this.functname();
			}
			else
				eval(this.functname);
			g_mRootDiv.unloadMe();
			g_mRootDiv = null;
		}
	}
	row.onmouseover = function ()
	{
		if (this.menuref.m_activechild)
		{
			this.menuref.m_activechild.unloadMe();
			this.menuref.m_activechild = null;
		}
			
		CDMenuSetRowHighligh(true, this);
	}
	row.onmouseout = function ()
	{
		CDMenuSetRowHighligh(false, this);
	}
	this.m_tbody.appendChild(row);
}

CDropdownMenu.prototype.addSubmenu = function (title, icon, funct, fargs)
{
    var dlmenu = new CDropdownMenu(this);
    
    // if duplicate is found and check duplicate is set to true, do not continue
    if(this.checkDuplicates(title))
        return dlmenu;
	
	var row = ALib.m_document.createElement("tr");
	row.style.cursor = "pointer";
	
	// Create icon cell
	var cell_icon = ALib.m_document.createElement("td");
	cell_icon.className = "CDropdownMenuIcon";
	cell_icon.style.width = '15px';
	cell_icon.style.whiteSpace = "nowrap";
	if (icon)
		cell_icon.innerHTML = "<div style='width:15px;'><img border='0' src='"+icon+"' /></div>";
	else
		cell_icon.innerHTML = "<div style='width:15px;'></div>";
		
	row.appendChild(cell_icon);	
	// Create link cell
	var cell_link = ALib.m_document.createElement("td");
	cell_link.className = "CDropdownMenuLink";
	cell_link.innerHTML = title;
	cell_link.nowrap = true;
	cell_link.style.whiteSpace = "nowrap";
	row.appendChild(cell_link);
	
	// Create right arrow cell
	var cell_right = ALib.m_document.createElement("td");
	cell_right.className = "CDropdownMenuRight";
	cell_right.nowrap = true;
	cell_right.style.whiteSpace = "nowrap";
	// "+this.m_themename+"
	cell_right.innerHTML = "<div class='CDropdownMenuRightIcon' align='center'></div>";
	row.appendChild(cell_right);
	
	if (funct)
	{
		row.style.cursor = "pointer";
		row.functname = funct;
		row.onclick = function ()
		{
			if (typeof this.functname != "string")
			{
				if (typeof fargs != "undefined" && fargs)
				{
					switch (fargs.length)
					{
					case 1:
						this.functname(fargs[0]);
						break;
					case 2:
						this.functname(fargs[0], fargs[1]);
						break;
					case 3:
						this.functname(fargs[0], fargs[1], fargs[2]);
						break;
					case 4:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3]);
						break;
					case 5:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4]);
						break;
					case 6:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5]);
						break;
					case 7:
						this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5], fargs[6]);
						break;
					}
				}
				else
					this.functname();
			}
			else
				eval(this.functname);
			g_mRootDiv.unloadMe();
			g_mRootDiv = null;
		}
	}
	
	row.menuref = dlmenu;
	dlmenu.m_button = row;
	row.onmouseover = function ()
	{
		this.menuref.handleMouseOver();
		if (this.menuref.m_div.style.display == "none")
			this.menuref.toggleMenu();
		
		window.clearTimeout(g_mClearObj.timer);
		g_mClearObj.m_id = null;
		
		CDMenuSetRowHighligh(true, this);
	}
	row.onmouseout = function ()
	{
		this.menuref.handleMouseOut();
		g_mClearObj.m_id = this.menuref.m_id;
		g_mClearObj.timer = setTimeout('CDMenuClearMenu()', 2000);
		CDMenuSetRowHighligh(false, this);
	}
	
	this.m_tbody.appendChild(row);
	//dlmenu.m_fulldiv.appendChild(dlmenu.m_div);
	alib.dom.m_document.body.appendChild(dlmenu.m_div);
	this.m_fulldiv.appendChild(dlmenu.m_fulldiv);
	
	return dlmenu;
}

CDropdownMenu.prototype.addCon = function()
{
	var row = alib.dom.createElement("tr", this.m_tbody);
	
	// Create icon cell
	var cell = alib.dom.createElement("td", row);
	cell.colSpan = 3;
	cell.menuref = this;

	return cell;
}

CDropdownMenu.prototype.unloadMe = function ()
{
	if (this.m_activechild)
	{
		this.m_activechild.unloadMe();
	}
	this.m_activechild = null;
	
	if (this.m_parent)
		CDMenuSetRowHighligh(false, this.m_button);
	else
	{
		if (this.m_imageOut)
		{
			if (this.m_button && this.m_button.m_image)
				this.m_button.m_image.src = this.m_imageOut;
		}
		
		if (this.m_clsOut)
		{
			if (this.m_button)
				alib.dom.styleSetClass(this.m_button, this.m_clsOut);
		}
	}
		
	this.m_div.onFadeFinished = function() { this.style.display = "none"; };
	ALib.Effect.fadeout(this.m_div, 200);
}

CDropdownMenu.prototype.handleMouseOver = function ()
{
	this.setFocus(true);
	
	// Cancel clear if set to current object
	if (g_mClearObj.m_id == this.m_id)
	{
		window.clearTimeout(g_mClearObj.timer);
		g_mClearObj.m_id = null;
	}
	
	// Open if another dropdown is already open
	if (g_mRootDiv)
	{
		if ((g_mRootDiv.m_HaveMouseFocus == false))
		{
			g_mRootDiv.unloadMe();
			g_mRootDiv = null;
		}
	}
}

CDropdownMenu.prototype.handleMouseOut = function ()
{
	this.m_HaveMouseFocus=false
	if (this.m_parent)
		this.m_parent.m_HaveMouseFocus=false
}

CDropdownMenu.prototype.setFocus = function(focused)
{
	if (focused == true)
		this.m_HaveMouseFocus=true;
	if (this.m_parent)
	{
		CDMenuSetRowHighligh(true, this.m_button);
		this.m_parent.setFocus(true);
	}
}

CDropdownMenu.prototype.toggleMenu = function()
{
	var pos = alib.dom.getElementPosition(this.m_button);
	var tmpy = pos.y;
	var tmpx = pos.x;

	tmpheight=this.m_button.offsetHeight;

	// Get document width
	var doc_height = alib.dom.getDocumentHeight();
	if (ALib.m_document)
	{
		var doc_width = ALib.m_document.body.clientWidth;
	}
	else
	{
		var doc_width = document.body.clientWidth;
	}

	if (this.m_div.style.display == "block")
	{
		this.m_div.onfaded = function()
		{
			this.style.display = 'none';
		}
		//ALib.Effect.fade(this.m_div, 200);
		
		if (this.m_parent)
		{
			if (this.m_parent.m_activechild != this)
			{
				this.m_parent.m_activechild.unloadMe()
				this.m_parent.m_activechild = null;
			}
		}
		else
		{
			this.unloadMe();
			g_mRootDiv = null;

			// Unloaded root, detach event
			if (alib.userAgent.ie)
			{
				ALib.m_document.detachEvent('click', CDropdownMenuDocClick);
			}
			else
			{
				ALib.m_document.removeEventListener('click', CDropdownMenuDocClick, false);
			}
		}	
	}
	else
	{
		this.m_div.style.display = "block";
		ALib.Effect.fadein(this.m_div, -1);

		// Find out of we are out of space
		if ('right' == this.m_droptype)
		{
			//alert(tmpx + this.m_div.offsetWidth + " " + doc_width);
			if ((tmpx + this.m_button.offsetWidth + this.m_div.offsetWidth) >= doc_width)
				this.m_droptype = 'left';
		}

		switch (this.m_droptype)
		{
		case 'up':
			this.m_div.style.top = tmpy - this.m_div.offsetHeight + 'px';
			if ((tmpy - this.m_div.offsetHeight) < 10)
			{
				this.m_div.style.top = tmpy + tmpheight + 'px';
			}
			this.m_div.style.left = tmpx + 'px';
			break;
		case 'down':
			if ((tmpy + this.m_div.offsetHeight) >= doc_height)
				this.m_div.style.top = doc_height - this.m_div.offsetHeight - 1 + 'px';
			else
				this.m_div.style.top = tmpy + tmpheight + 'px';

			if ((tmpx + this.m_div.offsetWidth) >= doc_width)
				this.m_div.style.left = doc_width - this.m_div.offsetWidth - 1 + 'px';
			else
				this.m_div.style.left = tmpx + 'px';
			break;
		case 'right':
			if ((tmpy + this.m_div.offsetHeight) >= doc_height)
				this.m_div.style.top = doc_height - this.m_div.offsetHeight - 1 + 'px';
			else
				this.m_div.style.top = tmpy + 'px';

			this.m_div.style.left = tmpx + this.m_button.offsetWidth - 1 + 'px';
			break;
		case 'left':
			if ((tmpy + this.m_div.offsetHeight) >= doc_height)
				this.m_div.style.top = doc_height - this.m_div.offsetHeight - 1 + 'px';
			else
				this.m_div.style.top = tmpy + 'px';

			this.m_div.style.left = tmpx - this.m_div.offsetWidth + 1 + 'px';
			break;
		}
		
		// clear existing menu
		if (g_mRootDiv && !this.m_parent)
		{
			g_mRootDiv.unloadMe();
		}
			
		if (this.m_parent)
		{
			if (this.m_parent.m_activechild && this.m_parent.m_activechild != this)
				this.m_parent.m_activechild.unloadMe();
			this.m_parent.m_activechild = this;
		}
		else
		{
			g_mRootDiv = this;

			if (this.m_imageOn)
				this.m_button.m_image.src = this.m_imageOn;

			if (this.m_clsOn)
			{
				alib.dom.styleSetClass(this.m_button, this.m_clsOn);
			}
		}

		if (alib.userAgent.ie)
		{
			ALib.m_document.attachEvent('onclick', CDropdownMenuDocClick);
		}
		else
		{
			ALib.m_document.addEventListener('click', CDropdownMenuDocClick, false);
		}
	}
}

CDropdownMenu.prototype.checkDuplicates = function(title)
{
    // Check for duplicates if enabled
    if(this.handleDuplicates)
    {
        for(dmTitle in this.dmTitles)
        {
            if(this.dmTitles[dmTitle] == title) // found existing
                return true;
        }
    }
    
    // Save Titles in the array
    var idx = this.dmTitles.length;
    this.dmTitles[idx] = title;
    
    return false;
}

function CDMenuClearMenu()
{
	g_CDMenues[g_mClearObj.m_id].unloadMe();
}

function CDMenuSetRowHighligh(setRow, row)
{
	if (setRow == true)
	{
		try
		{
			row.childNodes.item(0).className = "CDropdownMenuIconOver";
			row.childNodes.item(1).className = "CDropdownMenuLinkOver";
			row.childNodes.item(2).className = "CDropdownMenuRightOver";
			row.childNodes.item(2).childNodes.item(0).className = "CDropdownMenuRightIconOver";
		} catch (e) {}
	}
	else
	{
		try
		{
			row.childNodes.item(0).className = "CDropdownMenuIcon";
			row.childNodes.item(1).className = "CDropdownMenuLink";
			row.childNodes.item(2).className = "CDropdownMenuRight";
			row.childNodes.item(2).childNodes.item(0).className = "CDropdownMenuRightIcon";
		} catch (e) {}
	}
}


/****************************************************************************
*	
*	Class:		CMenubar
*
*	Purpose:	Create menu bar like the file menu in windows
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CMenubar()
{
	this.m_document = ALib.m_document;
	var doc = this.m_document;
	this.m_outerdv = doc.createElement("div");
	var tbl = doc.createElement("table");
	alib.dom.styleSetClass(tbl, "CMenubar");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellpadding","0");
	tbl.cellPadding = "0";	
	tbl.setAttribute("cellspacing","0");
	tbl.cellSpacing = "0";
	var tbl_bdy = doc.createElement("tbody");
	tbl.appendChild(tbl_bdy);
	var row = doc.createElement("tr");
	tbl_bdy.appendChild(row);
	var td = doc.createElement("td");
	row.appendChild(td);

	this.m_con = td;
	this.m_outerdv.appendChild(tbl);
}

/******************************************************************************
*	Function:	AddItem
*	Purpose:	Add any item to the toolbar
*******************************************************************************/
CMenubar.prototype.AddItem = function (title, align)
{
	var dv = this.m_document.createElement("div");
	if (align == "right")
	{
		alib.dom.styleSet(dv, "float", "right");
		alib.dom.styleSet(dv, "padding-right", "2px");
	}
	else
	{
		alib.dom.styleSet(dv, "float", "left");
		alib.dom.styleSet(dv, "padding-left", "2px");
	}
	
	dv.innerHTML = title;

	// Create dropdown menu	
	var dm = new CDropdownMenu();
	this.m_con.appendChild(dm.createCustomnMenu(dv, "CMenuBarLink", "CMenuBarLinkOver", "CMenuBarLinkOn"));

	return dm;
}

/******************************************************************************
*	Function:	print
*	Purpose:	Append toolbar to container passed in dv (write if no container)
*******************************************************************************/
CMenubar.prototype.print = function (dv)
{
	if (dv)
		dv.appendChild(this.m_outerdv);
	else
		document.write(this.m_outerdv.outerHTML);
}

/******************************************************************************
*	Function:	getContainer
*	Purpose:	Get content container for toolbar
*******************************************************************************/
CMenubar.prototype.getContainer = function ()
{
	return this.m_con;
}



/****************************************************************************
*	
*	Class:		CNavBar
*
*	Purpose:	Create standard navigation bar
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CNavBar(width, height)
{
	this.m_con = ALib.m_document.createElement("div");
	if (!width)
		var width = "100%";
	alib.dom.styleSet(this.m_con, "width", width);
	if (height)
	{
		alib.dom.styleSet(this.m_con, "height", height);
	}

	this.m_items = new Array();
	this.m_itemcounter = 0;
	this.m_sections = new Array();
	this.m_sectioncounter = 0;
	this.m_lasesection = null;	
	this.m_appclass = null;
}

CNavBar.prototype.getLastSectionChild = function(parent_node)
{
	if (parent_node.m_children.length)
		return this.getLastSectionChild(parent_node.m_children[parent_node.m_children.length-1]);
	else
		return parent_node;
}

CNavBar.prototype.addSectionItem = function(label, icon, action, args, idname, selectable, sectionid, depth, parent_node)
{
	// Get unique id name
	var idname = (typeof idname == "undefined") ? null : idname;
	var name = (idname && idname != -1) ? idname : this.getNextItemId();
	var noOn = (selectable) ? false : true;
	var sect_id = (sectionid) ? sectionid : this.m_lasesection;

	// Create item/node
	this.m_items[name] = new CNavBarItem(this);
	var item = this.m_items[name];
	item.m_secname = sect_id;
	item.m_idname = name;
	item.m_noOn = noOn;

	if (typeof(depth) == "undefined")
		item.m_depth = 0;
	else
		item.m_depth = depth;

	var tr = ALib.m_document.createElement("tr");
	item.m_tr = tr;
	if (typeof(parent_node) != "undefined")
	{
		var insertafterItem = this.getLastSectionChild(parent_node); //(parent_node.m_children.length) ? parent_node.m_children[parent_node.m_children.length-1] : parent_node;
		insertAfter(this.m_sections[sect_id].m_tblbdy, tr, insertafterItem.m_tr);
	}
	else
		this.m_sections[sect_id].m_tblbdy.appendChild(tr);
	var td = ALib.m_document.createElement("td");
	alib.dom.styleSet(td, "width", "100%");
	tr.appendChild(td);
	item.m_con = td;
	
	// Make header table
	var tbl = ALib.m_document.createElement("table");
	alib.dom.styleSet(tbl, "border", "0px");
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	td.appendChild(tbl);
	var tbody = ALib.m_document.createElement("tbody");
	tbl.appendChild(tbody);

	// Add Item
	var tr = ALib.m_document.createElement("tr");
	tbody.appendChild(tr);
	var td = ALib.m_document.createElement("td");
	alib.dom.StyleAddClass(td, "CNavBarItem");
	//alib.dom.styleSet(td, "cursor", "pointer");
	//alib.dom.styleSet(td, "white-space", "nowrap");
	item.m_itemcon = td;

	// Add option div
	item.m_optdiv = alib.dom.createElement("div", td);
	//alib.dom.styleSet(item.m_optdiv, "float", "right");
	alib.dom.styleSetClass(item.m_optdiv, "CNavBarItemOpt");
	
	// if depth add spacers
	for (var i = 0; i < item.m_depth; i++)
	{
		var dv = ALib.m_document.createElement("div");
		//alib.dom.styleSet(dv, "float", "left");
		alib.dom.styleSet(dv, "display", "inline-block");
		alib.dom.styleSetClass(dv, "CTreeViewSpaceLine");
		td.appendChild(dv);
	}

	// icon
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv, "CNavBarItemIcon");
	item.m_icon = dv;
	//alib.dom.styleSet(dv, "float", "left");
	//alib.dom.styleSet(dv, "display", "inline-table");
	if (icon)
	{
		if (typeof(icon) == "string")
			dv.innerHTML = "<img border='0' src='"+icon+"' />";
		else
			dv.appendChild(icon);
	}
	td.appendChild(dv);
	// label
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv, "CNavBarItemLink");
	//alib.dom.styleSet(dv, "float", "left");
	//alib.dom.styleSet(dv, "display", "inline-table");
	item.m_link = dv;
	dv.innerHTML = label;
	td.appendChild(dv);
	//this.m_items[name] = td;
	item.m_linktd = dv;

	td.m_name = name;
	td.m_nav = this;
	td.onmouseover = function () 
	{ 
		if (this.className != "CNavBarItemOn")
			this.m_nav.itemChangeState(this.m_name, "over"); 
	};
	td.onmouseout = function () 
	{ 
		if (this.className != "CNavBarItemOn")
			this.m_nav.itemChangeState(this.m_name, "out"); 
	};

	// Set link action
	item.m_linktd.m_action = action;
	item.m_linktd.m_nav = this;
	item.m_linktd.m_name = name;
	item.m_linktd.m_noOn = noOn;
	item.m_linktd.m_idname = (typeof idname != "undefined") ? idname : name;
	if (args)
		item.m_linktd.m_args = args;
	item.m_linktd.onclick = function () 
	{ 
		if (!this.m_noOn)
			this.m_nav.itemChangeState(this.m_name, "on"); 
		
		if (this.m_action)
		{
			if (typeof this.m_action == "string")
				eval(this.m_action);
			else
			{
				try
				{
					if (this.m_args && this.m_args.length)
					{
						switch (this.m_args.length)
						{
						case 3:
							this.m_action(this.m_args[0], this.m_args[1], this.m_args[2]);
							break;
						case 2:
							this.m_action(this.m_args[0], this.m_args[1]);
							break;
						case 1:
							this.m_action(this.m_args[0]);
							break;
						}
					}
					else
						this.m_action();
				}
				catch (e) {}
			}

			//var me = this;
			//ALib.History.registerBack(function() {me.onclick(); });
		}
	};

	var dv = alib.dom.createElement("div");
	dv.style.clear = "left";	
	td.appendChild(dv);

	tr.appendChild(td);

	return item;
}

CNavBar.prototype.itemChangeState = function(name, state)
{
	if (!this.m_items[name])
		return;

	if (!this.m_items[name].m_itemcon)
		return;

	switch (state)
	{
	case 'out':
		this.m_items[name].m_itemcon.className = "CNavBarItem";
		break;
	case 'over':
		this.m_items[name].m_itemcon.className = "CNavBarItemOver";
		break;
	case 'on':
		this.m_items[name].m_itemcon.className = "CNavBarItemOn";
		if (this.m_laston && this.m_laston != name)
			this.itemChangeState(this.m_laston, "out");
		this.m_laston = name;
		break;
	}
}

CNavBar.prototype.itemClearOnStates = function()
{
	for (item in this.m_items)
	{
		this.itemChangeState(item, 'out');
	}
}

CNavBar.prototype.addSectionDiv = function(sectionid)
{
	var sect_id = (sectionid) ? sectionid : this.m_lasesection;

	var tr = ALib.m_document.createElement("tr");
	this.m_sections[sect_id].m_tblbdy.appendChild(tr);
	var td = ALib.m_document.createElement("td");
	alib.dom.styleSet(td, "width", "100%");
	tr.appendChild(td);

	return td;
}

CNavBar.prototype.getNavBar = function()
{
	// Add closing HR
	var div = ALib.m_document.createElement("div");
	this.m_con.appendChild(div);
	var tbl = ALib.m_document.createElement("table");
	div.appendChild(tbl);
	alib.dom.styleSet(tbl, "border", "0px");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.cellPadding = '0';
	tbl.cellSpacing = '0';
	var tblbdy = ALib.m_document.createElement("tbody");
	tbl.appendChild(tblbdy);
	var tr = ALib.m_document.createElement("tr");
	tblbdy.appendChild(tr);
	var td = ALib.m_document.createElement("td");
	alib.dom.StyleAddClass(td, "CNavBarBorderBottom");
	tr.appendChild(td);
	
	return this.m_con;
}

CNavBar.prototype.print = function(con)
{
	con.appendChild(this.getNavBar());
}

CNavBar.prototype.getNextItemId = function()
{
	this.m_itemcounter++;

	var name = "item_" + this.m_itemcounter;

	return name;
}

CNavBar.prototype.getNextSectionId = function()
{
	this.m_sectioncounter++;

	var name = "section_" + this.m_sectioncounter;

	return name;
}

CNavBar.prototype.getSectionHeight = function(idname)
{
	var section = this.m_sections[idname];
	return section.m_div.offsetHeight;
}

CNavBar.prototype.setSectionHeight = function(idname, height, overflow, max)
{
	var section = this.m_sections[idname];

	/*
	if (typeof overflow == "undefined")
		var overflow = "auto";
		*/

	var set_height = height - section.m_headerhr.offsetHeight;
	if (section.m_headerlbl)
		set_height -= section.m_headerlbl.offsetHeight;

	if (typeof max != "undefined" && max)
	{
		alib.dom.styleSet(section.m_condiv, "max-height", set_height+"px");
		alib.dom.styleSet(section.m_condiv, "min-height", "15px");
	}
	else
		alib.dom.styleSet(section.m_condiv, "height", set_height+"px");
	alib.dom.styleSet(section.m_condiv, "overflow", overflow);
	//alib.ui.slimScroll(section.m_condiv, {});
}

CNavBar.prototype.addSection = function(label, idname, manual_height)
{
	// Get unique id name
	var name = (idname) ? idname: this.getNextSectionId();
	this.m_lasesection = name;
	// Get height
	var height = (manual_height) ? manual_height : null;

	this.m_sections[name] = new CNavBarSection(this);

	var section = this.m_sections[name];
	section.m_idname = name;
	
	// Create containing div
	section.m_div = alib.dom.createElement("div", this.m_con);

	// Create content table
	/*
	section.m_outerdiv = alib.dom.createElement("table", section.m_div);
	section.m_outertbl = alib.dom.createElement("table", section.m_div);
	alib.dom.styleSet(section.m_outertbl, "border", "0px");
	alib.dom.styleSet(section.m_outertbl, "width", "100%");
	section.m_outertbl.cellPadding = '0';
	section.m_outertbl.cellSpacing = '0';
	section.m_outertblbdy = alib.dom.createElement("tbody", section.m_outertbl);
	*/
	//section.m_tblbdy = alib.dom.createElement("tbody");

	// Make header table
	//---------------------------------------------------------------
	
	// Add HR
	/*
	var tr = alib.dom.createElement("tr", section.m_outertblbdy);
	section.m_headerhr = tr;
	var td = alib.dom.createElement("td", tr);
	td.colSpan = "3";
	alib.dom.StyleAddClass(td, "CTMHeaderTopHr");
	*/
	// Add Label
	var dv = alib.dom.createElement("div", section.m_div);
	section.m_headerhr = dv;
	if (label)
	{
		/*
		var tr = alib.dom.createElement("tr", section.m_outertblbdy);
		var td = alib.dom.createElement("td", tr);
		alib.dom.StyleAddClass(td, "CTMLeftBorder");
		var td = alib.dom.createElement("td", tr);
		*/
		alib.dom.StyleAddClass(dv, "CNavBarSectionHeader");
		dv.innerHTML = label;
		/*
		var td = alib.dom.createElement("td", tr);
		alib.dom.StyleAddClass(td, "CTMRightBorder");
		*/
		section.m_headerlbl = dv;
	}

	// Make content table
	var tr = alib.dom.createElement("tr", section.m_outertblbdy);
	/*
	var td = alib.dom.createElement("td", tr);
	alib.dom.StyleAddClass(td, "CTMLeftBorder");
	*/

	//var td = alib.dom.createElement("td", tr);
	//alib.dom.StyleAddClass(td, "CNavBarSectionBody");
	section.m_condiv = alib.dom.createElement("div", section.m_div);
	alib.dom.StyleAddClass(section.m_condiv, "CNavBarSectionBody");
	if (height)
	{
		alib.dom.styleSet(section.m_condiv, "height", height);
		//alib.ui.slimScroll(section.m_condiv, {});
		alib.dom.styleSet(section.m_condiv, "overflow", "auto");
	}

	section.m_tbl = alib.dom.createElement("table", section.m_condiv);
	alib.dom.styleSet(section.m_tbl, "border", "0px");
	alib.dom.styleSet(section.m_tbl, "width", "100%");
	section.m_tbl.cellPadding = 0;
	section.m_tbl.cellSpacing = 0;
	section.m_tblbdy = alib.dom.createElement("tbody", section.m_tbl);

	/*
	var td = alib.dom.createElement("td", tr);
	alib.dom.StyleAddClass(td, "CTMRightBorder");
	*/

	return this.m_sections[name];
}

// This function should be defined by client application 
// and called whenever content is changed
CNavBar.prototype.onExit = function()
{
}

CNavBar.prototype.deleteItem = function(idname)
{
	var row = this.m_items[idname].m_linktd.parentNode;
	var tbl = row.parentNode;
	tbl.removeChild(row);
}

CNavBar.prototype.setItemLabel = function(idname, label)
{
	// Get label div
	var dv = this.m_items[idname].m_linktd.childNodes.item(1);	
	if (dv)
		dv.innerHTML = label;
}

/***********************************************************************************
 *
 *	Function: 	CNavBarSection
 *
 *	Purpose:	Create CNavBarSection
 *
 *	Arguements:	nbobj	- (object): Navbar object
 *
 ***********************************************************************************/
function CNavBarSection(nbobj)
{
	this.m_div = null;
	this.m_tbl = null;
	this.m_tblbdy = null;
	this.m_idname = null;
	this.m_nb = nbobj;
}

CNavBarSection.prototype.addItem = function(label, icon, action, args, idname, selectable)
{
	if (typeof selectable == "undefined")
	{
		var selectable = (idname=="-1") ? false : true;
	}
		
	return this.m_nb.addSectionItem(label, icon, action, args, idname, selectable, this.m_idname);
}

CNavBarSection.prototype.addCon = function()
{
	return this.m_nb.addSectionDiv(this.m_idname);
}

// Get the actual height of the whole section
CNavBarSection.prototype.getHeight = function()
{
	return this.m_nb.getSectionHeight(this.m_idname);
}

// Set the height of the section
CNavBarSection.prototype.setHeight = function(height, overflow)
{
	if (typeof overflow == "undefined")
		var overflow = "auto";

	this.m_nb.setSectionHeight(this.m_idname, height, overflow)
}

// Set the height of the section
CNavBarSection.prototype.setMaxHeight = function(height, overflow)
{
	if (typeof overflow == "undefined")
		var overflow = "auto";

	this.m_nb.setSectionHeight(this.m_idname, height, overflow, true)
}

/***********************************************************************************
 *
 *	Function: 	CNavBarItem
 *
 *	Purpose:	Creates node that handles each item.
 *
 *	Arguements:	nbobj	- (object): Navbar object
 *
 ***********************************************************************************/
function CNavBarItem(nbobj)
{
	this.m_secname 		= null;
	this.m_tr 			= null;
	this.tilde_dv 		= null;
	this.icon_dv 		= null;
	this.m_con			= null; // The outer container of this link/item
	this.m_link 		= null;
	this.m_linktd 		= null;
	this.m_nb 			= nbobj;
	this.m_expanded 	= false;
	this.m_depth 		= 0;
	this.m_parent		= null;
	this.m_children		= new Array();
}

CNavBarItem.prototype.addItem = function(label, icon, action, args, idname, selectable)
{
	if (typeof selectable == "undefined")
	{
		var selectable = (idname==-1) ? false : true;
	}

	var item = this.m_nb.addSectionItem(label, icon, action, args, idname, selectable, this.m_secname, (this.m_depth + 1), this);
	item.m_parent = this;
	item.setHasChildren(false);
	this.m_children[this.m_children.length] = item;
	this.setHasChildren(true);
	return item;
}

CNavBarItem.prototype.getOptionCon = function()
{
	/*
	var dv = alib.dom.createElement("div");
	//alib.dom.styleSet(dv, "float", "right");
	alib.dom.styleSet(dv, "display", "inline-table");
	insertAfter(this.m_itemcon, dv, this.m_linktd);
	return dv;
	*/

	return this.m_optdiv;
}

CNavBarItem.prototype.getLabelCon = function()
{
	return this.m_link;
}

CNavBarItem.prototype.hide = function()
{
	alib.dom.styleSet(this.m_tr, "display", "none");
}

CNavBarItem.prototype.show = function()
{
	if (alib.userAgent.ie)
		alib.dom.styleSet(this.m_tr, "display", "block");
	else
		alib.dom.styleSet(this.m_tr, "display", "table-row");
}

/***********************************************************************************
 *
 *	Function: 	setHasChildren
 *
 *	Purpose:	Change node the style of one with children
 *
 *	Arguements:	haschildren	- bool = does this have children
 *
 ***********************************************************************************/
CNavBarItem.prototype.setHasChildren = function(haschildren)
{
	if (!this.tilde_dv)
	{
		this.tilde_dv = alib.dom.createElement("div");
		this.tilde_dv.m_node = this;
		this.tilde_dv.onclick = function()
		{
			if (this.m_node.m_expanded)
				this.m_node.collapse();
			else
				this.m_node.expand();
		}
		//alib.dom.styleSet(this.tilde_dv, "float", "left");
		alib.dom.styleSet(this.tilde_dv, "display", "inline-table");
		this.m_itemcon.insertBefore(this.tilde_dv, this.m_icon);
	}

	if (haschildren)
	{
		if (this.m_expanded)
			alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubOpen");
		else
			alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubClosed");
	}
	else
	{
		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeNoSub");
	}
}

/***********************************************************************************
 *
 *	Function: 	expand
 *
 *	Purpose:	Expand this node (display children if they exist)
 *
 ***********************************************************************************/
CNavBarItem.prototype.expand = function()
{
	if (this.m_children.length)
	{
		for (var i = 0; i < this.m_children.length; i++)
			this.m_children[i].show();

		this.m_expanded = true;

		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubOpen");
	}
}

/***********************************************************************************
 *
 *	Function: 	collapse
 *
 *	Purpose:	Collapse this node (collapse children if they exist)
 *
 ***********************************************************************************/
CNavBarItem.prototype.collapse = function()
{
	if (this.m_children.length)
	{
		for (var i = 0; i < this.m_children.length; i++)
		{
			this.m_children[i].collapse();
			this.m_children[i].hide();
		}

		this.m_expanded = false;

		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubClosed");
	}
}

/***********************************************************************************
 *
 *	Function: 	deleteItem
 *
 *	Purpose:	Deletes this item
 *
 ***********************************************************************************/
CNavBarItem.prototype.deleteItem = function()
{
	if (this.m_children.length);
	{
		for (var i = 0; i < this.m_children.length; i++)
			this.m_children[i].deleteItem();
	}

	this.m_nb.deleteItem(this.m_idname);

	if (this.m_parent)
	{
		if (this.m_parent.m_children.length < 2)
			this.m_parent.setHasChildren(false);
	}
}

/***********************************************************************************
 *
 *	Function: 	registerDropzone
 *
 *	Purpose:	Setup item to handle drop for drag and drop with a given zone name
 *
 ***********************************************************************************/
CNavBarItem.prototype.registerDropzone = function(zonename)
{
	DragAndDrop.registerDropzone(this.m_con, zonename);
	this.m_con.m_cnbItem = this;
	this.m_con.onDragEnter = function(e)
	{
		var evt = (e) ? e : NULL;
		this.m_cnbItem.onDragEnter(e);
	}
	this.m_con.onDragExit = function(e)
	{
		var evt = (e) ? e : NULL;
		this.m_cnbItem.onDragEnter(e);
	}
	this.m_con.onDragDrop = function(e)
	{
		var evt = (e) ? e : NULL;
		this.m_cnbItem.onDragDrop(e);
	}
}

/***********************************************************************************
 *
 *	Function: 	onDragEnter
 *
 *	Purpose:	To be overridden
 *
 ***********************************************************************************/
CNavBarItem.prototype.onDragEnter = function(e)
{
}

/***********************************************************************************
 *
 *	Function: 	onDragExit
 *
 *	Purpose:	To be overridden
 *
 ***********************************************************************************/
CNavBarItem.prototype.onDragExit = function(e)
{
}

/***********************************************************************************
 *
 *	Function: 	onDragDrop
 *
 *	Purpose:	To be overridden
 *
 ***********************************************************************************/
CNavBarItem.prototype.onDragDrop = function(e)
{
}

/***********************************************************************
*	Class:		CAdcClient
*
*				Copyright 2006, Aereus Corporation. All rights reserved.  
*
*	Purpose:	Act as JS clinet of ANT Datacenter Database
*
*	Security:	For security reasons, this script cannot pass user name
*				and password. There is a PHP Class called CAdcJsClient
*				that can accept quieries from this file (stored locally)
*				and it will handle authentication securely.
*
************************************************************************/

var g_CAdcClient = new Array();

function CAdcClient(url, dbid)
{
	// Set Database ID
	this.m_dbid = dbid;
	// Set URL
	this.m_url = url;
	// Set cols array
	this.m_cols = new Array();
	// Get last index
	this.m_ind = g_CAdcClient.length;
	//g_CAdcClient[this.m_ind] = new CAjax();
}
/***********************************************************************
*	Function:	query
*
*	Purpose:	Execute a query
*
************************************************************************/
CAdcClient.prototype.query = function(query)
{
	g_CAdcClient[this.m_ind] = null;
	g_CAdcClient[this.m_ind] = new CAjax();

	this.m_cols = null;
	this.m_cols = new Array();

	g_CAdcClient[this.m_ind].m_dbh = this;

	g_CAdcClient[this.m_ind].onload = function(root)
	{
		var retval = null;

		var num = root.getNumChildren();
		for (i = 0; i < num; i++)
		{
			var child = root.getChildNode(i);
			if (child.m_name == "retval")
			{
				if (child.m_text)
				{
					this.m_dbh.retval = unescape(child.m_text);
				}
			}

			if (child.m_name == "collist")
			{
				var num_cols = child.getNumChildren();
				for (j = 0; j < num_cols; j++)
				{
					var cols = child.getChildNode(j);
					if (cols.m_name == "column")
					{
						var num_vars = cols.getNumChildren();
						var name = null;
						var type_name = null;
						var type = null;
						var notes = null;

						for (m = 0; m < num_vars; m++)
						{
							var colattr = cols.getChildNode(m);
							
							switch (colattr.m_name)
							{
							case "name":
								name = (colattr.m_text) ? unescape(colattr.m_text) : "";
								break;
							case "type_name":
								type_name = (colattr.m_text) ? unescape(colattr.m_text) : "";
								break;
							case "type":
								type = (colattr.m_text) ? unescape(colattr.m_text) : "";
								break;
							case "notes":
								notes = (colattr.m_text) ? unescape(colattr.m_text) : "";
								break;
							}
						}
							
						if (name)
						{
							var ind = this.m_dbh.m_cols.length;
							
							this.m_dbh.m_cols[ind] = new Object();
							this.m_dbh.m_cols[ind].name = name;
							this.m_dbh.m_cols[ind].notes = notes;
							this.m_dbh.m_cols[ind].data_type = type_name;
							this.m_dbh.m_cols[ind].type = type;
						}
					}
				}
			}

			if (child.m_name == "dataset")
			{
				// Populate dataset and numrows
				if (child.getNumChildren())
					this.m_dbh.m_dataset = child;
			}
		}

		this.m_dbh.onload();
	};
	/*
	var dv = document.createElement("div");
	document.body.appendChild(dv);
	dv.innerHTML = this.m_url + "?dbid=" + this.m_dbid + "&query=" + escape(query);
	*/
	g_CAdcClient[this.m_ind].exec(this.m_url + "?dbid=" + this.m_dbid + "&query=" + escape(query));
}
/***********************************************************************
*	Function:	getNumRows
*
*	Purpose:	Get number of rows returned in XML document (not collis)
*
************************************************************************/
CAdcClient.prototype.getNumRows = function()
{
	if (this.m_dataset)
		return this.m_dataset.getNumChildren();
	else
		return 0;
}
/***********************************************************************
*	Function:	onload
*
*	Purpose:	Will be overloaded by client
*
************************************************************************/
CAdcClient.prototype.onload = function()
{
}
/***********************************************************************
*	Function:	getValue
*
*	Purpose:	Retrieve result at row,col_id
*
************************************************************************/
CAdcClient.prototype.getValue = function(row, col)
{
	if (this.getNumRows() > row && this.getNumCols() > col)
	{
		try
		{
			if (this.m_dataset.getChildNode(row))
				return this.m_dataset.getChildNode(row).getChildNode(col).m_text;
		}
		catch (e) {}
	}
}

/***********************************************************************
*	Function:	getNamedValue
*
*	Purpose:	Retrieve result at row,namedcol
*
************************************************************************/
CAdcClient.prototype.getNamedValue = function(row, colname)
{
	if (this.getNumRows() > row)
	{
		try
		{
			if (this.m_dataset.getChildNode(row))
			{
				var num = this.m_cols.length; //[ind].name
				for (var i = 0; i < num; i++)
				{
					if (this.m_cols[i].name == colname)
						return this.m_dataset.getChildNode(row).getChildNode(i).m_text;
				}
			}
		}
		catch (e) {}
	}

	return "";
}
CAdcClient.prototype.getNumCols = function()
{
	return this.m_cols.length;
}
CAdcClient.prototype.getColName = function(colind)
{
	return this.m_cols[colind].name;
}
CAdcClient.prototype.getCol = function(colind)
{
	return this.m_cols[colind];
}
CAdcClient.prototype.getColIndex = function(colname)
{
}
CAdcClient.prototype.escape = function(text)
{
	if (text)
	{
		var myRegExp = /[']/g;
		return text.replace(myRegExp, "\\'") ;	
	}
	else
		return text;
}

/****************************************************************************
*	
*	Class:		CSplitContainer
*
*	Purpose:	Create a div-based frame set similar to html frames but using divs
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CSplitContainer(orientation, width, height)
{
	// Types can be "verticle" or "horizontal"
	this.m_orientation = (orientation) ? orientation : "verticle";

	this.m_document = ALib.m_document;
	this.m_con = this.m_document.createElement("div");

	this.m_tbl = this.m_document.createElement("table");
    alib.dom.styleSet(this.m_tbl, "table-layout", "fixed");

	if (width)
		alib.dom.styleSet(this.m_tbl, "width", width);
	else
		alib.dom.styleSet(this.m_tbl, "width", "100%");

	if (height)
		alib.dom.styleSet(this.m_tbl, "height", height);

	this.m_tbl.setAttribute("cellpadding","0");
	this.m_tbl.cellPadding = "0";	
	this.m_tbl.setAttribute("cellspacing","0");
	this.m_tbl.cellSpacing = "0";
	this.m_con.appendChild(this.m_tbl);

	this.m_tbody = this.m_document.createElement("tbody");
	this.m_tbl.appendChild(this.m_tbody);

	if (height)
		alib.dom.styleSet(this.m_tbody, "height", height);

	if (this.m_orientation == "verticle")
	{
		this.m_row = this.m_document.createElement("tr");
		this.m_tbody.appendChild(this.m_row);
	}

	this.resizable = false;
	this.m_columns = new Array();

	this.onPanelResize = new Function();
	this.onPanelResizeStart = new Function();

	this.m_height = (height) ? height : null;
}

CSplitContainer.prototype.addPanel = function(size, overflow)
{
	if (typeof overflow == "undefined")
		var overflow = "auto";

	// if this is not the first panel and this.resizable == true
	if (this.m_columns.length >= 1 && this.resizable)
	{
		var res_dv = this.m_document.createElement("td");
		// Add a column for resize bar
		if (this.m_orientation == "verticle")
		{
			alib.dom.styleSetClass(res_dv, "CSplitContainerVertResizeBar");
			res_dv.onmouseover = function () { alib.dom.styleSetClass(this, "CSplitContainerVertResizeBarOver"); };
			res_dv.onmouseout = function () { alib.dom.styleSetClass(this, "CSplitContainerVertResizeBar"); };
			this.m_row.appendChild(res_dv);
		}
		else
		{
			alib.dom.styleSetClass(res_dv, "CSplitContainerHorizResizeBar");
			res_dv.onmouseover = function () { alib.dom.styleSetClass(this, "CSplitContainerHorizResizeBarOver"); };
			res_dv.onmouseout = function () { alib.dom.styleSetClass(this, "CSplitContainerHorizResizeBar"); };
			this.m_row = this.m_document.createElement("tr");
			this.m_row.appendChild(res_dv);
			this.m_tbody.appendChild(this.m_row);
		}
	}
	
	var col_dv = this.m_document.createElement("td");
	alib.dom.styleSet(col_dv, "vertical-align", "top");

	var col_inner_dv = this.m_document.createElement("div"); // Used to place content so we can use overflow attribute (won't work with td)
	col_dv.col_inner_dv = col_inner_dv;
	col_dv.appendChild(col_inner_dv);
	alib.dom.styleSet(col_inner_dv, "overflow", overflow);
	//alib.ui.slimScroll(col_inner_dv, {});
	if (this.m_orientation == "verticle" && this.m_height)
	{
		alib.dom.styleSet(col_inner_dv, "height", this.m_height);
	}

	if (this.m_orientation == "verticle")
	{
		if (size != "*" && size != "")
		{
			alib.dom.styleSet(col_dv, "width", size);
		}
		this.m_row.appendChild(col_dv);
	}
	else
	{
		if (size != "*" && size != "")
		{
			alib.dom.styleSet(col_dv, "height", size);
		}
		this.m_row = this.m_document.createElement("tr");
		this.m_row.appendChild(col_dv);
		this.m_tbody.appendChild(this.m_row);
	}
	
	this.m_columns[this.m_columns.length] = col_dv;
	
	// Make resize bar dragable (if exists)
	if (res_dv)
	{
		// Add a column for resize bar
		if (this.m_orientation == "verticle")
		{
			DragAndDrop.registerDragable(res_dv);
			res_dv.m_cls = this;
			res_dv.m_leftcon = this.m_columns[this.m_columns.length - 2];
			res_dv.m_rightcon = this.m_columns[this.m_columns.length - 1];
			res_dv.onDragStart = function (x, y)
			{
				this.minY = y;
				this.maxY = y;

				this.startX = x;
				
				// maxX should be set to bounds of container
				var l_pos = alib.dom.getElementPosition(this.m_leftcon);
				var r_pos = alib.dom.getElementPosition(this.m_rightcon);

				this.minX = l_pos.x;
				this.maxX = r_pos.r - this.offsetWidth;

				this.m_leftConWidth = this.m_leftcon.offsetWidth;
				this.m_rightConWidth = this.m_rightcon.offsetWidth;

				alib.dom.styleSetClass(this.m_dragCon, "CSplitContainerVertResizeBarOver");
				this.m_cls.onPanelResizeStart();
			};

			res_dv.onDrag = function(x, y)
			{
				var change = x - this.startX;
				var l = (this.m_leftConWidth + change);
				var r = (this.m_rightConWidth + (change*-1));
				alib.dom.styleSet(this.m_leftcon, "width", l + "px");
				alib.dom.styleSet(this.m_rightcon, "width", r + "px");
				//this.m_leftcon.innerHTML = this.m_leftcon.style.width;
				//this.m_rightcon.innerHTML = this.m_rightcon.style.width;
			};

			res_dv.onDragEnd = function(x, y)
			{
				this.m_cls.onPanelResize();
			};
		}
		else
		{
			DragAndDrop.registerDragable(res_dv);
			res_dv.m_cls = this;
			res_dv.m_topcon = this.m_columns[this.m_columns.length - 2];
			res_dv.m_bottomcon = this.m_columns[this.m_columns.length - 1];
			res_dv.onDragStart = function (x, y)
			{
				this.minX = x;
				this.maxX = x;

				this.startY = y;
				
				// maxY should be set to bounds of container
				var t_pos = alib.dom.getElementPosition(this.m_topcon);
				var b_pos = alib.dom.getElementPosition(this.m_bottomcon);

				this.minY = t_pos.y;
				this.maxY = b_pos.b - this.offsetHeight;

				this.m_topConHeight = this.m_topcon.offsetHeight;
				this.m_bottomConHeight = this.m_bottomcon.offsetHeight;

				alib.dom.styleSetClass(this.m_dragCon, "CSplitContainerHorizResizeBarOver");
				
				this.m_cls.onPanelResizeStart();
			};

			res_dv.onDrag = function(x, y)
			{
				var change = y - this.startY;
				var t = (this.m_topConHeight + change);
				var b = (this.m_bottomConHeight + (change * -1));
				alib.dom.styleSet(this.m_topcon, "height", t + "px");
				alib.dom.styleSet(this.m_bottomcon, "height", b + "px");
				//this.m_leftcon.innerHTML = this.m_leftcon.style.width;
				//this.m_rightcon.innerHTML = this.m_rightcon.style.width;
			};

			res_dv.onDragEnd = function(x, y)
			{
				this.m_cls.onPanelResize();
			};
		}
	}
	return col_inner_dv;
}

CSplitContainer.prototype.getPanelCon = function(indx)
{
	return this.m_columns[indx];
}

CSplitContainer.prototype.print = function(con)
{
	con.appendChild(this.m_con);
}

CSplitContainer.prototype.setHeight = function(height)
{
	this.m_height = height;

	alib.dom.styleSet(this.m_tbl, "height", height);
	alib.dom.styleSet(this.m_tbody, "height", height);

	if (this.m_orientation == "verticle" && this.m_height)
	{
		for (var i = 0; i  < this.m_columns.length; i++)
		{
			alib.dom.styleSet(this.m_columns[i].col_inner_dv, "height", this.m_height);
		}
	}
}


/****************************************************************************
*	
*	Class:		CTabs
*
*	Purpose:	Build tab navigation
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CTabs()
{
	this.m_document = ALib.m_document;
	var doc = this.m_document;
	this.m_outerdv = doc.createElement("div");

	this.m_navOuter = alib.dom.createElement("div", this.m_outerdv); // Will act as a container for all navigation elements for getting real height

	// Create right div
	this.m_rightdiv = doc.createElement("div");
	alib.dom.styleSet(this.m_rightdiv, "float", "right");
	this.m_navOuter.appendChild(this.m_rightdiv);

	// Create nav row
	this.m_navrow = doc.createElement("div");
	this.m_navOuter.appendChild(this.m_navrow);
	var tbl = doc.createElement("table");
	this.m_navrow.appendChild(tbl);
	tbl.setAttribute("cellpadding","0");
	tbl.cellPadding = "0";	
	tbl.setAttribute("cellspacing","0");
	tbl.cellSpacing = "0";
	var tbl_bdy = doc.createElement("tbody");
	tbl.appendChild(tbl_bdy);
	// Create tab row
	this.m_tabrow = doc.createElement("tr");
	tbl_bdy.appendChild(this.m_tabrow);
	
	// Create hr row
	var dv = this.m_document.createElement("div");
	alib.dom.styleSetClass(dv, "CTTabHr");
	this.m_navOuter.appendChild(dv);

	// Create content div
	this.m_con = this.m_document.createElement("div");
	//alib.dom.styleSet(this.m_con, "padding", "1px");
	this.m_outerdv.appendChild(this.m_con);
	this.m_pages = new Array();
	this.m_next_index = 0;
	this.m_default_index = 0;
	this.m_numTabs = 0;
	this.curr_index = 0;
    
    this.cbData = new Object();
}

CTabs.prototype.addTab = function(label, clk_act, act_args)
{
	// Create tab object
	this.m_pages[this.m_next_index] = new Object();
	this.m_pages[this.m_next_index].label = label;
	this.m_pages[this.m_next_index].ind = this.m_next_index;
	this.m_pages[this.m_next_index].container = this.m_document.createElement("div");

	// Add tab to tabrow
	this.m_pages[this.m_next_index].td_l = this.m_document.createElement("td");
	this.m_tabrow.appendChild(this.m_pages[this.m_next_index].td_l);
	
	this.m_pages[this.m_next_index].td_b = this.m_document.createElement("td");
	this.m_pages[this.m_next_index].td_b.innerHTML = label;
	this.m_tabrow.appendChild(this.m_pages[this.m_next_index].td_b);

	var me = this;
	this.m_pages[this.m_next_index].td_b.m_cls = me;
	this.m_pages[this.m_next_index].td_b.m_ind = this.m_next_index;
	if (clk_act)
		this.m_pages[this.m_next_index].td_b.clk_act = clk_act;
	if (act_args)
		this.m_pages[this.m_next_index].td_b.act_args = act_args;
	this.m_pages[this.m_next_index].td_b.onclick = function ()
	{
	    this.m_cls.selectTab(this.m_ind);
            
		if (this.clk_act)
		{
			try
			{
				if (typeof this.clk_act == "string")
				{
					if (this.act_args)
					{
						var passargs = "";
						for (var j = 0; j < act_args.length; j++)
						{
							if (passargs.length>0) passargs += ",";
							passargs += "\"" + act_args[j] + "\"";
						}

						eval(this.clk_act + "(" + passargs + ")");
					}
					else
					{
						eval(this.clk_act + "()");
					}
				}
				else
				{
					if (this.act_args)
					{
						switch (this.act_args.length)
						{
						case 1:
							this.clk_act(this.act_args[0]);
							break;
						case 2:
							this.clk_act(this.act_args[0], this.act_args[1]);
							break;
						case 3:
							this.clk_act(this.act_args[0], this.act_args[1], this.act_args[2]);
							break;
						case 4:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3]);
							break;
						case 5:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4]);
							break;
						case 6:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4],
											 this.act_args[5]);
							break;
						case 7:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4],
											 this.act_args[5], this.act_args[6]);
							break;
						case 8:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4],
											 this.act_args[5], this.act_args[6], this.act_args[7]);
							break;
						case 9:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4],
											 this.act_args[5], this.act_args[6], this.act_args[7],
											 this.act_args[8]);
							break;
						case 10:
							this.clk_act(this.act_args[0], this.act_args[1], 
											 this.act_args[2], this.act_args[3], this.act_args[4],
											 this.act_args[5], this.act_args[6], this.act_args[7],
											 this.act_args[8], this.act_args[9]);
							break;
						}
					}
					else
					{
						this.clk_act();
					}
				}
			}
			catch (e) {}
		}
	}
	
	this.m_pages[this.m_next_index].td_r = this.m_document.createElement("td");
	this.m_tabrow.appendChild(this.m_pages[this.m_next_index].td_r);

	// Check for display of current tab
	if (this.m_next_index != this.m_default_index)
	{
		alib.dom.styleSet(this.m_pages[this.m_next_index].container, "display", "none");
		this.setTabState(this.m_next_index, "off");
	}
	else
	{
		this.setTabState(this.m_next_index, "on");
	}
	
	this.m_con.appendChild(this.m_pages[this.m_next_index].container);
	alib.dom.styleSetClass(this.m_pages[this.m_next_index].container, "CTTabBody");

	var lastind = this.m_next_index;
	this.m_next_index++;

	this.m_numTabs++;

	return this.m_pages[lastind].container;
}

CTabs.prototype.onSelectTab = function(index)
{
    return true;
}
    
CTabs.prototype.selectTab = function(indx)
{
    if(!this.onSelectTab(indx))
        return;
    
	this.curr_index = indx;
	if (this.m_lasttab)
		this.setTabState(this.m_lasttab, "off");
	else
		this.setTabState(this.m_default_index, "off");

	this.setTabState(indx, "on");
	
	this.m_lasttab = indx;
}

CTabs.prototype.setTabState = function(tabind, state)
{
	switch (state)
	{
	case 'on':
		alib.dom.styleSetClass(this.m_pages[tabind].td_l, "CTTabLeftOn");
		alib.dom.styleSetClass(this.m_pages[tabind].td_b, "CTTabCenterOn");
		alib.dom.styleSetClass(this.m_pages[tabind].td_r, "CTTabRightOn");
		alib.dom.styleSet(this.m_pages[tabind].container, "display", "block");
		break;
	case 'off':
		alib.dom.styleSetClass(this.m_pages[tabind].td_l, "CTTabLeftOff");
		alib.dom.styleSetClass(this.m_pages[tabind].td_b, "CTTabCenterOff");
		alib.dom.styleSetClass(this.m_pages[tabind].td_r, "CTTabRightOff");
		alib.dom.styleSet(this.m_pages[tabind].container, "display", "none");
		break;
	}
}

CTabs.prototype.setTabTitle = function(tabind, title)
{
	this.m_pages[tabind].td_b.innerHTML = title;
}

CTabs.prototype.deleteTab = function(tabind)
{
	this.m_pages[tabind].td_l.style.display = "none";
	this.m_pages[tabind].td_b.style.display = "none";
	this.m_pages[tabind].td_r.style.display = "none";
	
	this.m_numTabs--;
}

CTabs.prototype.getIndex = function()
{
	return this.curr_index;
}

CTabs.prototype.getRightCon = function()
{
	return this.m_rightdiv;
}

CTabs.prototype.getPageCon = function(ind)
{
	return this.m_pages[ind].container;
}

CTabs.prototype.print = function (container)
{
	if (container)
		container.appendChild(this.m_outerdv);
	else
		document.write(this.m_table.outerHTML);
}

CTabs.prototype.getTabHeight = function()
{
	return alib.dom.getContentHeight(this.m_navOuter);
}

CTabs.prototype.getHeight = function()
{
	return this.getTabHeight();
}

CTabs.prototype.getNumTabs = function()
{
	return this.m_numTabs;
}

CTabs.prototype.setHeight = function(height)
{
	// get Nav
	var navheight = this.getTabHeight();

	// outer
	alib.dom.styleSet(this.m_outerdv, "height", height);

	//var fullheight = alib.dom.getContentHeight(this.m_outerdv);

	alib.dom.styleSet(this.m_con, "height", (height-navheight)+"px");
	alib.dom.styleSet(this.m_con, "overflow", "auto");

	for (var i = 0; i < this.m_pages.length; i++)
	{
		//alib.dom.styleSet(this.m_pages[i].container, "height", "100%");
		//alib.dom.styleSet(this.m_pages[i].container, "overflow", "auto");
	}
}

/****************************************************************************
*	
*	Class:		CToolbar
*
*	Purpose:	Create toolbar frame
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CToolbar()
{
	this.m_document = ALib.m_document;
	var doc = this.m_document;
	this.m_outerdv = doc.createElement("div");
	var tbl = doc.createElement("table");
	this.m_table = tbl;
	alib.dom.styleSetClass(tbl, "CToolbar");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellpadding","0");
	tbl.cellPadding = "0";	
	tbl.setAttribute("cellspacing","0");
	tbl.cellSpacing = "0";
	var tbl_bdy = doc.createElement("tbody");
	tbl.appendChild(tbl_bdy);
	var row = doc.createElement("tr");
	tbl_bdy.appendChild(row);
	var td = doc.createElement("td");
	row.appendChild(td);

	this.m_con = td;
	this.m_outerdv.appendChild(tbl);
}

/******************************************************************************
*	Function:	AddItem
*	Purpose:	Add any item to the toolbar
*******************************************************************************/
CToolbar.prototype.AddItem = function(element, align)
{
	var dv = this.m_document.createElement("div");
	if (align == "right")
	{
		alib.dom.styleSet(dv, "float", "right");
	}
	else
	{
		alib.dom.styleSet(dv, "float", "left");
	}
	
	dv.appendChild(element);
	this.m_con.appendChild(dv);
}

/******************************************************************************
*	Function:	addSpacer
*	Purpose:	Add a spacer to the tooblar
*******************************************************************************/
CToolbar.prototype.addSpacer = function(align)
{
	var dv = this.m_document.createElement("div");
	if (align == "right")
	{
		alib.dom.styleSet(dv, "float", "right");
	}
	else
	{
		alib.dom.styleSet(dv, "float", "left");
	}
	alib.dom.styleSetClass(dv, "CToolbarSpacer");
	
	this.m_con.appendChild(dv);
}

/******************************************************************************
*	Function:	addIcon
*	Purpose:	Add any item to the toolbar
*******************************************************************************/
CToolbar.prototype.addIcon = function(src, align, funct, fargs)
{
	var dv = this.m_document.createElement("div");
	alib.dom.styleSetClass(dv, "CToolbarIcon");
	if (align == "right")
	{
		alib.dom.styleSet(dv, "float", "right");
	}
	else
	{
		alib.dom.styleSet(dv, "float", "left");
	}
	dv.innerHTML = "<img src='" + src + "' border='0'>";
	dv.functname = funct;
	dv.onclick = function()
	{
		if (typeof this.functname != "string")
		{
			if (typeof fargs != "undefined" && fargs)
			{
				switch (fargs.length)
				{
				case 1:
					this.functname(fargs[0]);
					break;
				case 2:
					this.functname(fargs[0], fargs[1]);
					break;
				case 3:
					this.functname(fargs[0], fargs[1], fargs[2]);
					break;
				case 4:
					this.functname(fargs[0], fargs[1], fargs[2], fargs[3]);
					break;
				case 5:
					this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4]);
					break;
				case 6:
					this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5]);
					break;
				case 7:
					this.functname(fargs[0], fargs[1], fargs[2], fargs[3], fargs[4], fargs[5], fargs[6]);
					break;
				}
			}
			else
				this.functname();
		}
	}
	this.m_con.appendChild(dv);
}
/******************************************************************************
*	Function:	print
*	Purpose:	Append toolbar to container passed in dv (write if no container)
*******************************************************************************/
CToolbar.prototype.print = function (dv)
{
	if (dv)
		dv.appendChild(this.m_outerdv);
	else
		document.write(this.m_outerdv.outerHTML);
}

/******************************************************************************
*	Function:	getContainer
*	Purpose:	Get content container for toolbar
*******************************************************************************/
CToolbar.prototype.getContainer = function ()
{
	return this.m_con;
}

/******************************************************************************
*	Function:	getHeight
*	Purpose:	Get the total height of the toolbar
*******************************************************************************/
CToolbar.prototype.getHeight= function ()
{
	return this.m_con.offsetHeight;
}


/******************************************************************************
*	Function:	styleSetClass	
*	Purpose:	Set container class
*******************************************************************************/
CToolbar.prototype.setClass = function(cls)
{
	this.styleSetClass(cls);
}
CToolbar.prototype.styleSetClass = function(cls)
{
	alib.dom.styleSetClass(this.m_table, cls);
}

/******************************************************************************
*	Function:	setStyle	
*	Purpose:	Set container style
*******************************************************************************/
CToolbar.prototype.styleSet = function(sname, sval)
{
	alib.dom.styleSet(this.m_table, sname, sval);
}

/****************************************************************************
*	
*	Class:		CToolTable
*
*	Purpose:	Table encapsulation for simplified usage of html tables
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
var g_ctt_tind = 0;
var g_ctt_tables = new Array();

function CToolTable(width, height, custom_class)
{
	/* return reference to inner div for div.innerHTML or div.createDiv */	
	// Create main table
	var table = ALib.m_document.createElement("table");
	if (custom_class)
		table.className = custom_class;
	else
		table.className = "CTTMainTable";

	table.setAttribute("cellpadding","0");
	table.cellPadding = "0";	
	table.setAttribute("cellspacing","0");
	table.cellSpacing = "0";
	table.setAttribute("border","0");
	table.border = "0";
	if (width)
		table.style.width = width;
	if (height)
		table.style.height = height;

	var tbl_body = ALib.m_document.createElement("TBODY")	

	table.appendChild(tbl_body);
	/* Initiate local class variables */
	this.m_table = table;
	this.m_table_body = tbl_body;
	this.m_numrows = 0;
	this.m_rows = new Array();
	this.m_rowBody = null;
	this.m_rowSpacer = null;
	this.m_headersrow = null;

	// Set table unique id
	this.m_uni_id = "alib_ctt_" + g_ctt_tind;
	g_ctt_tables[g_ctt_tind] = this;
	g_ctt_tind++;
}

CToolTable.prototype.addHeader = function (name, align, width, height, custom_class, custom_padding)
{
	// Initial indefined variables
	if (!align)
		var align = "left";
	if (showspacer == "undefined")
		var showspacer = true;	
		
	if (!this.m_headersrow)
	{
		this.m_headersrow = ALib.m_document.createElement("tr");
		this.m_table_body.appendChild(this.m_headersrow);
	}
	
	var td = ALib.m_document.createElement("td");
	// Content
	if (typeof name == "string")
		td.innerHTML = name;
	else
		td.appendChild(name);
	// Class
	td.className = (custom_class) ? custom_class : "CTTHeaderCell";
	// Alignment
	td.align = align;
	td.setAttribute("align",align);
	// Width and Height
	if (width)
		td.style.width = width;
	if (height)
		td.style.height = height;
	td.style.padding = (custom_padding) ? custom_padding : "3px 5px 3px 5px"; // top, right, bottom, left
	// Add cell to headers row
	this.m_headersrow.appendChild(td);
	
	return td;
}

CToolTable.prototype.addRow = function(idname)
{
	// Get unique id name
	var name = this.m_numrows;
	this.m_lastRow = name;

	this.m_rows[name] = new CToolTableRow();
	this.m_rows[name].m_hinst = this;
	this.m_rows[name].m_name = name;
	this.m_rows[name].m_uni_id = this.m_uni_id + "_row_" + name;
	this.m_rows[name].id = idname;

	// Spacer row goes above body row
	this.m_rowSpacer = ALib.m_document.createElement("tr");
	this.m_rowBody = ALib.m_document.createElement("tr");
	this.m_rowBody.valign = "top";
    this.m_rowBody.setAttribute("valign", "top");    
    
    this.m_rowBody.onmouseover = function()
    {
        this.setAttribute("bgcolor", "#F0F0F0");
    }
    this.m_rowBody.onmouseout = function()
    {
        this.setAttribute("bgcolor", "#FFFFFF");
    }

	// Spacer row goes above body row
	this.m_table_body.appendChild(this.m_rowSpacer);
	this.m_table_body.appendChild(this.m_rowBody);
	
	this.m_rows[name].m_rowSpacer = this.m_rowSpacer;
	this.m_rows[name].m_row = this.m_rowBody;

	this.m_numrows++;
	
	return this.m_rows[name];
}

CToolTable.prototype.getRow = function(idname)
{
	for (var i = 0; i < this.m_rows.length; i++)
	{
		if (this.m_rows[i].id == idname)
			return this.m_rows[i];
	}
}

CToolTable.prototype.numRows = function()
{
	return this.m_numrows;
}

CToolTable.prototype.startRow = function()
{
	this.addRow();	
}

CToolTable.prototype.endRow = function()
{
}

// Empty the table
CToolTable.prototype.clear = function()
{
	for (var row in this.m_rows)
	{
		this.removeRow(row);
	}
}

CToolTable.prototype.removeRow = function(indx)
{
	try 
	{
		this.m_table_body.removeChild(this.m_rows[indx].m_rowSpacer);
		this.m_table_body.removeChild(this.m_rows[indx].m_row);
		this.m_numrows = this.m_numrows - 1;
	}
	catch (e) {}
}

CToolTable.prototype.addCell = function(content, bold, align, width, height, custom_class, custom_padding, indx)
{
	// Get unique id name
	var name = (indx) ? indx : this.m_lastRow;

	// Rows alternate, set class
	var cellclass = "";
	if (this.m_numrows % 2)
		cellclass = (bold) ? "CTTRowOneBold" : "CTTRowOne";
	else
		cellclass = (bold) ? "CTTRowTwoBold" : "CTTRowTwo";
	
	// Create spacer cell
	var td_spacer = ALib.m_document.createElement("td");
	td_spacer.className = "CTTRowSpacer";
	this.m_rows[name].m_rowSpacer.appendChild(td_spacer);
	
	// Create body cell
	var td_body = ALib.m_document.createElement("td");
	td_body.className = (custom_class) ? custom_class : cellclass;
	td_body.align = (align) ? align : "left";
	td_body.style.padding = (custom_padding) ? custom_padding : "3px 5px 3px 5px"; // top, right, bottom, left
	if (width)
		td_body.style.width = width;
	if (height)
		td_body.style.width = height;
	if (typeof content == "string")
		td_body.innerHTML = content;
    else if (typeof content == "number")
        td_body.innerHTML = content.toString();
	else
	{
		try
		{
			td_body.appendChild(content);
		}
		catch (e) {}
	}

	this.m_rows[name].m_row.appendChild(td_body);
	
	return td_body;
}

CToolTable.prototype.print = function (div_parent)
{
	if (div_parent)
	{
		this.m_parentdiv = div_parent;
		div_parent.appendChild(this.m_table);
	}
	else
		document.write(this.m_table.outerHTML);
}

function CToolTableRow()
{
	this.m_row;
	this.m_rowSpacer;
	this.m_hinst;
	this.m_name;
	this.m_uni_id = null;
}

CToolTableRow.prototype.addCell = function (content, bold, align, width, height, custom_class, custom_padding)
{
	// Create defaults
	if (!content)
		var content = null;
	if (!bold)
		var bold = null;
	if (!align)
		var align = null;
	if (!width)
		var width = null;
	if (!height)
		var height = null;
	if (!custom_class)
		var custom_class = null;
	if (!custom_padding)
		var custom_padding = null;

	return this.m_hinst.addCell(content, bold, align, width, height, custom_class, custom_padding, this.m_name);
}

CToolTableRow.prototype.deleteRow = function()
{
	this.m_hinst.removeRow(this.m_name);
}

CToolTableRow.prototype.getId = function()
{
	return this.m_uni_id;
}

CToolTableRow.prototype.setHeight = function(height)
{
	if (height)
		this.m_table.style.height = height;
}

/****************************************************************************
*	
*	Class:		CWindowFrame
*
*	Purpose:	Window Frame
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWindowFrame(label, width, padding, context)
{
	// WFOuter
	this.m_div = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(this.m_div, "CWindowFrameOuter");
	if (width)
		alib.dom.styleSet(this.m_div, "width", width);
	
	var lbl_div = alib.dom.createElement("div", this.m_div);
	this.m_lbl_div = lbl_div;
	if (label)
		alib.dom.styleSetClass(lbl_div, "CWindowFrameLabel");

	// Context content is displayed to the right of the label - commonly used for pagination
	var con_div = alib.dom.createElement("div", lbl_div);
	alib.dom.styleSetClass(con_div, "CWindowFrameContext");
	this.m_context_div = con_div;
	if (context && lbl_div)
	{
		// WFLabel
		con_div.innerHTML = context;
	}

	if (label)
	{
		if (typeof label == "string")
		{
			var sp = alib.dom.createElement("span", lbl_div);
			sp.innerHTML = label;
		}
		else
		{
			lbl_div.appendChild(label);
		}
	}
	
	// Content
	this.m_con_div = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(this.m_con_div, "CWindowFrameContent");
	if (padding)
		alib.dom.styleSet(this.m_con_div, "padding", padding);
	this.m_div.appendChild(this.m_con_div);
}

CWindowFrame.prototype.getCon = function ()
{
	return this.m_con_div;
}

CWindowFrame.prototype.getTitleCon = function ()
{
	alib.dom.styleSetClass(this.m_lbl_div, "CWindowFrameLabel"); // May not be set due to no label, make it visible
	return this.m_lbl_div;
}

CWindowFrame.prototype.getContextCon = function ()
{
	return this.m_context_div;
}

CWindowFrame.prototype.getFrame = function()
{
	return this.m_div;
}

CWindowFrame.prototype.print = function(div_parent)
{
	if (div_parent)
		div_parent.appendChild(this.getFrame());
	else
		document.write(this.m_div.outerHTML);
}

CWindowFrame.prototype.hideContent= function()
{
	this.m_con_div.style.display = "none";
}

CWindowFrame.prototype.showContent= function()
{
	this.m_con_div.style.display = "block";
}

CWindowFrame.prototype.setHeight = function(height)
{
	alib.dom.styleSet(this.m_div, "height", height);

	var conheight = (this.m_div.offsetHeight - this.m_lbl_div.offsetHeight) + "px";
	alib.dom.styleSet(this.m_con_div, "height", conheight);
	alib.dom.styleSet(this.m_con_div, "overflow", "auto");
}

CWindowFrame.prototype.hide = function()
{
	alib.dom.styleSet(this.m_div, "display", "none");
}

CWindowFrame.prototype.show = function()
{
	alib.dom.styleSet(this.m_div, "display", "block");
}

/****************************************************************************
*	
*	Class:		CUsageTracking
*
*	Purpose:	Editable spreadsheet table
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*	Usage:		Include the following anywhere on the page (make sure all ALIB
*				or CUsageTracking.js is included)
*				<script language="javascript" type="text/javascript">
*					var dbid = 22; // This is the id of your usage database
*					CUsageTracking("testserv.aereus.com", dbid);
*				</script>
*				
*
*****************************************************************************/
function CUsageTracking(server, dbid, page)
{
	var send_vars = new Array();
	var path = "http://" + server + "/datacenter/svr_logwebusage.awp";
	try
	{
		var doc = (typeof ALib != "undefined") ? ALib.m_document : document;
	}
	catch (e)
	{
		var doc = document;
	}
		
	// Get page name
	if (!page)
	{
		var page = doc.location.href;
		var i = page.indexOf("://");
		if (i)
		{
			page=page.substring(i+3, page.length);
			i=page.indexOf("/");
			if (i)
				page=page.substring(i+1, page.length);

			if ("index.htm" == page || "index.html" == page ||
				"index.php" == page || "index.awp" == page || "" == page)
			{
				page = "/";
			}

			send_vars[send_vars.length] = ["page", page];
		}
	}
	else
	{
		send_vars[send_vars.length] = ["page", page];
	}


	var referrer = doc.referrer;
	if (referrer)
	{
		send_vars[send_vars.length] = ["referrer", referrer];
	}

	// Set logvisit 1 = log a new visit (don't log for each page view)
	var ses = CUTReadCookie("ant_cut_ses"); // Get session cookie
	var ret = CUTReadCookie("ant_cut_ret"); // Get feturning cookie
	if (!ses)
	{
		send_vars[send_vars.length] = ["logvisit", '1'];

		// Type: 1 = new visit, 2 = returning
		var visit_type = (ret) ? 2 : 1;
		send_vars[send_vars.length] = ["visit_type", visit_type];

		// Create retunring and session cookie
		CUTCreateCookie("ant_cut_ses", "1", null);
		CUTCreateCookie("ant_cut_ret", "1", 90);
	}

	// Set database id
	send_vars[send_vars.length] = ["dbid", dbid];	

	path += "?";
	var tmpVars = "function=log";

	for (var i = 0; i < send_vars.length; i++)
	{
		tmpVars += "&" + send_vars[i][0] + "=" + escape(send_vars[i][1]);
	}

	var img = new Image(1, 1);
	img.src = path + tmpVars;
	img.onload = function() {};
}

function CUTCreateCookie(name,value,days) 
{
	if (days) 
	{
		var date = new Date();
		date.setTime(date.getTime()+(days*24*60*60*1000));
		var expires = "; expires="+date.toGMTString();
	}
	else var expires = "";
	document.cookie = name+"="+value+expires+"; path=/";
}

function CUTReadCookie(name) 
{
	var nameEQ = name + "=";
	var ca = document.cookie.split(';');
	for(var i=0;i < ca.length;i++) 
	{
		var c = ca[i];
		while (c.charAt(0)==' ') c = c.substring(1,c.length);
		if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
	}
	return null;
}

function CUTEraseCookie(name) 
{
	createCookie(name,"",-1);
}


/*======================================================================================
	
	Module:		CTreeView

	Purpose:	Build TreeView GUI component

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2007 Aereus Corporation. All rights reserved.
	
	Depends:	CDragAndDrop.js

	Usage:		var tv = new CTreeView();

				var n1 = tv.addNode("Test Node 1", null, "alert('Clicked');");

				var su1 = n1.addNode("Test Sub 1");
				var susu1 = su1.addNode("Sub Sub 1");
				var susu2 = su1.addNode("Sub Sub 2");
				var susu3 = su1.addNode("Sub Sub 3");

				var sususu1 = susu3.addNode("Sub Sub 1");
				var sususu2 = susu3.addNode("Sub Sub 2", null, function() {alert("Hi"); });
				var sususu3 = susu3.addNode("Sub Sub 3");

				var su2 = n1.addNode("Test Sub 2");
				var su3 = n1.addNode("Test Sub 3");

				tv.print(con);

======================================================================================*/

function CTreeView()
{
	this.m_nodes = new Array();
	this.m_outercon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(this.m_outercon, "CTreeViewCon");
}

/***********************************************************************************
 *
 *	Function: 	addNode
 *
 *	Purpose:	Creates root node. There can be more than one first level node.
 *
 *	Arguements:	title	- String||Element = what to put in the title
 *				icon	- (optional) string = path to icon
 *				action	- (optional) string||function = what do do on click
 *
 ***********************************************************************************/
CTreeView.prototype.addNode = function(title, icon, action)
{
	if (typeof icon == "undefined")
		var icon = null;
	
	if (typeof action == "undefined")
		var action = null;

	this.m_nodes[this.m_nodes.length] = new CTreeViewNode(this.m_outercon, 1, title, icon, action); // Root = 1
	return this.m_nodes[this.m_nodes.length - 1];
}

/***********************************************************************************
 *
 *	Function: 	getTvNodeById
 *
 *	Purpose:	Find and return a node by unique id
 *
 *	Arguements:	id	- string : the unique id of the specified node
 *
 ***********************************************************************************/
CTreeView.prototype.getTvNodeById = function(id, pnt)
{
	var parent_node = (pnt) ? pnt : this;

	for (var i = 0; i < parent_node.m_nodes.length; i++)
	{
		ALib.trace("CTreeView: getTvNodeById - checking " + id + " against " + parent_node.m_nodes[i].id);
		if (parent_node.m_nodes[i].id == id)
			return parent_node.m_nodes[i];

		var tmpnd = this.getTvNodeById(id, parent_node.m_nodes[i]);

		if (tmpnd)
			return tmpnd;
	}

	// Not found
	return null;
}

/***********************************************************************************
 *
 *	Function: 	print
 *
 *	Purpose:	Append or write TreeView html
 *
 *	Arguements:	container	- (optional) element = Will append as child
 *
 ***********************************************************************************/
CTreeView.prototype.print = function(container)
{
	if (typeof container != "undefined" && container)
		container.appendChild(this.m_outercon);
	else
		document.write(this.m_outercon.outerHTML);
}


/***********************************************************************************
 *
 *	Class:	 	CTreeViewNode
 *
 *	Purpose:	Node object - linked list of nodes
 *
 *	Arguements:	con		- element = container for tree
 *				depth	- integet = depth of current object for reference
 *				title	- string||element = what to put in the title
 *				icon	- (optional) string = path to icon
 *				action	- (optional) string||function = what do do on click
 *
 ***********************************************************************************/
function CTreeViewNode(con, depth, title, icon, action, args, parent_node)
{
	this.m_expanded = false;
	this.id = null;
	this.m_title =(typeof title != "undefined") ? title : "";				// Title to display - can be string
	this.m_icon = (typeof icon != "undefined") ? icon : "";					// Node Icon
	this.m_depth = depth;
	this.m_outercon = con;
	if (parent_node)
		this.m_parent = parent_node;
	else
		this.m_parent = null;
	
	//this.onclick = (typeof action != "undefined") ? action : null;			// Onclick action
	//this.ondoubleclick = null;		// Onclick action
	
	// Used for drag and drop
	this.registerDropzone = null;	
	this.onDragEnter = null;
	this.onDragExit = null;
	this.onDragDrop = null;
	// Subnodes (if any)
	this.m_nodes = new Array();

	// Now create div
	this.m_row = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(this.m_row, "CTreeViewRow");
	if (this.m_parent)
	{
		var after = null;

		// Check if we are the first child
		if (this.m_parent.m_nodes.length)
		{
			insertAfter(con, this.m_row, this.m_parent.getLastChildNode().m_row);
		}
		else
		{
			// Look like this is the first child node - put it after the parent
			insertAfter(con, this.m_row, this.m_parent.m_row);
		}

		this.m_nodes[this.m_nodes.length]
	}
	else
		con.appendChild(this.m_row);

	for (var i = 1; i < depth; i++)
	{
		var dv = ALib.m_document.createElement("div");
		alib.dom.styleSet(dv, "float", "left");
		alib.dom.styleSetClass(dv, "CTreeViewSpaceLine");
		this.m_row.appendChild(dv);
	}

	// Add tilde
	this.tilde_dv = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeNoSub");
	alib.dom.styleSet(this.tilde_dv, "float", "left");
	this.tilde_dv.m_node = this;
	this.tilde_dv.onclick = function()
	{
		if (this.m_node.m_expanded)
			this.m_node.collapse();
		else
			this.m_node.expand();
	}
	this.m_row.appendChild(this.tilde_dv);

	// Add icon (if any)
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv, "CTreeViewIcon");
	alib.dom.styleSet(dv, "float", "left");
	this.m_row.appendChild(dv);
	if (this.m_icon)
		dv.innerHTML = "<img src='" + this.m_icon + "' border='0' />";

	// Add body
	this.m_bodydv = ALib.m_document.createElement("div");
	alib.dom.styleSet(this.m_bodydv, "display", "inline");
	alib.dom.styleSetClass(this.m_bodydv, "CTreeViewBodyOut");
	this.m_row.appendChild(this.m_bodydv);
	this.m_bodydv.innerHTML = "<span>" + this.m_title + "</span>";

	// Clear floats
	var cdiv = ALib.m_document.createElement("div");
	alib.dom.styleSet(cdiv, "clear", "both");
	this.m_row.appendChild(cdiv);

	// Set action
	if (action)
	{
		if (args)
			this.setAction(action, args);
		else
			this.setAction(action);
	}

	// Set mouse states
	this.setMouseHandlers(true);

	// Set default display status
	if (depth > 1)
	{
		if (parent_node && parent_node.m_expanded)
		{
			this.show();
		}
		else
			this.hide();
	}
}

/***********************************************************************************
 *
 *	Function: 	setAction
 *
 *	Purpose:	Set onclick action for this node
 *
 *	Arguements:	function, args
 *
 ***********************************************************************************/
CTreeViewNode.prototype.setAction = function(action, args)
{
	if (action)
	{
		alib.dom.styleSet(this.m_bodydv, "cursor", "pointer");
		if (typeof action == "string")
		{
			this.m_bodydv.m_actstr = action;
			this.m_bodydv.onclick = function() { eval(this.m_actstr); };
		}
		else
		{
			this.m_bodydv.cb_function = action;
			this.m_bodydv.m_cb_args = args;
			this.m_bodydv.onclick = function()
			{
				if (this.m_cb_args)
				{
					switch (this.m_cb_args.length)
					{
					case 1:
						this.cb_function(this.m_cb_args[0]);
						break;
					case 2:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1]);
						break;
					case 3:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], this.m_cb_args[2]);
						break;
					case 4:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3]);
					case 5:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4]);
					case 6:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
										 this.m_cb_args[5]);
					case 7:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
										 this.m_cb_args[5], this.m_cb_args[6]);
					case 8:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
										 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7]);
						break;
					case 9:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
										 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7],
										 this.m_cb_args[8]);
					case 10:
						this.cb_function(this.m_cb_args[0], this.m_cb_args[1], 
										 this.m_cb_args[2], this.m_cb_args[3], this.m_cb_args[4],
										 this.m_cb_args[5], this.m_cb_args[6], this.m_cb_args[7],
										 this.m_cb_args[8], this.m_cb_args[9]);
						break;
					}
				}
				else
				{
					this.cb_function();
				}
			}
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	addNode
 *
 *	Purpose:	Creates sub node
 *
 *	Arguements:	title	- String||Element = what to put in the title
 *				icon	- (optional) string = path to icon
 *				action	- (optional) string||function = what do do on click
 *
 ***********************************************************************************/
CTreeViewNode.prototype.addNode = function(title, icon, action, args)
{
	if (typeof icon == "undefined")
		var icon = null;

	if (typeof action == "undefined")
		var action = null;

	if (typeof args == "undefined")
		var args = null;

	this.m_nodes[this.m_nodes.length] = new CTreeViewNode(this.m_outercon, this.m_depth + 1, title, icon, action, args, this);
	this.setHasChildren(true);

	return this.m_nodes[this.m_nodes.length - 1];
}

/***********************************************************************************
 *
 *	Function: 	editBody
 *
 *	Purpose:	Allow user to change the text in the body (only recommended for text)
 *
 ***********************************************************************************/
CTreeViewNode.prototype.editBody = function()
{
	var bdy = this.m_bodydv.childNodes.item(0);
	var buf = bdy.innerHTML;
	bdy.innerHTML = "";

	var inp = ALib.m_document.createElement("input");
	alib.dom.styleSet(inp, "height", "100%");
	inp.value = buf;
	inp.m_node = this;
	inp.onblur = function()
	{
		var val = this.value;
		this.m_node.m_bodydv.childNodes.item(0).innerHTML = val;
		this.m_node.onBodyEdit(val);
	}
	bdy.appendChild(inp);
	inp.select();
	inp.focus();
}

/***********************************************************************************
 *
 *	Function: 	onBodyEdit
 *
 *	Purpose:	Callback will be fired when node has been edited
 *
 ***********************************************************************************/
CTreeViewNode.prototype.onBodyEdit = function(val)
{
	
}

/***********************************************************************************
 *
 *	Function: 	setBody
 *
 *	Purpose:	Change the text in the body of the node
 *
 ***********************************************************************************/
CTreeViewNode.prototype.setBody = function(val)
{
	this.m_bodydv.childNodes.item(0).innerHTML = val;
}

/***********************************************************************************
 *
 *	Function: 	createContextMenu
 *
 *	Purpose:	Creates a dm menu when user right-clicks this node
 *
 *	Arguements:	N/A
 *
 ***********************************************************************************/
CTreeViewNode.prototype.createContextMenu = function()
{
	this.setMouseHandlers(false); // Allow dropdown to handle classes

	var dm = new CDropdownMenu();
	dm.createContextMenu(this.m_bodydv, "CTreeViewBodyOut", "CTreeViewBodyOver", "CTreeViewBodyOn");

	return dm;
}

/***********************************************************************************
 *
 *	Function: 	setHasChildren
 *
 *	Purpose:	Change node the style of one with children
 *
 *	Arguements:	haschildren	- bool = does this have children
 *
 ***********************************************************************************/
CTreeViewNode.prototype.setHasChildren = function(haschildren)
{
	if (haschildren)
	{
		if (this.m_expanded)
			alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubOpen");
		else
			alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubClosed");
	}
	else
		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeNoSub");
}

/***********************************************************************************
 *
 *	Function: 	getLastChildNode
 *
 *	Purpose:	Traverse the nodes to get the last child node for inserting before/after
 *
 ***********************************************************************************/
CTreeViewNode.prototype.getLastChildNode = function()
{
	var last = null;

	if (this.m_nodes.length)
		last = this.m_nodes[this.m_nodes.length - 1].getLastChildNode();
	else
		last = this;

	return last;
}

/***********************************************************************************
 *
 *	Function: 	hide
 *
 *	Purpose:	Hide this and child nodes
 *
 ***********************************************************************************/
CTreeViewNode.prototype.hide = function()
{
	alib.dom.styleSet(this.m_row, "display", "none");
}

/***********************************************************************************
 *
 *	Function: 	show
 *
 *	Purpose:	Display this node
 *
 ***********************************************************************************/
CTreeViewNode.prototype.show = function()
{
	alib.dom.styleSet(this.m_row, "display", "block");
}

/***********************************************************************************
 *
 *	Function: 	expand
 *
 *	Purpose:	Expand this node (display children if they exist)
 *
 ***********************************************************************************/
CTreeViewNode.prototype.expand = function()
{
	if (this.m_nodes.length)
	{
		for (var i = 0; i < this.m_nodes.length; i++)
			this.m_nodes[i].show();

		this.m_expanded = true;

		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubOpen");
	}
}

/***********************************************************************************
 *
 *	Function: 	collapse
 *
 *	Purpose:	Collapse this node (collapse children if they exist)
 *
 ***********************************************************************************/
CTreeViewNode.prototype.collapse = function()
{
	if (this.m_nodes.length)
	{
		for (var i = 0; i < this.m_nodes.length; i++)
		{
			this.m_nodes[i].collapse();
			this.m_nodes[i].hide();
		}

		this.m_expanded = false;

		alib.dom.styleSetClass(this.tilde_dv, "CTreeViewTildeWithSubClosed");
	}
}

/***********************************************************************************
 *
 *	Function: 	deleteNode
 *
 *	Purpose:	Remove node child nodes
 *
 ***********************************************************************************/
CTreeViewNode.prototype.deleteNode = function(node)
{
	if (this.m_nodes.length)
	{
		for (var i = 0; i < this.m_nodes.length; i++)
		{
			if (this.m_nodes[i] == node)
			{
				this.m_nodes[i] = null;
				this.m_nodes.splice(i, 1);
				break;
			}
		}

		if (!this.m_nodes.length)
			this.setHasChildren(false);
			
	}
}

/***********************************************************************************
 *
 *	Function: 	remove
 *
 *	Purpose:	Remove this node (remove children if they exist)
 *
 ***********************************************************************************/
CTreeViewNode.prototype.remove = function()
{
	if (this.m_nodes.length)
	{
		for (var i = 0; i < this.m_nodes.length; i++)
			this.m_nodes[i].remove();
	}

	this.m_outercon.removeChild(this.m_row);

	this.m_parent.deleteNode(this);
}

/***********************************************************************************
 *
 *	Function: 	setMouseHandlers
 *
 *	Purpose:	Add and remove event listners for setting on/over/out states
 *
 ***********************************************************************************/
CTreeViewNode.prototype.setMouseHandlers = function(set)
{
	var funover = function()
	{
		alib.dom.styleSetClass(this, "CTreeViewBodyOver");
	}

	var funout = function()
	{
		alib.dom.styleSetClass(this, "CTreeViewBodyOut");
	}

	if (set)
	{
		if (alib.userAgent.ie)
		{	
			this.m_bodydv.attachEvent('mouseover', funover);
			this.m_bodydv.attachEvent('mouseout', funout);
		}
		else
		{
			this.m_bodydv.addEventListener('mouseover', funover, false);
			this.m_bodydv.addEventListener('mouseout', funout, false);
		}
	}
	else
	{
		if (alib.userAgent.ie)
		{	
			this.m_bodydv.detachEvent('mouseover', funover);
			this.m_bodydv.detachEvent('mouseout', funout);
		}
		else
		{
			this.m_bodydv.removeEventListener('mouseover', funover, false);
			this.m_bodydv.removeEventListener('mouseout', funout, false);
		}
	}
}

/*======================================================================================
	
	Module:		CDialog

	Purpose:	Create custom dialog box

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2007 Aereus Corporation. All rights reserved.
	
	Usage:		// Modal
				var dlg_d = new CDialog();
				var dv = alib.dom.createElement("div");
				dv.m_input = alib.dom.createElement("input", dv);
				var dv_btn = alib.dom.createElement("div", dv);
				var btn = new CButton("Alert", function(dv, dlg) {  ALib.Dlg.messageBox("Say Something", dlg); }, [dv, dlg_d]); // Second param makes it modal
				btn.print(dv_btn);
				var btn = new CButton("Close", function(dlg) {  dlg.hide(); }, [dlg_d]);
				btn.print(dv_btn);

				var btn = new CButton("Modal", function(dv, dlg) { dlg.customDialog(dv, 200, 200); }, [dv, dlg_d], "b1");
				btn.print(con);

======================================================================================*/

var gDialogsVisisble = 0;

/***********************************************************************************
 *
 *	Class: 		CDialog
 *
 *	Purpose:	Encapsulate custom dialog functionality
 *
 ***********************************************************************************/
function CDialog(title, parentDlg)
{
	if (title)
		this.m_title = title;
	else
		this.m_title = null;

	this.zind = (parentDlg) ? parentDlg.zind+1 : 21 + gDialogsVisisble; // put new dialogs on top of previous ones
	this.m_initialized = false;
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.f_close = false;
	//this.initdlg();
}

CDialog.prototype.fixSizeAndScroll = function() 
{
	ALib.m_evwnd.onscroll = this.scrollFix; 
	ALib.m_evwnd.onresize = this.sizeFix;
}

CDialog.prototype.posLeft = function() 
{
	return typeof ALib.m_evwnd.pageXOffset != 'undefined' ? ALib.m_evwnd.pageXOffset
			: ALib.m_document.documentElement && ALib.m_document.documentElement.scrollLeft
			? ALib.m_document.documentElement.scrollLeft
			: ALib.m_document.body.scrollLeft ? ALib.m_document.body.scrollLeft:0;
}

CDialog.prototype.posTop = function() 
{
	return typeof ALib.m_evwnd.pageYOffset != 'undefined' ? ALib.m_evwnd.pageYOffset
			: ALib.m_document.documentElement && ALib.m_document.documentElement.scrollTop
			? ALib.m_document.documentElement.scrollTop
			: ALib.m_document.body.scrollTop?ALib.m_document.body.scrollTop:0;
}

CDialog.prototype.gete= function(x)
{
	return ALib.m_document.getElementById(x);
}

CDialog.prototype.scrollFix = function()
{
	if (this.overlay)
	{
		this.overlay.style.top=alib.dom.getScrollPosTop()+'px';
		this.overlay.style.left=alib.dom.getScrollPosLeft()+'px';
	}
}

CDialog.prototype.sizeFix = function()
{
	if (this.overlay)
	{
		this.overlay.style.height=alib.dom.GetDocumentHeight()+'px';
		this.overlay.style.width=alib.dom.getDocumentWidth()+'px';
	}
}

CDialog.prototype.kp = function(e)
{
	ky=e?e.which:event.keyCode;
	if(ky==88||ky==120) this.hm();
	return false
}

CDialog.prototype.inf = function(h)
{
	if (!this.parentDlg)
	{
		/*
		tag=ALib.m_document.getElementsByTagName('select');
		
		for(i=tag.length-1;i>=0;i--)
		{
			if (!tag[i].dlgField)
				tag[i].style.visibility=h;
		}
		
		tag=ALib.m_document.getElementsByTagName('iframe');
		
		for(i=tag.length-1;i>=0;i--)
		{
			if (!tag[i].dlgField)
				tag[i].style.visibility=h;
		}
		*/
	}
	
	/*
	 * TODO: Correct this so that objects can work on dialogs but not on the background
	tag=ALib.m_document.getElementsByTagName('object');
	
	for(i=tag.length-1;i>=0;i--)
	{
		if (!tag[i].dlgField)
			tag[i].style.visibility=h;
	}
	*/
}

CDialog.prototype.showOverlay = function(wd, ht)
{
	if (!this.m_initialized)
		this.initdlg();

	ALib.m_document.getElementsByTagName('body')[0].appendChild(this.m_dcon);

	var h = 'hidden';
	var b = 'block';
	var p = 'px';

	// Display overlay
	/*
	this.overlay.style.height = alib.dom.getDocumentHeight()+p;
	this.overlay.style.width = alib.dom.getDocumentWidth()+p;
	this.overlay.style.top = "0px"; //alib.dom.getScrollPosTop()+p;
	this.overlay.style.left = "0px"; //alib.dom.getScrollPosLeft()+p;
	this.overlay.style.display = b;
	this.overlay.onFadeFinished = function() { };
	ALib.Effect.fadein(this.overlay, -1);
	*/
	this.overlay.style.height = alib.dom.getDocumentHeight()+p;
	this.overlay.style.width = alib.dom.getDocumentWidth()+p;
	this.overlayOuter.style.display = b;
	this.overlayOuter.onFadeFinished = function() { };
	ALib.Effect.fadein(this.overlayOuter, -1);
	this.inf(h);
}

CDialog.prototype.show = function(wd, ht)
{
	this.sm(wd, ht);
}

CDialog.prototype.sm = function(wd, ht)
{
	var h = 'hidden';
	var b = 'block';
	var p = 'px';

	// Display overlay
	this.showOverlay();

	// Make sure the width is not wider than the client
	if (wd > alib.dom.getClientWidth())
		wd = alib.dom.getClientWidth();

	/* Moved to reposition function
	var sptop = alib.dom.getScrollPosTop();
	var spleft = alib.dom.getScrollPosLeft();

	var tp= sptop +((alib.dom.getClientHeight()-ht)/2)-12;
	var lt= spleft +((alib.dom.getClientWidth()-wd)/2)-12;

	this.m_dcon.style.top=(tp<0?0:tp)+p;
	this.m_dcon.style.left=(lt<0?0:lt)+p;
	*/
	this.m_dcon.style.width=wd +p;
	if (ht)
		this.m_dcon.style.height=ht +p;
	this.m_dcon.style.overflow="hidden";
	//this.inf(h);
	this.m_dcon.style.display=b;

	this.reposition();

	// Increment the number of dialogs visible
	gDialogsVisisble++;

	return false;
}

CDialog.prototype.hideOverlay = function()
{
	var v = 'visible';
	//var n = 'none';
	this.overlayOuter.onFadeFinished = function()
    {
        this.style.display = "none";
    };
    
	ALib.Effect.fadeout(this.overlayOuter, 200);
	//this.overlay.style.display=n;
	this.inf(v);
}

CDialog.prototype.hide = function()
{
	this.hm();
}

CDialog.prototype.hm = function()
{
	var v = 'visible';
	var n = 'none';

	// Decrement the number of dialogs visible
	gDialogsVisisble--;

	this.m_dcon.style.display=n;

	if (!this.parentDlg && gDialogsVisisble <= 0)
		this.hideOverlay();
	
	if (this.m_cleardv)
	{
		try
		{
			this.m_bodycon.removeChild(this.m_cleardv);
		} catch (e) {}

		this.m_cleardv = null;
	}

	this.m_dcon.parentNode.removeChild(this.m_dcon);
}	

CDialog.prototype.reposition = function()
{
	if (!this.m_dcon)
		return;


	var sptop = alib.dom.getScrollPosTop();
	var spleft = alib.dom.getScrollPosLeft();

	var tp= sptop + ((alib.dom.getClientHeight()/2)-(this.m_dcon.offsetHeight/2));
	var lt= spleft +((alib.dom.getClientWidth()/2)-(this.m_dcon.offsetWidth/2));

	this.m_dcon.style.top=(tp<0?0:tp)+"px";
	this.m_dcon.style.left=(lt<0?0:lt)+"px";
}

CDialog.prototype.initdlg = function()
{
	var ab='absolute';
	var n='none';
	var obody=ALib.m_document.getElementsByTagName('body')[0];
	var frag=ALib.m_document.createDocumentFragment();

	// Create document overlay - this should only exist once
	// we use overlayOuter so it can be faded without directly effecting
	// the styles of CDialogOverlay. That way an opacity can be set in a style
	// sheet and the fade will just set the opacity for the outer container
	this.overlay = alib.dom.getElementById('CDialogOverlay');
	this.overlayOuter = alib.dom.getElementById('CDialogOverlayOuter');
	if (!this.overlay)
	{
		this.overlayOuter = alib.dom.createElement('div', this.overlayOuter);
		alib.dom.styleSet(this.overlayOuter, "display", "none");
		alib.dom.styleSet(this.overlayOuter, "position", "absolute");
		alib.dom.styleSet(this.overlayOuter, "top", "0");
		alib.dom.styleSet(this.overlayOuter, "left", "0");
		this.overlayOuter.style.zIndex = "20";
		alib.dom.styleSet(this.overlayOuter, "width", "100%");
		this.overlayOuter.setAttribute('id','CDialogOverlayOuter');

		this.overlay = alib.dom.createElement('div', this.overlayOuter);
		this.overlay.setAttribute('id','CDialogOverlay');

		obody.appendChild(this.overlayOuter);

		/*
		this.overlay = alib.dom.createElement('div');
		this.overlay.setAttribute('id','CDialogOverlay');
		alib.dom.styleSet(this.overlay, "display", "none");
		alib.dom.styleSet(this.overlay, "position", "absolute");
		alib.dom.styleSet(this.overlay, "top", "0");
		alib.dom.styleSet(this.overlay, "left", "0");
		this.overlay.style.zIndex = "10";
		alib.dom.styleSet(this.overlay, "width", "100%");
		obody.appendChild(this.overlay);
		*/
	}

	// Create dialog container - there can be many dialogs in a document
	this.m_dcon = alib.dom.createElement('div');
	alib.dom.setClass(this.m_dcon, "CDialogCon");
	alib.dom.styleSet(this.m_dcon, "display", "none");
	alib.dom.styleSet(this.m_dcon, "position", "absolute");
	this.m_dcon.style.zIndex = this.zind;

	// Add title
	if (!this.m_titlecon)
	{
		this.m_titlecon = alib.dom.createElement("div");
		this.m_dcon.appendChild(this.m_titlecon);
		alib.dom.setClass(this.m_titlecon, "CDialogTitle");
		this.m_titlecon.style.display=n;	
	}
	if (this.m_title)
	{
		this.m_titlecon.innerHTML = this.m_title;
		this.m_titlecon.style.display="block";
	}
	
	// Add body
	this.m_bodycon = alib.dom.createElement("div");
	this.m_dcon.appendChild(this.m_bodycon);
	alib.dom.setClass(this.m_bodycon, "CDialogBody");

	//obody.appendChild(this.m_dcon);
	
	this.m_initialized = true;
}

CDialog.prototype.messageBox = function(msg, parentdlg)
{
	if (!this.m_initialized)
		this.initdlg();

	if (!this.m_title)
	{
		this.m_titlecon.innerHTML = "Message";
		this.m_titlecon.style.display="block";
	}

	var old_parent = null;
	if (parentdlg)
	{
		var old_parent = this.parentDlg;
		this.parentDlg = parentdlg;
	}

	var dlg = this;
    
    this.m_bodycon.innerHTML = "";
	var dv = alib.dom.createElement("div", this.m_bodycon);

	var dv_inner = alib.dom.createElement("div");
	alib.dom.styleSet(dv_inner, "text-align", "center");
	dv.appendChild(dv_inner);

	var sp = alib.dom.createElement("div");
	dv_inner.appendChild(sp);
	sp.innerHTML = msg;

	var bdv = alib.dom.createElement("div");
	bdv.setAttribute("align", "center");
	dv_inner.appendChild(bdv);
	var dlg_btn = new CButton("OK", function(dlg, old_parent, cls) { dlg.hm(); cls.parentDlg = old_parent;  }, [dlg, old_parent, this], "b1");
	dlg_btn.print(bdv);

	var len = msg.length * 10;
	this.sm(len, null);

	this.m_cleardv = dv;
}

CDialog.prototype.confirmBox = function(msg, title, args)
{
	if (!this.m_initialized)
		this.initdlg();

	if (title)
	{
		this.m_titlecon.innerHTML = title;
		this.m_titlecon.style.display="block";
	}

	var dlg = this;

	var dv = alib.dom.createElement("div");
	this.m_bodycon.appendChild(dv);

	var dv_inner = alib.dom.createElement("div");
	alib.dom.styleSet(dv_inner, "text-align", "center");
	dv.appendChild(dv_inner);

	var sp = alib.dom.createElement("div");
	dv_inner.appendChild(sp);
	sp.innerHTML = msg;

	var bdv = alib.dom.createElement("div");
	bdv.setAttribute("align", "center");
	dv_inner.appendChild(bdv);

	function yesClicked()
	{
		dlg.hide();
		if (args)
		{
			switch (args.length)
			{
			case 1:
				dlg.onConfirmOk(args[0]);
				break;
			case 2:
				dlg.onConfirmOk(args[0], args[1]);
				break;
			case 3:
				dlg.onConfirmOk(args[0], args[1], args[2]);
				break;
			case 4:
				dlg.onConfirmOk(args[0], args[1], args[2], args[3]);
				break;
			case 5:
				dlg.onConfirmOk(args[0], args[1], args[2], args[3], args[4]);
				break;
			case 6:
				dlg.onConfirmOk(args[0], args[1], args[2], args[3], args[4], args[5]);
				break;
			}
		}
		else
			dlg.onConfirmOk();

		dlg.onConfirmOk = new Function();
	}
	
	var dlg_btn = new CButton("Yes", yesClicked, null, "b1");
	dlg_btn.print(bdv);

	// Add spacer
	var spcr = alib.dom.createElement("span", bdv);
	spcr.innerHTML = "&nbsp;";

	function noClicked()
	{
		dlg.hide();
		if (args)
		{
			switch (args.length)
			{
			case 1:
				dlg.onConfirmCancel(args[0]);
				break;
			case 2:
				dlg.onConfirmCancel(args[0], args[1]);
				break;
			case 3:
				dlg.onConfirmCancel(args[0], args[1], args[2]);
				break;
			case 4:
				dlg.onConfirmCancel(args[0], args[1], args[2], args[3]);
				break;
			case 5:
				dlg.onConfirmCancel(args[0], args[1], args[2], args[3], args[4]);
				break;
			case 6:
				dlg.onConfirmCancel(args[0], args[1], args[2], args[3], args[4], args[5]);
				break;
			}
		}
		else
			dlg.onConfirmCancel();

		dlg.onConfirmCancel = new Function();
	}

	var dlg_btn = new CButton("No", noClicked, null, "b1");
	dlg_btn.print(bdv);

	//var len = msg.length * 10;
	this.sm(300, null);

	this.m_cleardv = dv;
}

CDialog.prototype.onConfirmOk = function()
{
}

CDialog.prototype.onConfirmCancel = function()
{
}

CDialog.prototype.promptBox = function(msg, title, def_value, args)
{
	if (!this.m_initialized)
		this.initdlg();

	if (title)
	{
		this.m_titlecon.innerHTML = title;
		this.m_titlecon.style.display="block";
	}

	var dlg = this;

	var dv = alib.dom.createElement("div");
	this.m_bodycon.appendChild(dv);

	var dv_inner = alib.dom.createElement("div");
	alib.dom.styleSet(dv_inner, "text-align", "center");
	dv.appendChild(dv_inner);

	var sp = alib.dom.createElement("div");
	dv_inner.appendChild(sp);
	sp.innerHTML = msg;

	var bdv = alib.dom.createElement("div");
	bdv.setAttribute("align", "center");
	dv_inner.appendChild(bdv);

	var inpdv = alib.dom.createElement("div", bdv);
	this.m_input = alib.dom.createElement("input", inpdv);
	alib.dom.styleSet(this.m_input, "width", "95%");
	this.m_input.value = def_value;

	function okClicked()
	{
		if (args)
		{
			switch (args.length)
			{
			case 1:
				dlg.onPromptOk(dlg.m_input.value, args[0]);
				break;
			case 2:
				dlg.onPromptOk(dlg.m_input.value, args[0], args[1]);
				break;
			case 3:
				dlg.onPromptOk(dlg.m_input.value, args[0], args[1], args[2]);
				break;
			case 4:
				dlg.onPromptOk(dlg.m_input.value, args[0], args[1], args[2], args[3]);
				break;
			case 5:
				dlg.onPromptOk(dlg.m_input.value, args[0], args[1], args[2], args[3], args[4]);
				break;
			case 6:
				dlg.onPromptOk(dlg.m_input.value, args[0], args[1], args[2], args[3], args[4], args[5]);
				break;
			}
		}
		else
			dlg.onPromptOk(dlg.m_input.value);

        dlg.hide();
		dlg.onPromptOk = new Function();
	}
	
	var dlg_btn = new CButton("Ok", okClicked, null, "b1");
	dlg_btn.print(bdv);


	// Add spacer
	var spcr = alib.dom.createElement("span", bdv);
	spcr.innerHTML = "&nbsp;";

	function cancelClicked()
	{
		dlg.hide();
		if (args)
		{
			switch (args.length)
			{
			case 1:
				dlg.onPromptCancel(args[0]);
				break;
			case 2:
				dlg.onPromptCancel(args[0], args[1]);
				break;
			case 3:
				dlg.onPromptCancel(args[0], args[1], args[2]);
				break;
			case 4:
				dlg.onPromptCancel(args[0], args[1], args[2], args[3]);
				break;
			case 5:
				dlg.onPromptCancel(args[0], args[1], args[2], args[3], args[4]);
				break;
			case 6:
				dlg.onPromptCancel(args[0], args[1], args[2], args[3], args[4], args[5]);
				break;
			}
		}
		else
			dlg.onPromptCancel();

		dlg.onPromptCancel = new Function();
	}

	var dlg_btn = new CButton("Cancel", cancelClicked, null, "b1");
	dlg_btn.print(bdv);

	if (typeof title != "undefined")
		var len = (msg.length > title.length) ? msg.length * 10 : title.length * 10;
	else
		var len = msg.length * 10;
	this.sm(len, null);

	this.m_cleardv = dv;
}

CDialog.prototype.onPromptOk = function()
{
}

CDialog.prototype.onPromptCancel = function()
{
}

CDialog.prototype.customDialog = function(con, width, height)
{
	if (!this.m_initialized)
		this.initdlg();

	if (this.m_title)
	{
		this.m_titlecon.innerHTML = "";

		if (this.f_close)
		{
			var closedv = alib.dom.createElement("div", this.m_titlecon);
			alib.dom.setClass(closedv, "CDialogTitleClose");
			alib.dom.styleSet(closedv, "float", "right");
			closedv.m_dlg = this;
			closedv.onclick = function() { this.m_dlg.hide(); }
			//closedv.innerHTML = "X";
		}

		var ttlsp = alib.dom.createElement("span", this.m_titlecon);
		ttlsp.innerHTML = this.m_title;
		this.m_titlecon.style.display="block";
	}

	var dlg = this;

	con.m_dialog = dlg;
	this.m_bodycon.appendChild(con);
	if (height)
	{
		this.m_bodycon.style.overflow = "auto";
		this.m_bodycon.style.height = height + "px";
	}

	this.m_cleardv = con;

	this.sm(width, null);
}

CDialog.prototype.statusDialog = function(con, width, height)
{
	if (!this.m_initialized)
		this.initdlg();
	
	alib.dom.setClass(this.m_bodycon, "");
	alib.dom.setClass(this.m_dcon, "");

	var dlg = this;

	con.m_dialog = dlg;
	this.m_bodycon.appendChild(con);

	this.m_cleardv = con;

	this.sm(width, height);
}

CDialog.prototype.setTitle = function(title)
{
    if (title)
    {
        this.m_titlecon.innerHTML = title;
        this.m_titlecon.style.display="block";
    }
}

// Eventually we will move to alib.ui.dialog namespace, but for now this is a work-around
alib.Dlg  = new CDialog();

/*======================================================================================
	
	Module:		CRte

	Purpose:	Create RTE input textarea

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2007 Aereus Corporation. All rights reserved.
	
	Usage:		// Create rte

======================================================================================*/

/***********************************************************************************
 *
 *	Class: 		CRte
 *
 *	Purpose:	Rich text class
 *
 ***********************************************************************************/
function CRte(inpt)
{
	/* THIS WILL BE USED TO REDIRECT ALL TO THE NEW RTE
	var input = inpt || null;

	// Return the new UI class
	var rte = new alib.ui.Editor(input);
	return rte;
	*/

	this.ifrm = alib.dom.createElement("iframe");
	this.ifrm.border = '0';
	this.ifrm.frameBorder = '0';
    this.ifrm.src = "about:blank";
	this.ifrm.id = "CRteIframe";
	alib.dom.styleSetClass(this.ifrm, "CRteIframe");
	this.hdntxt = alib.dom.createElement("input");
    this.hdntxt.type = "hidden";
    if(typeof inpt != "undefined")    
	{
		if (inpt.id)
			this.hdntxt.id = inpt.id;
    
		if(inpt.getAttribute("name"))
			this.hdntxt.setAttribute("name", inpt.getAttribute("name"));
	}
    
	
	this.idoc = null;	
	this.f_src = false;	
	this.rte_id = '1';
	this.frm_input = (inpt) ? inpt : null;

	this.colors = [
					"FFFFFF",	"FFCCCC",	"FFCC99",	"FFFF99",	"FFFFCC",	"99FF99",	"99FFFF",	"CCFFFF",	
					"CCCCFF",	"FFCCFF",	"CCCCCC",	"FF6666",	"FF9966",	"FFFF66",	"FFFF33",	"66FF99",	
					"33FFFF",	"66FFFF",	"9999FF",	"FF99FF",	"C0C0C0",	"FF0000",	"FF9900",	"FFCC66",	
					"FFFF00",	"33FF33",	"66CCCC",	"33CCFF",	"6666CC",	"CC66CC",	"999999",	"CC0000",	
					"FF6600",	"FFCC33",	"FFCC00",	"33CC00",	"00CCCC",	"3366FF",	"6633FF",	"CC33CC",	
					"666666",	"990000",	"CC6600",	"CC9933",	"999900",	"009900",	"339999",	"3333FF",	
					"6600CC",	"993399",	"333333",	"660000",	"993300",	"996633",	"666600",	"006600",	
					"336666",	"000099",	"333399",	"663366",	"000000",	"330000",	"663300",	"663333",	
					"333300",	"003300",	"003333",	"000066",	"330099",	"330033"
					  ];
}

/***********************************************************************************
 *
 *	Function: 	setDocument
 *
 *	Purpose:	Set document
 *
 ***********************************************************************************/
CRte.prototype.setDocument = function()
{
    this.iwnd = this.ifrm.contentWindow || this.ifrm.contentDocument;

    if (this.iwnd && this.iwnd.document) 
	{
        this.idoc = this.iwnd.document;
    }
}

/***********************************************************************************
 *
 *	Function: 	onChange
 *
 *	Purpose:	To be overridden
 *
 ***********************************************************************************/
CRte.prototype.onChange = function()
{
}

/***********************************************************************************
 *
 *	Function: 	updateText
 *
 *	Purpose:	Update value in hidden text field
 *
 ***********************************************************************************/
CRte.prototype.updateText = function(html)
{
    //this.hdntxt.value = this.idoc.body.innerHTML;

	if (this.f_src)
	{
		if (alib.userAgent.ie) 
		{
			//fix for IE
			var output = escape_utf8(this.idoc.body.innerText);
			output = output.replace("%3CP%3E%0D%0A%3CHR%3E", "%3CHR%3E");
			output = output.replace("%3CHR%3E%0D%0A%3C/P%3E", "%3CHR%3E");
			
			this.hdntxt.value = unescape_utf8(output);
		} 
		else 
		{
			var htmlSrc = this.idoc.body.ownerDocument.createRange();
			htmlSrc.selectNodeContents(this.idoc.body);
			this.hdntxt.value = htmlSrc.toString();
		}

	}
	else
	{
		this.hdntxt.value = this.idoc.body.innerHTML;
	}

	if (this.frm_input)
		this.frm_input.value = this.hdntxt.value
}

/***********************************************************************************
 *
 *	Function: 	getValue
 *
 *	Purpose:	Get text value of rte
 *
 ***********************************************************************************/
CRte.prototype.getValue = function()
{
	this.updateText();

    return this.hdntxt.value;
}

/***********************************************************************************
 *
 *	Function: 	setValue
 *
 *	Purpose:	Set text value of rte
 *
 ***********************************************************************************/
CRte.prototype.setValue = function(html)
{
	var frameHtml = "<!DOCTYPE html PUBLIC ";
	frameHtml += '"-//W3C//DTD XHTML 1.0 Strict//EN" ';
	frameHtml += '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';
	frameHtml += "\n";
	frameHtml = "<html id=\"" + this.rte_id + "\">\n";
	frameHtml += "<head>\n";
	frameHtml += "<meta HTTP-EQUIV='content-type' CONTENT=\"text/html; charset=UTF-8\">\n";
	frameHtml += "<style>\n";
	frameHtml += "body {\n";
	frameHtml += " background: #FFFFFF;\n";
	frameHtml += " margin: 0px;\n";
	frameHtml += " padding: 3px;\n";
	if (typeof g_rte_def_font_family != "undefined")
		frameHtml += "font-family: "+ g_rte_def_font_family +";\n";
	if (typeof g_rte_def_font_size != "undefined")
		frameHtml += "font-size: "+ g_rte_def_font_size +";\n";
	if (typeof g_rte_def_font_color != "undefined")
		frameHtml += "color: "+ g_rte_def_font_color +";\n";
	frameHtml += "}\n";
	frameHtml += "p {margin-top:0;margin-bottom:0}\n";
	frameHtml += "table.rte tr td {border: 1px solid; padding: 10px;}\n";
	frameHtml += "</style>\n";
	frameHtml += "</head>\n";
	frameHtml += "<body>\n";
	if (html)
		frameHtml += html + "\n";
	frameHtml += "</body>\n";
	frameHtml += "</html>";

    // Check if idoc is an object and not a null value
    if(this.idoc)
    {
        this.idoc.open();
        this.idoc.write(frameHtml);
        this.idoc.close();
    }
}

/***********************************************************************************
 *
 *	Function: 	getHiddenInput
 *
 *	Purpose:	Get the input
 *
 ***********************************************************************************/
CRte.prototype.getHiddenInput = function()
{
	this.updateText();

    return this.hdntxt;
}

/***********************************************************************************
 *
 *	Function: 	setHeight
 *
 *	Purpose:	Set the height of iframe
 *
 ***********************************************************************************/
CRte.prototype.setHeight = function(height)
{
	this.ifrm.style.height = height;
}

/***********************************************************************************
 *
 *	Function: 	focus
 *
 *	Purpose:	Set the focus to the iframe
 *
 ***********************************************************************************/
CRte.prototype.focus = function(height)
{
	this.iwnd.focus();
}

/***********************************************************************************
 *
 *	Function: 	insertHtml
 *
 *	Purpose:	Update value in hidden text field
 *
 ***********************************************************************************/
CRte.prototype.insertHtml = function(html)
{
	if (alib.userAgent.ie) 
	{
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
		
		this.rteCommand('paste', html);
	}
	else
	{
		this.rteCommand('insertHtml', html);
	}
}

/***********************************************************************************
 *
 *	Function: 	enableDesign
 *
 *	Purpose:	Enable design mode in iframe
 *
 ***********************************************************************************/
CRte.prototype.enableDesign = function(html)
{
	this.setDocument();
    
    // If idoc is null, do not execute and return false
    if(!this.idoc || this.idoc == null)
        return false;
        
    
	this.setValue(html);

	if (alib.userAgent.ie) 
	{
		this.idoc.designMode = "On";
	} 
	else 
	{
		this.ifrm.contentDocument.designMode = "on";
		
		if (alib.userAgent.gecko || alib.userAgent.webkit) 
		{
			//attach a keyboard handler for gecko browsers to make keyboard shortcuts work
			//oRTE.addEventListener("keypress", kb_handler, true);
			this.idoc.body.spellcheck = true;
		}
	}
    
    return true;
}

/***********************************************************************************
 *
 *	Function: 	createToolbar
 *
 *	Purpose:	Create toolbar
 *
 ***********************************************************************************/
CRte.prototype.createToolbar = function(container)
{
	var me = this;

	var imgroot = alib.getBasePath();

	// Add toolbar
	// ------------------------------------------
	var tb = new CToolbar();
	tb.setClass("");
	tb.addIcon(imgroot + "/images/bold.gif", "left", function(cls) {cls.rteCommand('bold', ''); }, [me]);
	tb.addIcon(imgroot + "/images/italic.gif", "left", function(cls) {cls.rteCommand('italic', ''); }, [me]);
	tb.addIcon(imgroot + "/images/underline.gif", "left", function(cls) {cls.rteCommand('underline', ''); }, [me]);
	//tb.addSpacer();
	//tb.addIcon(imgroot + "/images/paste.gif", "left", function(cls) {cls.paste(); }, [me]);
	tb.addSpacer();
	tb.addIcon(imgroot + "/images/left_just.gif", "left", function(cls) {cls.rteCommand('justifyleft', ''); }, [me]);
	tb.addIcon(imgroot + "/images/centre.gif", "left", function(cls) {cls.rteCommand('justifycenter', ''); }, [me]);
	tb.addIcon(imgroot + "/images/right_just.gif", "left", function(cls) {cls.rteCommand('justifyright', ''); }, [me]);
	tb.addIcon(imgroot + "/images/justifyfull.gif", "left", function(cls) {cls.rteCommand('justifyfull', ''); }, [me]);
	tb.addSpacer();
	tb.addIcon(imgroot + "/images/hr.gif", "left", function(cls) {cls.rteCommand('inserthorizontalrule', ''); }, [me]);
	// Image
	if (typeof AntFsOpen == "undefined") // Check for ANT AntFsOpen
	{
		function imgdlg(cls)
		{
			cls.setRange();

			var dlg_p = new CDialog();
			dlg_p.m_rtfref = cls;
			
			dlg_p.onPromptOk = function(val)
			{
				this.m_rtfref.insertImage(val);
			}

			dlg_p.promptBox("Enter the URL of your image", "Insert Image", "");
		}
		

		tb.addIcon(imgroot + "/images/image.gif", "left", imgdlg, [this]);
	}
	else // Use ANT file system
	{
		var cbrowser = new AntFsOpen();
		cbrowser.filterType = "jpg:jpeg:png:gif";
		cbrowser.cbData.m_rtfref = this;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.cbData.m_rtfref.insertImage("http://" + document.domain + "/files/images/"+fid);
		}

		/*
		var cbrowser = new CFileOpen();
		cbrowser.filterType = "jpg:jpeg:png:gif";
		cbrowser.m_rtfref = this;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.m_rtfref.insertImage("http://" + document.domain + "/files/images/"+fid);
		}
		*/
		
		tb.addIcon(imgroot + "/images/image.gif", "left", function(cbrowser, cls) { cls.setRange(); cbrowser.showDialog(); }, [cbrowser, this]);
	}
	// Link
	function lnkdlg(cls)
	{
		cls.setRange();

		var dlg_p = new CDialog();
		dlg_p.m_rtfref = cls;
		
		dlg_p.onPromptOk = function(val)
		{
			this.m_rtfref.insertLink(val);
		}

		dlg_p.promptBox("Enter the link path", "Insert Link", "");
	}

	tb.addIcon(imgroot + "/images/hyperlink.gif", "left", lnkdlg, [this]);

	// table
	function instable(cls)
	{
		cls.setRange();
		cls.insertHtml("<table class='rte'><tbody><tr><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table>");
	}

	tb.addIcon(imgroot + "/images/insert_table.gif", "left", instable, [this]);

	tb.addSpacer();
	tb.addIcon(imgroot + "/images/numbered_list.gif", "left", function(cls) {cls.rteCommand('insertorderedlist', ''); }, [me]);
	tb.addIcon(imgroot + "/images/list.gif", "left", function(cls) {cls.rteCommand('insertunorderedlist', ''); }, [me]);
	tb.addSpacer();
	var dmcon = new CDropdownMenu();
	var dcon = dmcon.addCon();
	this.createToolbarFntColor(dcon);
	tb.AddItem(dmcon.createImageMenu(imgroot + "/images/textcolor.gif", imgroot + "/images/textcolor.gif", imgroot + "/images/textcolor.gif"));
	var dmcon = new CDropdownMenu();
	var dcon = dmcon.addCon();
	this.createToolbarHlColor(dcon);
	tb.AddItem(dmcon.createImageMenu(imgroot + "/images/bgcolor.gif", imgroot + "/images/bgcolor.gif", imgroot + "/images/bgcolor.gif"));
	tb.addSpacer();
	// Font
	var dmfnt = new CDropdownMenu();
	dmfnt.mRteCls = this;
	dmfnt.onmousedown = function() { this.mRteCls.setRange(); }
	dmfnt.tabIndex = -1;
	var fonts = ["Arial", "Georgia", "Tahoma", "Courier New", "Times New Roman", "Verdana"];
	for (var i = 0; i < fonts.length; i++)
		dmfnt.addEntry("<span style='font-family:"+fonts[i]+"'>"+fonts[i]+"</span>", function (cls, f) { cls.setFont("fontname", f); }, null, null, [this, fonts[i]]);
	tb.AddItem(dmfnt.createButtonMenu("Font"));
	// Size
	var dmsz = new CDropdownMenu();
	dmsz.mRteCls = this;
	dmsz.onmousedown = function() { this.mRteCls.setRange(); }
	dmsz.tabIndex = -1;
	var sizes = [[1, "Smallest"], [2, "X-Small"], [3, "Small"], [4, "Normal"], [5, "Large"], [6, "X-Large"], [7, "Huge"]];
	for (var i = 0; i < sizes.length; i++)
		dmsz.addEntry(sizes[i][1], function (cls, f) { cls.setFont("fontsize", f); }, null, null, [this, sizes[i][0]]);
	tb.AddItem(dmsz.createButtonMenu("Size"));
	// Style
	var dmst = new CDropdownMenu();
	dmst.mRteCls = this;
	dmst.onmousedown = function() { this.mRteCls.setRange(); }
	dmst.tabIndex = -1;
	var styles = [["Body / Normal", "formatblock", "<p>"], 
				  ["Heading 1", "FormatBlock", "<h1>"], 
				  ["Heading 2", "FormatBlock", "<h2>"], 
				  ["Heading 3", "FormatBlock", "<h3>"], 
				  ["Heading 4", "FormatBlock", "<h4>"], 
				  ["Heading 5", "FormatBlock", "<h5>"],
				  ["Quote", "FormatBlock", "<blockquote>"]];
	for (var i = 0; i < styles.length; i++)
		dmst.addEntry(styles[i][0], function (cls, func, val) { cls.setFont(func, val); }, null, null, [this, styles[i][1], styles[i][2]]);
	tb.AddItem(dmst.createButtonMenu("Styles"));
	tb.addSpacer();
	// Src
	tb.addIcon(imgroot + "/images/src.gif", "left", function(cls) {cls.toggleHtmlSrc(); }, [me]);
	tb.print(container);
	// Paste
	/*
	var dmpaste = new CDropdownMenu();
	dmpaste.mRteCls = this;
	dmpaste.onmousedown = function() { this.mRteCls.setRange(); }
	dmpaste.tabIndex = -1;
	dmpaste.addEntry("Paste", function (cls) { cls.paste(); }, null, null, [this]);
	dmpaste.addEntry("Paste Plain Text", function (cls) { cls.paste(true); }, null, null, [this]);
	tb.AddItem(dmpaste.createButtonMenu("Paste"));
	*/
}

/***********************************************************************************
 *
 *	Function: 	createToolbarFntColor
 *
 *	Purpose:	Create toolbar font color
 *
 ***********************************************************************************/
CRte.prototype.createToolbarFntColor = function(container)
{
	var me = this;

	var tbl = alib.dom.createElement("table", container);
	var tbody = alib.dom.createElement("tbody", tbl);

	var cntr = 0;
	var tr = alib.dom.createElement("tr", tbody);
	for (var i = 0; i < this.colors.length; i++)
	{
		var td = alib.dom.createElement("td", tr);
		td.menuref = container.menuref;
		td.clsref = me;
		td.clr = this.colors[i];
		alib.dom.styleSet(td, "background-color", "#"+this.colors[i]);
		alib.dom.styleSet(td, "width", "10px");
		alib.dom.styleSet(td, "height", "10px");
		alib.dom.styleSet(td, "border", "1px solid gray");
		td.onmousedown = function() { this.clsref.setRange(); }
		td.onmouseover = function() { this.style.border = '1px dotted white'; }
		td.onmouseout = function() { this.style.border = '1px solid gray'; }
		td.onclick = function() { this.clsref.setColor('forecolor', this.clr); this.menuref.unloadMe(); }

		cntr++;

		if (cntr >= 10)
		{
			var cntr = 0;
			var tr = alib.dom.createElement("tr", tbody);
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	createToolbarHlColor
 *
 *	Purpose:	Create toolbar highlight color
 *
 ***********************************************************************************/
CRte.prototype.createToolbarHlColor = function(container)
{
	var me = this;

	container.clsref = this;

	var tbl = alib.dom.createElement("table", container);
	var tbody = alib.dom.createElement("tbody", tbl);

	var cntr = 0;
	var tr = alib.dom.createElement("tr", tbody);
	for (var i = 0; i < this.colors.length; i++)
	{
		var td = alib.dom.createElement("td", tr);
		td.menuref = container.menuref;
		td.clsref = me;
		td.clr = this.colors[i];
		alib.dom.styleSet(td, "background-color", "#"+this.colors[i]);
		alib.dom.styleSet(td, "width", "10px");
		alib.dom.styleSet(td, "height", "10px");
		alib.dom.styleSet(td, "border", "1px solid gray");
		td.onmousedown = function() { this.clsref.setRange(); }
		td.onmouseover = function() { this.style.border = '1px dotted white'; }
		td.onmouseout = function() { this.style.border = '1px solid gray'; }
		td.onclick = function() { this.clsref.setColor('hilitecolor', this.clr); this.menuref.unloadMe(); }

		cntr++;

		if (cntr >= 10)
		{
			var cntr = 0;
			var tr = alib.dom.createElement("tr", tbody);
		}
	}
}

/***********************************************************************************
 *
 *	Function: 	setColor
 *
 *	Purpose:	Set hilight or foreground color
 *
 ***********************************************************************************/
CRte.prototype.setColor = function(cmd, color)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}

		cmd = (cmd == "hilitecolor") ? "backcolor" : cmd;
		
	}

	this.rteCommand(cmd, "#"+color);
}

/***********************************************************************************
 *
 *	Function: 	setFont
 *
 *	Purpose:	Set Font Name
 *
 ***********************************************************************************/
CRte.prototype.setFont = function(cmd, font)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand(cmd, font);
}

/***********************************************************************************
 *
 *	Function: 	insertImage
 *
 *	Purpose:	Insert an image
 *
 ***********************************************************************************/
CRte.prototype.insertImage = function(path)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand("InsertImage", path);
}


/***********************************************************************************
 *
 *	Function: 	insertLink
 *
 *	Purpose:	Create or activate a link
 *
 ***********************************************************************************/
CRte.prototype.insertLink = function(path)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand("Unlink", null);
	this.rteCommand("CreateLink", path);
}

/***********************************************************************************
 *
 *	Function: 	paste
 *
 *	Purpose:	Paste contents of clipoard
 *
 ***********************************************************************************/
CRte.prototype.paste = function(convertoplain)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand("Paste", null);
}

/***********************************************************************************
 *
 *	Function: 	setRange
 *
 *	Purpose:	Set and store selection range
 *
 ***********************************************************************************/
CRte.prototype.setRange = function()
{
	//function to store range of current selection
	if (alib.userAgent.ie) 
	{
		var selection = this.idoc.selection; 
		if (selection != null) this.rng = selection.createRange();
	} 
	else 
	{
		var selection = this.iwnd.getSelection();
		this.rng = selection.getRangeAt(selection.rangeCount - 1).cloneRange();
	}
}

/***********************************************************************************
 *
 *	Function: 	rteCommand
 *
 *	Purpose:	Issue commands to the iframe window
 *
 *	Arguments:	1. command:string - name of command to run
 *				2. option:string - value to pass with command
 *
 ***********************************************************************************/
CRte.prototype.rteCommand = function(command, option)
{
	try 
	{
		this.iwnd.focus();
	  	this.idoc.execCommand(command, false, option);
		this.iwnd.focus();
	} 
	catch (e) 
	{
		alert(e);
	}
}

/***********************************************************************************
 *
 *	Function: 	stripHtml
 *
 *	Purpose:	Remove all html for pasting as plain text
 *
 *	Arguments:	1. command:string - name of command to run
 *				2. option:string - value to pass with command
 *
 ***********************************************************************************/
CRte.prototype.paste = function()
{
	this.setRange();
	this.rteCommand("Paste", false);
	/*
	try 
	{
		var re= /<\S[^><]*>/g
		arguments[i].value=arguments[i].value.replace(re, "")
	} 
	catch (e) 
	{
		alert(e);
	}
	*/
}

/***********************************************************************************
 *
 *	Function: 	setElementHtml
 *
 *	Purpose:	Replace the innerhtml of an element by id
 *
 *	Arguments:	1. id:string - id of element
 *				2. html:string - value to place in element innerHTML
 *
 ***********************************************************************************/
CRte.prototype.setElementHtml = function(id, html)
{
	// TODO: IE seems to have trouble with timeing and finding the element
	if(alib.userAgent.ie)
	{
		var e = this.idoc.getElementById(id);
	}
	else
		var e = this.ifrm.contentDocument.getElementById(id);
	if (e)
		e.innerHTML = html;
	/*
	try 
	{
	} 
	catch (e) 
	{
	}
	*/
}



/***********************************************************************************
 *
 *	Function: 	toggleHtmlSrc
 *
 *	Purpose:	Toggle HTML Source
 *
 ***********************************************************************************/
CRte.prototype.toggleHtmlSrc = function()
{
	if (this.f_src)
	{
		if (alib.userAgent.ie) 
		{
			//fix for IE
			var output = escape_utf8(this.idoc.body.innerText);
			output = output.replace("%3CP%3E%0D%0A%3CHR%3E", "%3CHR%3E");
			output = output.replace("%3CHR%3E%0D%0A%3C/P%3E", "%3CHR%3E");
			
			this.idoc.body.innerHTML = unescape_utf8(output);
		} 
		else 
		{
			var htmlSrc = this.idoc.body.ownerDocument.createRange();
			htmlSrc.selectNodeContents(this.idoc.body);
			this.idoc.body.innerHTML = htmlSrc.toString();
		}

		this.f_src = false;
	}
	else
	{
		if (alib.userAgent.ie) 
		{
			this.idoc.body.innerText = this.idoc.body.innerHTML;
		} 
		else 
		{
			var htmlSrc = this.idoc.createTextNode(this.idoc.body.innerHTML);
			this.idoc.body.innerHTML = "";
			this.idoc.body.appendChild(htmlSrc);
		}

		this.f_src = true;
	}
}

/***********************************************************************************
 *
 *	Function: 	print
 *
 *	Purpose:	Print rte
 *
 ***********************************************************************************/
CRte.prototype.print = function(container, width, height, html)
{
	if (container)
	{
		this.createToolbar(container);
		container.appendChild(this.ifrm);

		if (width)
			this.ifrm.style.width = width;
		if (height)
			this.ifrm.style.height = height;

		var htm = (typeof html != 'undefined') ? html : '';

        // Check return if false
		if(!this.enableDesign(htm))
            return false; // do not execute if idoc is null
        
		var me = this;
		var bcb = function()
		{
			if (alib.userAgent.ie && !me.rng) 
			{
				me.setRange()
				//retrieve selected range
				var sel = me.idoc.selection; 
				if (sel != null) 
				{
					var newRng = sel.createRange();
					newRng = me.rng;
					newRng.select();
				}
			}
			me.updateText();
			me.onChange();
		}

		if(alib.userAgent.ie)
			this.ifrm.attachEvent("onblur", bcb);
		else
		{
			this.iwnd.addEventListener("blur",bcb,false);
			var cd = this.iwnd;
			this.ifrm.addEventListener("load",function(){ cd.addEventListener("blur",bcb,false); } ,false);
		}

		var br = alib.dom.createElement("br");
		container.appendChild(br);
		container.appendChild(this.hdntxt);
	}
}

/*======================================================================================
	
	Module:		CEffect

	Purpose:	Handle visual effects

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2008 Aereus Corporation. All rights reserved.
	
	Usage:		

======================================================================================*/

function CEffect()
{
	this.m_browser = null; // Browser Information
}

CEffect.prototype.round = function(element, sizex, sizey, sizex_b, sizex_y)
{
	if (typeof(element) == "string")
		element = alib.dom.getElementById(element);

	if (typeof(sizey) == 'undefined')
		sizey = sizex;

	if (typeof(sizex_b) == 'undefined')
		sizex_b = sizex;

	if (typeof(sizex_y) == 'undefined')
		sizex_y = sizey;
	
	var settings = 
	{
          tl: { radius: sizex },
          tr: { radius: sizey },
          bl: { radius: sizex_b },
          br: { radius: sizex_y },
          antiAlias: true,
          autoPad: true,
          validTags: ["div"]
	}

	/*
	Usage:

	newCornersObj = new curvyCorners(settingsObj, classNameStr);
	newCornersObj = new curvyCorners(settingsObj, divObj1[, divObj2[, divObj3[, . . . [, divObjN]]]]);
	*/
	var myBoxObject = new curvyCorners(settings, element);
	myBoxObject.applyCornersToAll();
}

CEffect.prototype.fadein = function(element, time_ms, max, min)
{
	if (typeof(element) == "string")
		element = alib.dom.getElementById(element);
	if (typeof(max) == "undefined")
		var max = 100;
	if (typeof(min) == "undefined")
		var min = 0;

	// Clear any fades that are in progress
	if (element.ce_fade_timer)
		clearTimeout(element.ce_fade_timer);

	if (time_ms == -1) // fade in instantly
	{
		element.style.opacity = max;
		element.style.filter = 'alpha(opacity = ' + max + ')';
	}
	else
	{
		element.style.opacity = min;
		element.style.filter = 'alpha(opacity = ' + min + ')';
		element.FadeState = -2;
		this.fade(element, time_ms, max, min);
	}
}

CEffect.prototype.fadeout = function(element, time_ms, max, min)
{
	if (typeof(element) == "string")
		element = alib.dom.getElementById(element);
	if (typeof(max) == "undefined")
		var max = 100;
	if (typeof(min) == "undefined")
		var min = 0;

	element.style.opacity = max;
	element.style.filter = 'alpha(opacity = ' + max + ')';
	element.FadeState = 2;
	this.fade(element, time_ms, max, min);
}

CEffect.prototype.fade = function(element, time_ms, max, min)
{
	if (typeof(element) == "string")
		element = alib.dom.getElementById(element);
	if (typeof(max) == "undefined")
		var max = 1;
	if (typeof(min) == "undefined")
		var min = 0;

	if(element == null)
		return;

	if (typeof element.onFadeFinished == "undefined")
		element.onFadeFinished = function () {};

	if(element.FadeState == null)
	{
		if(element.style.opacity == null
		   || element.style.opacity == ''
		   || element.style.opacity == '1')
		{
			element.FadeState = 2;
		}
		else
		{
			element.FadeState = -2;
		}
	}

	element.animateFade = function(lastTick)
	{
		var curTick = new Date().getTime();
		var elapsedTicks = curTick - lastTick;

		var element = this;

		if(element.FadeTimeLeft <= elapsedTicks)
		{
			element.style.opacity = element.FadeState == 1 ? max : min;
			element.style.filter = 'alpha(opacity = ' + (element.FadeState == 1 ? max : min) + ')';
			element.FadeState = element.FadeState == 1 ? 2 : -2;
			element.onFadeFinished();
			element.ce_fade_timer = null;
			return;
		}

		element.FadeTimeLeft -= elapsedTicks;
		var newOpVal = element.FadeTimeLeft/time_ms;
		if(element.FadeState == 1)
			newOpVal = max - newOpVal;

		element.style.opacity = newOpVal;
		element.style.filter = 'alpha(opacity = ' + (newOpVal*100) + ')';

		setTimeout(function() { element.animateFade(curTick); }, 33);
	}

	if(element.FadeState == 1 || element.FadeState == -1)
	{
		element.FadeState = element.FadeState == 1 ? -1 : 1;
		element.FadeTimeLeft = time_ms - element.FadeTimeLeft;
	}
	else
	{
		element.FadeState = element.FadeState == 2 ? -1 : 1;
		element.FadeTimeLeft = time_ms;
		element.ce_fade_timer = setTimeout(function() { element.animateFade(new Date().getTime()); }, 33);
	} 
}

// Eventually we will move to alib.fx namespace, but for now this is a work-around
alib.Effect = new CEffect();

/*
CEffect.prototype.round = function(element, sizex, sizey, sizex_b, sizex_y)
{
	if (typeof(element) == "string")
		element = alib.dom.getElementById(element);

	if (typeof(sizex_b) == 'undefined')
		var sizex_b = sizex;

	if (typeof(sizey_b) == 'undefined')
		var sizey_b = sizey;

	/*
	var pdiv = alib.dom.createElement("div");
	if (element.parentNode)
	{
		for (var i = 0; i < element.style.length; i++)
		{
			//ALib.trace(element.style[i] + ": " + alib.dom.styleGet(element, element.style[i]));
			if (element.style[i] != 'background-color' && element.style[i] != 'height')
			{
				alib.dom.styleSet(pdiv, element.style[i], alib.dom.styleGet(element, element.style[i]));
				alib.dom.styleSet(element, element.style[i], '');
			}
		}

		insertAfter(element.parentNode, pdiv, element);

		var color = alib.dom.styleGet(element,"background-color");

		element.parentNode.removeChild(element);
		pdiv.appendChild(element);

		this.addRoundCorner(pdiv, "transparent", color, sizex, sizey, true);
		this.addRoundCorner(pdiv, "transparent", color, sizex_b, sizey_b, false);
	}
	* /

	var bdiv = alib.dom.createElement("div");
	// Copy child nodes to body div
		ALib.trace("GEtting Children = " + element.childNodes.length);
	for (var i = 0; i < element.childNodes.length; i++)
	{
		ALib.trace(element.childNodes.item(i));
		bdiv.appendChild(element.childNodes.item(i));
	}
	// Remove child nodes
	for (var i = element.childNodes.length - 1; i >= 0; i--)
	{
		element.removeChild(element.childNodes.item(i));
	}
		ALib.trace("Copied Children");
	
	var color = alib.dom.styleGet(element,"background-color");
	var bk =  alib.dom.styleGet(element.parentNode,"background-color");

	this.addRoundCorner(element, bk, color, sizex, sizey, true);

	element.appendChild(bdiv);

	this.addRoundCorner(element, bk, color, sizex_b, sizey_b, false);

	// Copy styles
	alib.dom.styleSet(bdiv, "background-color", color);
	alib.dom.styleSet(element, "background-color", "transparent");

	var height = alib.dom.styleGet(element,"height");
	if (height)
	{
		alib.dom.styleSet(bdiv, "height", height);
		alib.dom.styleSet(element, "height", "");
	}
}

CEffect.prototype.addRoundCorner = function(el, bk, color, sizex, sizey, top)
{
	if (!sizex && !sizey) return;

	var i, j;
	var d = alib.dom.createElement("div");
	d.style.backgroundColor = bk;
	var lastarc = 0;

	for (i = 1; i <= sizey; i++) 
	{
		var coverage, arc2, arc3;
		// Find intersection of arc with bottom of pixel row
		arc = Math.sqrt(1.0 - Math.sqr(1.0 - i / sizey)) * sizex;
		// Calculate how many pixels are bg, fg and blended.
		var n_bg = sizex - Math.ceil(arc);
		var n_fg = Math.floor(lastarc);
		var n_aa = sizex - n_bg - n_fg;
		// Create pixel row wrapper
		var x = alib.dom.createElement("div");
		var y = d;
		x.style.margin = "0px " + n_bg + "px";
		x.style.height='1px';
		x.style.overflow='hidden';

		// Make a wrapper per anti-aliased pixel (at least one)
		for (j = 1; j <= n_aa; j++) 
		{
			// Calculate coverage per pixel
			// (approximates circle by a line within the pixel)
			if (j == 1) 
			{
				if (j == n_aa) 
				{
					// Single pixel
					coverage = ((arc + lastarc) * .5) - n_fg;
				}
				else 
				{
					// First in a run
					arc2 = Math.sqrt(1.0 - Math.sqr((sizex - n_bg - j + 1) / sizex)) * sizey;
					coverage = (arc2 - (sizey - i)) * (arc - n_fg - n_aa + 1) * .5;
					// Coverage is incorrect. Why?
					coverage = 0;
				}
			}
		  	else if (j == n_aa) 
			{
				// Last in a run
				arc2 = Math.sqrt(1.0 - Math.sqr((sizex - n_bg - j + 1) / sizex)) * sizey;
				coverage = 1.0 - (1.0 - (arc2 - (sizey - i))) * (1.0 - (lastarc - n_fg)) * .5;
		  	}
		  	else 
			{
				// Middle of a run
				arc3 = Math.sqrt(1.0 - Math.sqr((sizex - n_bg - j) / sizex)) * sizey;
				arc2 = Math.sqrt(1.0 - Math.sqr((sizex - n_bg - j + 1) / sizex)) * sizey;
				coverage = ((arc2 + arc3) * .5) - (sizey - i);
		  	}
		  
			x.style.backgroundColor = this.blend(bk, color, coverage);
			if (top)
				y.appendChild(x);
			else
				y.insertBefore(x, y.firstChild);

			y = x;
			var x = alib.dom.createElement("div");
			x.style.height='1px';
			x.style.overflow='hidden';
			x.style.margin = "0px 1px";
		}

		x.style.backgroundColor = color;
		if (top)
			y.appendChild(x);
		else
			y.insertBefore(x, y.firstChild);

		lastarc = arc;
	}
	if (top)
		el.insertBefore(d, el.firstChild);
	else
		el.appendChild(d);
}

CEffect.prototype.blend = function(a, b, alpha)
{
	var ca = Array(
		parseInt('0x' + a.substring(1, 3)), 
		parseInt('0x' + a.substring(3, 5)), 
		parseInt('0x' + a.substring(5, 7))
  	);
  	
	var cb = Array(
		parseInt('0x' + b.substring(1, 3)), 
		parseInt('0x' + b.substring(3, 5)), 
		parseInt('0x' + b.substring(5, 7))
  	);

	return '#' + ('0'+Math.round(ca[0] + (cb[0] - ca[0])*alpha).toString(16)).slice(-2).toString(16)
			   + ('0'+Math.round(ca[1] + (cb[1] - ca[1])*alpha).toString(16)).slice(-2).toString(16)
			   + ('0'+Math.round(ca[2] + (cb[2] - ca[2])*alpha).toString(16)).slice(-2).toString(16);

	return '#' + ('0'+Math.round(ca[0] + (cb[0] - ca[0])*alpha).toString(16)).slice(-2).toString(16)
			   + ('0'+Math.round(ca[1] + (cb[1] - ca[1])*alpha).toString(16)).slice(-2).toString(16)
			   + ('0'+Math.round(ca[2] + (cb[2] - ca[2])*alpha).toString(16)).slice(-2).toString(16);
}
*/


 /****************************************************************
  *                                                              *
  *  curvyCorners                                                *
  *  ------------                                                *
  *                                                              *
  *  This script generates rounded corners for your divs.        *
  *                                                              *
  *  Version 1.2.9                                               *
  *  Copyright (c) 2006 Cameron Cooke                            *
  *  By: Cameron Cooke and Tim Hutchison.                        *
  *                                                              *
  *                                                              *
  *  Website: http://www.curvycorners.net                        *
  *  Email:   info@totalinfinity.com                             *
  *  Forum:   http://www.curvycorners.net/forum/                 *
  *                                                              *
  *                                                              *
  *  This library is free software; you can redistribute         *
  *  it and/or modify it under the terms of the GNU              *
  *  Lesser General Public License as published by the           *
  *  Free Software Foundation; either version 2.1 of the         *
  *  License, or (at your option) any later version.             *
  *                                                              *
  *  This library is distributed in the hope that it will        *
  *  be useful, but WITHOUT ANY WARRANTY; without even the       *
  *  implied warranty of MERCHANTABILITY or FITNESS FOR A        *
  *  PARTICULAR PURPOSE. See the GNU Lesser General Public       *
  *  License for more details.                                   *
  *                                                              *
  *  You should have received a copy of the GNU Lesser           *
  *  General Public License along with this library;             *
  *  Inc., 59 Temple Place, Suite 330, Boston,                   *
  *  MA 02111-1307 USA                                           *
  *                                                              *
  ****************************************************************/

  // Browser detection
  var isIE     = navigator.userAgent.toLowerCase().indexOf("msie") > -1;
  var isMoz    = document.implementation && document.implementation.createDocument;
  var isSafari = ((navigator.userAgent.toLowerCase().indexOf('safari')!=-1)&&(navigator.userAgent.toLowerCase().indexOf('mac')!=-1))?true:false;

  /*
  Usage:

  newCornersObj = new curvyCorners(settingsObj, "classNameStr");
  newCornersObj = new curvyCorners(settingsObj, divObj1[, divObj2[, divObj3[, . . . [, divObjN]]]]);
  */
  function curvyCorners()
  {
      // Check parameters
      if(typeof(arguments[0]) != "object") throw newCurvyError("First parameter of curvyCorners() must be an object.");
      if(typeof(arguments[1]) != "object" && typeof(arguments[1]) != "string") throw newCurvyError("Second parameter of curvyCorners() must be an object or a class name.");

      // Get object(s)
      if(typeof(arguments[1]) == "string")
      {
          // Get elements by class name
          var startIndex = 0;
          var boxCol = getElementsByClass(arguments[1]);
      }
      else
      {
          // Get objects
          var startIndex = 1;
          var boxCol = arguments;
      }

      // Create return collection/object
      var curvyCornersCol = new Array();

      // Create array of html elements that can have rounded corners
      if(arguments[0].validTags)
        var validElements = arguments[0].validTags;
      else
        var validElements = ["div"]; // Default

      // Loop through each argument
      for(var i = startIndex, j = boxCol.length; i < j; i++)
      {
          // Current element tag name
          var currentTag = boxCol[i].tagName.toLowerCase();

          if(inArray(validElements, currentTag) !== false)
          {
              curvyCornersCol[curvyCornersCol.length] = new curvyObject(arguments[0], boxCol[i]);
          }
      }

      this.objects = curvyCornersCol;

      // Applys the curvyCorners to all objects
      this.applyCornersToAll = function()
      {
          for(var x = 0, k = this.objects.length; x < k; x++)
          {
              this.objects[x].applyCorners();
          }
      }
  }

  // curvyCorners object (can be called directly)
  function curvyObject()
  {
      // Setup Globals
      this.box              = arguments[1];
      this.settings         = arguments[0];
      this.topContainer     = null;
      this.bottomContainer  = null;
      this.masterCorners    = new Array();
      this.contentDIV       = null;

      // Get box formatting details
      var boxHeight       = get_style(this.box, "height", "height");
      var boxWidth        = get_style(this.box, "width", "width");
      var borderWidth     = get_style(this.box, "borderTopWidth", "border-top-width");
      var borderColour    = get_style(this.box, "borderTopColor", "border-top-color");
      var boxColour       = get_style(this.box, "backgroundColor", "background-color");
      var backgroundImage = get_style(this.box, "backgroundImage", "background-image");
      var boxPosition     = get_style(this.box, "position", "position");
      var boxPadding      = get_style(this.box, "paddingTop", "padding-top");

      // Set formatting propertes
      this.boxHeight       = parseInt(((boxHeight && boxHeight != "" && boxHeight != "auto" && boxHeight.indexOf("%") == -1)? boxHeight.substring(0, boxHeight.indexOf("px")) : this.box.scrollHeight));
      this.boxWidth        = parseInt(((boxWidth != "" && boxWidth != "auto" && boxWidth.indexOf("%") == -1)? boxWidth.substring(0, boxWidth.indexOf("px")) : this.box.scrollWidth));
      this.borderWidth     = parseInt(((borderWidth && borderWidth != "" && borderWidth.indexOf("px") !== -1)? borderWidth.slice(0, borderWidth.indexOf("px")) : 0));
      this.boxColour       = format_colour(boxColour);
      this.boxPadding      = parseInt(((boxPadding && boxPadding != "" && boxPadding.indexOf("px") !== -1)? boxPadding.slice(0, boxPadding.indexOf("px")) : 0));
      this.borderColour    = format_colour(borderColour);
      this.borderString    = this.borderWidth + "px" + " solid " + this.borderColour;
      this.backgroundImage = ((backgroundImage != "none")? backgroundImage : "");
      this.boxContent      = this.box.innerHTML;

      // Make box relative if not already absolute and remove any padding
      if(boxPosition != "absolute") this.box.style.position = "relative";
      this.box.style.padding = "0px";

      // If IE and height and width are not set, we need to set width so that we get positioning
      if(isIE && boxWidth == "auto" && boxHeight == "auto") this.box.style.width = "100%";

      // Resize box so that it stays to the orignal height


      // Remove content if box is using autoPad
      if(this.settings.autoPad == true && this.boxPadding > 0)
        this.box.innerHTML = "";

      /*
      This method creates the corners and
      applies them to the div element.
      */
      this.applyCorners = function()
      {
          /*
          Create top and bottom containers.
          These will be used as a parent for the corners and bars.
          */
          for(var t = 0; t < 2; t++)
          {
              switch(t)
              {
                  // Top
                  case 0:

                      // Only build top bar if a top corner is to be draw
                      if(this.settings.tl || this.settings.tr)
                      {
                          var newMainContainer = alib.dom.createElement("DIV");
                          newMainContainer.style.width    = "100%";
                          newMainContainer.style.fontSize = "1px";
                          newMainContainer.style.overflow = "hidden";
                          newMainContainer.style.position = "absolute";
                          newMainContainer.style.paddingLeft  = this.borderWidth + "px";
                          newMainContainer.style.paddingRight = this.borderWidth + "px";
                          var topMaxRadius = Math.max(this.settings.tl ? this.settings.tl.radius : 0, this.settings.tr ? this.settings.tr.radius : 0);
                          newMainContainer.style.height = topMaxRadius + "px";
                          newMainContainer.style.top    = 0 - topMaxRadius + "px";
                          newMainContainer.style.left   = 0 - this.borderWidth + "px";
                          this.topContainer = this.box.appendChild(newMainContainer);
                      }
                      break;

                  // Bottom
                  case 1:

                      // Only build bottom bar if a top corner is to be draw
                      if(this.settings.bl || this.settings.br)
                      {
                          var newMainContainer = alib.dom.createElement("DIV");
                          newMainContainer.style.width    = "100%";
                          newMainContainer.style.fontSize = "1px";
                          newMainContainer.style.overflow = "hidden";
                          newMainContainer.style.position = "absolute";
                          newMainContainer.style.paddingLeft  = this.borderWidth + "px";
                          newMainContainer.style.paddingRight = this.borderWidth + "px";
                          var botMaxRadius = Math.max(this.settings.bl ? this.settings.bl.radius : 0, this.settings.br ? this.settings.br.radius : 0);
                          newMainContainer.style.height  = botMaxRadius + "px";
                          newMainContainer.style.bottom  =  0 - botMaxRadius + "px";
                          newMainContainer.style.left    =  0 - this.borderWidth + "px";
                          this.bottomContainer = this.box.appendChild(newMainContainer);
                      }
                      break;
              }
          }

          // Turn off current borders
          if(this.topContainer) this.box.style.borderTopWidth = "0px";
          if(this.bottomContainer) this.box.style.borderBottomWidth = "0px";

          // Create array of available corners
          var corners = ["tr", "tl", "br", "bl"];

          /*
          Loop for each corner
          */
          for(var i in corners)
          {
              // FIX for prototype lib
              if(i > -1 < 4)
              {
                  // Get current corner type from array
                  var cc = corners[i];

                  // Has the user requested the currentCorner be round?
                  if(!this.settings[cc])
                  {
                      // No
                      if(((cc == "tr" || cc == "tl") && this.topContainer != null) || ((cc == "br" || cc == "bl") && this.bottomContainer != null))
                      {
                          // We need to create a filler div to fill the space upto the next horzontal corner.
                          var newCorner = alib.dom.createElement("DIV");

                          // Setup corners properties
                          newCorner.style.position = "relative";
                          newCorner.style.fontSize = "1px";
                          newCorner.style.overflow = "hidden";

                          // Add background image?
                          if(this.backgroundImage == "")
                            newCorner.style.backgroundColor = this.boxColour;
                          else
                            newCorner.style.backgroundImage = this.backgroundImage;

                          switch(cc)
                          {
                              case "tl":
                                  newCorner.style.height      = topMaxRadius - this.borderWidth + "px";
                                  newCorner.style.marginRight = this.settings.tr.radius - (this.borderWidth*2) + "px";
                                  newCorner.style.borderLeft  = this.borderString;
                                  newCorner.style.borderTop   = this.borderString;
                                  newCorner.style.left        = -this.borderWidth + "px";
                                  break;

                              case "tr":
                                  newCorner.style.height      = topMaxRadius - this.borderWidth + "px";
                                  newCorner.style.marginLeft  = this.settings.tl.radius - (this.borderWidth*2) + "px";
                                  newCorner.style.borderRight = this.borderString;
                                  newCorner.style.borderTop   = this.borderString;
                                  newCorner.style.backgroundPosition  = "-" + (topMaxRadius + this.borderWidth) + "px 0px";
                                  newCorner.style.left        = this.borderWidth + "px";
                                  break;

                              case "bl":
                                  newCorner.style.height       = botMaxRadius - this.borderWidth + "px";
                                  newCorner.style.marginRight  = this.settings.br.radius - (this.borderWidth*2) + "px";
                                  newCorner.style.borderLeft   = this.borderString;
                                  newCorner.style.borderBottom = this.borderString;
                                  newCorner.style.left         = -this.borderWidth + "px";
                                  newCorner.style.backgroundPosition = "-" + (this.borderWidth) + "px -" + (this.boxHeight + (botMaxRadius + this.borderWidth)) + "px";
                                  break;

                              case "br":
                                  newCorner.style.height       = botMaxRadius - this.borderWidth + "px";
                                  newCorner.style.marginLeft   = this.settings.bl.radius - (this.borderWidth*2) + "px";
                                  newCorner.style.borderRight  = this.borderString;
                                  newCorner.style.borderBottom = this.borderString;
                                  newCorner.style.left         = this.borderWidth + "px"
                                  newCorner.style.backgroundPosition = "-" + (botMaxRadius + this.borderWidth) + "px -" + (this.boxHeight + (botMaxRadius + this.borderWidth)) + "px";
                                  break;
                          }
                      }
                  }
                  else
                  {
                      /*
                      PERFORMANCE NOTE:

                      If more than one corner is requested and a corner has been already
                      created for the same radius then that corner will be used as a master and cloned.
                      The pixel bars will then be repositioned to form the new corner type.
                      All new corners start as a bottom right corner.
                      */
                      if(this.masterCorners[this.settings[cc].radius])
                      {
                          // Create clone of the master corner
                          var newCorner = this.masterCorners[this.settings[cc].radius].cloneNode(true);
                      }
                      else
                      {
                          // Yes, we need to create a new corner
                          var newCorner = alib.dom.createElement("DIV");
                          newCorner.style.height = this.settings[cc].radius + "px";
                          newCorner.style.width  = this.settings[cc].radius + "px";
                          newCorner.style.position = "absolute";
                          newCorner.style.fontSize = "1px";
                          newCorner.style.overflow = "hidden";

                          // THE FOLLOWING BLOCK OF CODE CREATES A ROUNDED CORNER
                          // ---------------------------------------------------- TOP

                          // Get border radius
                          var borderRadius = parseInt(this.settings[cc].radius - this.borderWidth);

                          // Cycle the x-axis
                          for(var intx = 0, j = this.settings[cc].radius; intx < j; intx++)
                          {
                              // Calculate the value of y1 which identifies the pixels inside the border
                              if((intx +1) >= borderRadius)
                                var y1 = -1;
                              else
                                var y1 = (Math.floor(Math.sqrt(Math.pow(borderRadius, 2) - Math.pow((intx+1), 2))) - 1);

                              // Only calculate y2 and y3 if there is a border defined
                              if(borderRadius != j)
                              {
                                  if((intx) >= borderRadius)
                                    var y2 = -1;
                                  else
                                    var y2 = Math.ceil(Math.sqrt(Math.pow(borderRadius,2) - Math.pow(intx, 2)));

                                  if((intx+1) >= j)
                                    var y3 = -1;
                                  else
                                    var y3 = (Math.floor(Math.sqrt(Math.pow(j ,2) - Math.pow((intx+1), 2))) - 1);
                              }

                              // Calculate y4
                              if((intx) >= j)
                                var y4 = -1;
                              else
                                var y4 = Math.ceil(Math.sqrt(Math.pow(j ,2) - Math.pow(intx, 2)));

                              // Draw bar on inside of the border with foreground colour
                              if(y1 > -1) this.drawPixel(intx, 0, this.boxColour, 100, (y1+1), newCorner, -1, this.settings[cc].radius);

                              // Only draw border/foreground antialiased pixels and border if there is a border defined
                              if(borderRadius != j)
                              {
                                  // Cycle the y-axis
                                  for(var inty = (y1 + 1); inty < y2; inty++)
                                  {
                                      // Draw anti-alias pixels
                                      if(this.settings.antiAlias)
                                      {
                                          // For each of the pixels that need anti aliasing between the foreground and border colour draw single pixel divs
                                          if(this.backgroundImage != "")
                                          {
                                              var borderFract = (pixelFraction(intx, inty, borderRadius) * 100);

                                              if(borderFract < 30)
                                              {
										                                        this.drawPixel(intx, inty, this.borderColour, 100, 1, newCorner, 0, this.settings[cc].radius);
                                              }
									                                     else
                                              {
									                                         this.drawPixel(intx, inty, this.borderColour, 100, 1, newCorner, -1, this.settings[cc].radius);
                                              }
                                          }
                                          else
                                          {
                                              var pixelcolour = BlendColour(this.boxColour, this.borderColour, pixelFraction(intx, inty, borderRadius));
                                              this.drawPixel(intx, inty, pixelcolour, 100, 1, newCorner, 0, this.settings[cc].radius, cc);
                                          }
                                      }
                                  }

                                  // Draw bar for the border
                                  if(this.settings.antiAlias)
                                  {
                                      if(y3 >= y2)
                                      {
                                         if (y2 == -1) y2 = 0;
                                         this.drawPixel(intx, y2, this.borderColour, 100, (y3 - y2 + 1), newCorner, 0, 0);
                                      }
                                  }
                                  else
                                  {
                                      if(y3 >= y1)
                                      {
                                          this.drawPixel(intx, (y1 + 1), this.borderColour, 100, (y3 - y1), newCorner, 0, 0);
                                      }
                                  }

                                  // Set the colour for the outside curve
                                  var outsideColour = this.borderColour;
                              }
                              else
                              {
                                  // Set the coour for the outside curve
                                  var outsideColour = this.boxColour;
                                  var y3 = y1;
                              }

                              // Draw aa pixels?
                              if(this.settings.antiAlias)
                              {
                                  // Cycle the y-axis and draw the anti aliased pixels on the outside of the curve
                                  for(var inty = (y3 + 1); inty < y4; inty++)
                                  {
                                      // For each of the pixels that need anti aliasing between the foreground/border colour & background draw single pixel divs
                                      this.drawPixel(intx, inty, outsideColour, (pixelFraction(intx, inty , j) * 100), 1, newCorner, ((this.borderWidth > 0)? 0 : -1), this.settings[cc].radius);
                                  }
                              }
                          }

                          // END OF CORNER CREATION
                          // ---------------------------------------------------- END

                          // We now need to store the current corner in the masterConers array
                          this.masterCorners[this.settings[cc].radius] = newCorner.cloneNode(true);
                      }

                      /*
                      Now we have a new corner we need to reposition all the pixels unless
                      the current corner is the bottom right.
                      */
                      if(cc != "br")
                      {
                          // Loop through all children (pixel bars)
                          for(var t = 0, k = newCorner.childNodes.length; t < k; t++)
                          {
                              // Get current pixel bar
                              var pixelBar = newCorner.childNodes[t];

                              // Get current top and left properties
                              var pixelBarTop    = parseInt(pixelBar.style.top.substring(0, pixelBar.style.top.indexOf("px")));
                              var pixelBarLeft   = parseInt(pixelBar.style.left.substring(0, pixelBar.style.left.indexOf("px")));
                              var pixelBarHeight = parseInt(pixelBar.style.height.substring(0, pixelBar.style.height.indexOf("px")));

                              // Reposition pixels
                              if(cc == "tl" || cc == "bl"){
                                  pixelBar.style.left = this.settings[cc].radius -pixelBarLeft -1 + "px"; // Left
                              }
                              if(cc == "tr" || cc == "tl"){
                                  pixelBar.style.top =  this.settings[cc].radius -pixelBarHeight -pixelBarTop + "px"; // Top
                              }

                              switch(cc)
                              {
                                  case "tr":
                                      pixelBar.style.backgroundPosition  = "-" + Math.abs((this.boxWidth - this.settings[cc].radius + this.borderWidth) + pixelBarLeft) + "px -" + Math.abs(this.settings[cc].radius -pixelBarHeight -pixelBarTop - this.borderWidth) + "px";
                                      break;

                                  case "tl":
                                      pixelBar.style.backgroundPosition = "-" + Math.abs((this.settings[cc].radius -pixelBarLeft -1)  - this.borderWidth) + "px -" + Math.abs(this.settings[cc].radius -pixelBarHeight -pixelBarTop - this.borderWidth) + "px";
                                      break;

                                  case "bl":
                                      pixelBar.style.backgroundPosition = "-" + Math.abs((this.settings[cc].radius -pixelBarLeft -1) - this.borderWidth) + "px -" + Math.abs((this.boxHeight + this.settings[cc].radius + pixelBarTop) -this.borderWidth) + "px";
                                      break;
                              }
                          }
                      }
                  }

                  if(newCorner)
                  {
                      // Position the container
                      switch(cc)
                      {
                          case "tl":
                            if(newCorner.style.position == "absolute") newCorner.style.top  = "0px";
                            if(newCorner.style.position == "absolute") newCorner.style.left = "0px";
                            if(this.topContainer) this.topContainer.appendChild(newCorner);
                            break;

                          case "tr":
                            if(newCorner.style.position == "absolute") newCorner.style.top  = "0px";
                            if(newCorner.style.position == "absolute") newCorner.style.right = "0px";
                            if(this.topContainer) this.topContainer.appendChild(newCorner);
                            break;

                          case "bl":
                            if(newCorner.style.position == "absolute") newCorner.style.bottom  = "0px";
                            if(newCorner.style.position == "absolute") newCorner.style.left = "0px";
                            if(this.bottomContainer) this.bottomContainer.appendChild(newCorner);
                            break;

                          case "br":
                            if(newCorner.style.position == "absolute") newCorner.style.bottom   = "0px";
                            if(newCorner.style.position == "absolute") newCorner.style.right = "0px";
                            if(this.bottomContainer) this.bottomContainer.appendChild(newCorner);
                            break;
                      }
                  }
              }
          }

          /*
          The last thing to do is draw the rest of the filler DIVs.
          We only need to create a filler DIVs when two corners have
          diffrent radiuses in either the top or bottom container.
          */

          // Find out which corner has the biiger radius and get the difference amount
          var radiusDiff = new Array();
          radiusDiff["t"] = Math.abs(this.settings.tl.radius - this.settings.tr.radius)
          radiusDiff["b"] = Math.abs(this.settings.bl.radius - this.settings.br.radius);

          for(z in radiusDiff)
          {
              // FIX for prototype lib
              if(z == "t" || z == "b")
              {
                  if(radiusDiff[z])
                  {
                      // Get the type of corner that is the smaller one
                      var smallerCornerType = ((this.settings[z + "l"].radius < this.settings[z + "r"].radius)? z +"l" : z +"r");

                      // First we need to create a DIV for the space under the smaller corner
                      var newFiller = alib.dom.createElement("DIV");
                      newFiller.style.height = radiusDiff[z] + "px";
                      newFiller.style.width  =  this.settings[smallerCornerType].radius+ "px"
                      newFiller.style.position = "absolute";
                      newFiller.style.fontSize = "1px";
                      newFiller.style.overflow = "hidden";
                      newFiller.style.backgroundColor = this.boxColour;
                      //newFiller.style.backgroundColor = get_random_color();

                      // Position filler
                      switch(smallerCornerType)
                      {
                          case "tl":
                              newFiller.style.bottom = "0px";
                              newFiller.style.left   = "0px";
                              newFiller.style.borderLeft = this.borderString;
                              this.topContainer.appendChild(newFiller);
                              break;

                          case "tr":
                              newFiller.style.bottom = "0px";
                              newFiller.style.right  = "0px";
                              newFiller.style.borderRight = this.borderString;
                              this.topContainer.appendChild(newFiller);
                              break;

                          case "bl":
                              newFiller.style.top    = "0px";
                              newFiller.style.left   = "0px";
                              newFiller.style.borderLeft = this.borderString;
                              this.bottomContainer.appendChild(newFiller);
                              break;

                          case "br":
                              newFiller.style.top    = "0px";
                              newFiller.style.right  = "0px";
                              newFiller.style.borderRight = this.borderString;
                              this.bottomContainer.appendChild(newFiller);
                              break;
                      }
                  }

                  // Create the bar to fill the gap between each corner horizontally
                  var newFillerBar = alib.dom.createElement("DIV");
                  newFillerBar.style.position = "relative";
                  newFillerBar.style.fontSize = "1px";
                  newFillerBar.style.overflow = "hidden";
                  newFillerBar.style.backgroundColor = this.boxColour;
                  newFillerBar.style.backgroundImage = this.backgroundImage;

                  switch(z)
                  {
                      case "t":
                          // Top Bar
                          if(this.topContainer)
                          {
                              // Edit by Asger Hallas: Check if settings.xx.radius is not false
                              if(this.settings.tl.radius && this.settings.tr.radius)
                              {
                                  newFillerBar.style.height      = topMaxRadius - this.borderWidth + "px";
                                  newFillerBar.style.marginLeft  = this.settings.tl.radius - this.borderWidth + "px";
                                  newFillerBar.style.marginRight = this.settings.tr.radius - this.borderWidth + "px";
                                  newFillerBar.style.borderTop   = this.borderString;

                                  if(this.backgroundImage != "")
                                    newFillerBar.style.backgroundPosition  = "-" + (topMaxRadius + this.borderWidth) + "px 0px";

                                  this.topContainer.appendChild(newFillerBar);
                              }

                              // Repos the boxes background image
                              this.box.style.backgroundPosition      = "0px -" + (topMaxRadius - this.borderWidth) + "px";
                          }
                          break;

                      case "b":
                          if(this.bottomContainer)
                          {
                              // Edit by Asger Hallas: Check if settings.xx.radius is not false
                              if(this.settings.bl.radius && this.settings.br.radius)
                              {
                                  // Bottom Bar
                                  newFillerBar.style.height       = botMaxRadius - this.borderWidth + "px";
                                  newFillerBar.style.marginLeft   = this.settings.bl.radius - this.borderWidth + "px";
                                  newFillerBar.style.marginRight  = this.settings.br.radius - this.borderWidth + "px";
                                  newFillerBar.style.borderBottom = this.borderString;

                                  if(this.backgroundImage != "")
                                    newFillerBar.style.backgroundPosition  = "-" + (botMaxRadius + this.borderWidth) + "px -" + (this.boxHeight + (topMaxRadius + this.borderWidth)) + "px";

                                  this.bottomContainer.appendChild(newFillerBar);
                              }
                          }
                          break;
                  }
              }
          }

          /*
          AutoPad! apply padding if set.
          */
          if(this.settings.autoPad == true && this.boxPadding > 0)
          {
              // Create content container
              var contentContainer = alib.dom.createElement("DIV");

              // Set contentContainer's properties
              contentContainer.style.position = "relative";
              contentContainer.innerHTML      = this.boxContent;
              contentContainer.className      = "autoPadDiv";

              // Get padding amounts
              var topPadding = Math.abs(topMaxRadius - this.boxPadding);
              var botPadding = Math.abs(botMaxRadius - this.boxPadding);

              // Apply top padding
              if(topMaxRadius < this.boxPadding)
                contentContainer.style.paddingTop = topPadding + "px";

              // Apply Bottom padding
              if(botMaxRadius < this.boxPadding)
                contentContainer.style.paddingBottom = botMaxRadius + "px";

              // Apply left and right padding
              contentContainer.style.paddingLeft = this.boxPadding + "px";
              contentContainer.style.paddingRight = this.boxPadding + "px";

              // Append contentContainer
              this.contentDIV = this.box.appendChild(contentContainer);
          }
      }

      /*
      This function draws the pixles
      */
      this.drawPixel = function(intx, inty, colour, transAmount, height, newCorner, image, cornerRadius)
      {
          // Create pixel
          var pixel = alib.dom.createElement("DIV");
          pixel.style.height   = height + "px";
          pixel.style.width    = "1px";
          pixel.style.position = "absolute";
          pixel.style.fontSize = "1px";
          pixel.style.overflow = "hidden";

          // Max Top Radius
          var topMaxRadius = Math.max(this.settings["tr"].radius, this.settings["tl"].radius);

          // Dont apply background image to border pixels
          if(image == -1 && this.backgroundImage != "")
          {
              pixel.style.backgroundImage = this.backgroundImage;
			           pixel.style.backgroundPosition  = "-" + (this.boxWidth - (cornerRadius - intx) + this.borderWidth) + "px -" + ((this.boxHeight + topMaxRadius + inty) -this.borderWidth) + "px";
		        }
          else
          {
              pixel.style.backgroundColor = colour;
          }

          // Set opacity if the transparency is anything other than 100
          if (transAmount != 100)
            setOpacity(pixel, transAmount);

          // Set the pixels position
          pixel.style.top = inty + "px";
          pixel.style.left = intx + "px";

          newCorner.appendChild(pixel);
      }
  }

  // ------------- UTILITY FUNCTIONS

  /*
  Blends the two colours by the fraction
  returns the resulting colour as a string in the format "#FFFFFF"
  */
  function BlendColour(Col1, Col2, Col1Fraction)
  {
      var red1 = parseInt(Col1.substr(1,2),16);
      var green1 = parseInt(Col1.substr(3,2),16);
      var blue1 = parseInt(Col1.substr(5,2),16);
      var red2 = parseInt(Col2.substr(1,2),16);
      var green2 = parseInt(Col2.substr(3,2),16);
      var blue2 = parseInt(Col2.substr(5,2),16);

      if(Col1Fraction > 1 || Col1Fraction < 0) Col1Fraction = 1;

      var endRed = Math.round((red1 * Col1Fraction) + (red2 * (1 - Col1Fraction)));
      if(endRed > 255) endRed = 255;
      if(endRed < 0) endRed = 0;

      var endGreen = Math.round((green1 * Col1Fraction) + (green2 * (1 - Col1Fraction)));
      if(endGreen > 255) endGreen = 255;
      if(endGreen < 0) endGreen = 0;

      var endBlue = Math.round((blue1 * Col1Fraction) + (blue2 * (1 - Col1Fraction)));
      if(endBlue > 255) endBlue = 255;
      if(endBlue < 0) endBlue = 0;

      return "#" + IntToHex(endRed)+ IntToHex(endGreen)+ IntToHex(endBlue);
  }

  /*
  Converts a number to hexadecimal format
  */
  function IntToHex(strNum)
  {
      base = strNum / 16;
      rem = strNum % 16;
      base = base - (rem / 16);
      baseS = MakeHex(base);
      remS = MakeHex(rem);

      return baseS + '' + remS;
  }


  /*
  gets the hex bits of a number
  */
  function MakeHex(x)
  {
      if((x >= 0) && (x <= 9))
      {
          return x;
      }
      else
      {
          switch(x)
          {
              case 10: return "A";
              case 11: return "B";
              case 12: return "C";
              case 13: return "D";
              case 14: return "E";
              case 15: return "F";
          }
      }
  }


  /*
  For a pixel cut by the line determines the fraction of the pixel on the 'inside' of the
  line.  Returns a number between 0 and 1
  */
  function pixelFraction(x, y, r)
  {
      var pixelfraction = 0;

      /*
      determine the co-ordinates of the two points on the perimeter of the pixel that the
      circle crosses
      */
      var xvalues = new Array(1);
      var yvalues = new Array(1);
      var point = 0;
      var whatsides = "";

      // x + 0 = Left
      var intersect = Math.sqrt((Math.pow(r,2) - Math.pow(x,2)));

      if ((intersect >= y) && (intersect < (y+1)))
      {
          whatsides = "Left";
          xvalues[point] = 0;
          yvalues[point] = intersect - y;
          point =  point + 1;
      }
      // y + 1 = Top
      var intersect = Math.sqrt((Math.pow(r,2) - Math.pow(y+1,2)));

      if ((intersect >= x) && (intersect < (x+1)))
      {
          whatsides = whatsides + "Top";
          xvalues[point] = intersect - x;
          yvalues[point] = 1;
          point = point + 1;
      }
      // x + 1 = Right
      var intersect = Math.sqrt((Math.pow(r,2) - Math.pow(x+1,2)));

      if ((intersect >= y) && (intersect < (y+1)))
      {
          whatsides = whatsides + "Right";
          xvalues[point] = 1;
          yvalues[point] = intersect - y;
          point =  point + 1;
      }
      // y + 0 = Bottom
      var intersect = Math.sqrt((Math.pow(r,2) - Math.pow(y,2)));

      if ((intersect >= x) && (intersect < (x+1)))
      {
          whatsides = whatsides + "Bottom";
          xvalues[point] = intersect - x;
          yvalues[point] = 0;
      }

      /*
      depending on which sides of the perimeter of the pixel the circle crosses calculate the
      fraction of the pixel inside the circle
      */
      switch (whatsides)
      {
              case "LeftRight":
              pixelfraction = Math.min(yvalues[0],yvalues[1]) + ((Math.max(yvalues[0],yvalues[1]) - Math.min(yvalues[0],yvalues[1]))/2);
              break;

              case "TopRight":
              pixelfraction = 1-(((1-xvalues[0])*(1-yvalues[1]))/2);
              break;

              case "TopBottom":
              pixelfraction = Math.min(xvalues[0],xvalues[1]) + ((Math.max(xvalues[0],xvalues[1]) - Math.min(xvalues[0],xvalues[1]))/2);
              break;

              case "LeftBottom":
              pixelfraction = (yvalues[0]*xvalues[1])/2;
              break;

              default:
              pixelfraction = 1;
      }

      return pixelfraction;
  }


  // This function converts CSS rgb(x, x, x) to hexadecimal
  function rgb2Hex(rgbColour)
  {
      try{

          // Get array of RGB values
          var rgbArray = rgb2Array(rgbColour);

          // Get RGB values
          var red   = parseInt(rgbArray[0]);
          var green = parseInt(rgbArray[1]);
          var blue  = parseInt(rgbArray[2]);

          // Build hex colour code
          var hexColour = "#" + IntToHex(red) + IntToHex(green) + IntToHex(blue);
      }
      catch(e){

          alert("There was an error converting the RGB value to Hexadecimal in function rgb2Hex");
      }

      return hexColour;
  }

  // Returns an array of rbg values
  function rgb2Array(rgbColour)
  {
      // Remove rgb()
      var rgbValues = rgbColour.substring(4, rgbColour.indexOf(")"));

      // Split RGB into array
      var rgbArray = rgbValues.split(", ");

      return rgbArray;
  }

  /*
  Function by Simon Willison from sitepoint.com
  Modified by Cameron Cooke adding Safari's rgba support
  */
  function setOpacity(obj, opacity)
  {
      opacity = (opacity == 100)?99.999:opacity;

      if(isSafari && obj.tagName != "IFRAME")
      {
          // Get array of RGB values
          var rgbArray = rgb2Array(obj.style.backgroundColor);

          // Get RGB values
          var red   = parseInt(rgbArray[0]);
          var green = parseInt(rgbArray[1]);
          var blue  = parseInt(rgbArray[2]);

          // Safari using RGBA support
          obj.style.backgroundColor = "rgba(" + red + ", " + green + ", " + blue + ", " + opacity/100 + ")";
      }
      else if(typeof(obj.style.opacity) != "undefined")
      {
          // W3C
          obj.style.opacity = opacity/100;
      }
      else if(typeof(obj.style.MozOpacity) != "undefined")
      {
          // Older Mozilla
          obj.style.MozOpacity = opacity/100;
      }
      else if(typeof(obj.style.filter) != "undefined")
      {
          // IE
          obj.style.filter = "alpha(opacity:" + opacity + ")";
      }
      else if(typeof(obj.style.KHTMLOpacity) != "undefined")
      {
          // Older KHTML Based Browsers
          obj.style.KHTMLOpacity = opacity/100;
      }
  }

  /*
  Returns index if the passed value is found in the
  array otherwise returns false.
  */
  function inArray(array, value)
  {
      for(var i = 0; i < array.length; i++){

          // Matches identical (===), not just similar (==).
          if (array[i] === value) return i;
      }

      return false;
  }

  /*
  Returns true if the passed value is found as a key
  in the array otherwise returns false.
  */
  function inArrayKey(array, value)
  {
      for(key in array){

          // Matches identical (===), not just similar (==).
          if(key === value) return true;
      }

      return false;
  }

  // Cross browser add event wrapper
  function addEvent(elm, evType, fn, useCapture) {
	  if (elm.addEventListener) {
		  elm.addEventListener(evType, fn, useCapture);
		  return true;
	  }
	  else if (elm.attachEvent) {
		  var r = elm.attachEvent('on' + evType, fn);
		  return r;
	  }
	  else {
		  elm['on' + evType] = fn;
	  }
  }

  // Cross browser remove event wrapper
  function removeEvent(obj, evType, fn, useCapture){
    if (obj.removeEventListener){
      obj.removeEventListener(evType, fn, useCapture);
      return true;
    } else if (obj.detachEvent){
      var r = obj.detachEvent("on"+evType, fn);
      return r;
    } else {
      alert("Handler could not be removed");
    }
  }

  // Formats colours
  function format_colour(colour)
  {
      var returnColour = "#ffffff";

      // Make sure colour is set and not transparent
      if(colour != "" && colour != "transparent")
      {
          // RGB Value?
          if(colour.substr(0, 3) == "rgb")
          {
              // Get HEX aquiv.
              returnColour = rgb2Hex(colour);
          }
          else if(colour.length == 4)
          {
              // 3 chr colour code add remainder
              returnColour = "#" + colour.substring(1, 2) + colour.substring(1, 2) + colour.substring(2, 3) + colour.substring(2, 3) + colour.substring(3, 4) + colour.substring(3, 4);
          }
          else
          {
              // Normal valid hex colour
              returnColour = colour;
          }
      }

      return returnColour;
  }

  // Returns the style value for the property specfied
  function get_style(obj, property, propertyNS)
  {
	  var ret = alib.dom.styleGet(obj, property);
	  if (ret)
	 	  return ret;
	  else
		  return "";

      try
      {
          if(obj.currentStyle)
          {
              var returnVal = eval("obj.currentStyle." + property);
          }
          else
          {
              /*
              Safari does not expose any information for the object if display is
              set to none is set so we temporally enable it.
              */
              if(isSafari && obj.style.display == "none")
              {
                obj.style.display = "";
                var wasHidden = true;
              }

              var returnVal = ALib.m_document.defaultView.getComputedStyle(obj, '').getPropertyValue(propertyNS);

              // Rehide the object
              if(isSafari && wasHidden)
              {
                  obj.style.display = "none";
              }
          }
      }
      catch(e)
      {
          // Do nothing
      }

      return returnVal;
  }

  // Get elements by class by Dustin Diaz.
  function getElementsByClass(searchClass, node, tag)
  {
	     var classElements = new Array();

      if(node == null)
		      node = ALib.m_document;
	     if(tag == null)
		      tag = '*';

	     var els = node.getElementsByTagName(tag);
	     var elsLen = els.length;
	     var pattern = new RegExp("(^|\s)"+searchClass+"(\s|$)");

	     for (i = 0, j = 0; i < elsLen; i++)
      {
		        if(pattern.test(els[i].className))
          {
			           classElements[j] = els[i];
			           j++;
		        }
	     }

	     return classElements;
  }

  // Displays error message
  function newCurvyError(errorMessage)
  {
      return new Error("curvyCorners Error:\n" + errorMessage)
  }


/**
 * @depricated Please use Alib_Ui_AutoComplete
 */
function CAutoComplete(obj,ca)
{
	return new Alib_Ui_AutoComplete(obj, {data:ca});

	/* ---- Public Variables ---- */
	this.actb_timeOut = -1; // Autocomplete Timeout in ms (-1: autocomplete never time out)
	this.actb_lim = 8;    // Number of elements autocomplete can show (-1: no limit)
	this.actb_firstText = false; // should the auto complete be limited to the beginning of keyword?
	this.actb_mouse = true; // Enable Mouse Support
	this.actb_delimiter = new Array(';',',');  // Delimiter for multiple autocomplete. Set it to empty array for single autocomplete
	this.actb_startcheck = 1; // Show widget only after this number of characters is typed in.
	/* ---- Public Variables ---- */

	/* --- Styles --- */
	this.actb_bgColor = '#888888';
	this.actb_textColor = '#FFFFFF';
	this.actb_hColor = '#000000';
	this.actb_fFamily = 'Arial';
	this.actb_fSize = '12px';
	this.actb_hStyle = 'text-decoration:underline;font-weight="bold"';
	/* --- Styles --- */

	/* ---- Private Variables ---- */
	var actb_delimwords = new Array();
	var actb_cdelimword = 0;
	var actb_delimchar = new Array();
	var actb_display = false;
	var actb_pos = 0;
	var actb_total = 0;
	var actb_curr = null;
	var actb_rangeu = 0;
	var actb_ranged = 0;
	var actb_bool = new Array();
	var actb_pre = 0;
	var actb_toid;
	var actb_tomake = false;
	var actb_getpre = "";
	var actb_mouse_on_list = 1;
	var actb_kwcount = 0;
	var actb_caretmove = false;
	this.actb_keywords = new Array();
	/* ---- Private Variables---- */
	
	this.actb_keywords = ca;
	var actb_self = this;

	actb_curr = obj;
	
	// Set flag that ac is being displayed
	actb_curr.m_inac = false;
	//actb_curr.autocomplete = "off";

	alib.dom.addEvent(actb_curr,"focus",actb_setup);
	function actb_setup()
	{
		alib.dom.addEvent(document,"keydown",actb_checkkey);
		alib.dom.addEvent(actb_curr,"blur",actb_clear);
		alib.dom.addEvent(document,"keypress",actb_keypress);
	}

	function actb_clear(evt)
	{
		if (!evt) evt = event;
		alib.dom.removeEvent(document,"keydown",actb_checkkey);
		alib.dom.removeEvent(actb_curr,"blur",actb_clear);
		alib.dom.removeEvent(document,"keypress",actb_keypress);
		actb_removedisp();
	}

	// Populate the HTML text
	function actb_parse(n)
	{
		// Escape chars
		n = n.replace(/[<]/g,'&lt;');
		n = n.replace(/[>]/g,'&gt;');

		if (actb_self.actb_delimiter.length > 0)
		{
			var t = actb_delimwords[actb_cdelimword].trim().addslashes();
			var plen = actb_delimwords[actb_cdelimword].trim().length;
		}
		else
		{
			var t = actb_curr.value.addslashes();
			var plen = actb_curr.value.length;
		}

		var tobuild = '';
		var i;

		if (actb_self.actb_firstText)
		{
			var re = new RegExp("^" + t, "i");
		}
		else
		{
			var re = new RegExp(t, "i");
		}

		var p = n.search(re);
				
		for (i=0;i<p;i++)
		{
			tobuild += n.substr(i,1);
		}

		tobuild += "<font style='"+(actb_self.actb_hStyle)+"'>"

		for (i=p;i<plen+p;i++)
		{
			tobuild += n.substr(i,1);
		}

		tobuild += "</font>";

		for (i=plen+p;i<n.length;i++)
		{
			tobuild += n.substr(i,1);
		}

		return tobuild;
	}

	function actb_generate()
	{
		if (document.getElementById('tat_table')){ actb_display = false;document.body.removeChild(document.getElementById('tat_table')); } 
		if (actb_kwcount == 0){
			actb_display = false;
			return;
		}	

		a = document.createElement('table');
		a.cellSpacing='1px';
		a.cellPadding='2px';
		a.style.position='absolute';
		a.style.top = eval(curTop(actb_curr) + actb_curr.offsetHeight) + "px";
		a.style.left = curLeft(actb_curr) + "px";
		a.style.backgroundColor=actb_self.actb_bgColor;
		a.id = 'tat_table';
		a.style.zIndex = "990";
		document.body.appendChild(a);
		var i;
		var first = true;
		var j = 1;
		if (actb_self.actb_mouse){
			a.onmouseout = actb_table_unfocus;
			a.onmouseover = actb_table_focus;
		}
		var counter = 0;

		for (i=0;i<actb_self.actb_keywords.length;i++)
		{
			if (actb_bool[i]){
				counter++;
				r = a.insertRow(-1);

				if (first && !actb_tomake)
				{
					r.style.backgroundColor = actb_self.actb_hColor;
					first = false;
					actb_pos = counter;
				}
				else if(actb_pre == i)
				{
					r.style.backgroundColor = actb_self.actb_hColor;
					first = false;
					actb_pos = counter;
				}
				else
				{
					r.style.backgroundColor = actb_self.actb_bgColor;
				}
				r.id = 'tat_tr'+(j);
				c = r.insertCell(-1);
				c.style.color = actb_self.actb_textColor;
				c.style.fontFamily = actb_self.actb_fFamily;
				c.style.fontSize = actb_self.actb_fSize;
				c.innerHTML = actb_parse(actb_self.actb_keywords[i]);
				c.id = 'tat_td'+(j);
				c.setAttribute('pos',j);
				if (actb_self.actb_mouse){
					c.style.cursor = 'pointer';
					c.onclick=actb_mouseclick;
					c.onmouseover = actb_table_highlight;
				}
				j++;
			}
			if (j - 1 == actb_self.actb_lim && j < actb_total){
				r = a.insertRow(-1);
				r.style.backgroundColor = actb_self.actb_bgColor;
				c = r.insertCell(-1);
				c.style.color = actb_self.actb_textColor;
				c.style.fontFamily = 'arial narrow';
				c.style.fontSize = actb_self.actb_fSize;
				c.align='center';
				replaceHTML(c,'\\/');
				if (actb_self.actb_mouse){
					c.style.cursor = 'pointer';
					c.onclick = actb_mouse_down;
				}
				break;
			}
		}
		actb_rangeu = 1;
		actb_ranged = j-1;
		actb_display = true;
		if (actb_pos <= 0) actb_pos = 1;

		// Set flag that ac is being displayed
		actb_curr.m_inac = true;
	}

	function actb_remake()
	{
		document.body.removeChild(document.getElementById('tat_table'));
		a = document.createElement('table');
		a.cellSpacing='1px';
		a.cellPadding='2px';
		a.style.position='absolute';
		a.style.zIndex = "990";
		a.style.top = eval(curTop(actb_curr) + actb_curr.offsetHeight) + "px";
		a.style.left = curLeft(actb_curr) + "px";
		a.style.backgroundColor=actb_self.actb_bgColor;
		a.id = 'tat_table';
		if (actb_self.actb_mouse){
			a.onmouseout= actb_table_unfocus;
			a.onmouseover=actb_table_focus;
		}
		document.body.appendChild(a);
		var i;
		var first = true;
		var j = 1;
		if (actb_rangeu > 1){
			r = a.insertRow(-1);
			r.style.backgroundColor = actb_self.actb_bgColor;
			c = r.insertCell(-1);
			c.style.color = actb_self.actb_textColor;
			c.style.fontFamily = 'arial narrow';
			c.style.fontSize = actb_self.actb_fSize;
			c.align='center';
			replaceHTML(c,'/\\');
			if (actb_self.actb_mouse){
				c.style.cursor = 'pointer';
				c.onclick = actb_mouse_up;
			}
		}
		for (i=0;i<actb_self.actb_keywords.length;i++){
			if (actb_bool[i]){
				if (j >= actb_rangeu && j <= actb_ranged){
					r = a.insertRow(-1);
					r.style.backgroundColor = actb_self.actb_bgColor;
					r.id = 'tat_tr'+(j);
					c = r.insertCell(-1);
					c.style.color = actb_self.actb_textColor;
					c.style.fontFamily = actb_self.actb_fFamily;
					c.style.fontSize = actb_self.actb_fSize;
					c.innerHTML = actb_parse(actb_self.actb_keywords[i]);
					c.id = 'tat_td'+(j);
					c.setAttribute('pos',j);
					if (actb_self.actb_mouse){
						c.style.cursor = 'pointer';
						c.onclick=actb_mouseclick;
						c.onmouseover = actb_table_highlight;
					}
					j++;
				}else{
					j++;
				}
			}
			if (j > actb_ranged) break;
		}
		if (j-1 < actb_total){
			r = a.insertRow(-1);
			r.style.backgroundColor = actb_self.actb_bgColor;
			c = r.insertCell(-1);
			c.style.color = actb_self.actb_textColor;
			c.style.fontFamily = 'arial narrow';
			c.style.fontSize = actb_self.actb_fSize;
			c.align='center';
			replaceHTML(c,'\\/');
			if (actb_self.actb_mouse){
				c.style.cursor = 'pointer';
				c.onclick = actb_mouse_down;
			}
		}

		// Set flag that ac is being displayed
		actb_curr.m_inac = true;
	}

	function actb_goup()
	{
		if (!actb_display) return;
		if (actb_pos == 1) return;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos--;
		if (actb_pos < actb_rangeu) actb_moveup();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.actb_timeOut);
	}

	function actb_godown()
	{
		if (!actb_display) return;
		if (actb_pos == actb_total) return;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos++;
		if (actb_pos > actb_ranged) actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.actb_timeOut);
	}

	function actb_movedown()
	{
		actb_rangeu++;
		actb_ranged++;
		actb_remake();
	}

	function actb_moveup()
	{
		actb_rangeu--;
		actb_ranged--;
		actb_remake();
	}

	/* Mouse */
	function actb_mouse_down()
	{
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos++;
		actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		actb_curr.focus();
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.actb_timeOut);
	}

	function actb_mouse_up(evt)
	{
		if (!evt) evt = event;
		if (evt.stopPropagation){
			evt.stopPropagation();
		}else{
			evt.cancelBubble = true;
		}
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos--;
		actb_moveup();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		actb_curr.focus();
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.actb_timeOut);
	}
	function actb_mouseclick(evt){
		if (!evt) evt = event;
		if (!actb_display) return;
		actb_mouse_on_list = 0;
		actb_pos = this.getAttribute('pos');
		actb_penter();
	}
	function actb_table_focus()
	{
		actb_mouse_on_list = 1;
	}
	function actb_table_unfocus(){
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.actb_timeOut);
	}
	function actb_table_highlight(){
		actb_mouse_on_list = 1;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos = this.getAttribute('pos');
		while (actb_pos < actb_rangeu) actb_moveup();
		while (actb_pos > actb_ranged) actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.actb_timeOut);
	}
	/* ---- */

	function actb_insertword(a){
		if (actb_self.actb_delimiter.length > 0){
			str = '';
			l=0;
			for (i=0;i<actb_delimwords.length;i++){
				if (actb_cdelimword == i){
					prespace = postspace = '';
					gotbreak = false;
					for (j=0;j<actb_delimwords[i].length;++j){
						if (actb_delimwords[i].charAt(j) != ' '){
							gotbreak = true;
							break;
						}
						prespace += ' ';
					}
					for (j=actb_delimwords[i].length-1;j>=0;--j){
						if (actb_delimwords[i].charAt(j) != ' ') break;
						postspace += ' ';
					}
					str += prespace;
					str += a + ",";
					l = str.length;
					if (gotbreak) str += postspace;
				}else{
					str += actb_delimwords[i];
				}
				if (i != actb_delimwords.length - 1){
					str += actb_delimchar[i];
				}
			}
			actb_curr.value = str;
			alib.dom.setCaret(actb_curr,l);
		}else{
			actb_curr.value = a;
		}
		actb_mouse_on_list = 0;
		actb_removedisp();
		try
		{
			actb_curr.onchange();
		}
		catch(e) {}
	}

	function actb_penter()
	{
		if (!actb_display) return;
		actb_display = false;
		var word = '';
		var c = 0;
		for (var i=0;i<=actb_self.actb_keywords.length;i++){
			if (actb_bool[i]) c++;
			if (c == actb_pos){
				word = actb_self.actb_keywords[i];
				break;
			}
		}
		actb_insertword(word);
		l = alib.dom.getCaretStart(actb_curr);
	}

	function actb_removedisp()
	{
		if (actb_mouse_on_list==0)
		{
			actb_display = 0;
			if (document.getElementById('tat_table')){ document.body.removeChild(document.getElementById('tat_table')); }
			if (actb_toid) clearTimeout(actb_toid);

			actb_curr.m_inac = false;
		}
	}

	function actb_keypress(e)
	{
		if (actb_caretmove) alib.dom.stopEvent(e);
		return !actb_caretmove;
	}

	function actb_checkkey(evt){
		if (!evt) evt = event;
		a = evt.keyCode;
		caret_pos_start = alib.dom.getCaretStart(actb_curr);
		actb_caretmove = 0;
		switch (a){
			case 38:
				actb_goup();
				actb_caretmove = 1;
				return false;
				break;
			case 40:
				actb_godown();
				actb_caretmove = 1;
				return false;
				break;
			case 13: case 9:
				if (actb_display)
				{
					actb_curr.m_inac = false;
					actb_caretmove = 1;
					actb_penter();
					return false;
				}
				else
				{
					return true;
				}
				break;
			default:
				setTimeout(function(){actb_tocomplete(a)},50);
				break;
		}
	}

	function actb_tocomplete(kc){
		if (kc == 38 || kc == 40 || kc == 13) return;

		var i;
		if (actb_display){ 
			var word = 0;
			var c = 0;
			for (var i=0;i<=actb_self.actb_keywords.length;i++){
				if (actb_bool[i]) c++;
				if (c == actb_pos){
					word = i;
					break;
				}
			}
			actb_pre = word;
		}else{ actb_pre = -1};
		
		if (actb_curr.value == ''){
			actb_mouse_on_list = 0;
			actb_removedisp();
			return;
		}
		if (actb_self.actb_delimiter.length > 0){
			caret_pos_start = alib.dom.getCaretStart(actb_curr);
			caret_pos_end = alib.dom.getCaretEnd(actb_curr);
			
			delim_split = '';
			for (i=0;i<actb_self.actb_delimiter.length;i++){
				delim_split += actb_self.actb_delimiter[i];
			}
			delim_split = delim_split.addslashes();
			delim_split_rx = new RegExp("(["+delim_split+"])");
			c = 0;
			actb_delimwords = new Array();
			actb_delimwords[0] = '';
			for (i=0,j=actb_curr.value.length;i<actb_curr.value.length;i++,j--){
				if (actb_curr.value.substr(i,j).search(delim_split_rx) == 0){
					ma = actb_curr.value.substr(i,j).match(delim_split_rx);
					actb_delimchar[c] = ma[1];
					c++;
					actb_delimwords[c] = '';
				}else{
					actb_delimwords[c] += actb_curr.value.charAt(i);
				}
			}

			var l = 0;
			actb_cdelimword = -1;
			for (i=0;i<actb_delimwords.length;i++){
				if (caret_pos_end >= l && caret_pos_end <= l + actb_delimwords[i].length){
					actb_cdelimword = i;
				}
				l+=actb_delimwords[i].length + 1;
			}
			var ot = actb_delimwords[actb_cdelimword].trim(); 
			var t = actb_delimwords[actb_cdelimword].addslashes().trim();
		}else{
			var ot = actb_curr.value;
			var t = actb_curr.value.addslashes();
		}
		if (ot.length == 0){
			actb_mouse_on_list = 0;
			actb_removedisp();
		}
		if (ot.length < actb_self.actb_startcheck) return this;
		if (actb_self.actb_firstText){
			var re = new RegExp("^" + t, "i");
		}else{
			var re = new RegExp(t, "i");
		}

		actb_total = 0;
		actb_tomake = false;
		actb_kwcount = 0;
		for (i=0;i<actb_self.actb_keywords.length;i++){
			actb_bool[i] = false;
			if (re.test(actb_self.actb_keywords[i])){
				actb_total++;
				actb_bool[i] = true;
				actb_kwcount++;
				if (actb_pre == i) actb_tomake = true;
			}
		}

		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.actb_timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.actb_timeOut);
		actb_generate();
	}
	return this;
}

/*======================================================================================
	
	Module:		CTextBoxList

	Purpose:	Advanced text box list sort of like facebook.

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Usage:		

======================================================================================*/

/***********************************************************************************
 *
 *	Class: 		CTextBoxList
 *
 *	Purpose:	Encapsulate text box list
 *
 ***********************************************************************************/
function CTextBoxList(e, opts)
{
	if (!opts)
		var opts = {};

	this.t = new $.TextboxList(e, opts);
}

/***********************************************************************************
 *
 *	Function: 	add
 *
 *	Purpose:	Add an element to the list
 *
 *	Arguements:	
 *
 ***********************************************************************************/
CTextBoxList.prototype.add = function (id, value)
{
	if (!value)
		var value = id;

	// 0 = plaintext
	// 1 = id
	// 2 = html value
	this.t.add(null, id, value);
}

/***********************************************************************************
 *
 *	Function: 	getValues
 *
 *	Purpose:	Get array of values from textbox list with the following vals
 *				1 = plaintext
 *				2 = id
 *				3 = html
 *				4 = ?
 *
 ***********************************************************************************/
CTextBoxList.prototype.getValues = function ()
{
	return this.t.getValues();
}

/***********************************************************************************
 *
 *	Function: 	acLoadValues
 *
 *	Purpose:	Load json data via ajax
 *
 *	return array( id, searchable plain text, html (for the textboxlist item, if empty the plain is used), html (for the autocomplete dropdown))
 *
 ***********************************************************************************/
CTextBoxList.prototype.acLoadValues = function (strUrl)
{
	var tb = this.t;

	$.ajax({url: strUrl, dataType: 'json', success: function(r){
					tb.plugins['autocomplete'].setValues(r);
					tb.getContainer().removeClass('textboxlist-loading');
				}});	
}

/***********************************************************************************
 *
 *	Function: 	clear
 *
 *	Purpose:	Remove all entries
 *
 *	Arguements:	
 *
 ***********************************************************************************/
CTextBoxList.prototype.clear = function()
{
	this.t.clear();
}

/*======================================================================================
	
	Module:		CAutoCompleteCal

	Purpose:	Provide in-page calendar popup for autocomplete of date input

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2009 Aereus Corporation. All rights reserved.
	
	Usage:		

======================================================================================*/

// Define globals
// -----------------------------------------------------------
var g_CCalPopId = 1;

/***********************************************************************************
 *
 *	Class: 		CAutoCompleteCal
 *
 *	Purpose:	Create Calendar Popup
 *
 *	Arguements:	url   - string: path to xml document
 *				async - bool: defaults to true. Be careful if set to false, it can
 *						hang the browser until the xml doc is loaded. Users generally
 *						don't like that too much.
 *				divid - only used in ANT CAutoCompleteCal.awp because IE will not allow
 *						access to document.body before the doc is fully loaded.
 *
 ***********************************************************************************/
function CAutoCompleteCal(inp, anchor, divid)
{
	this.m_inp = inp;
	this.m_id = g_CCalPopId++;

	if (divid)
		var dv = divid;
	else
		var dv= alib.dom.createElement("div");
	alib.dom.styleSet(dv, "position", "absolute");
	alib.dom.styleSet(dv, "visibility", "hidden");
	alib.dom.styleSetClass(dv, "acCalContainer");
	dv.style.zIndex = "991";
	if (!divid)
	{
		alib.dom.m_document.body.appendChild(dv);
	}
	else
	{
		alib.dom.styleSet(dv, "display", "block");
	}

	dv.onmouseover = function() { this.haveFocus = true; }
	dv.onmouseout = function() { this.haveFocus = false; }
	this.m_div = dv;

	this.m_cpop = new CalendarPopup(this.m_div);

	/*if (inp && !anchor)
	{
		inp.onfocus = function()
		{
		}
		inp.onblur = function()
		{
		}
	}
	if (anchor)
	{
		anchor.m_acc = this;
		anchor.onclick = function()
		{
			var me = this;
			this.m_acc.m_cpop.select(this.m_acc.m_inp, me, 'MM/dd/yyyy');
		}
	}*/
    inp.brcls = this;       
    inp.onclick = function(){
        var me = this;
        this.brcls.m_cpop.select(this.brcls.m_inp, me, 'MM/dd/yyyy');
    }
}


// Set the weekdays which should be disabled in the 'date' select popup. You can
// then allow someone to only select week end dates, or Tuedays, for example
CAutoCompleteCal.prototype.setDisabledWeekDays = function()
{
	this.m_cpop.setDisabledWeekDays(0,1);
}

CAutoCompleteCal.prototype.addDisabledDate = function(strDate)
{
	this.m_cpop.addDisabledDates(strDate);
}

// Selectively disable individual days or date ranges. Disabled days will not
// be clickable, and show as strike-through text on current browsers.
// Date format is any format recognized by parseDate() in date.js
// Pass a single date to disable:
//
// Pass null as the first parameter to mean "anything up to and including" the
// passed date:
// cal.addDisabledDates(null, "01/02/03")
//
// Pass null as the second parameter to mean "including the passed date and
// anything after it:
// cal.addDisabledDates("Jan 01, 2003", null);
//
// Pass two dates to disable all dates inbetween and including the two
// cal.addDisabledDates("January 01, 2003", "Dec 31, 2003");
CAutoCompleteCal.prototype.addDisabledDates = function(strDate1, strDate2)
{
	this.m_cpop.addDisabledDates(strDate1, strDate2);
}

/*
		$this->m_buf = "<DIV ID=\"accd_".$id."_div\" STYLE=\"position:absolute;visibility:hidden;background-color:white;layer-background-color:white;\"></DIV>
					   <script language='javascript' type='text/javascript'>
							//getCalendarStyles();
							var now = new Date();
							var accd_".$id." = new CalendarPopup(\"accd_".$id."_div\");
					   </script>
					   <a href='javascript:void(0);' name=\"a_acc_".$id."\" id=\"a_acc_".$id."\" 
				   		onClick=\"accd_".$id.".select(document.forms['$form'].$name,'a_acc_".$id."','MM/dd/yyyy'); return false;\">
						".(($link) ? $link : "<img border='0' src='/images/calendar.gif' />")."
					   </a>";
*/

/* SOURCE FILE: date.js */

// HISTORY
// ------------------------------------------------------------------
// May 17, 2003: Fixed bug in parseDate() for dates <1970
// March 11, 2003: Added parseDate() function
// March 11, 2003: Added "NNN" formatting option. Doesn't match up
//                 perfectly with SimpleDateFormat formats, but 
//                 backwards-compatability was required.

// ------------------------------------------------------------------
// These functions use the same 'format' strings as the 
// java.text.SimpleDateFormat class, with minor exceptions.
// The format string consists of the following abbreviations:
// 
// Field        | Full Form          | Short Form
// -------------+--------------------+-----------------------
// Year         | yyyy (4 digits)    | yy (2 digits), y (2 or 4 digits)
// Month        | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)
//              | NNN (abbr.)        |
// Day of Month | dd (2 digits)      | d (1 or 2 digits)
// Day of Week  | EE (name)          | E (abbr)
// Hour (1-12)  | hh (2 digits)      | h (1 or 2 digits)
// Hour (0-23)  | HH (2 digits)      | H (1 or 2 digits)
// Hour (0-11)  | KK (2 digits)      | K (1 or 2 digits)
// Hour (1-24)  | kk (2 digits)      | k (1 or 2 digits)
// Minute       | mm (2 digits)      | m (1 or 2 digits)
// Second       | ss (2 digits)      | s (1 or 2 digits)
// AM/PM        | a                  |
//
// NOTE THE DIFFERENCE BETWEEN MM and mm! Month=MM, not mm!
// Examples:
//  "MMM d, y" matches: January 01, 2000
//                      Dec 1, 1900
//                      Nov 20, 00
//  "M/d/yy"   matches: 01/20/00
//                      9/2/00
//  "MMM dd, yyyy hh:mm:ssa" matches: "January 01, 2000 12:30:45AM"
// ------------------------------------------------------------------

var MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
function LZ(x) {return(x<0||x>9?"":"0")+x}

// ------------------------------------------------------------------
// isDate ( date_string, format_string )
// Returns true if date string matches format of format string and
// is a valid date. Else returns false.
// It is recommended that you trim whitespace around the value before
// passing it to this function, as whitespace is NOT ignored!
// ------------------------------------------------------------------
function isDate(val,format) {
	var date=getDateFromFormat(val,format);
	if (date==0) { return false; }
	return true;
	}

// -------------------------------------------------------------------
// compareDates(date1,date1format,date2,date2format)
//   Compare two date strings to see which is greater.
//   Returns:
//   1 if date1 is greater than date2
//   0 if date2 is greater than date1 of if they are the same
//  -1 if either of the dates is in an invalid format
// -------------------------------------------------------------------
function compareDates(date1,dateformat1,date2,dateformat2) {
	var d1=getDateFromFormat(date1,dateformat1);
	var d2=getDateFromFormat(date2,dateformat2);
	if (d1==0 || d2==0) {
		return -1;
		}
	else if (d1 > d2) {
		return 1;
		}
	return 0;
	}

// ------------------------------------------------------------------
// formatDate (date_object, format)
// Returns a date in the output format specified.
// The format string uses the same abbreviations as in getDateFromFormat()
// ------------------------------------------------------------------
function formatDate(date,format) {
	format=format+"";
	var result="";
	var i_format=0;
	var c="";
	var token="";
	var y=date.getYear()+"";
	var M=date.getMonth()+1;
	var d=date.getDate();
	var E=date.getDay();
	var H=date.getHours();
	var m=date.getMinutes();
	var s=date.getSeconds();
	var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
	// Convert real date parts into formatted versions
	var value=new Object();
	if (y.length < 4) {y=""+(y-0+1900);}
	value["y"]=""+y;
	value["yyyy"]=y;
	value["yy"]=y.substring(2,4);
	value["M"]=M;
	value["MM"]=LZ(M);
	value["MMM"]=MONTH_NAMES[M-1];
	value["NNN"]=MONTH_NAMES[M+11];
	value["d"]=d;
	value["dd"]=LZ(d);
	value["E"]=DAY_NAMES[E+7];
	value["EE"]=DAY_NAMES[E];
	value["H"]=H;
	value["HH"]=LZ(H);
	if (H==0){value["h"]=12;}
	else if (H>12){value["h"]=H-12;}
	else {value["h"]=H;}
	value["hh"]=LZ(value["h"]);
	if (H>11){value["K"]=H-12;} else {value["K"]=H;}
	value["k"]=H+1;
	value["KK"]=LZ(value["K"]);
	value["kk"]=LZ(value["k"]);
	if (H > 11) { value["a"]="PM"; }
	else { value["a"]="AM"; }
	value["m"]=m;
	value["mm"]=LZ(m);
	value["s"]=s;
	value["ss"]=LZ(s);
	while (i_format < format.length) {
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
			}
		if (value[token] != null) { result=result + value[token]; }
		else { result=result + token; }
		}
	return result;
	}
	
// ------------------------------------------------------------------
// Utility functions for parsing in getDateFromFormat()
// ------------------------------------------------------------------
function _isInteger(val) {
	var digits="1234567890";
	for (var i=0; i < val.length; i++) {
		if (digits.indexOf(val.charAt(i))==-1) { return false; }
		}
	return true;
	}
function _getInt(str,i,minlength,maxlength) {
	for (var x=maxlength; x>=minlength; x--) {
		var token=str.substring(i,i+x);
		if (token.length < minlength) { return null; }
		if (_isInteger(token)) { return token; }
		}
	return null;
	}
	
// ------------------------------------------------------------------
// getDateFromFormat( date_string , format_string )
//
// This function takes a date string and a format string. It matches
// If the date string matches the format string, it returns the 
// getTime() of the date. If it does not match, it returns 0.
// ------------------------------------------------------------------
function getDateFromFormat(val,format) {
	val=val+"";
	format=format+"";
	var i_val=0;
	var i_format=0;
	var c="";
	var token="";
	var token2="";
	var x,y;
	var now=new Date();
	var year=now.getYear();
	var month=now.getMonth()+1;
	var date=1;
	var hh=now.getHours();
	var mm=now.getMinutes();
	var ss=now.getSeconds();
	var ampm="";
	
	while (i_format < format.length) {
		// Get next token from format string
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
			}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token=="yyyy") { x=4;y=4; }
			if (token=="yy")   { x=2;y=2; }
			if (token=="y")    { x=2;y=4; }
			year=_getInt(val,i_val,x,y);
			if (year==null) { return 0; }
			i_val += year.length;
			if (year.length==2) {
				if (year > 70) { year=1900+(year-0); }
				else { year=2000+(year-0); }
				}
			}
		else if (token=="MMM"||token=="NNN"){
			month=0;
			for (var i=0; i<MONTH_NAMES.length; i++) {
				var month_name=MONTH_NAMES[i];
				if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {
					if (token=="MMM"||(token=="NNN"&&i>11)) {
						month=i+1;
						if (month>12) { month -= 12; }
						i_val += month_name.length;
						break;
						}
					}
				}
			if ((month < 1)||(month>12)){return 0;}
			}
		else if (token=="EE"||token=="E"){
			for (var i=0; i<DAY_NAMES.length; i++) {
				var day_name=DAY_NAMES[i];
				if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {
					i_val += day_name.length;
					break;
					}
				}
			}
		else if (token=="MM"||token=="M") {
			month=_getInt(val,i_val,token.length,2);
			if(month==null||(month<1)||(month>12)){return 0;}
			i_val+=month.length;}
		else if (token=="dd"||token=="d") {
			date=_getInt(val,i_val,token.length,2);
			if(date==null||(date<1)||(date>31)){return 0;}
			i_val+=date.length;}
		else if (token=="hh"||token=="h") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>12)){return 0;}
			i_val+=hh.length;}
		else if (token=="HH"||token=="H") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>23)){return 0;}
			i_val+=hh.length;}
		else if (token=="KK"||token=="K") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>11)){return 0;}
			i_val+=hh.length;}
		else if (token=="kk"||token=="k") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>24)){return 0;}
			i_val+=hh.length;hh--;}
		else if (token=="mm"||token=="m") {
			mm=_getInt(val,i_val,token.length,2);
			if(mm==null||(mm<0)||(mm>59)){return 0;}
			i_val+=mm.length;}
		else if (token=="ss"||token=="s") {
			ss=_getInt(val,i_val,token.length,2);
			if(ss==null||(ss<0)||(ss>59)){return 0;}
			i_val+=ss.length;}
		else if (token=="a") {
			if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}
			else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}
			else {return 0;}
			i_val+=2;}
		else {
			if (val.substring(i_val,i_val+token.length)!=token) {return 0;}
			else {i_val+=token.length;}
			}
		}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length) { return 0; }
	// Is date valid for month?
	if (month==2) {
		// Check for leap year
		if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { // leap year
			if (date > 29){ return 0; }
			}
		else { if (date > 28) { return 0; } }
		}
	if ((month==4)||(month==6)||(month==9)||(month==11)) {
		if (date > 30) { return 0; }
		}
	// Correct hours value
	if (hh<12 && ampm=="PM") { hh=hh-0+12; }
	else if (hh>11 && ampm=="AM") { hh-=12; }
	var newdate=new Date(year,month-1,date,hh,mm,ss);
	return newdate.getTime();
	}

// ------------------------------------------------------------------
// parseDate( date_string [, prefer_euro_format] )
//
// This function takes a date string and tries to match it to a
// number of possible date formats to get the value. It will try to
// match against the following international formats, in this order:
// y-M-d   MMM d, y   MMM d,y   y-MMM-d   d-MMM-y  MMM d
// M/d/y   M-d-y      M.d.y     MMM-d     M/d      M-d
// d/M/y   d-M-y      d.M.y     d-MMM     d/M      d-M
// A second argument may be passed to instruct the method to search
// for formats like d/M/y (european format) before M/d/y (American).
// Returns a Date object or null if no patterns match.
// ------------------------------------------------------------------
function parseDate(val) {
	var preferEuro=(arguments.length==2)?arguments[1]:false;
	generalFormats=new Array('y-M-d','MMM d, y','MMM d,y','y-MMM-d','d-MMM-y','MMM d');
	monthFirst=new Array('M/d/y','M-d-y','M.d.y','MMM-d','M/d','M-d');
	dateFirst =new Array('d/M/y','d-M-y','d.M.y','d-MMM','d/M','d-M');
	var checkList=new Array('generalFormats',preferEuro?'dateFirst':'monthFirst',preferEuro?'monthFirst':'dateFirst');
	var d=null;
	for (var i=0; i<checkList.length; i++) {
		var l=window[checkList[i]];
		for (var j=0; j<l.length; j++) {
			d=getDateFromFormat(val,l[j]);
			if (d!=0) { return new Date(d); }
			}
		}
	return null;
	}

/* SOURCE FILE: PopupWindow.js */

/* 
PopupWindow.js
Author: Matt Kruse
Last modified: 02/16/04

DESCRIPTION: This object allows you to easily and quickly popup a window
in a certain place. The window can either be a DIV or a separate browser
window.

COMPATABILITY: Works with Netscape 4.x, 6.x, IE 5.x on Windows. Some small
positioning errors - usually with Window positioning - occur on the 
Macintosh platform. Due to bugs in Netscape 4.x, populating the popup 
window with <STYLE> tags may cause errors.

USAGE:
// Create an object for a WINDOW popup
var win = new PopupWindow(); 

// Create an object for a DIV window using the DIV named 'mydiv'
var win = new PopupWindow('mydiv'); 

// Set the window to automatically hide itself when the user clicks 
// anywhere else on the page except the popup
win.autoHide(); 

// Show the window relative to the anchor name passed in
win.showPopup(anchorname);

// Hide the popup
win.hidePopup();

// Set the size of the popup window (only applies to WINDOW popups
win.setSize(width,height);

// Populate the contents of the popup window that will be shown. If you 
// change the contents while it is displayed, you will need to refresh()
win.populate(string);

// set the URL of the window, rather than populating its contents
// manually
win.setUrl("http://www.site.com/");

// Refresh the contents of the popup
win.refresh();

// Specify how many pixels to the right of the anchor the popup will appear
win.offsetX = 50;

// Specify how many pixels below the anchor the popup will appear
win.offsetY = 100;

NOTES:
1) Requires the functions in AnchorPosition.js

2) Your anchor tag MUST contain both NAME and ID attributes which are the 
   same. For example:
   <A NAME="test" ID="test"> </A>

3) There must be at least a space between <A> </A> for IE5.5 to see the 
   anchor tag correctly. Do not do <A></A> with no space.

4) When a PopupWindow object is created, a handler for 'onmouseup' is
   attached to any event handler you may have already defined. Do NOT define
   an event handler for 'onmouseup' after you define a PopupWindow object or
   the autoHide() will not work correctly.
*/ 

// Set the position of the popup window based on the anchor
function PopupWindow_getXYPosition(anchorobj) 
{
	var coordinates = alib.dom.getElementPosition(anchorobj);
	this.x = coordinates.x;
	this.y = coordinates.y;
}

// Set width/height of DIV/popup window
function PopupWindow_setSize(width,height) 
{
	this.width = width;
	this.height = height;
}

// Fill the window with contents
function PopupWindow_populate(contents) 
{
	this.contents = contents;
	this.populated = false;
}

// Set the URL to go to
function PopupWindow_setUrl(url) 
{
	this.url = url;
}

// Set the window popup properties
function PopupWindow_setWindowProperties(props) 
{
	this.windowProperties = props;
}

// Refresh the displayed contents of the popup
function PopupWindow_refresh() 
{
	if (this.divRef != null) 
	{
		// refresh the DIV object
		this.divRef.innerHTML = this.contents;
	}
	else 
	{
		if (this.popupWindow != null && !this.popupWindow.closed) 
		{
			if (this.url!="") 
			{
				this.popupWindow.location.href=this.url;
			}
			else 
			{
				this.popupWindow.document.open();
				this.popupWindow.document.writeln(this.contents);
				this.popupWindow.document.close();
			}
			this.popupWindow.focus();
		}
	}
}
// Position and show the popup, relative to an anchor object
function PopupWindow_showPopup(anchorname) 
{
	this.getXYPosition(anchorname);
	this.x += this.offsetX;
	this.y += this.offsetY;
	if (!this.populated && (this.contents != "")) 
	{
		this.populated = true;
		this.refresh();
		}
	if (this.divRef != null) 
	{
		// Show the DIV object        
		this.divRef.style.left = this.x + 153 + "px";
		this.divRef.style.top = this.y + "px";
		this.divRef.style.visibility = "visible";
	}
	else 
	{
		if (this.popupWindow == null || this.popupWindow.closed) 
		{
			// If the popup window will go off-screen, move it so it doesn't
			if (this.x<0) { this.x=0; }
			if (this.y<0) { this.y=0; }
			if (screen && screen.availHeight) 
			{
				if ((this.y + this.height) > screen.availHeight) 
				{
					this.y = screen.availHeight - this.height;
				}
			}
			if (screen && screen.availWidth) 
			{
				if ((this.x + this.width) > screen.availWidth) 
				{
					this.x = screen.availWidth - this.width;
				}
			}

			var avoidAboutBlank = window.opera || ( document.layers && !navigator.mimeTypes['*'] ) || navigator.vendor == 'KDE' || ( document.childNodes && !document.all && !navigator.taintEnabled );
			this.popupWindow = window.open(avoidAboutBlank?"":"about:blank","window_"+anchorname,this.windowProperties+",width="+this.width+",height="+this.height+",screenX="+this.x+",left="+this.x+",screenY="+this.y+",top="+this.y+"");
			}
		this.refresh();
		}
	}
// Hide the popup
function PopupWindow_hidePopup() 
{
	if (this.divRef != null) 
	{
			this.divRef.style.visibility = "hidden";
	}
	else 
	{
		if (this.popupWindow && !this.popupWindow.closed) 
		{
			this.popupWindow.close();
			this.popupWindow = null;
		}
	}
}

// Check an onMouseDown event to see if we should hide
function PopupWindow_hideIfNotClicked(e) 
{
	if (this.autoHideEnabled && !this.divRef.haveFocus) 
	{
		this.hidePopup();
	}
}

// Call this to make the DIV disable automatically when mouse is clicked outside it
function PopupWindow_autoHide() 
{
	this.autoHideEnabled = true;
}

// This global function checks all PopupWindow objects onmouseup to see if they should be hidden
function PopupWindow_hidePopupWindows(e) 
{
	for (var i=0; i<popupWindowObjects.length; i++) 
	{
		if (popupWindowObjects[i] != null) 
		{
			var p = popupWindowObjects[i];
			p.hideIfNotClicked(e);
		}
	}
}

// Run this immediately to attach the event listener
function PopupWindow_attachListener() 
{
	if (alib.dom.m_document.layers) 
	{
		alib.dom.m_document.captureEvents(Event.MOUSEUP);
	}

	window.popupWindowOldEventListener = document.onmouseup;
	if (window.popupWindowOldEventListener != null) 
	{
		document.onmouseup = new Function("window.popupWindowOldEventListener(); PopupWindow_hidePopupWindows();");
	}
	else 
	{
		document.onmouseup = PopupWindow_hidePopupWindows;
	}
}

// CONSTRUCTOR for the PopupWindow object
// Pass it a DIV name to use a DHTML popup, otherwise will default to window popup
function PopupWindow() 
{
	if (!window.popupWindowIndex) { window.popupWindowIndex = 0; }
	if (!window.popupWindowObjects) { window.popupWindowObjects = new Array(); }
	if (!window.listenerAttached) {
		window.listenerAttached = true;
		PopupWindow_attachListener();
		}
	this.index = popupWindowIndex++;
	popupWindowObjects[this.index] = this;
	this.divRef = null;
	this.popupWindow = null;
	this.width=0;
	this.height=0;
	this.populated = false;
	this.visible = false;
	this.autoHideEnabled = false;
	
	this.contents = "";
	this.url="";
	this.windowProperties="toolbar=no,location=no,status=no,menubar=no,scrollbars=auto,resizable,alwaysRaised,dependent,titlebar=no";
	if (arguments.length>0) 
	{
		this.type="DIV";
		this.divRef = arguments[0];
	}
	else 
	{
		this.type="WINDOW";
	}
	this.use_gebi = false;
	this.use_css = false;
	this.use_layers = false;
	if (document.getElementById) { this.use_gebi = true; }
	else if (document.all) { this.use_css = true; }
	else if (document.layers) { this.use_layers = true; }
	else { this.type = "WINDOW"; }
	this.offsetX = 0;
	this.offsetY = 0;
	// Method mappings
	this.getXYPosition = PopupWindow_getXYPosition;
	this.populate = PopupWindow_populate;
	this.setUrl = PopupWindow_setUrl;
	this.setWindowProperties = PopupWindow_setWindowProperties;
	this.refresh = PopupWindow_refresh;
	this.showPopup = PopupWindow_showPopup;
	this.hidePopup = PopupWindow_hidePopup;
	this.setSize = PopupWindow_setSize;
	this.autoHide = PopupWindow_autoHide;
	this.hideIfNotClicked = PopupWindow_hideIfNotClicked;
	}

/* SOURCE FILE: CalendarPopup.js */

// HISTORY
// ------------------------------------------------------------------
// Feb 7, 2005: Fixed a CSS styles to use px unit
// March 29, 2004: Added check in select() method for the form field
//      being disabled. If it is, just return and don't do anything.
// March 24, 2004: Fixed bug - when month name and abbreviations were
//      changed, date format still used original values.
// January 26, 2004: Added support for drop-down month and year
//      navigation (Thanks to Chris Reid for the idea)
// September 22, 2003: Fixed a minor problem in YEAR calendar with
//      CSS prefix.
// August 19, 2003: Renamed the function to get styles, and made it
//      work correctly without an object reference
// August 18, 2003: Changed showYearNavigation and 
//      showYearNavigationInput to optionally take an argument of
//      true or false
// July 31, 2003: Added text input option for year navigation.
//      Added a per-calendar CSS prefix option to optionally use 
//      different styles for different calendars.
// July 29, 2003: Fixed bug causing the Today link to be clickable 
//      even though today falls in a disabled date range.
//      Changed formatting to use pure CSS, allowing greater control
//      over look-and-feel options.
// June 11, 2003: Fixed bug causing the Today link to be unselectable
//      under certain cases when some days of week are disabled
// March 14, 2003: Added ability to disable individual dates or date
//      ranges, display as light gray and strike-through
// March 14, 2003: Removed dependency on graypixel.gif and instead 
///     use table border coloring
// March 12, 2003: Modified showCalendar() function to allow optional
//      start-date parameter
// March 11, 2003: Modified select() function to allow optional
//      start-date parameter
/* 
DESCRIPTION: This object implements a popup calendar to allow the user to
select a date, month, quarter, or year.

COMPATABILITY: Works with Netscape 4.x, 6.x, IE 5.x on Windows. Some small
positioning errors - usually with Window positioning - occur on the 
Macintosh platform.
The calendar can be modified to work for any location in the world by 
changing which weekday is displayed as the first column, changing the month
names, and changing the column headers for each day.

USAGE:
// Create a new CalendarPopup object of type WINDOW
var cal = new CalendarPopup(); 

// Create a new CalendarPopup object of type DIV using the DIV named 'mydiv'
var cal = new CalendarPopup('mydiv'); 

// Easy method to link the popup calendar with an input box. 
cal.select(inputObject, anchorname, dateFormat);
// Same method, but passing a default date other than the field's current value
cal.select(inputObject, anchorname, dateFormat, '01/02/2000');
// This is an example call to the popup calendar from a link to populate an 
// input box. Note that to use this, date.js must also be included!!
<A HREF="#" onClick="cal.select(document.forms[0].date,'anchorname','MM/dd/yyyy'); return false;">Select</A>

// Set the type of date select to be used. By default it is 'date'.
cal.setDisplayType(type);

// When a date, month, quarter, or year is clicked, a function is called and
// passed the details. You must write this function, and tell the calendar
// popup what the function name is.
// Function to be called for 'date' select receives y, m, d
cal.setReturnFunction(functionname);
// Function to be called for 'month' select receives y, m
cal.setReturnMonthFunction(functionname);
// Function to be called for 'quarter' select receives y, q
cal.setReturnQuarterFunction(functionname);
// Function to be called for 'year' select receives y
cal.setReturnYearFunction(functionname);

// Show the calendar relative to a given anchor
cal.showCalendar(anchorname);

// Hide the calendar. The calendar is set to autoHide automatically
cal.hideCalendar();

// Set the month names to be used. Default are English month names
cal.setMonthNames("January","February","March",...);

// Set the month abbreviations to be used. Default are English month abbreviations
cal.setMonthAbbreviations("Jan","Feb","Mar",...);

// Show navigation for changing by the year, not just one month at a time
cal.showYearNavigation();

// Show month and year dropdowns, for quicker selection of month of dates
cal.showNavigationDropdowns();

// Set the text to be used above each day column. The days start with 
// sunday regardless of the value of WeekStartDay
cal.setDayHeaders("S","M","T",...);

// Set the day for the first column in the calendar grid. By default this
// is Sunday (0) but it may be changed to fit the conventions of other
// countries.
cal.setWeekStartDay(1); // week is Monday - Sunday

// Set the weekdays which should be disabled in the 'date' select popup. You can
// then allow someone to only select week end dates, or Tuedays, for example
cal.setDisabledWeekDays(0,1); // To disable selecting the 1st or 2nd days of the week

// Selectively disable individual days or date ranges. Disabled days will not
// be clickable, and show as strike-through text on current browsers.
// Date format is any format recognized by parseDate() in date.js
// Pass a single date to disable:
cal.addDisabledDates("2003-01-01");
// Pass null as the first parameter to mean "anything up to and including" the
// passed date:
cal.addDisabledDates(null, "01/02/03");
// Pass null as the second parameter to mean "including the passed date and
// anything after it:
cal.addDisabledDates("Jan 01, 2003", null);
// Pass two dates to disable all dates inbetween and including the two
cal.addDisabledDates("January 01, 2003", "Dec 31, 2003");

// When the 'year' select is displayed, set the number of years back from the 
// current year to start listing years. Default is 2.
// This is also used for year drop-down, to decide how many years +/- to display
cal.setYearSelectStartOffset(2);

// Text for the word "Today" appearing on the calendar
cal.setTodayText("Today");

// The calendar uses CSS classes for formatting. If you want your calendar to
// have unique styles, you can set the prefix that will be added to all the
// classes in the output.
// For example, normal output may have this:
//     <SPAN CLASS="acCalTodayTextDisabled">Today<SPAN>
// But if you set the prefix like this:
cal.setCssPrefix("Test");
// The output will then look like:
//     <SPAN CLASS="TestacCalTodayTextDisabled">Today<SPAN>
// And you can define that style somewhere in your page.

// When using Year navigation, you can make the year be an input box, so
// the user can manually change it and jump to any year
cal.showYearNavigationInput();

// Set the calendar offset to be different than the default. By default it
// will appear just below and to the right of the anchorname. So if you have
// a text box where the date will go and and anchor immediately after the
// text box, the calendar will display immediately under the text box.
cal.offsetX = 20;
cal.offsetY = 20;

NOTES:
1) Requires the functions in AnchorPosition.js and PopupWindow.js

2) Your anchor tag MUST contain both NAME and ID attributes which are the 
   same. For example:
   <A NAME="test" ID="test"> </A>

3) There must be at least a space between <A> </A> for IE5.5 to see the 
   anchor tag correctly. Do not do <A></A> with no space.

4) When a CalendarPopup object is created, a handler for 'onmouseup' is
   attached to any event handler you may have already defined. Do NOT define
   an event handler for 'onmouseup' after you define a CalendarPopup object 
   or the autoHide() will not work correctly.
   
5) The calendar popup display uses style sheets to make it look nice.

*/ 

// CONSTRUCTOR for the CalendarPopup Object
function CalendarPopup() 
{
	var c;
	if (arguments.length>0) 
	{
		c = new PopupWindow(arguments[0]);
	}
	else 
	{
		c = new PopupWindow();
		c.setSize(150,175);
	}

	c.offsetX = -152;
	c.offsetY = 25;
	c.autoHide();
	// Calendar-specific properties
	c.monthNames = new Array("January","February","March","April","May","June","July","August","September","October","November","December");
	c.monthAbbreviations = new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
	c.dayHeaders = new Array("S","M","T","W","T","F","S");
	c.returnFunction = "CP_tmpReturnFunction";
	c.returnMonthFunction = "CP_tmpReturnMonthFunction";
	c.returnQuarterFunction = "CP_tmpReturnQuarterFunction";
	c.returnYearFunction = "CP_tmpReturnYearFunction";
	c.weekStartDay = 0;
	c.isShowYearNavigation = false;
	c.displayType = "date";
	c.disabledWeekDays = new Object();
	c.disabledDatesExpression = "";
	c.yearSelectStartOffset = 2;
	c.currentDate = null;
	c.todayText="Today";
	c.cssPrefix="";
	c.isShowNavigationDropdowns=false;
	c.isShowYearNavigationInput=false;
	window.CP_calendarObject = null;
	window.CP_targetInput = null;
	window.CP_dateFormat = "MM/dd/yyyy";
	// Method mappings
	c.copyMonthNamesToWindow = CP_copyMonthNamesToWindow;
	c.setReturnFunction = CP_setReturnFunction;
	c.setReturnMonthFunction = CP_setReturnMonthFunction;
	c.setReturnQuarterFunction = CP_setReturnQuarterFunction;
	c.setReturnYearFunction = CP_setReturnYearFunction;
	c.setMonthNames = CP_setMonthNames;
	c.setMonthAbbreviations = CP_setMonthAbbreviations;
	c.setDayHeaders = CP_setDayHeaders;
	c.setWeekStartDay = CP_setWeekStartDay;
	c.setDisplayType = CP_setDisplayType;
	c.setDisabledWeekDays = CP_setDisabledWeekDays;
	c.addDisabledDates = CP_addDisabledDates;
	c.setYearSelectStartOffset = CP_setYearSelectStartOffset;
	c.setTodayText = CP_setTodayText;
	c.showYearNavigation = CP_showYearNavigation;
	c.showCalendar = CP_showCalendar;
	c.hideCalendar = CP_hideCalendar;
	c.getStyles = getCalendarStyles;
	c.refreshCalendar = CP_refreshCalendar;
	c.getCalendar = CP_getCalendar;
	c.select = CP_select;
	c.setCssPrefix = CP_setCssPrefix;
	c.showNavigationDropdowns = CP_showNavigationDropdowns;
	c.showYearNavigationInput = CP_showYearNavigationInput;
	c.copyMonthNamesToWindow();

	// Return the object
	return c;
}
function CP_copyMonthNamesToWindow() {
	// Copy these values over to the date.js 
	if (typeof(window.MONTH_NAMES)!="undefined" && window.MONTH_NAMES!=null) {
		window.MONTH_NAMES = new Array();
		for (var i=0; i<this.monthNames.length; i++) {
			window.MONTH_NAMES[window.MONTH_NAMES.length] = this.monthNames[i];
		}
		for (var i=0; i<this.monthAbbreviations.length; i++) {
			window.MONTH_NAMES[window.MONTH_NAMES.length] = this.monthAbbreviations[i];
		}
	}
}
// Temporary default functions to be called when items clicked, so no error is thrown
function CP_tmpReturnFunction(y,m,d) 
{ 
	if (window.CP_targetInput!=null) 
	{
		var dt = new Date(y,m-1,d,0,0,0);
		if (window.CP_calendarObject!=null) 
		{ 
			window.CP_calendarObject.copyMonthNamesToWindow(); 
		}
		
		window.CP_targetInput.value = formatDate(dt,window.CP_dateFormat);
		if (window.CP_targetInput.onchange)
			window.CP_targetInput.onchange();
	}
	else 
	{
		alert('Use setReturnFunction() to define which function will get the clicked results!'); 
	}
}

function CP_tmpReturnMonthFunction(y,m) { 
	alert('Use setReturnMonthFunction() to define which function will get the clicked results!\nYou clicked: year='+y+' , month='+m); 
	}
function CP_tmpReturnQuarterFunction(y,q) { 
	alert('Use setReturnQuarterFunction() to define which function will get the clicked results!\nYou clicked: year='+y+' , quarter='+q); 
	}
function CP_tmpReturnYearFunction(y) { 
	alert('Use setReturnYearFunction() to define which function will get the clicked results!\nYou clicked: year='+y); 
	}

// Set the name of the functions to call to get the clicked item
function CP_setReturnFunction(name) { this.returnFunction = name; }
function CP_setReturnMonthFunction(name) { this.returnMonthFunction = name; }
function CP_setReturnQuarterFunction(name) { this.returnQuarterFunction = name; }
function CP_setReturnYearFunction(name) { this.returnYearFunction = name; }

// Over-ride the built-in month names
function CP_setMonthNames() {
	for (var i=0; i<arguments.length; i++) { this.monthNames[i] = arguments[i]; }
	this.copyMonthNamesToWindow();
	}

// Over-ride the built-in month abbreviations
function CP_setMonthAbbreviations() {
	for (var i=0; i<arguments.length; i++) { this.monthAbbreviations[i] = arguments[i]; }
	this.copyMonthNamesToWindow();
	}

// Over-ride the built-in column headers for each day
function CP_setDayHeaders() {
	for (var i=0; i<arguments.length; i++) { this.dayHeaders[i] = arguments[i]; }
	}

// Set the day of the week (0-7) that the calendar display starts on
// This is for countries other than the US whose calendar displays start on Monday(1), for example
function CP_setWeekStartDay(day) { this.weekStartDay = day; }

// Show next/last year navigation links
function CP_showYearNavigation() { this.isShowYearNavigation = (arguments.length>0)?arguments[0]:true; }

// Which type of calendar to display
function CP_setDisplayType(type) {
	if (type!="date"&&type!="week-end"&&type!="month"&&type!="quarter"&&type!="year") { alert("Invalid display type! Must be one of: date,week-end,month,quarter,year"); return false; }
	this.displayType=type;
	}

// How many years back to start by default for year display
function CP_setYearSelectStartOffset(num) { this.yearSelectStartOffset=num; }

// Set which weekdays should not be clickable
function CP_setDisabledWeekDays() {
	this.disabledWeekDays = new Object();
	for (var i=0; i<arguments.length; i++) { this.disabledWeekDays[arguments[i]] = true; }
	}
	
// Disable individual dates or ranges
// Builds an internal logical test which is run via eval() for efficiency
function CP_addDisabledDates(start, end) {
	if (arguments.length==1) { end=start; }
	if (start==null && end==null) { return; }
	if (this.disabledDatesExpression!="") { this.disabledDatesExpression+= "||"; }
	if (start!=null) { start = parseDate(start); start=""+start.getFullYear()+LZ(start.getMonth()+1)+LZ(start.getDate());}
	if (end!=null) { end=parseDate(end); end=""+end.getFullYear()+LZ(end.getMonth()+1)+LZ(end.getDate());}
	if (start==null) { this.disabledDatesExpression+="(ds<="+end+")"; }
	else if (end  ==null) { this.disabledDatesExpression+="(ds>="+start+")"; }
	else { this.disabledDatesExpression+="(ds>="+start+"&&ds<="+end+")"; }
	}
	
// Set the text to use for the "Today" link
function CP_setTodayText(text) {
	this.todayText = text;
	}

// Set the prefix to be added to all CSS classes when writing output
function CP_setCssPrefix(val) 
{ 
	this.cssPrefix = val; 
}

// Show the navigation as an dropdowns that can be manually changed
function CP_showNavigationDropdowns() { this.isShowNavigationDropdowns = (arguments.length>0)?arguments[0]:true; }

// Show the year navigation as an input box that can be manually changed
function CP_showYearNavigationInput() { this.isShowYearNavigationInput = (arguments.length>0)?arguments[0]:true; }

// Hide a calendar object
function CP_hideCalendar() {
	if (arguments.length > 0) { window.popupWindowObjects[arguments[0]].hidePopup(); }
	else { this.hidePopup(); }
	}

// Refresh the contents of the calendar display
function CP_refreshCalendar(index) {
	var calObject = window.popupWindowObjects[index];
	if (arguments.length>1) { 
		calObject.populate(calObject.getCalendar(arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]));
		}
	else {
		calObject.populate(calObject.getCalendar());
		}
	calObject.refresh();
	}

// Populate the calendar and display it
function CP_showCalendar(anchodobj) {
	if (arguments.length>1) {
		if (arguments[1]==null||arguments[1]=="") {
			this.currentDate=new Date();
			}
		else {
			this.currentDate=new Date(parseDate(arguments[1]));
			}
		}
	this.populate(this.getCalendar());
	this.showPopup(anchodobj);
	}

// Simple method to interface popup calendar with a text-entry box
function CP_select(inputobj, linkobj, format) 
{
	var selectedDate=(arguments.length>3)?arguments[3]:null;
	if (!window.getDateFromFormat) {
		alert("calendar.select: To use this method you must also include 'date.js' for date formatting");
		return;
		}
	if (this.displayType!="date"&&this.displayType!="week-end") {
		alert("calendar.select: This function can only be used with displayType 'date' or 'week-end'");
		return;
		}
	if (inputobj.type!="text" && inputobj.type!="hidden" && inputobj.type!="textarea") { 
		alert("calendar.select: Input object passed is not a valid form input object"); 
		window.CP_targetInput=null;
		return;
		}
	if (inputobj.disabled) { return; } // Can't use calendar input on disabled form input!
	window.CP_targetInput = inputobj;
	window.CP_calendarObject = this;
	this.currentDate=null;
	var time=0;
	if (selectedDate!=null) {
		time = getDateFromFormat(selectedDate,format)
		}
	else if (inputobj.value!="") {
		time = getDateFromFormat(inputobj.value,format);
		}
	if (selectedDate!=null || inputobj.value!="") {
		if (time==0) { this.currentDate=null; }
		else { this.currentDate=new Date(time); }
		}
	window.CP_dateFormat = format;
	this.showCalendar(linkobj);
	}
	
// Get style block needed to display the calendar correctly
function getCalendarStyles() 
{
	var result = "";
	var p = "";
	if (this!=null && typeof(this.cssPrefix)!="undefined" && this.cssPrefix!=null && this.cssPrefix!="") { p=this.cssPrefix; }
	result += "<STYLE>\n";
	result += "."+p+"acCalYearNavigation,."+p+"acCalMonthNavigation { background-color:#C0C0C0; text-align:center; vertical-align:center; text-decoration:none; color:#000000; font-weight:bold; }\n";
	result += "."+p+"acCalDayColumnHeader, ."+p+"acCalYearNavigation,."+p+"acCalMonthNavigation,."+p+"acCalCurrentMonthDate,."+p+"acCalCurrentMonthDateDisabled,."+p+"acCalOtherMonthDate,."+p+"acCalOtherMonthDateDisabled,."+p+"acCalCurrentDate,."+p+"acCurrentDateDisabled,."+p+"acCalTodayText,."+p+"acCalTodayTextDisabled,."+p+"cpText { font-family:arial; font-size:8pt; }\n";
	result += "TD."+p+"acCalDayColumnHeader { text-align:right; border:solid thin #C0C0C0;border-width:0px 0px 1px 0px; }\n";
	result += "."+p+"acCalCurrentMonthDate, ."+p+"acCalOtherMonthDate, ."+p+"acCalCurrentDate  { text-align:right; text-decoration:none; }\n";
	result += "."+p+"acCalCurrentMonthDateDisabled, ."+p+"acCalOtherMonthDateDisabled, ."+p+"acCurrentDateDisabled { color:#D0D0D0; text-align:right; text-decoration:line-through; }\n";
	result += "."+p+"acCalCurrentMonthDate, .acCalCurrentDate { color:#000000; }\n";
	result += "."+p+"acCalOtherMonthDate { color:#808080; }\n";
	result += "TD."+p+"acCalCurrentDate { color:white; background-color: #C0C0C0; border-width:1px; border:solid thin #800000; }\n";
	result += "TD."+p+"acCurrentDateDisabled { border-width:1px; border:solid thin #FFAAAA; }\n";
	result += "TD."+p+"acCalTodayText, TD."+p+"acCalTodayTextDisabled { border:solid thin #C0C0C0; border-width:1px 0px 0px 0px;}\n";
	result += "A."+p+"acCalTodayText, SPAN."+p+"acCalTodayTextDisabled { height:20px; }\n";
	result += "A."+p+"acCalTodayText { color:black; }\n";
	result += "."+p+"acCalTodayTextDisabled { color:#D0D0D0; }\n";
	result += "."+p+"cpBorder { border:solid thin #808080; }\n";
	result += "</STYLE>\n";
	return result;
}

// Return a string containing all the calendar code to be displayed
function CP_getCalendar() {
	var now = new Date();
	// Reference to window
	if (this.type == "WINDOW") { var windowref = "window.opener."; }
	else { var windowref = ""; }
	var result = "";
	// If POPUP, write entire HTML document
	if (this.type == "WINDOW") 
	{
		result += "<HTML><HEAD><TITLE>Calendar</TITLE>"+this.getStyles()+"</HEAD><BODY MARGINWIDTH=0 MARGINHEIGHT=0 TOPMARGIN=0 RIGHTMARGIN=0 LEFTMARGIN=0>\n";
		result += '<CENTER><TABLE WIDTH=100% BORDER=0 BORDERWIDTH=0 CELLSPACING=0 CELLPADDING=0>\n';
	}

	// Code for DATE display (default)
	// -------------------------------
	if (this.displayType=="date" || this.displayType=="week-end") {
		if (this.currentDate==null) { this.currentDate = now; }
		if (arguments.length > 0) { var month = arguments[0]; }
			else { var month = this.currentDate.getMonth()+1; }
		if (arguments.length > 1 && arguments[1]>0 && arguments[1]-0==arguments[1]) { var year = arguments[1]; }
			else { var year = this.currentDate.getFullYear(); }
		var daysinmonth= new Array(0,31,28,31,30,31,30,31,31,30,31,30,31);
		if ( ( (year%4 == 0)&&(year%100 != 0) ) || (year%400 == 0) ) {
			daysinmonth[2] = 29;
			}
		var current_month = new Date(year,month-1,1);
		var display_year = year;
		var display_month = month;
		var display_date = 1;
		var weekday= current_month.getDay();
		var offset = 0;
		
		offset = (weekday >= this.weekStartDay) ? weekday-this.weekStartDay : 7-this.weekStartDay+weekday ;
		if (offset > 0) {
			display_month--;
			if (display_month < 1) { display_month = 12; display_year--; }
			display_date = daysinmonth[display_month]-offset+1;
			}
		var next_month = month+1;
		var next_month_year = year;
		if (next_month > 12) { next_month=1; next_month_year++; }
		var last_month = month-1;
		var last_month_year = year;
		if (last_month < 1) { last_month=12; last_month_year--; }
		var date_class;
		if (this.type!="WINDOW") {
			result += "<TABLE WIDTH=144 BORDER=0 BORDERWIDTH=0 CELLSPACING=0 CELLPADDING=0>";
			}
		result += '<TR>\n';
		var refresh = windowref+'CP_refreshCalendar';
		var refreshLink = 'javascript:' + refresh;
		if (this.isShowNavigationDropdowns) {
			result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="78" COLSPAN="3"><select CLASS="'+this.cssPrefix+'acCalMonthNavigation" name="cpMonth" onChange="'+refresh+'('+this.index+',this.options[this.selectedIndex].value-0,'+(year-0)+');">';
			for( var monthCounter=1; monthCounter<=12; monthCounter++ ) {
				var selected = (monthCounter==month) ? 'SELECTED' : '';
				result += '<option value="'+monthCounter+'" '+selected+'>'+this.monthNames[monthCounter-1]+'</option>';
				}
			result += '</select></TD>';
			result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="10">&nbsp;</TD>';

			result += '<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="56" COLSPAN="3"><select CLASS="'+this.cssPrefix+'acCalYearNavigation" name="cpYear" onChange="'+refresh+'('+this.index+','+month+',this.options[this.selectedIndex].value-0);">';
			for( var yearCounter=year-this.yearSelectStartOffset; yearCounter<=year+this.yearSelectStartOffset; yearCounter++ ) {
				var selected = (yearCounter==year) ? 'SELECTED' : '';
				result += '<option value="'+yearCounter+'" '+selected+'>'+yearCounter+'</option>';
				}
			result += '</select></TD>';
			}
		else {
			if (this.isShowYearNavigation) {
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="10"><A CLASS="'+this.cssPrefix+'acCalMonthNavigation" HREF="'+refreshLink+'('+this.index+','+last_month+','+last_month_year+');">&lt;</A></TD>';
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="58"><SPAN CLASS="'+this.cssPrefix+'acCalMonthNavigation">'+this.monthNames[month-1]+'</SPAN></TD>';
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="10"><A CLASS="'+this.cssPrefix+'acCalMonthNavigation" HREF="'+refreshLink+'('+this.index+','+next_month+','+next_month_year+');">&gt;</A></TD>';
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="10">&nbsp;</TD>';

				result += '<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="10"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="'+refreshLink+'('+this.index+','+month+','+(year-1)+');">&lt;</A></TD>';
				if (this.isShowYearNavigationInput) {
					result += '<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="36"><INPUT NAME="cpYear" CLASS="'+this.cssPrefix+'acCalYearNavigation" SIZE="4" MAXLENGTH="4" VALUE="'+year+'" onBlur="'+refresh+'('+this.index+','+month+',this.value-0);"></TD>';
					}
				else {
					result += '<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="36"><SPAN CLASS="'+this.cssPrefix+'acCalYearNavigation">'+year+'</SPAN></TD>';
					}
				result += '<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="10"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="'+refreshLink+'('+this.index+','+month+','+(year+1)+');">&gt;</A></TD>';
				}
			else {
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="22"><A CLASS="'+this.cssPrefix+'acCalMonthNavigation" HREF="'+refreshLink+'('+this.index+','+last_month+','+last_month_year+');">&lt;&lt;</A></TD>\n';
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="100"><SPAN CLASS="'+this.cssPrefix+'acCalMonthNavigation">'+this.monthNames[month-1]+' '+year+'</SPAN></TD>\n';
				result += '<TD CLASS="'+this.cssPrefix+'acCalMonthNavigation" WIDTH="22"><A CLASS="'+this.cssPrefix+'acCalMonthNavigation" HREF="'+refreshLink+'('+this.index+','+next_month+','+next_month_year+');">&gt;&gt;</A></TD>\n';
				}
			}
		result += '</TR></TABLE>\n';
		result += '<TABLE WIDTH=120 BORDER=0 CELLSPACING=0 CELLPADDING=1 ALIGN=CENTER>\n';
		result += '<TR>\n';
		for (var j=0; j<7; j++) {

			result += '<TD CLASS="'+this.cssPrefix+'acCalDayColumnHeader" WIDTH="14%"><SPAN CLASS="'+this.cssPrefix+'acCalDayColumnHeader">'+this.dayHeaders[(this.weekStartDay+j)%7]+'</TD>\n';
			}
		result += '</TR>\n';
		for (var row=1; row<=6; row++) {
			result += '<TR>\n';
			for (var col=1; col<=7; col++) {
				var disabled=false;
				if (this.disabledDatesExpression!="") {
					var ds=""+display_year+LZ(display_month)+LZ(display_date);
					eval("disabled=("+this.disabledDatesExpression+")");
					}
				var dateClass = "";
				if ((display_month == this.currentDate.getMonth()+1) && (display_date==this.currentDate.getDate()) && (display_year==this.currentDate.getFullYear())) {
					dateClass = "acCalCurrentDate";
					}
				else if (display_month == month) {
					dateClass = "acCalCurrentMonthDate";
					}
				else {
					dateClass = "acCalOtherMonthDate";
					}
				if (disabled || this.disabledWeekDays[col-1]) {
					result += '	<TD CLASS="'+this.cssPrefix+dateClass+'"><SPAN CLASS="'+this.cssPrefix+dateClass+'Disabled">'+display_date+'</SPAN></TD>\n';
					}
				else {
					var selected_date = display_date;
					var selected_month = display_month;
					var selected_year = display_year;
					if (this.displayType=="week-end") {
						var d = new Date(selected_year,selected_month-1,selected_date,0,0,0,0);
						d.setDate(d.getDate() + (7-col));
						selected_year = d.getYear();
						if (selected_year < 1000) { selected_year += 1900; }
						selected_month = d.getMonth()+1;
						selected_date = d.getDate();
						}
					result += '	<TD CLASS="'+this.cssPrefix+dateClass+'"><A HREF="javascript:'+windowref+this.returnFunction+'('+selected_year+','+selected_month+','+selected_date+');'+windowref+'CP_hideCalendar(\''+this.index+'\');" CLASS="'+this.cssPrefix+dateClass+'">'+display_date+'</A></TD>\n';
					}
				display_date++;
				if (display_date > daysinmonth[display_month]) {
					display_date=1;
					display_month++;
					}
				if (display_month > 12) {
					display_month=1;
					display_year++;
					}
				}
			result += '</TR>';
			}
		var current_weekday = now.getDay() - this.weekStartDay;
		if (current_weekday < 0) {
			current_weekday += 7;
			}
		result += '<TR>\n';
		result += '	<TD COLSPAN=7 ALIGN=CENTER CLASS="'+this.cssPrefix+'acCalTodayText">\n';
		if (this.disabledDatesExpression!="") {
			var ds=""+now.getFullYear()+LZ(now.getMonth()+1)+LZ(now.getDate());
			eval("disabled=("+this.disabledDatesExpression+")");
			}
		if (disabled || this.disabledWeekDays[current_weekday+1]) {
			result += '		<SPAN CLASS="'+this.cssPrefix+'acCalTodayTextDisabled">'+this.todayText+'</SPAN>\n';
			}
		else {
			result += '		<A CLASS="'+this.cssPrefix+'acCalTodayText" HREF="javascript:'+windowref+this.returnFunction+'(\''+now.getFullYear()+'\',\''+(now.getMonth()+1)+'\',\''+now.getDate()+'\');'+windowref+'CP_hideCalendar(\''+this.index+'\');">'+this.todayText+'</A>\n';
			}
		result += '		<BR>\n';
		result += '	</TD></TR></TABLE></CENTER></TD></TR></TABLE>\n';
	}

	// Code common for MONTH, QUARTER, YEAR
	// ------------------------------------
	if (this.displayType=="month" || this.displayType=="quarter" || this.displayType=="year") {
		if (arguments.length > 0) { var year = arguments[0]; }
		else { 
			if (this.displayType=="year") {	var year = now.getFullYear()-this.yearSelectStartOffset; }
			else { var year = now.getFullYear(); }
			}
		if (this.displayType!="year" && this.isShowYearNavigation) {
			result += "<TABLE WIDTH=144 BORDER=0 BORDERWIDTH=0 CELLSPACING=0 CELLPADDING=0>";
			result += '<TR>\n';
			result += '	<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="22"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="javascript:'+windowref+'CP_refreshCalendar('+this.index+','+(year-1)+');">&lt;&lt;</A></TD>\n';
			result += '	<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="100">'+year+'</TD>\n';
			result += '	<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="22"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="javascript:'+windowref+'CP_refreshCalendar('+this.index+','+(year+1)+');">&gt;&gt;</A></TD>\n';
			result += '</TR></TABLE>\n';
			}
		}
		
	// Code for MONTH display 
	// ----------------------
	if (this.displayType=="month") {
		// If POPUP, write entire HTML document
		result += '<TABLE WIDTH=120 BORDER=0 CELLSPACING=1 CELLPADDING=0 ALIGN=CENTER>\n';
		for (var i=0; i<4; i++) {
			result += '<TR>';
			for (var j=0; j<3; j++) {
				var monthindex = ((i*3)+j);
				result += '<TD WIDTH=33% ALIGN=CENTER><A CLASS="'+this.cssPrefix+'acCalText" HREF="javascript:'+windowref+this.returnMonthFunction+'('+year+','+(monthindex+1)+');'+windowref+'CP_hideCalendar(\''+this.index+'\');" CLASS="'+date_class+'">'+this.monthAbbreviations[monthindex]+'</A></TD>';
				}
			result += '</TR>';
			}
		result += '</TABLE></CENTER></TD></TR></TABLE>\n';
		}
	
	// Code for QUARTER display
	// ------------------------
	if (this.displayType=="quarter") {
		result += '<BR><TABLE WIDTH=120 BORDER=1 CELLSPACING=0 CELLPADDING=0 ALIGN=CENTER>\n';
		for (var i=0; i<2; i++) {
			result += '<TR>';
			for (var j=0; j<2; j++) {
				var quarter = ((i*2)+j+1);
				result += '<TD WIDTH=50% ALIGN=CENTER><BR><A CLASS="'+this.cssPrefix+'acCalText" HREF="javascript:'+windowref+this.returnQuarterFunction+'('+year+','+quarter+');'+windowref+'CP_hideCalendar(\''+this.index+'\');" CLASS="'+date_class+'">Q'+quarter+'</A><BR><BR></TD>';
				}
			result += '</TR>';
			}
		result += '</TABLE></CENTER></TD></TR></TABLE>\n';
		}

	// Code for YEAR display
	// ---------------------
	if (this.displayType=="year") {
		var yearColumnSize = 4;
		result += "<TABLE WIDTH=144 BORDER=0 BORDERWIDTH=0 CELLSPACING=0 CELLPADDING=0>";
		result += '<TR>\n';
		result += '	<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="50%"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="javascript:'+windowref+'CP_refreshCalendar('+this.index+','+(year-(yearColumnSize*2))+');">&lt;&lt;</A></TD>\n';
		result += '	<TD CLASS="'+this.cssPrefix+'acCalYearNavigation" WIDTH="50%"><A CLASS="'+this.cssPrefix+'acCalYearNavigation" HREF="javascript:'+windowref+'CP_refreshCalendar('+this.index+','+(year+(yearColumnSize*2))+');">&gt;&gt;</A></TD>\n';
		result += '</TR></TABLE>\n';
		result += '<TABLE WIDTH=120 BORDER=0 CELLSPACING=1 CELLPADDING=0 ALIGN=CENTER>\n';
		for (var i=0; i<yearColumnSize; i++) {
			for (var j=0; j<2; j++) {
				var currentyear = year+(j*yearColumnSize)+i;
				result += '<TD WIDTH=50% ALIGN=CENTER><A CLASS="'+this.cssPrefix+'acCalText" HREF="javascript:'+windowref+this.returnYearFunction+'('+currentyear+');'+windowref+'CP_hideCalendar(\''+this.index+'\');" CLASS="'+date_class+'">'+currentyear+'</A></TD>';
				}
			result += '</TR>';
			}
		result += '</TABLE>\n';
		}
	// Common
	if (this.type == "WINDOW") {
		result += "</BODY></HTML>\n";
		}
	return result;
	}



function CAutoCompleteTime(inp, inc)
{
	var incre = (inc) ? inc : 15;
	this.m_inp = inp;

	var cls = this;
	alib.dom.addEvntListener(inp, "change", cls.validateInput);
	alib.dom.addEvntListener(inp, "focus", cls.saveVal);

	// http://labs.perifer.se/timedatepicker/
	//$(inp).timePicker({step: incre});
	$(inp).timePicker({show24Hours: false, step: incre});

	/*
	var timearr = new Array('12:00 AM', '12:15 AM', '12:30 AM', '12:45 AM',
							'1:00 AM', '1:15 AM', '1:30 AM', '1:45 AM',
							'2:00 AM', '2:15 AM', '2:30 AM', '2:45 AM',
							'3:00 AM', '3:15 AM', '3:30 AM', '3:45 AM',
							'4:00 AM', '4:15 AM', '4:30 AM', '4:45 AM',
							'5:00 AM', '5:15 AM', '5:30 AM', '5:45 AM',
							'6:00 AM', '6:15 AM', '6:30 AM', '6:45 AM',
							'7:00 AM', '7:15 AM', '7:30 AM', '7:45 AM',
							'8:00 AM', '8:15 AM', '8:30 AM', '8:45 AM',
							'9:00 AM', '9:15 AM', '9:30 AM', '9:45 AM',
							'10:00 AM', '10:15 AM', '10:30 AM', '10:45 AM',
							'11:00 AM', '11:15 AM', '11:30 AM', '11:45 AM',
							'12:00 PM', '12:15 PM', '12:30 PM', '12:45 PM',
							'1:00 PM', '1:15 PM', '1:30 PM', '1:45 PM',
							'2:00 PM', '2:15 PM', '2:30 PM', '2:45 PM',
							'3:00 PM', '3:15 PM', '3:30 PM', '3:45 PM',
							'4:00 PM', '4:15 PM', '4:30 PM', '4:45 PM',
							'5:00 PM', '5:15 PM', '5:30 PM', '5:45 PM',
							'6:00 PM', '6:15 PM', '6:30 PM', '6:45 PM',
							'7:00 PM', '7:15 PM', '7:30 PM', '7:45 PM',
							'8:00 PM', '8:15 PM', '8:30 PM', '8:45 PM',
							'9:00 PM', '9:15 PM', '9:30 PM', '9:45 PM',
							'10:00 PM', '10:15 PM', '10:30 PM', '10:45 PM',
							'11:00 PM', '11:15 PM', '11:30 PM', '11:45 PM');

	var cls = this;
	alib.dom.addEvntListener(inp, "change", cls.validateInput);
	alib.dom.addEvntListener(inp, "focus", cls.saveVal);
	
	var tobj = new CAutoComplete(inp,timearr);
	*/
}

CAutoCompleteTime.prototype.validateInput = function()
{
	//regular expression to match required time format 

	//var re = /^\d{1,2}:\d{2}([ap]m)?$/; Should have $ for end of string but fails with autocomplete
	var re = /^\d{1,2}:\d{2}([ap]m)?/; 

	if(this.value != '' && !this.value.match(re) && !this.m_inac) 
	{ 
		this.value = this.m_backupval;
		this.focus(); 
	} 
}

CAutoCompleteTime.prototype.saveVal = function()
{
	this.m_backupval = this.value;
}

/*======================================================================================
	
	Module:		CNavHistory	

	Purpose:	Manage history and enable goback especially for ajax/dom applications

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Depends:	

	Usage:		

	Variables:	

======================================================================================*/

function CNavHistory()
{
	this.iCurIndex = 0;
	this.iNextIndex = 0;
	this.history = new Array();
	this.skipRegister = false;

	/*
	var me = this;
	this.lastHash = "";
	function intervalMethod() 
	{
		if ( window.location.hash != me.lastHash )
		{
			//me.lastHash = window.location.hash;
			me.goBack(window.location.hash);
		}
		return true;
	}
	this.initInterval = setInterval(intervalMethod, 1000);
	*/
}

CNavHistory.prototype.goBack = function(ind)
{
	var index = (ind) ? ind : this.iCurIndex-1; // skip over current page 
	var entry = this.history[index];

	// exit if not registered
	if (index<0)
		return;

	this.iCurIndex = index;
	this.skipRegister = true;
	this.lastHash = index;

	// Not sure if there is a better way to do this, but for now limit arguments length to 10
	switch (entry.args.length)
	{
	case 0:
		entry.funct();
		break;
	case 1:
		entry.funct(entry.args[0]);
		break;
	case 2:
		entry.funct(entry.args[0], entry.args[1]);
		break;
	case 3:
		entry.funct(entry.args[0], entry.args[1], entry.args[2]);
		break;
	case 4:
		entry.funct(entry.args[0], entry.args[1], entry.args[2], entry.args[3]);
		break;
	}

}

CNavHistory.prototype.registerBack = function(funct, args)
{
	// Skip over registration of page we just returned to
	if (this.skipRegister)
	{
		this.skipRegister = false;
		return;
	}

	var entry = new Object();
	entry.funct = funct;
	entry.args = (args) ? args : new Array();

	this.history[this.iNextIndex] = entry;
	this.lastHash = this.iNextIndex;
	//window.location.hash = this.iNextIndex;

	this.iCurIndex = this.iNextIndex;
	this.iNextIndex++;
}

/**
 * @fileOverview alib.ui.events Is used to manage and normalize events
 *
 * TODO: This class is a work in progress and is being modeled after the google event handler goog.events in Closure
 * 		 http://closure-library.googlecode.com/svn/docs/closure_goog_events_events.js.html
 *
 * DOM Example
 * <code>
 * 	var button = document.getElementById("exitingbutton");
 * 	alib.events.listen(button, "click", function(e) { alert(e.data.myMessage); ), {myMessage:"What I want to say is hi!"}}
 * </code>
 *
 * Custom Event Example
 * <code>
 * 	var custObj = new Object();
 * 	custObj.propVal = "test";
 * 	custObj.load = function()
 * 	{
 * 		// Load data here
 * 		alib.events.triggerEvent(this, "load");
 * 	}
 * 	alib.events.listen(custObj, "load", function(e) { alert(e.target.propVal); )}
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Create events namespace
 *
 * @object
 */
alib.events = {};

/**
 * Add event listener to an element
 *
 * @var {mixed} obj Either a DOM element or a custom Object to attache event to
 * @var {string} eventName The name of the event to listen for
 * @var {function|Object} callback Can be a function or an object with {context:(object reference), method:(string name)}
 * @var {Object} data Optional data to pass to event
 */
alib.events.listen = function(obj, eventName, callBack, data)
{
	var eventWrapper = new alib.events.EventWrapper(obj, eventName, callBack, data);

	// If the object does not support dispatching events then we will need to handle manually
	if (typeof obj.dispatchEvent == "undefined")
	{
		// Add private events array to custom object
		if (typeof obj.events_ == "undefined")
			obj.events_ = new Array();

		// Initialize event type into the private events array
		if (typeof obj.events_[eventName] == "undefined")
			obj.events_[eventName] = new Array();

		obj.events_[eventName][obj.events_[eventName].length] = eventWrapper;
	}
	else 
	{
		// use native dom
		alib.dom.addEvent(obj, eventName, function(evt) { 
			eventWrapper.fire(evt); 
		});
	}
}

/**
 * Removes an event from the object
 */
alib.events.unlisten = function(obj, eventName, callBack)
{

	// Manually call the event
	if (obj.events_)
	{
		if (eventName)
		{
			if (obj.events_[eventName])
			{
			}
		}
		else
		{
			// remove all events
			obj.events_ = null;
		}
	}
	else
	{
		var ret = alib.dom.removeEvent(obj, eventName, callBack);
	}
}

/**
 * Stop an event from bubbling up the event DOM
 */
alib.events.stop = function(evt)
{
}

/**
 * Manually trigger an event by name if event type is not an included DOM event (like a custom event)
 *
 * This will not be needed for DOM dispatched events so only use it when defining custom events.
 *
 * @var {mixed} obj The context of the event being fired
 * @var {string} eventName The name of the event being fired
 * @var {Object} data Optional data to be passed to the callback in event.data
 */
alib.events.triggerEvent = function(obj, eventName, data)
{
	// Event & UIEvent construcors are replcing createEvent
	if (typeof CustomEvent == "function")
	{
		var evt = new CustomEvent(eventName);
	}
	else
	{
		// Legacy
		var evt = document.createEvent("Event");
		evt.initEvent(eventName, true, true); 
	}

	// Add custom data
	evt.data = data || {};

	if (!evt.type)
		evt.type = eventName;

	if (!evt.target)
		evt.target = obj;

	// Dispatch a DOM event
	if (obj.dispatchEvent)
	{
		obj.dispatchEvent(evt);
	}
	else
	{
		// Manually call the event
		if (obj.events_)
		{
			if (obj.events_[eventName])
			{
				for (var i in obj.events_[eventName])
				{
					obj.events_[eventName][i].fire(evt);
				}
			}
		}
	}
}

/**
 * @fileoverview Event callback wrapper used to pass additional data and normalize processing
 */

/**
 * Class constructor
 *
 * @constructor
 * @var {mixed} obj Either a DOM element or a custom Object to attache event to
 * @var {string} eventName The name of the event to listen for
 * @var {function|Object} callback Can be a function or an object with {context:(object reference), method:(string name)}
 * @var {Object} data Optional data to pass to event
 */
alib.events.EventWrapper = function(obj, eventName, callback, data)
{
	/**
	 * Object being listened to
	 *
	 * @var {DOMElement|Object}
	 */
	this.target = obj;

	/**
	 * The event being listened for
	 *
	 * @var {string}
	 */
	this.eventName = eventName;

	/**
	 * Callback function or object
	 *
	 * This can either be a funciton or a class with properties context (class) and method (string)
	 */
	this.callback = callback;

	/**
	 * Optional additional data to be passed to the event.data property
	 *
	 * @var {Object}
	 */
	this.data = data || {};
}

/**
 * Fire the event and call the callback
 *
 * @var {Event} evt An event object
 */
alib.events.EventWrapper.prototype.fire = function(evt)
{
	var evt = evt || window.event; // fix IE event handling

	// Now forward additional data
	// -----------------------------------------
	if (evt.data)
	{
		// If data already exists then add this.data properties
		for (var prop in this.data)
		{
			evt.data[prop] = this.data[prop];
		}
	}
	else
	{
		evt.data = this.data;
	}

	// Call the callback
	// -----------------------------------------
	if (typeof this.callback == "function")
	{
		// Put funnction in the contxt of the object so 'this' refers to the object
		this.target.eventCallback_ = this.callback;
		this.target.eventCallback_(evt);
		this.target.eventCallback_ = null;;
		//this.callback(evt);
	}
	else if (this.callback.context && this.callback.method)
	{
		this.callback.context[this.callback.method](evt);
	}
}

/**
 * @fileOverview alib.net Is the network namespace
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Create net namespace
 *
 * @object
 */
alib.net = {};

/**
 * Optinal request prefix used before any net http requests
 *
 * This is commonly used to redirect requests like in the case where
 * we are unit testing and a call to /controller/myCon while
 * running in js-test-driver at an alternative port will not return
 * anything, setting this to "http://localhost" will force requests
 * away from the test server and to the local apache server.
 *
 * @var {string}
 */
alib.net.prefixHttp = "";

/**
 * @fileOverview alib.net.xhr Wrapper for XMLHttpRequest
 *
 * Right now this mostly encapsulates the jquery implementation of ajax but is
 * desinged to later become independent or even use another library. For that reason
 * the $.ajax should never be returned or exposed.
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Class for handling XMLHttpRequests
 *
 * @constructor
 */
alib.net.Xhr = function() 
{
}

/**
 * Handle to ajax xhr
 *
 * @private
 * @type {$.ajax}
 */
alib.net.Xhr.prototype.ajax_ = null;

/**
 * What kind of data is being returned
 *
 * Can be xml, json, script, text, or html
 *
 * @private
 * @type {string}
 */
alib.net.Xhr.prototype.returnType_ = "json";

/**
 * Determine whether or not we will send async or hang the UI until request returns (yikes)
 *
 * @private
 * @type {bool}
 */
alib.net.Xhr.prototype.isAsync_ = true;

/**
 * Flag to inidicate if request is in progress
 *
 * @private
 * @type {bool}
 */
alib.net.Xhr.prototype.isInProgress_ = false;

/**
 * Number of seconds before the request times out
 *
 * 0 means no timeout
 *
 * @private
 * @type {int}
 */
alib.net.Xhr.prototype.timeoutInterval_ = 0;

/**
 * Buffer for response
 *
 * @private
 * @type {bool}
 */
alib.net.Xhr.prototype.response_ = null;

/**
 * Static send that creates a short lived instance.
 *
 * @param {string} url Uri to make request to.
 * @param {Function=} opt_callback Callback function for when request is complete.
 * @param {string=} opt_method Send method, default: GET.
 * @param {Object|Array} opt_content Body data if POST.
 * @param {number=} opt_timeoutInterval Number of milliseconds after which an
 *     incomplete request will be aborted; 0 means no timeout is set.
 */
alib.net.Xhr.send = function(url, opt_callback, opt_method, opt_content, opt_timeoutInterval) 
{
	// Set defaults
	if (typeof opt_method == "undefined")
		opt_method = "GET";
	if (typeof opt_content == "undefined")
		opt_content = null;

	// Crete new Xhr instance and send
	var xhr = new alib.net.Xhr();
	if (opt_callback)
		alib.events.listen(xhr, "load", function(evt) { evt.data.cb(this.getResponse); }, {cb:opt_callback});
	if (opt_timeoutInterval)
		xhr.setTimeoutInterval(opt_timeoutInterval);
	xhr.send(url, opt_method, opt_content);
	return xhr;
};

/**
 * Instance send that actually uses XMLHttpRequest to make a server call.
 *
 * @param {string|goog.Uri} urlPath Uri to make request to.
 * @param {string=} opt_method Send method, default: GET.
 * @param {Array|Object|string=} opt_content Body data.
 */
alib.net.Xhr.prototype.send = function(urlPath, opt_method, opt_content) 
{
	var method = opt_method || "GET";
	var xhr = this;
	
	// Indicate a request is in progress
	xhr.isInProgress_ = true;

	// Check if we need to put a prefix on the request
	if (alib.net.prefixHttp != "")
		urlPath = alib.net.prefixHttp + urlPath;

	this.ajax_ = $.ajax({
        type: method,
        url: urlPath,
		dataType: this.returnType_,
        async: this.isAsync_,
        cache: false,
        data: opt_content || null,
		success: function(data) {
			// Store response in buffer
			xhr.response_ = data;

			// Trigger load events for any listeners
			alib.events.triggerEvent(xhr, "load");

			// No longer in progress of course
			xhr.isInProgress_ = false;
		},
		error: function(jqXHR, textStatus, errorThrown) {
			// Clear response
			xhr.response_ = null;

			// Trigger load events for any listeners
			alib.events.triggerEvent(xhr, "error");

			// No longer in progress of course
			xhr.isInProgress_ = false;
		}
	});
}

/**
 * Set what kind of data is being returned
 *
 * @param {string} type Can be "xml", "json", "script", "text", or "html"
 */
alib.net.Xhr.prototype.setReturnType = function(type)
{
	this.returnType_ = type;
}

/**
 * Sets whether or not this request will be made asynchronously
 *
 * Warning: if set to false the UI will hang until the request completes which is annoying
 *
 * @param {bool} asyc If true then set request to async
 */
alib.net.Xhr.prototype.setAsync = function(async)
{
	this.isAsync_ = async;
}

/**
 * Sets the number of seconds before timeout
 *
 * @param {int} seconds Number of seconds
 */
alib.net.Xhr.prototype.setTimeoutInterval = function(seconds)
{
	this.timeoutInterval_ = seconds;
}

/**
 * Abort the request
 */
alib.net.Xhr.prototype.abort = function()
{
	if (this.ajax_)
		this.ajax_.abort();
}

/**
 * Check if a request is in progress
 *
 * @return bool True if a request is in progress
 */
alib.net.Xhr.prototype.isInProgress = function()
{
	return this.isInProgress_;
}

/**
 * Get response text from xhr object
 */
alib.net.Xhr.prototype.getResponseText = function()
{
	return this.ajax_.responseText;
}

/**
 * Get response text from xhr object
 */
alib.net.Xhr.prototype.getResponseXML = function()
{
	return this.ajax_.responseXML;
}

/**
 * Get the parsed response
 */
alib.net.Xhr.prototype.getResponse = function()
{
	return this.response_;
}

/**
* @fileOverview Mail loader class for ui portion of framework
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Ui namespace
 */
alib.ui = {}

/**
* Create a new instance of Alib_Ui_Button
*
* @private
* @this {alib.ui}
* @param {string|DOMElement} content Either the text of data to place in button, or a dom element for placement in button tag
* @param {Object} options Optional options to use when rendering the button
*/
alib.ui.Button = function(content, options, type)
{   
	if (typeof options == "undefined")
		var options = new Object();

	var button = new Alib_Ui_Button(content, options, type);
	return button;
}

/**
* Create a new instance of Alib_Ui_ButtonToggler
*
* @private
* @this {alib.ui}
* @param {Object} options Optional options to use when rendering the button toggler
*/
alib.ui.ButtonToggler = function(options)
{   
	if (typeof options == "undefined")
		var options = new Object();

	return new Alib_Ui_ButtonToggler(options);
}

/**
* Create a new instance of Alib_Ui_Autocomplete
*
* @private
* @this {alib.ui}
* @param {string|DOMElement} content Either the text of data to place in button, or a dom element for placement in button tag
* @param {Object} options Optional options to use when rendering the button
*/
alib.ui.AutoComplete = function(el, options)
{
	var ac = new Alib_Ui_AutoComplete(el, options);
	return ac;
}

/**
* Create a new instance of Alib_Ui_Tooltip
*
* @private
* @this {alib.ui}
* @param {string|DOMElement} content Either the text of data to place in button, or a dom element for placement in button tag
* @param {Object} the message to be displayed in the toolbar container
*/
alib.ui.Editor = function(el, options)
{
    var ed = new Alib_Ui_Editor(el, options);
    return ed;
}

/**
* Create a new instance of Alib_Ui_SlimScroll
*
* @private
* @this {alib.ui}
* @param {string|DOMElement} content Either the text of data to place in button, or a dom element for placement in button tag
* @param {Object} the message to be when setting the slimscroll
*/
alib.ui.slimScroll = function(el, options)
{
    var ed = new Alib_Ui_SlimScroll(el, options);
    return ed;
}

/**
* Create a new instance of Alib_Ui_Toolbar
*
* @private
* @this {alib.ui}
* @param {Object} the message to be displayed in the toolbar container
*/
alib.ui.Toolbar = function(options)
{
	var options = options || new Object();
    var tb = new Alib_Ui_Toolbar(options);
    return tb;
}

/**
* Create a new instance of Alib_Ui_ToolbarButton
*
* @private
* @this {alib.ui}
* @param {Object} the message to be displayed in the toolbar container
*/
alib.ui.ToolbarButton = function(caption, options)
{
	var options = options || new Object();
    var tb = new Alib_Ui_ToolbarButton(caption, options);
    return tb;
}

/**
* Create a new instance of Alib_Ui_ToolbarButton
*
* @private
* @this {alib.ui}
* @param {Object} the message to be displayed in the toolbar container
*/
alib.ui.ToolbarToggleButton = function(caption, options)
{
	var options = options || new Object();
    var tb = new Alib_Ui_ToolbarToggleButton(caption, options);
    return tb;
}

/**
* Create a new instance of Alib_Ui_ToolbarButton
*
* @private
* @this {alib.ui}
* @param {Object} the message to be displayed in the toolbar container
*/
alib.ui.ToolbarSeparator = function(options)
{
	var options = options || new Object();
    var tb = new Alib_Ui_ToolbarSeparator(options);
    return tb;
}

/**
* @fileOverview alib.ui.button class
*
* This is used simply to abstract common button functions in the DOM
*
* Exampl:
* <code>
* 	var button = alib.ui.Button("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Button
 *
 * @constructor
 */
function Alib_Ui_Button(content, options, type)
{
    // button or anchor
    if (type == 'link')
        type = 'a';

    if (type == 'span')
        type = 'span';
    
    if (!type)
        type = 'button';
	/**
	 * The button dom element
	 *
	 * @private
	 * @type {DOMElement[button]}
	 */
	this.m_main = alib.dom.createElement(type);
    
	var opts = options || new Object();
    
    if (opts.className)
        alib.dom.styleAddClass(this.m_main, opts.className);

	if (typeof content == "string")
		this.m_main.innerHTML = content;
	else
		this.m_main.appendChild(content);

	if (opts.tooltip)
		this.m_main.title = opts.tooltip;
        
    // Add cursor pointer if type is link
    if (type == 'a')
        alib.dom.styleSet(this.m_main, "cursor", "pointer");

	// Set actions for button
	// -----------------------------------------
	this.m_main.m_btnh = this;
	this.m_main.opts = opts;
	this.m_main.opts.m_btnh = this;

	if (opts.onmouseover)
		this.m_main.onmouseover = function() { if (!this.disabled) this.opts.onmouseover(); };
	if (opts.onmouseout)
		this.m_main.onmouseout = function() { if (!this.disabled) this.opts.onmouseout(); };
	if (opts.onclick)
	{
		this.m_main.clickAction = opts.onclick;
		this.m_main.onclick = function() { if (!this.disabled) this.clickAction(); };
	}

	// Set all other variables in options to this.m_main scope
	for (var prop in opts)
	{
		if (prop != "onmouseover" && 
				prop != "onmouseout" && 
					prop != "onclick" && 
						prop != "className" && 
							prop != "tooltip")
		{
			this.m_main[prop] = opts[prop];
		}
	}

	/**
	 * Options used for this button
	 *
	 * @private
	 * @type {Object}
	 */
	this.options = opts;

	/**
	 * Generic object for storing temp callback properties
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();

	/**
	 * Optional toggle state
	 *
	 * If true this button is toggled on
	 *
	 * @type {bool}
	 */
	this.toggeled = false;

	// trigger click events
	alib.events.listen(this.m_main, "click", function(evt) {
		alib.events.triggerEvent(evt.data.btncls, "click");
	}, {btncls:this});

}

/**
* Disable this button
*
* @public
* @this {Alib_Ui_Button}
*/
Alib_Ui_Button.prototype.disable = function()
{
	this.m_main.disabled = true;
	alib.dom.styleAddClass(this.m_main, "disabled");
}

/**
* Enable this button
*
* @public
* @this {Alib_Ui_Button}
*/
Alib_Ui_Button.prototype.enable = function()
{
	this.m_main.disabled = false;
	alib.dom.styleRemoveClass(this.m_main, "disabled");
}

/**
* Set the content/text of this button
*
* @public
* @this {Alib_Ui_Button}
* @param {string|DOMElement} content The text or the dom element to put in this button
*/
Alib_Ui_Button.prototype.setText = function(content)
{
	if (typeof content == "string")
		this.m_main.innerHTML = content;
	else
		this.m_main.appendChild(content);
}

/**
* Get button element
*
* @public
* @this {Alib_Ui_Button}
* @return {DOMElement} The button element
*/
Alib_Ui_Button.prototype.getButton = function ()
{
	return this.m_main;
}

/**
* Print button inside a container
*
* @public
* @this {Alib_Ui_Button}
* @param {DOMElement} con Dom container that will house this button
*/
Alib_Ui_Button.prototype.print = function(con)
{
	con.appendChild(this.m_main);

	if (this.options.toggle)
	{
		this.addEvent("click", function(opt){
			if (!opt.cls.m_main.disabled)
				opt.cls.toggle();
		}, { cls:this });
	}
}

/**
* Change state of this button
*
* @public
* @this {Alib_Ui_Button}
*/
Alib_Ui_Button.prototype.toggle = function(toggled)
{
	if (typeof toggled != "undefined")
		this.toggled = toggled;
	else
		this.toggled = (this.toggled) ? false : true;

	if (this.toggled)
		alib.dom.styleAddClass(this.m_main, "on");
	else
		alib.dom.styleRemoveClass(this.m_main, "on");
}

/**
* Get the toggled state
*
* @public
* @this {Alib_Ui_Button}
*/
Alib_Ui_Button.prototype.isOn = function()
{
	return (this.toggled) ? true : false;
}

/**
* This function only exists for backwards compatibility
*
* @depricated
* @public
* @this {Alib_Ui_Button}
* @return {DOMElement} The button element
*/
Alib_Ui_Button.prototype.getTable = function ()
{
	return this.getButton();
}

/**
* Add an event listener to this button
*
* @public
* @this {Alib_Ui_Button}
*/
Alib_Ui_Button.prototype.addEvent = function(evnt, funct, options)
{
	var cbObj = {cbfun: funct, opt:options};

	alib.dom.addEvent(this.m_main, evnt, function(){ cbObj.cbfun(cbObj.opt); });
}

/**
 * Add a class to this button
 *
 * @public
 * @param {string} className
 * @this {Alib_Ui_Button}
 */
Alib_Ui_Button.prototype.addClass = function(className) {
	alib.dom.styleAddClass(this.m_main, className);
}

/**
 * Remove a class from the style of this button
 *
 * @public
 * @param {string} className
 * @this {Alib_Ui_Button}
 */
Alib_Ui_Button.prototype.removeClass = function(className) {
	alib.dom.styleRemoveClass(this.m_main, className);
}

/**
* Get the absolute width of this button
*
* @public
* @this {Alib_Ui_Button}
* @return {int} The width in px of this button
*/
Alib_Ui_Button.prototype.getWidth = function()
{
	return alib.dom.getElementWidth(this.m_main);
}

/**
 * @fileOverview Class to handle turning a dialog into a popup
 *
 * TODO: Need to handle closing the menu when clicked on the document
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Keep track of all open popups
 */
alib.ui.popups = null;

alib.ui.popupIds = 1;

/**
 * Creates an instance ui popup menu
 *
 * @constructor
 */
alib.ui.Popup = function(el, options)
{
	/**
	 * The element to hover
	 *
	 * @type {DOMElement}
	 */
	this.con = el;

	/**
	 * Options object
	 *
	 * @type {Object}
	 */
	this.options = options || new Object();

	/**
	 * Auto close on document click
	 *
	 * @type {bool}
	 */
	this.autoClose = (typeof this.options.autoClose != "undefined") ? this.options.autoClose : true;

	/**
	 * Element in the DOM popup is anchored to
	 *
	 * @type {DOMElement}
	 */
	this.anchorEl = (this.options.anchorEl) ? this.options.anchorEl : null;

	/**
	 * Is visible flag
	 *
	 * @type {bool}
	 */
	this.visible = (typeof this.options.visible != "undefined") ? this.options.visible : false;

	/**
	 * If this popup (or any children) are active
	 *
	 * @type {bool}
	 */
	this.active = false;

	/**
	 * Last hide time usually set with Date::getTime
	 *
	 * @private
	 * @type {int}
	 */
	this.lastHideTime = null;

	/**
	 * Parent menu
	 *
	 * @public
	 * @type {alib.ui.Popup}
	 */
	this.parent = null;

	/**
	 * Children menus
	 *
	 * @public
	 * @type {alib.ui.Popup[]}
	 */
	this.children = new Array;

	/**
	 * Position coords
	 *
	 * @type {Object}
	 */
	this.position = {top:0, left:0, relVert:"bottom", relHoriz:"left"};

	/**
	 * Flag to set if this has been registered
	 *
	 * @type {bool}
	 */
	this.isRegistered = false;

	// Add blur events for registering if the element is active
	alib.events.listen(el, "mouseover", function(evt) {
		evt.data.popup.setActive(true);
	}, {popup:this});

	alib.events.listen(el, "mouseout", function(evt) {
		evt.data.popup.setActive(false);
	}, {popup:this});

	if (this.options.parent)
		this.setParentPopup(this.options.parent);

	// Temp set id for tracking events
	this.id = alib.ui.popupIds + 1;
	alib.ui.popupIds++;
}

/**
 * Toggle visible
 *
 * @param {bool} visible If true then show
 */
alib.ui.Popup.prototype.setVisible = function(visible)
{
	// Manually set, or toggle
	if (typeof visible != "undefined")
		this.visible = visible;
	else
		this.visible = (this.visible) ? false : true;

	this.setActive(this.visible);

	alib.dom.styleSet(this.con, "position", "aboslute");
	alib.dom.styleSet(this.con, "z-index", "1000");

	var now = new Date();

	if (this.visible)
	{
		if (!this.isRegistered)
			this.registerPopup();

		alib.dom.styleSet(this.con, "display", "block");
		this.reposition();

		alib.events.triggerEvent(this, "onShow");
	}
	else
	{
		alib.dom.styleSet(this.con, "display", "none");
		this.lastHideTime = now.getTime();

		alib.events.triggerEvent(this, "onHide");

		for (var i in this.children)
		{
			this.children[i].setVisible(false);
		}
	}
}

/**
 * Walk up the parent-child tree of popups to get the root or first popup
 *
 * WARNING: this does not test for circular references which can case an infinite loop
 */
alib.ui.Popup.prototype.getRootPopup = function()
{
	if (this.parent)
		return this.parent.getRootPopup();
	else
		return this;
}

/**
 * Set this popup and any parent popups as active
 *
 * @param {bool} isActive If not set then toggle
 */
alib.ui.Popup.prototype.setActive = function(isActive)
{
	// Manually set, or toggle
	if (typeof isActive != "undefined")
		this.active = isActive;
	else
		this.active = (this.active) ? false : true;
		
	// Move up tree to register if the menu is active
	if (this.parent)
		this.parent.setActive(this.active);

	if (this.active)
	{
		alib.events.triggerEvent(this, "isActive");
	}
	else
		alib.events.triggerEvent(this, "isInactive");
}

/**
 * Set the parent popup
 *
 * @param {alib.ui.Popup} pop
 */
alib.ui.Popup.prototype.setParentPopup = function(pop)
{
	this.parent = pop;
	this.parent.children.push(this);
}

/**
 * Setup to close when document is clicked
 */
alib.ui.Popup.prototype.registerPopup = function(visible)
{
	if (!this.autoClose)
		return; // Do nothing

	if (alib.ui.popups == null)
	{
		// Initialize
		alib.ui.popups = new Array();

		alib.events.listen(document.body, "mousedown", function(evt) {
			for (var i in alib.ui.popups)
			{
				if (!alib.ui.popups[i].active)
					alib.ui.popups[i].setVisible(false);
			}
		}, {popup:this});
	}

	// Only root level popups should be registered in the global array
	if (!this.parent)
		alib.ui.popups.push(this);

	// Set flag for just in time processing
	this.isRegistered = true;
}

/**
 * Set position of top left
 *
 * @param {int} top The top position in px
 * @param {int} left The left position in px
 */
alib.ui.Popup.prototype.setPosition = function(t, l)
{
	this.position.top = t;
	this.position.left = l;
}

/**
 * Set auto close flag
 *
 * @param {bool} autoClose If true close this menu when the document is clicked
 */
alib.ui.Popup.prototype.setAutoClose = function(autoClose)
{
	this.autoClose = autoClose;
}

/**
 * Set position of top left
 *
 * @param {DOMElement} el The element to anchor position to
 * @param {string} vRel Relative vertical direction - "up"|"down"|"side"
 * @param {string} hRel Relative horizontal pos - "left"|"right"|"center"
 */
alib.ui.Popup.prototype.anchorToEl = function(el, vRel, hRel)
{
	if (!el)
		throw new Exception("Element is a required param");

	this.anchorEl = el;

	if (vRel)
		this.position.relVert = vRel;

	if (hRel)
		this.position.relHoriz = hRel;

	// Add blur events for registering if the element is active
	alib.events.listen(el, "mouseover", function(evt) {
		evt.data.popupLnk.setActive(true);
	}, {popupLnk:this});

	alib.events.listen(el, "mouseout", function(evt) {
		evt.data.popupLnk.setActive(false);
	}, {popupLnk:this});

	alib.events.listen(el, "blur", function(evt) {
		evt.data.popupLnk.setActive(false);
	}, {popupLnk:this});
}

/**
 * Reposition the element based on position settings
 */
alib.ui.Popup.prototype.reposition = function()
{
	var t = this.position.top;
	var l = this.position.left;

	if (this.anchorEl)
	{
		var coords = this.calcAnchordElementPos();
		t = coords.top;
		l = coords.left;
	}

	// Check for bounds to make sure we have not gone out of the viewport
	var docWidth = alib.dom.getClientWidth() + alib.dom.getScrollPosLeft(document);
	var docHeight = alib.dom.getClientHeight() + alib.dom.getScrollPosTop(document);

	var relVert = (this.position.relVert) ? this.position.relVert : "down";
	var relHoriz = (this.position.relHoriz) ? this.position.relHoriz : "";

	// Make sure popup is not off the top of the viewport
	if (t < 0)
		t = 0;

	// Make sure that the popup is not below the viewport
	if ((t + alib.dom.getElementHeight(this.con)) >= docHeight)
		t = docHeight - alib.dom.getElementHeight(this.con);
	
	// Handle horizontal issues
	switch (relVert)
	{
	case 'up':
	case 'down':
		// Make sure that the popup is not off the right
		//console.log(l + "," + alib.dom.getElementWidth(this.con) + "," + docWidth);
		if ((l + alib.dom.getElementWidth(this.con)) > docWidth)
			l = docWidth - alib.dom.getElementWidth(this.con);
		// Make sure that the popup is not off the left
		if  (l < 0)
			l = 0;
		break;

	// Position on either side of the element
	case 'side':
		// TODO: handle changing orientation
		/*
		switch (relHoriz)
		{
		case 'left':
			if ((l + alib.dom.getElementWidth(this.con)) > docWidth)
			l = pos.x - popWidth;
			break;
		case 'right':
			l = pos.r;
			break;
		}
		*/
		break;
	}

	// Set position
	alib.dom.styleSet(this.con, "position", "absolute");
	alib.dom.styleSet(this.con, "top", t + "px");
	alib.dom.styleSet(this.con, "left", l + "px");
}

/**
 * Calcuate the position based on the anchored element settings
 *
 * @return {Object} {top:px, left:px}
 */
alib.ui.Popup.prototype.calcAnchordElementPos = function(relVert, relHoriz)
{
	var t = 0;
	var l = 0;

	// Get x, y, r, b positions of the element
	var pos = alib.dom.getElementPosition(this.anchorEl);
	var relVert = (relVert) ? relVert : this.position.relVert;
	var relHoriz = (relHoriz) ? relHoriz : this.position.relHoriz;

	switch (relVert)
	{
	// Position above the anchored element
	case 'up':
		var popHeight = alib.dom.getElementHeight(this.con);
		t = pos.y - popHeight;

		switch (relHoriz)
		{
		case 'left':
			l = pos.x;
			break;
		case 'right':
			l = pos.x + pos.r;
			break;
		case 'center':
			l = (pos.x + pos.r) / 2;
			break;
		}

		break;

	// Position below the anchored element
	case 'down':
		t = pos.b;

		switch (relHoriz)
		{
		case 'left':
			l = pos.x;
			break;
		case 'right':
			l = pos.x + pos.r;
			break;
		case 'center':
			l = (pos.x + pos.r) / 2;
			break;
		}
		break;

	// Position on either side of the element
	case 'side':
		t = pos.y;
		var popWidth = alib.dom.getElementWidth(this.con, false);

		switch (relHoriz)
		{
		case 'left':
			l = pos.x - popWidth;
			break;
		case 'right':
			l = pos.r;
			break;
		}
		break;
	}

	return {top:t, left:l};
}

/**
 * Returns whether the popup is currently visible or was visible within about
 * 150 ms ago. This is used by clients to handle a very specific, but common,
 * popup scenario. The button that launches the popup should close the popup
 * on mouse down if the popup is alrady open. The problem is that the popup
 * closes itself during the capture phase of the mouse down and thus the button
 * thinks it's hidden and this should show it again. This method provides a
 * good heuristic for clients. Typically in their event handler they will have
 * code that is:
 *
 * if (menu.isOrWasRecentlyVisible()) 
 * {
 *   menu.setVisible(false);
 * } 
 * else 
 * {
 *   ... // code to position menu and initialize other state
 *   menu.setVisible(true);
 * }
 *
 * @return {boolean} Whether the popup is currently visible or was visible 150ms ago
 */
alib.ui.Popup.prototype.isOrWasRecentlyVisible = function() 
{
	var now = new Date();
	return this.visible || (now.getTime() - this.lastHideTime < 150);
};

/**
 * Determine if this popup is recently visible
 *
 * @return {boolean} Whether the popup is currently visible or was visible 150ms ago
 */
alib.ui.Popup.prototype.isVisible = function() 
{
	var now = new Date();
	return this.visible;
};

/**
* @fileOverview alib.ui.button class
*
* This is used to toggle buttons like a radio group
*
* Example with radio:
* <code>
* 	var button1 = alib.ui.Button("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
* 	var button2 = alib.ui.Button("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
* 	var button3 = alib.ui.Button("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
*
* 	var toggler = new alib.ui.ButtonToggler();
* 	toggler.add(button1, "b1name");
* 	toggler.add(button2, "b2name");
* 	toggler.add(button3, "b3name");
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_ButtonToggler
 *
 * @constructor
 * @param {Object} options
 */
function Alib_Ui_ButtonToggler(options)
{
	/**
	 * Buttons array
	 *
	 * @type {Alib_Ui_Button[]}
	 */
	this.buttons = new Array();
}

/**
 * Add a button to the toggler list
 *
 * @param {Alib_Ui_Button} button The button to add
 * @param {string} name An optional unique name to use
 */
Alib_Ui_ButtonToggler.prototype.add = function(button, name)
{
	var name = name || this.buttons.length;

	button.addEvent("click", function(opt){
		opt.cls.select(opt.name);
	}, { cls:this, name:name });

	this.buttons[name] = button;
}

/**
 * Select a button in the array of buttons and unselect all others
 *
 * @param {Alib_Ui_Button} button The button to add
 * @param {string} name An optional unique name to use
 */
Alib_Ui_ButtonToggler.prototype.select = function(name)
{
	// If we are working with a single button, then just toggle
	if (this.buttons.length == 1)
	{
		this.buttons[name].changeStat();
		///this.toggle(name);
		return;
	}

	// Else unselect all others and select current
	for (var i in this.buttons)
		this.buttons[i].toggle((i == name) ? true : false);
}

/**
 * Toggle a button
 *
 * @param {Alib_Ui_Button} button The button to add
 * @param {string} name An optional unique name to use
 */
Alib_Ui_ButtonToggler.prototype.toggle = function(name)
{
	for (var i in this.buttons)
	{
		if (i == name)
			this.buttons[i].toggle();
	}
}

/**
 * Disable all buttons
 */
Alib_Ui_ButtonToggler.prototype.disable = function()
{
	for (var i in this.buttons)
		this.buttons[i].disable();
}

/**
 * Enable all buttons
 */
Alib_Ui_ButtonToggler.prototype.enable = function()
{
	for (var i in this.buttons)
		this.buttons[i].enable();
}

/**
* @fileOverview alib.ui.button class
*
* This is used simply to abstract common button functions in the DOM
*
* Example:
* <code>
*
* 	// Create basic dropdown with array
* 	var datArr = ["first item", "next item", "last item"];
* 	var ac = alib.dom.AutoComplete(inputElementReference, {data:datArr});
*
*	// Craete dropdown that gathers data from server (json)
* 	var ac = alib.dom.AutoComplete(inputElementReference, {url:"http://server/data.php"});
* </code>
*
* Available Option Properties:
* {string} .url The url to load data from. Search strings will be passed as "get" variable named "search"
* {Array) .data Data to be used for the dropdown manually set (will not query server)
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2008-2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_AutoComplete
 *
 * @constructor
 * @param {DOMElement} el The input or textarea to add this autocomplete to
 * @param {Object} options Options to be used
 */
function Alib_Ui_AutoComplete(el, options)
{
	/* ---- Public Variables ---- */
	this.timeOut = -1; // Autocomplete Timeout in ms (-1: autocomplete never time out)
	this.actb_lim = 8;    // Number of elements autocomplete can show (-1: no limit)
	this.actb_firstText = false; // should the auto complete be limited to the beginning of keyword?
	this.enableMouse = true; // Enable Mouse Support
	this.actb_delimiter = new Array(';',',');  // Delimiter for multiple autocomplete. Set it to empty array for single autocomplete
	this.actb_startcheck = 1; // Show widget only after this number of characters is typed in.
	/* ---- Public Variables ---- */

	/* --- Styles --- */
	this.actb_bgColor = '#888888';
	this.actb_textColor = '#FFFFFF';
	this.actb_hColor = '#000000';
	this.actb_fFamily = 'Arial';
	this.actb_fSize = '12px';
	this.actb_hStyle = 'text-decoration:underline;font-weight="bold"';
	/* --- Styles --- */

	/* ---- Private Variables ---- */
	var actb_cdelimword = 0;
	var actb_display = false;
	var actb_pos = 0;
	var actb_total = 0;
	var actb_curr = null;
	var actb_rangeu = 0;
	var actb_ranged = 0;
	var actb_bool = new Array();
	var actb_pre = 0;
	var actb_toid;
	var actb_tomake = false;
	var actb_getpre = "";
	var actb_mouse_on_list = 1;
	var actb_kwcount = 0;
	var actb_caretmove = false;
	this.delimWords = new Array();
	this.delimChar = new Array();
	this.cdelimWord = 0;
	this.data = new Array();
	this.options = options;
	this.currInput = el; // should eventually replace actb_curr
	/* ---- Private Variables---- */
	
	// Initialize data if already set
	if (options.data)
		this.data = options.data;

	var actb_self = this;

	actb_curr = el;
	
	// Set flag that ac is being displayed
	this.currInput.m_inac = false;
	//actb_curr.autocomplete = "off";

	alib.dom.addEvent(this.currInput,"focus",actb_setup);
	function actb_setup()
	{
		alib.dom.addEvent(document,"keydown",actb_checkkey);
		alib.dom.addEvent(actb_curr,"blur",actb_clear);
		alib.dom.addEvent(document,"keypress",actb_keypress);
	}

	function actb_clear(evt)
	{
		if (!evt) evt = event;
		alib.dom.removeEvent(document,"keydown",actb_checkkey);
		alib.dom.removeEvent(actb_curr,"blur",actb_clear);
		alib.dom.removeEvent(document,"keypress",actb_keypress);
		actb_removedisp();
	}

	// Populate the HTML text
	function actb_parse(n)
	{
		// Escape chars
		n = n.replace(/[<]/g,'&lt;');
		n = n.replace(/[>]/g,'&gt;');

		if (actb_self.actb_delimiter.length > 0)
		{
			var t = actb_self.delimWords[actb_self.cdelimWord].trim().addslashes();
			var plen = actb_self.delimWords[actb_self.cdelimWord].trim().length;
		}
		else
		{
			var t = actb_curr.value.addslashes();
			var plen = actb_curr.value.length;
		}

		var tobuild = '';
		var i;

		if (actb_self.actb_firstText)
		{
			var re = new RegExp("^" + t, "i");
		}
		else
		{
			var re = new RegExp(t, "i");
		}

		var p = n.search(re);
				
		for (i=0;i<p;i++)
		{
			tobuild += n.substr(i,1);
		}

		tobuild += "<font style='"+(actb_self.actb_hStyle)+"'>"

		for (i=p;i<plen+p;i++)
		{
			tobuild += n.substr(i,1);
		}

		tobuild += "</font>";

		for (i=plen+p;i<n.length;i++)
		{
			tobuild += n.substr(i,1);
		}

		return tobuild;
	}

	function actb_generate()
	{
		if (document.getElementById('tat_table')){ actb_display = false;document.body.removeChild(document.getElementById('tat_table')); } 
		if (actb_kwcount == 0){
			actb_display = false;
			return;
		}	

		a = document.createElement('table');
		a.cellSpacing='1px';
		a.cellPadding='2px';
		a.style.position='absolute';
		a.style.top = eval(curTop(actb_curr) + actb_curr.offsetHeight) + "px";
		a.style.left = curLeft(actb_curr) + "px";
		a.style.backgroundColor=actb_self.actb_bgColor;
		a.id = 'tat_table';
		a.style.zIndex = "990";
		document.body.appendChild(a);
		var i;
		var first = true;
		var j = 1;
		if (actb_self.enableMouse){
			a.onmouseout = actb_table_unfocus;
			a.onmouseover = actb_table_focus;
		}
		var counter = 0;

		for (i=0;i<actb_self.data.length;i++)
		{
			if (actb_bool[i]){
				counter++;
				r = a.insertRow(-1);

				if (first && !actb_tomake)
				{
					r.style.backgroundColor = actb_self.actb_hColor;
					first = false;
					actb_pos = counter;
				}
				else if(actb_pre == i)
				{
					r.style.backgroundColor = actb_self.actb_hColor;
					first = false;
					actb_pos = counter;
				}
				else
				{
					r.style.backgroundColor = actb_self.actb_bgColor;
				}
				r.id = 'tat_tr'+(j);
				c = r.insertCell(-1);
				c.style.color = actb_self.actb_textColor;
				c.style.fontFamily = actb_self.actb_fFamily;
				c.style.fontSize = actb_self.actb_fSize;
				c.innerHTML = actb_parse(actb_self.data[i]);
				c.id = 'tat_td'+(j);
				c.setAttribute('pos',j);
				if (actb_self.enableMouse){
					c.style.cursor = 'pointer';
					c.onclick=actb_mouseclick;
					c.onmouseover = actb_table_highlight;
				}
				j++;
			}
			if (j - 1 == actb_self.actb_lim && j < actb_total){
				r = a.insertRow(-1);
				r.style.backgroundColor = actb_self.actb_bgColor;
				c = r.insertCell(-1);
				c.style.color = actb_self.actb_textColor;
				c.style.fontFamily = 'arial narrow';
				c.style.fontSize = actb_self.actb_fSize;
				c.align='center';
				replaceHTML(c,'\\/');
				if (actb_self.enableMouse){
					c.style.cursor = 'pointer';
					c.onclick = actb_mouse_down;
				}
				break;
			}
		}
		actb_rangeu = 1;
		actb_ranged = j-1;
		actb_display = true;
		if (actb_pos <= 0) actb_pos = 1;

		// Set flag that ac is being displayed
		actb_curr.m_inac = true;
	}

	function actb_remake()
	{
		document.body.removeChild(document.getElementById('tat_table'));
		a = document.createElement('table');
		a.cellSpacing='1px';
		a.cellPadding='2px';
		a.style.position='absolute';
		a.style.zIndex = "990";
		a.style.top = eval(curTop(actb_curr) + actb_curr.offsetHeight) + "px";
		a.style.left = curLeft(actb_curr) + "px";
		a.style.backgroundColor=actb_self.actb_bgColor;
		a.id = 'tat_table';
		if (actb_self.enableMouse){
			a.onmouseout= actb_table_unfocus;
			a.onmouseover=actb_table_focus;
		}
		document.body.appendChild(a);
		var i;
		var first = true;
		var j = 1;
		if (actb_rangeu > 1){
			r = a.insertRow(-1);
			r.style.backgroundColor = actb_self.actb_bgColor;
			c = r.insertCell(-1);
			c.style.color = actb_self.actb_textColor;
			c.style.fontFamily = 'arial narrow';
			c.style.fontSize = actb_self.actb_fSize;
			c.align='center';
			replaceHTML(c,'/\\');
			if (actb_self.enableMouse){
				c.style.cursor = 'pointer';
				c.onclick = actb_mouse_up;
			}
		}
		for (i=0;i<actb_self.data.length;i++){
			if (actb_bool[i]){
				if (j >= actb_rangeu && j <= actb_ranged){
					r = a.insertRow(-1);
					r.style.backgroundColor = actb_self.actb_bgColor;
					r.id = 'tat_tr'+(j);
					c = r.insertCell(-1);
					c.style.color = actb_self.actb_textColor;
					c.style.fontFamily = actb_self.actb_fFamily;
					c.style.fontSize = actb_self.actb_fSize;
					c.innerHTML = actb_parse(actb_self.data[i]);
					c.id = 'tat_td'+(j);
					c.setAttribute('pos',j);
					if (actb_self.enableMouse){
						c.style.cursor = 'pointer';
						c.onclick=actb_mouseclick;
						c.onmouseover = actb_table_highlight;
					}
					j++;
				}else{
					j++;
				}
			}
			if (j > actb_ranged) break;
		}
		if (j-1 < actb_total){
			r = a.insertRow(-1);
			r.style.backgroundColor = actb_self.actb_bgColor;
			c = r.insertCell(-1);
			c.style.color = actb_self.actb_textColor;
			c.style.fontFamily = 'arial narrow';
			c.style.fontSize = actb_self.actb_fSize;
			c.align='center';
			replaceHTML(c,'\\/');
			if (actb_self.enableMouse){
				c.style.cursor = 'pointer';
				c.onclick = actb_mouse_down;
			}
		}

		// Set flag that ac is being displayed
		actb_curr.m_inac = true;
	}

	function actb_goup()
	{
		if (!actb_display) return;
		if (actb_pos == 1) return;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos--;
		if (actb_pos < actb_rangeu) actb_moveup();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.timeOut);
	}

	function actb_godown()
	{
		if (!actb_display) return;
		if (actb_pos == actb_total) return;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos++;
		if (actb_pos > actb_ranged) actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.timeOut);
	}

	function actb_movedown()
	{
		actb_rangeu++;
		actb_ranged++;
		actb_remake();
	}

	function actb_moveup()
	{
		actb_rangeu--;
		actb_ranged--;
		actb_remake();
	}

	/* Mouse */
	function actb_mouse_down()
	{
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos++;
		actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		actb_curr.focus();
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.timeOut);
	}

	function actb_mouse_up(evt)
	{
		if (!evt) evt = event;
		if (evt.stopPropagation){
			evt.stopPropagation();
		}else{
			evt.cancelBubble = true;
		}
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos--;
		actb_moveup();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		actb_curr.focus();
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list=0;actb_removedisp();},actb_self.timeOut);
	}
	function actb_mouseclick(evt){
		if (!evt) evt = event;
		if (!actb_display) return;
		actb_mouse_on_list = 0;
		actb_pos = this.getAttribute('pos');
		actb_penter();
	}
	function actb_table_focus()
	{
		actb_mouse_on_list = 1;
	}
	function actb_table_unfocus(){
		actb_mouse_on_list = 0;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.timeOut);
	}
	function actb_table_highlight(){
		actb_mouse_on_list = 1;
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_bgColor;
		actb_pos = this.getAttribute('pos');
		while (actb_pos < actb_rangeu) actb_moveup();
		while (actb_pos > actb_ranged) actb_movedown();
		document.getElementById('tat_tr'+actb_pos).style.backgroundColor = actb_self.actb_hColor;
		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.timeOut);
	}
	/* ---- */

	function actb_insertword(a){
		if (actb_self.actb_delimiter.length > 0){
			str = '';
			l=0;
			for (i=0;i<actb_self.delimWords.length;i++){
				if (actb_self.cdelimWord == i){
					prespace = postspace = '';
					gotbreak = false;
					for (j=0;j<actb_self.delimWords[i].length;++j){
						if (actb_self.delimWords[i].charAt(j) != ' '){
							gotbreak = true;
							break;
						}
						prespace += ' ';
					}
					for (j=actb_self.delimWords[i].length-1;j>=0;--j){
						if (actb_self.delimWords[i].charAt(j) != ' ') break;
						postspace += ' ';
					}
					str += prespace;
					str += a + ",";
					l = str.length;
					if (gotbreak) str += postspace;
				}else{
					str += actb_self.delimWords[i];
				}
				if (i != actb_self.delimWords.length - 1){
					str += actb_self.delimChar[i];
				}
			}
			actb_curr.value = str;
			alib.dom.setCaret(actb_curr,l);
		}else{
			actb_curr.value = a;
		}
		actb_mouse_on_list = 0;
		actb_removedisp();
		try
		{
			actb_curr.onchange();
		}
		catch(e) {}
	}

	function actb_penter()
	{
		if (!actb_display) return;
		actb_display = false;
		var word = '';
		var c = 0;
		for (var i=0;i<=actb_self.data.length;i++){
			if (actb_bool[i]) c++;
			if (c == actb_pos){
				word = actb_self.data[i];
				break;
			}
		}
		actb_insertword(word);
		l = alib.dom.getCaretStart(actb_curr);
	}

	function actb_removedisp()
	{
		if (actb_mouse_on_list==0)
		{
			actb_display = 0;
			if (document.getElementById('tat_table')){ document.body.removeChild(document.getElementById('tat_table')); }
			if (actb_toid) clearTimeout(actb_toid);

			actb_curr.m_inac = false;
		}
	}

	function actb_keypress(e)
	{
		if (actb_caretmove) alib.dom.stopEvent(e);
		return !actb_caretmove;
	}

	function actb_checkkey(evt)
	{
		if (!evt) evt = event;
		a = evt.keyCode;
		caret_pos_start = alib.dom.getCaretStart(actb_curr);
		actb_caretmove = 0;
		
		switch (a)
		{
			case 38:
				actb_goup();
				actb_caretmove = 1;
				return false;
				break;
			case 40:
				actb_godown();
				actb_caretmove = 1;
				return false;
				break;
			case 13: case 9:
				if (actb_display)
				{
					actb_curr.m_inac = false;
					actb_caretmove = 1;
					actb_penter();
					return false;
				}
				else
				{
					return true;
				}
				break;
			default:
				if (actb_self.options.url)
				{
					setTimeout(function(){actb_loadremote(a);},50);
				}
				else if (actb_self.data.length)
				{
					setTimeout(function(){actb_tocomplete(a)},50);
				}
				else
				{
					return true;
				}
				break;
		}
	}

	// TODO: This should be moved to this.loadRemoteData
	function actb_loadremote(kc)
	{
		var keyword = actb_self.getCurrentKeyword();

		if (!actb_self.options.url || !keyword)
			return false;

		var ajax = new CAjax('json');
		ajax.cbData.cls = actb_self;
		ajax.cbData.kc = kc;
		ajax.onload = function(data)
		{
			try
			{
				if (data.length)
				{
					this.cbData.cls.data = data;

					// Now that the data has been populated, create ac dialog
					actb_tocomplete(this.cbData.kc);
				}
			}
			catch(e)
			{
				//alert("There was a problem loading data " + e);
			}
		};
		var args = [["search", keyword]];
		ajax.exec(actb_self.options.url, args);
	}

	/**
	 * Send keycode (char) to the autocomplete buffer
	 *
	 * @param {integer} kc KeyCode/char to process
	 */
	function actb_tocomplete(kc)
	{
		if (kc == 38 || kc == 40 || kc == 13) return;

		var i;

		// TODO: find out what actb_display does
		if (actb_display)
		{ 
			var word = 0;
			var c = 0;

			for (var i=0;i<=actb_self.data.length;i++)
			{
				if (actb_bool[i]) c++;

				if (c == actb_pos)
				{
					word = i;
					break;
				}
			}

			actb_pre = word;
		}
		else
		{ 
			actb_pre = -1
		};
		
		// If the value is empty the remove list of words
		if (actb_curr.value == '')
		{
			actb_mouse_on_list = 0;
			actb_removedisp();
			return;
		}

		var ot = actb_self.getCurrentKeyword();
		var t = ot.addslashes();

		if (ot.length == 0)
		{
			actb_mouse_on_list = 0;
			actb_removedisp();
		}

		if (ot.length < actb_self.actb_startcheck) return this;

		if (actb_self.actb_firstText)
			var re = new RegExp("^" + t, "i");
		else
			var re = new RegExp(t, "i");

		actb_total = 0;
		actb_tomake = false;
		actb_kwcount = 0;

		for (i=0;i<actb_self.data.length;i++)
		{
			actb_bool[i] = false;

			if (re.test(actb_self.data[i]))
			{
				actb_total++;
				actb_bool[i] = true;
				actb_kwcount++;
				if (actb_pre == i) actb_tomake = true;
			}
		}

		if (actb_toid) clearTimeout(actb_toid);
		if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.timeOut);
		actb_generate();
	}
	
	//return $(el).autocomplete(options);
}

/**
 * Load data from a remote source and populate this.data
 *
 * TODO: this is to replace the inline function actb_loadremote
 *
 * @param {integer} kc The keycode last pressed
 */
Alib_Ui_AutoComplete.prototype.loadRemoteData = function(kc)
{
	var keyword = this.getCurrentKeyword();

	if (!this.options.url || !keyword)
		return false;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.kc = kc;
	ajax.onload = function(data)
	{
		try
		{
			if (data.length)
			{
				this.cbData.cls.data = data;

				// Now that the data has been populated, create ac dialog
				this.cbData.cls.toComplete(this.cbData.kc);
			}
		}
		catch(e)
		{
			//alert("There was a problem loading data " + e);
		}
	};
	var args = [["search", keyword]];
	ajax.exec(this.options.url, args);
}

/**
 * Get current keyword from input box
 *
 * @return {string} The current keyword (trimmed)
 */
Alib_Ui_AutoComplete.prototype.getCurrentKeyword = function()
{
	var ret = "";

	// Are we allowing for multiple keywords by using delimiters?
	if (this.actb_delimiter && this.actb_delimiter.length > 0)
	{
		var caret_pos_start = alib.dom.getCaretStart(this.currInput);
		var caret_pos_end = alib.dom.getCaretEnd(this.currInput);
		
		var delim_split = '';
		for (i=0;i<this.actb_delimiter.length;i++)
		{
			delim_split += this.actb_delimiter[i];
		}

		delim_split = delim_split.addslashes();
		var delim_split_rx = new RegExp("(["+delim_split+"])");
		c = 0;
		this.delimWords = new Array();
		this.delimWords[0] = '';

		for (i=0,j=this.currInput.value.length;i<this.currInput.value.length;i++,j--)
		{
			if (this.currInput.value.substr(i,j).search(delim_split_rx) == 0)
			{
				ma = this.currInput.value.substr(i,j).match(delim_split_rx);
				this.delimChar[c] = ma[1];
				c++;
				this.delimWords[c] = '';
			}
			else
			{
				this.delimWords[c] += this.currInput.value.charAt(i);
			}
		}

		var l = 0;
		this.cdelimWord = -1;
		for (i=0;i<this.delimWords.length;i++)
		{
			if (caret_pos_end >= l && caret_pos_end <= l + this.delimWords[i].length)
			{
				this.cdelimWord = i;
			}
			l+=this.delimWords[i].length + 1;
		}

		ret = this.delimWords[this.cdelimWord].trim(); 
	}
	else
	{
		// No keywords, just use input value
		ret = this.currInput.value;
	}

	return ret;
}

/**
 * Initiate autocomplete data and dialog
 *
 * TODO: This is to replace the inline function actb_tocomplete
 *
 * @param {integer} kc The keycode last pressed
 */
Alib_Ui_AutoComplete.prototype.toComplete = function()
{
	/*
	if (kc == 38 || kc == 40 || kc == 13) return;

	var i;

	if (actb_display)
	{ 
		var word = 0;
		var c = 0;

		for (var i=0;i<=actb_self.data.length;i++)
		{
			if (actb_bool[i]) c++;

			if (c == actb_pos)
			{
				word = i;
				break;
			}
		}

		actb_pre = word;
	}
	else
	{ 
		actb_pre = -1
	};
	
	// If the value is empty the remove list of words
	if (actb_curr.value == '')
	{
		actb_mouse_on_list = 0;
		actb_removedisp();
		return;
	}

	var ot = actb_self.getCurrentKeyword();
	var t = ot.addslashes();

	if (ot.length == 0)
	{
		actb_mouse_on_list = 0;
		actb_removedisp();
	}

	if (ot.length < actb_self.actb_startcheck) return this;

	if (actb_self.actb_firstText)
		var re = new RegExp("^" + t, "i");
	else
		var re = new RegExp(t, "i");

	actb_total = 0;
	actb_tomake = false;
	actb_kwcount = 0;

	for (i=0;i<actb_self.data.length;i++)
	{
		actb_bool[i] = false;

		if (re.test(actb_self.data[i]))
		{
			actb_total++;
			actb_bool[i] = true;
			actb_kwcount++;
			if (actb_pre == i) actb_tomake = true;
		}
	}

	if (actb_toid) clearTimeout(actb_toid);
	if (actb_self.timeOut > 0) actb_toid = setTimeout(function(){actb_mouse_on_list = 0;actb_removedisp();},actb_self.timeOut);
	actb_generate();
	*/
}

/**
*  Ajax Autocomplete for jQuery, version 1.1.3
*  (c) 2010 Tomas Kirda
*
*  Ajax Autocomplete for jQuery is freely distributable under the terms of an MIT-style license.
*  For details, see the web site: http://www.devbridge.com/projects/autocomplete/jquery/
*
*  Last Review: 04/19/2010
*/

/*jslint onevar: true, evil: true, nomen: true, eqeqeq: true, bitwise: true, regexp: true, newcap: true, immed: true */
/*global window: true, document: true, clearInterval: true, setInterval: true, jQuery: true */


/**
* @fileOverview alib.ui.Editor class
*
* This is the editor class to be used with alib.
*
* Exampl:
* <code>
* 	var button = alib.ui.Editor(document.getElementById("mytextarea"), {className:"blue"});
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011-2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Editor
 *
 * @constructor
 * @param {INPUT} inpt Optional input element
 * @param {Object} options Optional options object
 */
function Alib_Ui_Editor(inpt, options)
{
	/**
	 * Set a default block element to be used when the user presses return
	 *
	 * Common example: "<p>"
	 *
	 * @public
	 * @var {string}
	 */
	this.defaultBlockElement = "<p>";

	/**
	 * Handle to editor
	 *
	 * @private
	 * @var {CKEDITOR.editor}
	 */
	this.editor = null;

	/**
	 * Handle to CodeMirror editors
	 *
	 * @private
	 * @var {CodeMirror}
	 */
	this.codeMirror = null;

	// Legacy
	this.ifrm = alib.dom.createElement("iframe");
	this.ifrm.border = '0';
	this.ifrm.frameBorder = '0';
    this.ifrm.src = "about:blank";
	this.ifrm.id = "CRteIframe";
	alib.dom.styleSetClass(this.ifrm, "CRteIframe");

	// Now create the hidden input that will store the raw values
	this.hdntxt = alib.dom.createElement("input");
    this.hdntxt.type = "hidden";
    if(typeof inpt != "undefined")    
	{
		if (inpt.id)
			this.hdntxt.id = inpt.id;
    
		if(inpt.getAttribute("name"))
			this.hdntxt.setAttribute("name", inpt.getAttribute("name"));
	}

	/**
	 * If set always work with the full document rather than just the body
	 *
	 * This param is handy when you want to set and get the full document with the title and head
	 */
	this.bodyOnly = true;

	/**
	 * Toolbar container
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.toolbarCon = null;
    this.editorCon = null;
	
	this.idoc = null;	
	this.f_src = false;	
	this.rte_id = '1';
	this.frm_input = (typeof inpt != "undefined") ? inpt : null;

	this.colors = [
					"FFFFFF",	"FFCCCC",	"FFCC99",	"FFFF99",	"FFFFCC",	"99FF99",	"99FFFF",	"CCFFFF",	
					"CCCCFF",	"FFCCFF",	"CCCCCC",	"FF6666",	"FF9966",	"FFFF66",	"FFFF33",	"66FF99",	
					"33FFFF",	"66FFFF",	"9999FF",	"FF99FF",	"C0C0C0",	"FF0000",	"FF9900",	"FFCC66",	
					"FFFF00",	"33FF33",	"66CCCC",	"33CCFF",	"6666CC",	"CC66CC",	"999999",	"CC0000",	
					"FF6600",	"FFCC33",	"FFCC00",	"33CC00",	"00CCCC",	"3366FF",	"6633FF",	"CC33CC",	
					"666666",	"990000",	"CC6600",	"CC9933",	"999900",	"009900",	"339999",	"3333FF",	
					"6600CC",	"993399",	"333333",	"660000",	"993300",	"996633",	"666600",	"006600",	
					"336666",	"000099",	"333399",	"663366",	"000000",	"330000",	"663300",	"663333",	
					"333300",	"003300",	"003333",	"000066",	"330099",	"330033"
					  ];
                      
    this.toolButtonObj = new Object(); // Contains the toolbar buttons
    this.isFullscreen = false;
    
    this.originalHeight = null;
    this.originalWidth = null;

	/**
	 * Optional css source files to use for the editor
	 *
	 * @public
	 * @var {array}
	 */
	this.cssFiles = new Array();
}

/**
 * Print the rte
 *
 * @public
 */
Alib_Ui_Editor.prototype.print = function(container, width, height, html)
{
    this.mainCon = container;
    this.editorCon = alib.dom.createElement("div", this.mainCon);
    this.editorCon.id = "editorCon";
	if (container)
	{
		this.toolbarCon = alib.dom.createElement("div", this.editorCon);
		this.createToolbar();
        
		this.editorCon.appendChild(this.ifrm);

		if (width)
			this.ifrm.style.width = width;
        
		var htm = (typeof html != 'undefined') ? html : '';

        // Check return if false
		if(!this.enableDesign(htm))
            return false; // do not execute if idoc is null
        
		// Add on blur so that value is automatically updated
		var me = this;
		var bcb = function()
		{
			if (alib.userAgent.ie && !me.rng) 
			{
				me.setRange()
				//retrieve selected range
				var sel = me.idoc.selection; 
				if (sel != null) 
				{
					var newRng = sel.createRange();
					newRng = me.rng;
					newRng.select();
				}
			}
			me.updateText();
			me.onChange();
		}
        
		if(alib.userAgent.ie)
        {
            this.ifrm.attachEvent("onblur", bcb);
        }
		else
		{
            this.iwnd.addEventListener("blur",bcb,false);
			var cd = this.iwnd;
			this.ifrm.addEventListener("load",
                        function()
                        { 
                            cd.addEventListener("blur",bcb,false); 
                        } ,false);
		}

		var hdnTxtCon = alib.dom.createElement("div");
		hdnTxtCon.style.display = "none";
		this.editorCon.appendChild(hdnTxtCon);
		hdnTxtCon.appendChild(this.hdntxt);
	}

	if (height)
		this.setHeight(height);
}

/**
 * Onchange callback
 *
 * @public
 */
Alib_Ui_Editor.prototype.onChange = function()
{
}

/**
 * Set the height of the editor
 *
 * @public
 */
Alib_Ui_Editor.prototype.setHeight = function(height)
{
	alib.dom.styleSet(this.editorCon, "height", height);

	var newHeight = alib.dom.getElementHeight(this.editorCon) - alib.dom.getElementHeight(this.toolbarCon);
	alib.dom.styleSet(this.ifrm, "height", (newHeight - 2) + "px"); // subtract 2px for the border
}

/**
 * Focus on the input
 *
 * @public
 */
Alib_Ui_Editor.prototype.focus = function()
{
	this.iwnd.focus();
}

/**
 * Move editor in and out of design mode
 */
Alib_Ui_Editor.prototype.toggleHtmlSrc = function()
{
	if (this.f_src)
	{
		// Save last scroll position
		if (this.codeMirror)
		{
			var info = this.codeMirror.getScrollInfo();
			this.srcScrollPos = info.top;
		}

		var currentVal = this.codeMirror.getValue();
		this.f_src = false;
		this.enableDesign(currentVal);
		this.toolButtonObj.src.toggle(false);
	}
	else
	{
		var currentVal = this.getValue();
		this.setValue("");
		this.f_src = true;
		this.enableDesign("", false);

		// Load CSS
		var cssref = this.idoc.createElement('link');
		cssref.rel = "stylesheet";
		cssref.href = alib.getBasePath() + "ui/Editor/codemirror/lib/codemirror.css";
		this.idoc.getElementsByTagName("head")[0].appendChild(cssref);

		// Load codemirror into iframe
		var fileRef = this.idoc.createElement('script');
		fileRef.cls = this;
		fileRef.htmlValue= currentVal;
		fileRef.editorHtml = 'window.codeMirrorEditor = CodeMirror(document.body, {' +
									'lineNumbers: true,' +
									'lineWrapping: true,' +
									'mode: "application/x-httpd-php",' +
									'indentUnit: 4,' +
									'indentWithTabs: true,' +
									'enterMode: "keep",' +
									'tabMode: "shift"' +
								  '});';
		if (alib.userAgent.ie)
		{
			fileRef.onreadystatechange = function () 
			{ 
				if (this.readyState == "complete" || this.readyState == "loaded") 
				{
					var init = this.cls.idoc.createElement("script");
					init.innerHTML = this.editorHtml;
					this.cls.idoc.getElementsByTagName("head")[0].appendChild(init);
					this.cls.codeMirror = this.cls.iwnd.codeMirrorEditor;
					this.cls.codeMirror.setValue(this.htmlValue);
					this.cls.codeMirror.scrollTo(0, this.cls.srcScrollPos);
				}
			};
		}
		else
		{
			fileRef.onload = function () 
			{ 
				var init = this.cls.idoc.createElement("script");
				init.innerHTML = this.editorHtml;
				this.cls.idoc.getElementsByTagName("head")[0].appendChild(init);
				this.cls.codeMirror = this.cls.iwnd.codeMirrorEditor;
				this.cls.codeMirror.setValue(this.htmlValue);
				this.cls.codeMirror.scrollTo(0, this.cls.srcScrollPos);
			};
		}

		fileRef.type = "text/javascript";
		fileRef.src =  alib.getBasePath() + "ui/Editor/codemirror_full.js";
		this.idoc.getElementsByTagName("head")[0].appendChild(fileRef);

		this.toolButtonObj.src.toggle(true);
	}
		
	// Rebuild toolbar based on mode
	//this.createToolbar();
	
	// Changing the mode changes which buttons are enabled
	this.setToolbarMode();
}

/**
 * Note: This is the old src option
 *
 * Move editor in and out of design mode
Alib_Ui_Editor.prototype.toggleHtmlSrc = function()
{
	if (this.f_src)
	{
		if (alib.userAgent.ie) 
		{
			//fix for IE
			var output = escape_utf8(this.idoc.body.innerText);
			output = output.replace("%3CP%3E%0D%0A%3CHR%3E", "%3CHR%3E");
			output = output.replace("%3CHR%3E%0D%0A%3C/P%3E", "%3CHR%3E");
			
			this.idoc.body.innerHTML = unescape_utf8(output);
		} 
		else 
		{
			var htmlSrc = this.idoc.body.ownerDocument.createRange();
			htmlSrc.selectNodeContents(this.idoc.body);
			this.idoc.body.innerHTML = htmlSrc.toString();
		}

		this.f_src = false;
	}
	else
	{
		if (alib.userAgent.ie) 
		{
			this.idoc.body.innerText = this.idoc.body.innerHTML;
		} 
		else 
		{
			var htmlSrc = this.idoc.createTextNode(this.idoc.body.innerHTML);
			this.idoc.body.innerHTML = "";
			this.idoc.body.appendChild(htmlSrc);
		}

		this.f_src = true;
	}
}
 */

/**
 * Replace the innherHTML of an element in the editor document by id
 *
 * @param {string} id The id of the element to change
 * @param {string} html The raw html to insert
 */
Alib_Ui_Editor.prototype.setElementHtml = function(id, html)
{
	// TODO: IE seems to have trouble with timeing and finding the element
	if(alib.userAgent.ie)
	{
		var e = this.idoc.getElementById(id);
	}
	else
		var e = this.ifrm.contentDocument.getElementById(id);
	if (e)
		e.innerHTML = html;
	/*
	try 
	{
	} 
	catch (e) 
	{
	}
	*/
}

/**
 * Paste contents of clipboard into the editor
 */
Alib_Ui_Editor.prototype.paste = function()
{
	this.setRange();
	this.rteCommand("Paste", false);
}

/**
 * Execute an command in the editor
 *
 * @public
 * @param {string} command Name of the command to run
 * @param {stirng} value The value to pass with the command
 */
Alib_Ui_Editor.prototype.rteCommand = function(command, option)
{
	try 
	{
		this.iwnd.focus();
	  	this.idoc.execCommand(command, false, option);
		this.iwnd.focus();
	} 
	catch (e) 
	{
		alert(e);
	}
}

/**
 * Set and store the current selected range
 */
Alib_Ui_Editor.prototype.setRange = function()
{
	if (alib.userAgent.ie) 
	{
		var selection = this.idoc.selection; 
		if (selection != null) this.rng = selection.createRange();
	} 
	else 
	{
		var selection = this.iwnd.getSelection();
		this.rng = selection.getRangeAt(selection.rangeCount - 1).cloneRange();
	}
}

/**
 * Create or activate a link
 *
 * @param {string} path The URI
 */
Alib_Ui_Editor.prototype.insertLink = function(path)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand("Unlink", null);
	this.rteCommand("CreateLink", path);
}

/**
 * Insert an image into the document at the current selected range
 *
 * @param {string} path The path to the image
 */
Alib_Ui_Editor.prototype.insertImage = function(path)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand("InsertImage", path);
}

/**
 * Build the toolbar based on the settings for this editor
 */
Alib_Ui_Editor.prototype.createToolbar = function()
{
	var container = this.toolbarCon;
	container.innerHTML = "";

	// Add toolbar
	var tb = new alib.ui.Toolbar();

	/*
	if (this.f_src)
	{
		this.createToolbarSrc(tb);
	}
	else
	{
		this.createToolbarHtml(tb);
	}
	*/
	this.createToolbarHtml(tb);

	// Print toolbar
	tb.print(container);
}

/**
 * Build the toolbar based on the settings for this editor
 *
 * @param {alib.ui.Toolbar) tb The current toolbar to add items to
 */
Alib_Ui_Editor.prototype.createToolbarHtml = function(tb)
{
	var me = this;

	var imgroot = alib.getBasePath();

	// bold
	this.toolButtonObj.bold = alib.ui.ToolbarToggleButton("<img src='" + imgroot + "/images/bold.gif' />", {
		onclick:function(){this.cls.rteCommand("bold", ''); }, cls:this
	});
	tb.addChild(this.toolButtonObj.bold, true, "bold");

	// italic
	this.toolButtonObj.italic = alib.ui.ToolbarToggleButton("<img src='" + imgroot + "/images/italic.gif' />", {
			onclick:function(){this.cls.rteCommand("italic", ''); 
	}, cls:this});
	tb.addChild(this.toolButtonObj.italic, true, "italic");

	// underline
	this.toolButtonObj.underline = alib.ui.ToolbarButton("<img src='" + imgroot + "/images/underline.gif' />", {
			onclick:function(){this.cls.rteCommand("underline", ''); }, cls:this
	});
	tb.addChild(this.toolButtonObj.underline, true, "underline");

	// Spacer
	tb.addChild(new alib.ui.ToolbarSeparator());

	// Justify
	var toggler = new alib.ui.ButtonToggler();
	var b1 = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/left_just.gif' />", {
		onclick:function(){this.cls.rteCommand("justifyleft", ''); }, cls:this
	});
	toggler.add(b1, "left");
	tb.addChild(b1, true, "justifyleft");
	b1.toggle(true);
	var b2 = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/centre.gif' />", {
		onclick:function(){this.cls.rteCommand("justifycenter", ''); }, cls:this
	});
	toggler.add(b2, "center");
	tb.addChild(b2, true, "justifycenter");
	var b3 = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/right_just.gif' />", {
		onclick:function(){this.cls.rteCommand("justifyright", ''); }, cls:this
	});
	toggler.add(b3, "right");
	tb.addChild(b3, true, "justifyright");
	this.toolButtonObj.justify = toggler;
    
    // Spacer
    tb.addChild(new alib.ui.ToolbarSeparator());
    
    // Horizontal Rule Button
    var btnHr = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/hr.gif' />", {
    onclick:function(){this.cls.rteCommand("inserthorizontalrule", ''); }, cls:this
    });
    tb.addChild(btnHr, "Horizontal Rule");
    
    // Image Button
    var btnImage = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/image.gif' />", {
    onclick:function() { this.cls.insertImageDialog(); }, cls:this
    });
    tb.addChild(btnImage, "Insert Image");
    
    // Link Button
    var btnLink = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/hyperlink.gif' />", {
    onclick:function() { this.cls.insertLinkDialog(); }, cls:this
    });
    tb.addChild(btnLink, "Insert Link");
    
    // Table Button
    var btnTable = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/insert_table.gif' />", {
    onclick:function() { this.cls.setRange(); this.cls.insertHtml("<table class='rte'><tbody><tr><td>&nbsp;</td><td>&nbsp;</td></tr></tbody></table>"); }, cls:this
    });
    tb.addChild(btnTable, "Insert Table");
    
    // Spacer
    tb.addChild(new alib.ui.ToolbarSeparator());
    
    // Number List Button
    this.toolButtonObj.olist = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/numbered_list.gif' />", {
    	onclick:function() { 
					this.cls.rteCommand('insertorderedlist', ''); 
		}, cls:this
    });
    tb.addChild(this.toolButtonObj.olist, "Insert Numbered List");
    
    // Unordered List Button
    this.toolButtonObj.ulist = new alib.ui.ToolbarButton("<img src='" + imgroot + "/images/list.gif' />", {
    	onclick:function() { 
					this.cls.rteCommand('insertunorderedlist', ''); 
		}, cls:this
    });
    tb.addChild(this.toolButtonObj.ulist, "Insert Numbered List");
    
    // Spacer
    tb.addChild(new alib.ui.ToolbarSeparator());
    
    // Font Color
    this.toolButtonObj.color = new alib.ui.ToolbarButton(this.createDropdown("color").createImageMenu(imgroot + "/images/textcolor.gif", imgroot + "/images/textcolor.gif", imgroot + "/images/textcolor.gif"));
    tb.addChild(this.toolButtonObj.color, "Set Font Color");
    
    // Background Color Size
    this.toolButtonObj.bgColor = new alib.ui.ToolbarButton(this.createDropdown("bgcolor").createImageMenu(imgroot + "/images/bgcolor.gif", imgroot + "/images/bgcolor.gif", imgroot + "/images/bgcolor.gif"));
    tb.addChild(this.toolButtonObj.bgColor, "Set Background Color");
    
    // Spacer
    tb.addChild(new alib.ui.ToolbarSeparator());
    
    // Font Style
    this.toolButtonObj.fontStyle = new alib.ui.ToolbarButton(this.createDropdown("style").createButtonMenu("Font", null, null, "small"));
    tb.addChild(this.toolButtonObj.fontStyle, "Set Font Style");
    
    // Font Size
    this.toolButtonObj.fontSize = new alib.ui.ToolbarButton(this.createDropdown("size").createButtonMenu("Size", null, null, "small"));
    tb.addChild(this.toolButtonObj.fontSize, "Set Font Size");
    
    // Font Styles
    this.toolButtonObj.fontTemplate = new alib.ui.ToolbarButton(this.createDropdown("template").createButtonMenu("Styles", null, null, "small"));
    tb.addChild(this.toolButtonObj.fontTemplate, "Styles");
    
    // Spacer
    tb.addChild(new alib.ui.ToolbarSeparator());
    
    // Src
    this.toolButtonObj.src = new alib.ui.ToolbarButton("SRC", {
    	onclick:function() { this.cls.toggleHtmlSrc(); }, cls:this
    });
    tb.addChild(this.toolButtonObj.src, "Src");
    
    // Fullscreen
    this.toolButtonObj.fullScreen = new alib.ui.ToolbarButton("Full Screen", {
    onclick:function(){this.cls.toggleFullscreen(); }, cls:this
    });
    tb.addChild(this.toolButtonObj.fullScreen, true, "Full Screen");
	
	// Paste
	/*
	var dmpaste = new CDropdownMenu();
	dmpaste.mRteCls = this;
	dmpaste.onmousedown = function() { this.mRteCls.setRange(); }
	dmpaste.tabIndex = -1;
	dmpaste.addEntry("Paste", function (cls) { cls.paste(); }, null, null, [this]);
	dmpaste.addEntry("Paste Plain Text", function (cls) { cls.paste(true); }, null, null, [this]);
	tb.AddItem(dmpaste.createButtonMenu("Paste"));
	*/
}

/**
 * If we are in source mode then disable all editor buttons
 */
Alib_Ui_Editor.prototype.setToolbarMode = function()
{
	if (this.f_src)
	{
		this.toolButtonObj.italic.disable();
		this.toolButtonObj.bold.disable();
		this.toolButtonObj.underline.disable();
		this.toolButtonObj.justify.disable();
		this.toolButtonObj.fontTemplate.disable();
		this.toolButtonObj.fontSize.disable();
		this.toolButtonObj.fontStyle.disable();
		this.toolButtonObj.color.disable();
		this.toolButtonObj.bgColor.disable();
		this.toolButtonObj.olist.disable();
		this.toolButtonObj.ulist.disable();
	}
	else
	{
		this.toolButtonObj.italic.enable();
		this.toolButtonObj.bold.enable();
		this.toolButtonObj.underline.enable();
		this.toolButtonObj.justify.enable();
		this.toolButtonObj.fontTemplate.enable();
		this.toolButtonObj.fontSize.enable();
		this.toolButtonObj.fontStyle.enable();
		this.toolButtonObj.color.enable();
		this.toolButtonObj.bgColor.enable();
		this.toolButtonObj.olist.enable();
		this.toolButtonObj.ulist.enable();
	}
}

/**
 * Create toolbar highlight color
 *
 * @param {DOMElement} container The container where the icon will be
 */
Alib_Ui_Editor.prototype.createToolbarHlColor = function(container)
{
	var me = this;

	container.clsref = this;

	var tbl = alib.dom.createElement("table", container);
	var tbody = alib.dom.createElement("tbody", tbl);

	var cntr = 0;
	var tr = alib.dom.createElement("tr", tbody);
	for (var i = 0; i < this.colors.length; i++)
	{
		var td = alib.dom.createElement("td", tr);
		td.menuref = container.menuref;
		td.clsref = me;
		td.clr = this.colors[i];
		alib.dom.styleSet(td, "background-color", "#"+this.colors[i]);
		alib.dom.styleSet(td, "width", "10px");
		alib.dom.styleSet(td, "height", "10px");
		alib.dom.styleSet(td, "border", "1px solid gray");
		td.onmousedown = function() { this.clsref.setRange(); }
		td.onmouseover = function() { this.style.border = '1px dotted white'; }
		td.onmouseout = function() { this.style.border = '1px solid gray'; }
		td.onclick = function() { this.clsref.setColor('hilitecolor', this.clr); this.menuref.unloadMe(); }

		cntr++;

		if (cntr >= 10)
		{
			var cntr = 0;
			var tr = alib.dom.createElement("tr", tbody);
		}
	}
}

/**
 * Create toolbar font color
 *
 * @param {DOMElement} container The container where the icon will be
 */
Alib_Ui_Editor.prototype.createToolbarFntColor = function(container)
{
	var me = this;

	var tbl = alib.dom.createElement("table", container);
	var tbody = alib.dom.createElement("tbody", tbl);

	var cntr = 0;
	var tr = alib.dom.createElement("tr", tbody);
	for (var i = 0; i < this.colors.length; i++)
	{
		var td = alib.dom.createElement("td", tr);
		td.menuref = container.menuref;
		td.clsref = me;
		td.clr = this.colors[i];
		alib.dom.styleSet(td, "background-color", "#"+this.colors[i]);
		alib.dom.styleSet(td, "width", "10px");
		alib.dom.styleSet(td, "height", "10px");
		alib.dom.styleSet(td, "border", "1px solid gray");
		td.onmousedown = function() { this.clsref.setRange(); }
		td.onmouseover = function() { this.style.border = '1px dotted white'; }
		td.onmouseout = function() { this.style.border = '1px solid gray'; }
		td.onclick = function() { this.clsref.setColor('forecolor', this.clr); this.menuref.unloadMe(); }

		cntr++;

		if (cntr >= 10)
		{
			var cntr = 0;
			var tr = alib.dom.createElement("tr", tbody);
		}
	}
}

/**
 * SEt highlight or foregound color of the selected range
 *
 * @param {string} cmd Name of the command to run
 * @param {string} color The hex name of the color to use
 */
Alib_Ui_Editor.prototype.setColor = function(cmd, color)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}

		cmd = (cmd == "hilitecolor") ? "backcolor" : cmd;
		
	}

	this.rteCommand(cmd, "#"+color);
}

/**
 * Set the fond of the selected range or the whole document if none selected
 *
 * @param {string} cmd Name of the command to run
 * @param {string} font The hex name of the font to use
 */
Alib_Ui_Editor.prototype.setFont = function(cmd, font)
{
	if (alib.userAgent.ie) 
	{
		this.iwnd.focus();
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
	}

	this.rteCommand(cmd, font);
}

/**
 * Set the local document variable
 *
 * @private
 */
Alib_Ui_Editor.prototype.setDocument = function()
{
    this.iwnd = this.ifrm.contentWindow || this.ifrm.contentDocument;

    if (this.iwnd && this.iwnd.document) 
	{
        this.idoc = this.iwnd.document;
    }
}

/**
 * Update value in hidden text field for forms
 *
 * @private
 * @param {string} html The source to update the text field to
 */
Alib_Ui_Editor.prototype.updateText = function(html)
{
    //this.hdntxt.value = this.idoc.body.innerHTML;

	if (this.f_src && this.codeMirror)
	{
		this.hdntxt.value = this.codeMirror.getValue();
		/*
		if (alib.userAgent.ie) 
		{
			//fix for IE
			var output = escape_utf8(this.idoc.body.innerText);
			output = output.replace("%3CP%3E%0D%0A%3CHR%3E", "%3CHR%3E");
			output = output.replace("%3CHR%3E%0D%0A%3C/P%3E", "%3CHR%3E");
			
			this.hdntxt.value = unescape_utf8(output);
		} 
		else 
		{
			var htmlSrc = this.idoc.body.ownerDocument.createRange();
			htmlSrc.selectNodeContents(this.idoc.body);
			this.hdntxt.value = htmlSrc.toString();
		}
		*/
	}
	else
	{
		var bodyHtml = this.idoc.body.innerHTML;

		/** Work in progress
		if (!this.bodyOnly && this.origHTMLShell)
		{
			var re = /(<body\b[^>]*>)[^<>]*(<\/body>)/i;
			bodyHtml = this.origHTMLShell.replace(re, "$1" + bodyHtml + "$2");
		}
		*/

		this.hdntxt.value = bodyHtml;
	}

	if (this.frm_input)
		this.frm_input.value = this.hdntxt.value
}

/**
 * Get the text value of the editor
 *
 * @public
 */
Alib_Ui_Editor.prototype.getValue = function()
{
	this.updateText();

    return this.hdntxt.value;
}

/**
 * Sert the value of the editor
 *
 * @public
 * @param {string} html The html of the document to set
 */
Alib_Ui_Editor.prototype.setValue = function(html)
{
	if (this.f_src && this.codeMirror)
	{
		this.codeMirror.setValue(html);
	}
	else
	{
		if (!this.bodyOnly && html)
		{
			// If html has full document then use the set value
			var frameHtml = html;

			/** Work in progress for handing full html
			var re = /(<body\b[^>]*>)[^<>]*(<\/body>)/i;
			this.origHTMLShell = html.replace(re, "$1" + '' + "$2");
			*/
		}
		else
		{
			// html is just an HTML part so encapsulate it in an HTML doc
			var frameHtml = "<!DOCTYPE HTML>";
			frameHtml += "\n";
			frameHtml = "<html id=\"" + this.rte_id + "\">\n";
			frameHtml += "<head>\n";
			frameHtml += "<meta HTTP-EQUIV='content-type' CONTENT=\"text/html; charset=UTF-8\">\n";
			if (this.cssFiles.length)
			{
				for (var i in this.cssFiles)
					frameHtml += '<link href="' + this.cssFiles[i] + '" media="screen" rel="stylesheet" type="text/css">' + "\n";
			}
			else
			{
				frameHtml += "<style>\n";
				frameHtml += "body {\n";
				frameHtml += " background: #FFFFFF;\n";
				frameHtml += " margin: 0px;\n";
				frameHtml += " padding: 10px;\n";
				if (typeof g_rte_def_font_family != "undefined")
					frameHtml += "font-family: "+ g_rte_def_font_family +";\n";
				if (typeof g_rte_def_font_size != "undefined")
					frameHtml += "font-size: "+ g_rte_def_font_size +";\n";
				if (typeof g_rte_def_font_color != "undefined")
					frameHtml += "color: "+ g_rte_def_font_color +";\n";
				frameHtml += "}\n";
				frameHtml += "p {margin-top:0;margin-bottom:0}\n";
				frameHtml += "table.rte tr td {border: 1px solid; padding: 10px;}\n";
				frameHtml += "</style>\n";
			}
			frameHtml += "</head>\n";
			frameHtml += "<body contenteditable='true'>";
			if (html)
				frameHtml += html;
			frameHtml += "</body>";
			frameHtml += "</html>";
		}

		// Check if idoc is an object and not a null value
		if(this.idoc)
		{
			this.idoc.open();
			this.idoc.write(frameHtml);
			this.idoc.close();
		}
	}

	this.updateText();
}

/**
 * Get the text input that is being used to store the text of the editor for forms
 *
 * @private
 * @return {INPUT}
 */
Alib_Ui_Editor.prototype.getHiddenInput = function()
{
	this.updateText();

    return this.hdntxt;
}

/**
 * Insert HTML at the current carot
 *
 * @public
 * @param {string} html The html text to enter
 */
Alib_Ui_Editor.prototype.insertHtml = function(html)
{
	if (alib.userAgent.ie) 
	{
		//retrieve selected range
		var sel = this.idoc.selection; 
		if (sel != null) 
		{
			var newRng = sel.createRange();
			newRng = this.rng;
			newRng.select();
		}
		
		this.rteCommand('paste', html);
	}
	else
	{
		this.rteCommand('insertHtml', html);
	}
}

/**
 * Endable design mode in the editor iframe
 *
 * @param {string} html Optional HTML to insert into the iframe once design mode is enabled
 * @param {bool} on Defaults to true if undefiled, but toggles design mode
 */
Alib_Ui_Editor.prototype.enableDesign = function(html, on)
{
	this.setDocument();
	var designModeOn = (typeof on == "undefined") ? true : on;
    
    // If idoc is null, do not execute and return false
    if(!this.idoc || this.idoc == null)
        return false;
        
	this.setValue(html);

	var editorBody = this.idoc.body;

    // turn off spellcheck
	if ('spellcheck' in editorBody && designModeOn) 
		editorBody.spellcheck = true;
        
	if ('contentEditable' in editorBody && designModeOn)
	{
		// allow contentEditable
		editorBody.contentEditable = true;
	}
	else 
	{  
		// Firefox earlier than version 3
		if ('designMode' in this.idoc && designModeOn) 
		{
				// turn on designMode
			this.idoc.designMode = "on";                
		}
	}

	// Attach events
	var me = this;

	var toggleTbFunc = function(e)
	{
		if (me.f_src)
			return;

		// Untoggle bold, italic, and under buttons
		me.toolButtonObj.bold.toggle(false);
		me.toolButtonObj.italic.toggle(false);
		me.toolButtonObj.underline.toggle(false);
		
		var currentElem = me.currentCaretElem();
		
		if(!currentElem)
			currentElem = e.target();

		while(currentElem = me.toggleTagname(currentElem));
	}

	if(alib.userAgent.ie)
	{
		this.ifrm.attachEvent("onclick", toggleTbFunc);
		this.ifrm.attachEvent("onkeyup", toggleTbFunc);
	}
	else
	{
		this.iwnd.addEventListener("click",toggleTbFunc,false);
		this.iwnd.addEventListener("keyup",toggleTbFunc,false);
		var cd = this.iwnd;
		this.ifrm.addEventListener("load",
					function()
					{ 
						cd.addEventListener("click",toggleTbFunc,false); 
						cd.addEventListener("keyup",toggleTbFunc,false); 
					}, false);
	}

	// Handle default blockElement if set
	if (this.defaultBlockElement)
	{
		this.listen("keydown", function(e) {
			var currentElem = me.currentCaretElem();
			if(!currentElem)
				me.setFont("formatBlock", me.defaultBlockElement)
		});
	}

	/*
	if (alib.userAgent.ie) 
	{
		this.idoc.designMode = (designModeOn) ? "On" : "Off";
	} 
	else 
	{
		this.ifrm.contentDocument.designMode = "on";
		
		if (alib.userAgent.gecko || alib.userAgent.webkit) 
		{
			//attach a keyboard handler for gecko browsers to make keyboard shortcuts work
			//oRTE.addEventListener("keypress", kb_handler, true);
			this.idoc.body.spellcheck = true;
		}
	}
	*/
    
    return true;
}

/**
 * Listen for events in the current editor
 */
Alib_Ui_Editor.prototype.listen = function(evntName, cbFunction)
{
	if(alib.userAgent.ie)
	{
		alib.dom.addEvent(this.ifrm, evntName, cbFunction);
	}
	else
	{
		if (this.iwnd)
		{
			alib.dom.addEvent(this.ifrm, evntName, cbFunction);
		}
		else
		{
			alib.dom.addEvent(this.ifrm, evntName, cbFunction);

			/* TODO: I'm not sure why this is always being used throughout this class but leaving here just in case
			var cd = this.iwnd;
			this.ifrm.addEventListener("load",
						function()
						{ 
							cd.addEventListener("click",toggleTbFunc,false); 
							cd.addEventListener("keyup",toggleTbFunc,false); 
						}, false);
						*/
		}
	}
}

/**
 * Checks if parent tag has tagname
 *
 * @param {DOMElement} elem     element name to be checked
 */
Alib_Ui_Editor.prototype.toggleTagname = function(elem)
{
    switch(elem.tagName)
    {
        case "B":
            this.toolButtonObj.bold.toggle(true);
            break;
        case "I":
            this.toolButtonObj.italic.toggle(true);
            break;
        case "U":
            this.toolButtonObj.underline.toggle(true);
            break;
        default:
            this.checkInlineStyle(elem);
            break;
    }
    
    if(elem.parentNode)
        return elem.parentNode;
    else
        return null;
}

/**
 * Checks the inline style
 *
 * @param {DOMElement} elem     element name to be checked
 */
Alib_Ui_Editor.prototype.checkInlineStyle = function(elem)
{
	// TODO: Marl, this is throwing an exception with jquery which alib.dom.styleGet us using
	// Error: TypeError: a.ownerDocument is null
	// Source File: file:///C:/Users/Sky%20Stebnicki/sandbox/lib/js/trunk/jquery.min.js
	// Line: 4
	return;

    // Check Bold
    var bold = alib.dom.styleGet(elem, "font-weight");
    switch(bold)
    {
        case "bold":
        case "bolder":
        case "600":
        case "700":
        case "800":
        case "900":
            this.toolButtonObj.bold.toggle(true);
            break;
    }
    
    // Check Italize
    var italic = alib.dom.styleGet(elem, "font-style");
    switch(italic)
    {
        case "italic":
            this.toolButtonObj.italic.toggle(true);
            break;
    }
    
    // Check Underline
    var underline = alib.dom.styleGet(elem, "text-decoration");
    switch(underline)
    {
        case "underline":
            this.toolButtonObj.underline.toggle(true);
            break;
    }
}

/**
 * Gets the current element tagname of caret
 *
 */
Alib_Ui_Editor.prototype.currentCaretElem = function()
{
    var target = null;
            
    if(this.iwnd.getSelection)
    {
        target = this.iwnd.getSelection().getRangeAt(0).commonAncestorContainer;
        if(target.nodeType===1)
            return target;
        else
            return target.parentNode;
    }
    else if(this.idoc.selection)
    {
        return this.idoc.selection.createRange().parentElement();
    }
}

/**
 * Toggles the fullscreen display
 *
 */
Alib_Ui_Editor.prototype.toggleFullscreen = function()
{
    if(!this.isFullscreen)
    {
        if(!this.originalHeight)
            this.originalHeight = this.ifrm.style.height;
        
        if(!this.originalWidth)
            this.originalWidth = this.ifrm.style.width;
        
        var browserHeight = alib.dom.GetDocumentHeight();
		//var newHeight = browserHeight - alib.dom.getElementHeight(this.toolbarCon);
        
        alib.dom.styleSet(this.editorCon, "position", "absolute");
        alib.dom.styleSet(this.editorCon, "z-index", "10");
        //alib.dom.styleSet(this.editorCon, "overflow", "hidden");
        alib.dom.styleSet(this.editorCon, "top", "0");
        alib.dom.styleSet(this.editorCon, "left", "0");
        //alib.dom.styleSet(this.editorCon, "height", browserHeight + "px");
        alib.dom.styleSet(this.editorCon, "width", "100%");

		// Set body overflow to hidden
		this.originalBodyOverflow = alib.dom.styleGet(document.body, "overflow");
		alib.dom.styleSet(document.body, "overflow", "hidden");

		this.setHeight(browserHeight);
        
		/*
        this.ifrm.style.width = "100%";
        this.ifrm.style.height = newHeight + "px";
		*/
        this.ifrm.style.width = "100%";
        
        //this.toolButtonObj.fullScreen.setText("Exit Fullscreen");        
		this.toolButtonObj.fullScreen.toggle(true);
        this.isFullscreen = true;
    }
    else
    {
        this.ifrm.style.width = this.originalWidth;
        //this.ifrm.style.height = this.originalHeight;
		alib.dom.styleSet(document.body, "overflow", this.originalBodyOverflow);
        
        alib.dom.styleSet(this.editorCon, "position", "static");
        //alib.dom.styleSet(this.editorCon, "height", this.originalHeight);
        alib.dom.styleSet(this.editorCon, "width", this.originalWidth);

		this.setHeight(this.originalHeight);
        
		this.toolButtonObj.fullScreen.toggle(false);
        //this.toolButtonObj.fullScreen.setText("Fullscreen");
        this.isFullscreen = false;
    }
}

/**
 * Shows the insert image dialog
 *
 */
Alib_Ui_Editor.prototype.insertImageDialog = function()
{
    if (typeof AntFsOpen == "undefined") // Check for ANT AntFsOpen
    {
        this.setRange();

        var imgDialog = new CDialog();
        imgDialog.cls = this;
        
        imgDialog.onPromptOk = function(val)
        {
            this.cls.insertImage(val);
        }

        imgDialog.promptBox("Enter the URL of your image", "Insert Image", "");
    }
    else // Use ANT file system
    {
        var cbrowser = new AntFsOpen();
        cbrowser.filterType = "jpg:jpeg:png:gif";
        cbrowser.cbData.cls = this;
        cbrowser.onSelect = function(fid, name, path) 
        {
            this.cbData.cls.insertImage("http://" + document.domain + "/files/images/"+fid);
        }
        
        this.setRange(); 
        cbrowser.showDialog();
    }
}

/**
 * Shows the insert link dialog
 *
 */
Alib_Ui_Editor.prototype.insertLinkDialog = function()
{
    this.setRange();

    var linkDialog = new CDialog();
    linkDialog.cls = this;
    
    linkDialog.onPromptOk = function(val)
    {
        this.cls.insertLink(val);
    }

    linkDialog.promptBox("Enter the link path", "Insert Link", "");
}

/**
 * Shows the insert link dialog
 *
 */
Alib_Ui_Editor.prototype.createDropdown = function(type)
{
    var dmcon = new CDropdownMenu();
    dmcon.cls = this;
    var dcon = dmcon.addCon();
    
    switch(type)
    {
        case "color":
            this.createToolbarFntColor(dcon);
            break;
        case "bgcolor":
            this.createToolbarHlColor(dcon);
            break;
        case "style":
            dmcon.onmousedown = function() { this.cls.setRange(); }
            dmcon.tabIndex = -1;
            var fonts = ["Arial", "Georgia", "Tahoma", "Courier New", "Times New Roman", "Verdana"];
            for (var i = 0; i < fonts.length; i++)
                dmcon.addEntry("<span style='font-family:"+fonts[i]+"'>"+fonts[i]+"</span>", function (cls, f) { cls.setFont("fontname", f); }, null, null, [this, fonts[i]]);
            break;
        case "size":
            dmcon.onmousedown = function() { this.cls.setRange(); }
            dmcon.tabIndex = -1;
            var sizes = [[1, "Smallest"], [2, "X-Small"], [3, "Small"], [4, "Normal"], [5, "Large"], [6, "X-Large"], [7, "Huge"]];
            for (var i = 0; i < sizes.length; i++)
                dmcon.addEntry(sizes[i][1], function (cls, f) { cls.setFont("fontsize", f); }, null, null, [this, sizes[i][0]]);
            break;
        case "template":
            dmcon.onmousedown = function() { this.cls.setRange(); }
            dmcon.tabIndex = -1;
            var styles = [["Body / Normal", "formatBlock", "<p>"], 
                          ["Heading 1", "formatBlock", "<h1>"], 
                          ["Heading 2", "formatBlock", "<h2>"], 
                          ["Heading 3", "formatBlock", "<h3>"], 
                          ["Heading 4", "formatBlock", "<h4>"], 
                          ["Heading 5", "formatBlock", "<h5>"],
                          ["Quote", "formatBlock", "<blockquote>"]];
            for (var i = 0; i < styles.length; i++)
                dmcon.addEntry(styles[i][0], function (cls, func, val) { cls.setFont(func, val); }, null, null, [this, styles[i][1], styles[i][2]]);
            break;
    }
    
    return dmcon;
}

/**
* @fileOverview alib.ui.tooltip class
*
* This is used to display tooltip of elements
*
* Exampl:
* <code>
*     var button = new alib.ui.Tooltip(element, "Test Tooltip");
* </code>
*
* @author:    Marl Tumulak, marl.tumulak@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*
*             joe, sky.stebnicki@aereus.com; v2 updates to use tipsy
*             Copyright (c) 2013 Aereus Corporation. All rights reserved.
*/

 /**
 * Creates an instance of alib.ui.Tooltip
 *
 * @constructor
 * @param {string} element      Html element to be attached with tooltip
 * @param {string} message      Message of the tooltip
 * @param {boolean} fModular    Determines if the tooltip will be displayed on a modular window
 */
alib.ui.Tooltip = function(element, message, fModular)
{
	if (message)
		element.setAttribute("title", message);

	var tip = $(element).tipsy({
		delayIn: 500,      // delay before showing tooltip (ms)
		delayOut: 0,     // delay before hiding tooltip (ms)
		fade: true,     // fade tooltips in/out?
		fallback: '',    // fallback text to use when no tooltip text
		gravity: $.fn.tipsy.autoBounds(0, 'n'),    // gravity
		html: true,     // is tooltip content HTML?
		live: false,     // use live event support?
		offset: 1,       // pixel offset of tooltip from element
		opacity: 0.8,    // opacity of tooltip
		title: 'title',  // attribute/callback containing tooltip text
		trigger: 'hover' // how tooltip is triggered - hover | focus | manual
	});

	alib.events.listen(element, "click", function() { 
		$(element).tipsy("hide");
	});

	/*
    var attrData = [["innerHTML", message], ["id", "toolTip"]];
    var divTooltip = alib.dom.setElementAttr(alib.dom.createElement("div", element.parentNode), attrData);    
    alib.dom.styleSet(divTooltip, "maxWidth", "400px");
    alib.dom.styleSet(divTooltip, "text-align", "justify");
    alib.dom.styleSet(divTooltip, "background-color", "#115768");
    alib.dom.styleSet(divTooltip, "color", "#FFFFFF");
    alib.dom.styleSet(divTooltip, "position", "absolute");    
    alib.dom.styleSet(divTooltip, "display", "none");
    alib.dom.styleSet(divTooltip, "borderRadius", "3px");
    alib.dom.styleSet(divTooltip, "padding", "5px");
    alib.dom.styleSet(divTooltip, "fontWeight", "normal");
    
    $(element).mousemove(function(e)
    {
        var elemPos = alib.dom.getElementPosition(element);
        //var left = e.pageX - (divTooltip.offsetWidth / 2);
        //var top = e.pageY - (divTooltip.offsetHeight + 5);
        var left = (elemPos.x + (element.offsetWidth / 2)) - (divTooltip.offsetWidth / 2);
        var top = elemPos.y - (divTooltip.offsetHeight);
        
        if((elemPos.x + divTooltip.offsetWidth) >= document.body.offsetWidth)
        {
            left = elemPos.x - (divTooltip.offsetWidth);
            top = (elemPos.y + (element.offsetHeight / 2)) - (divTooltip.offsetHeight/2);
        }

        if(left < 0)
            left = 5;
            
        if(top < 0)
            top = 5;
        
        if(fModular)
        {            
            left = (left / 2) + 30;
            top = (top / 2) + 100;
        }
        
        alib.dom.styleSet(divTooltip, "left", left);
        alib.dom.styleSet(divTooltip, "top", top);
    });
    
    $(element).hover
    (
        function()
        {
            $(divTooltip).fadeIn(500);
        },
        function()
        {
            $(divTooltip).fadeOut(500);
        }
    )
    
    this.tooltipCon = divTooltip;
	*/
}

/**
* @fileOverview alib.ui.SlimScroll class
*
* This is used to apply a scrollbar that is minimalistic in that
* it hides when not in use and has a custom style.
*
* Example:
* <code>
*
* 	// Create basic dropdown with array
* 	alib.ui.SlimScroll(element, { color: '#00f', height: '250px', size : '10px' });
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com
* 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Slimscroll
 *
 * This class is just a wrapper to the jquery plugin below
 *
 * @constructor
 * @param {DOMElement} el The input or textarea to add this autocomplete to
 * @param {Object} options Options to be used
 */
function Alib_Ui_SlimScroll(element, options)
{
	/*
	return $(element).slimScroll({
		size: '10px',
		height: '180px',
		alwaysVisible: true
	});
	*/

	$(element).lionbars({
		autohide: false
	});
}

(function( $ ) {
    $.fn.hasScrollBar = function() {
        return this.get(0).scrollHeight > this.height();
    };
	$.fn.lionbars = function(options) {
		options = options || {};
		autohide = options.autohide;

		// Flags
		var timeout,
			HDragging=false,
			VDragging=false,
			activeScroll=0,
			activeWrap=0,
			eventX,
			eventY,
			mouseX,
			mouseY,
			currentRatio,
			initPos,
			scrollValue,
			hideTimeoutSet=false,
			vEventFired = false,
			hEventFired = false;

		// Initialization
		var elements = $(this),
			id = 0,
			vScrollWidth=0, hScrollWidth=0,
			addHScroll=false, addVScroll=false,
			paddingTop=0, paddingLeft=0, paddingBottom=0, paddingRight=0,
			borderTop=0, borderRight=0, borderBottom=0, borderLeft=0,
			scrollHeight=0, scrollWidth=0, offsetWidth=0, offsetHeight=0, clientWidth=0, clientHeight=0,
			vRatio=0, hRatio=0,
			vSliderHeight=0, hSliderHeight=0,
			vLbHeight=0, hLbHeight=0;

		// Main Loop
		mainLoop();

		function mainLoop() {
			for (var i=0; elements[i] !== undefined; i++) {
				if (needScrollbars(elements[i]) && !$(elements[i]).hasClass('nolionbars')) {
					// add the element to the main array
					target = elements[i];

					// get some values before the element is wrapped
					getDimentions(target);

					// wrap the element
					wrap(target, addVScroll, addHScroll);

					// hide the default scrollbar
					hideScrollbars(target, addVScroll, addHScroll);

					// Calculate the size of the scrollbars
					reduceScrollbarsWidthHeight(target);
					setSlidersHeight(target);

					// Set variables needed to calculate scroll speed, etc.
					setScrollRatios(target);

					// Set events
					setEvents(target);

					// prepare for next element
					resetVars();
				}
			}
		}

		// Set document events
		$(document).mousemove(function(e) {
			if (VDragging) {
				mouseY = e.pageY;
				activeWrap.scrollTop((initPos + mouseY - eventY) * Math.abs(currentRatio));
			}
			if (HDragging) {
				mouseX = e.pageX;
				activeWrap.scrollLeft((initPos + mouseX - eventX) * Math.abs(currentRatio));
			}
		});
		$(document).mouseup(function(e) {
			if (VDragging) {
				VDragging = false;
			}
			if (HDragging) {
				HDragging = false;
			}
		});

		// Core functions
		function setEvents(elem) {
			var el = $(elem);

			if (addVScroll || addHScroll) {
				el.find('.lb-wrap').scroll(function(e) {
					el.find('.lb-v-scrollbar-slider').css({ "top" : -$(this).scrollTop()/el.attr('vratio') });
					el.find('.lb-h-scrollbar-slider').css({ "left" : -$(this).scrollLeft()/el.attr('hratio') });

					if (el.find('.lb-v-scrollbar').height() == (parseInt(el.find('.lb-v-scrollbar-slider').css('top')) + el.find('.lb-v-scrollbar-slider').height())
						&& typeof(options.reachedBottom) == 'function'
						&& !vEventFired
					) {
						vEventFired = true;
						var self = $(this);

						options.reachedBottom.apply($(this).children('.lb-content'), [function () {
							getDimentions($(self).parent(), {
								height: $(self).children('.lb-content').get(0).scrollHeight,
								width: $(self).children('.lb-content').get(0).scrollWidth
							});

							// Calculate the size of the scrollbars
							reduceScrollbarsWidthHeight($(self).parent());
							setSlidersHeight($(self).parent());

							// Set variables needed to calculate scroll speed, etc.
							setScrollRatios($(self).parent());

							// prepare for next element
							resetVars();

							vEventFired = false;
						}]);
					}

					if (el.find('.lb-h-scrollbar').width() == (parseInt(el.find('.lb-h-scrollbar-slider').css('left')) + el.find('.lb-h-scrollbar-slider').width())
						&& typeof(options.reachedRight) == 'function'
						&& !hEventFired
					) {
						hEventFired = true;
						var self = $(this);

						options.reachedRight.apply($(this).children('.lb-content'), [function () {
							getDimentions($(self).parent(), {
								height: $(self).children('.lb-content').get(0).scrollHeight,
								width: $(self).children('.lb-content').get(0).scrollWidth
							});

							// Calculate the size of the scrollbars
							reduceScrollbarsWidthHeight($(self).parent());
							setSlidersHeight($(self).parent());

							// Set variables needed to calculate scroll speed, etc.
							setScrollRatios($(self).parent());

							// prepare for next element
							resetVars();

							hEventFired = false;
						}]);
					}

					if (autohide) {
						el.find('.lb-v-scrollbar, .lb-h-scrollbar').fadeIn(150);
						clearTimeout(timeout);
						timeout = setTimeout(function() {
							el.find('.lb-v-scrollbar, .lb-h-scrollbar').fadeOut(150);
						}, 2000);
					}
				});
			}

			if (addVScroll) {
				el.find('.lb-v-scrollbar-slider').mousedown(function(e) {
					eventY = e.pageY;

					VDragging = true;
					activeScroll = $(this);
					activeWrap = el.find('.lb-wrap');
					currentRatio = activeWrap.parent().attr('vratio');
					initPos = activeScroll.position().top;
					return false;
				});
				el.find('.lb-v-scrollbar').mousedown(function(e) {
					if (!$(e.target).hasClass('lb-v-scrollbar-slider')) {
						el.find('.lb-wrap').scrollTop((e.pageY - $(this).offset().top) * Math.abs(el.attr('vratio')) - $(this).find('.lb-v-scrollbar-slider').height()/2);
					}
					return false;
				});
			}

			if (addHScroll) {
				el.find('.lb-h-scrollbar-slider').mousedown(function(e) {
					eventX = e.pageX;

					HDragging = true;
					activeScroll = $(this);
					activeWrap = el.find('.lb-wrap');
					currentRatio = activeWrap.parent().attr('hratio');
					initPos = activeScroll.position().left;
					return false;					
				});
				el.find('.lb-h-scrollbar').mousedown(function(e) {
					if (!$(e.target).hasClass('lb-h-scrollbar-slider')) {
						el.find('.lb-wrap').scrollLeft((e.pageX - $(this).offset().left) * Math.abs(el.attr('hratio')) - $(this).find('.lb-h-scrollbar-slider').width()/2);
					}
					return false;
				});
			}

			if ((addVScroll || addHScroll) && autohide) {
				el.find('.lb-v-scrollbar, .lb-h-scrollbar').hide();

				el.hover(function() {
				}, function() {
					el.find('.lb-v-scrollbar, .lb-h-scrollbar').fadeOut(150);
				});
			}
		}
		function setScrollRatios(elem) {
			vRatio = (offsetHeight - $(elem).find('.lb-wrap').get(0).scrollHeight - borderTop - borderBottom)/(vLbHeight - vSliderHeight);
			hRatio = (offsetWidth - $(elem).find('.lb-wrap').get(0).scrollWidth - borderLeft - borderRight)/(hLbHeight - hSliderHeight);

			var el = $(elem);
			el.attr('vratio', vRatio);
			el.attr('hratio', hRatio);
		}
		function setSlidersHeight(elem) {
			var el = $(elem);
			var hmin, hmax, gap;

			if (el.find('.lb-v-scrollbar').length != 0) {
				hmin = 20;
				gap = offsetHeight - el.find('.lb-v-scrollbar').height();
				hmax = offsetHeight - gap - hmin;
				vSliderHeight = Math.round((offsetHeight*hmax)/scrollHeight);
				vSliderHeight = (vSliderHeight < hmin) ? hmin : vSliderHeight;
			}

			if (el.find('.lb-h-scrollbar').length != 0) {
				hmin = 20;
				gap = offsetWidth - el.find('.lb-h-scrollbar').width();
				hmax = offsetWidth - gap - hmin;
				hSliderHeight = Math.round((offsetWidth*hmax)/scrollWidth);
				hSliderHeight = (hSliderHeight < hmin) ? hmin : hSliderHeight;
			}
			el.find('.lb-v-scrollbar-slider').css({ "height" : vSliderHeight });
			el.find('.lb-h-scrollbar-slider').css({ "width" : hSliderHeight });
		}
		function resetVars() {
			vScrollWidth = 0;
			hScrollWidth = 0;
			addHScroll=false;
			addVScroll=false;
			paddingTop = 0;
			paddingLeft = 0;
			paddingBottom = 0;
			paddingRight = 0;
			borderTop = 0;
			borderLeft = 0;
			borderBottom = 0;
			borderRight = 0;
			scrollHeight = 0;
			scrollWidth = 0;
			offsetWidth = 0;
			offsetHeight = 0;
			clientWidth = 0;
			clientHeight = 0;
			// vRatio = 0;
			// hRatio = 0;
			vSliderHeight = 0;
			hSliderHeight = 0;
			vLbHeight = 0;
			hLbHeight = 0;
		}
		function reduceScrollbarsWidthHeight(elem) {
			var el = $(elem);

			if (addVScroll && addHScroll) {
				vLbHeight = el.height()-12;
				hLbHeight = el.width()-12;
				el.find('.lb-v-scrollbar').css({ "height" : vLbHeight });
				el.find('.lb-h-scrollbar').css({ "width" : hLbHeight });
			} else {
				vLbHeight = el.height()-4;
				hLbHeight = el.width()-4;
				el.find('.lb-v-scrollbar').css({ "height" : vLbHeight });
				el.find('.lb-h-scrollbar').css({ "width" : hLbHeight });
			}
		}
		function hideScrollbars(elem, vscroll, hscroll) {
			var el = $(elem);

			if (vscroll || hscroll) {
				el.css({ "overflow" : 'hidden' });
				movePadding(el, el.find('.lb-wrap'));
				resizeMainBox(el);
				resizeInnerWrap(el, el.find('.lb-wrap'));
			}
		}
		function resizeMainBox(elem) {
			var el = $(elem);
			el.css({ "width" : el.width() + paddingLeft + paddingRight, "height" : el.height() + paddingTop + paddingBottom });
		}
		function movePadding(from, to) {
			var fromEl = $(from);
			var toEl = $(to);

			fromEl.css({ "padding" : 0 });
			toEl.css({
				"padding-top" : paddingTop+'px',
				"padding-left" : paddingLeft+'px',
				"padding-bottom" : paddingBottom+'px',
				"padding-right" : paddingRight+'px' 
			});
		}
		function resizeInnerWrap(main, child) {
			var mainEl = $(main);
			var childEl = $(child);
			mainEl.css({ "position" : 'relative' });
			childEl.css({
				"width" : mainEl.width()+vScrollWidth - paddingLeft - paddingRight, 
				"height" : mainEl.height()+hScrollWidth - paddingTop - paddingBottom 
			});
		}
		function setVScrollbarWidth(elem) {
			var el = $(elem);
			el.css({ "overflow" : 'auto' });
			vScrollWidth = offsetWidth - clientWidth - borderLeft - borderRight;
			el.css({ "overflow" : 'hidden' });
		}
		function setHScrollbarWidth(elem) {
			var el = $(elem);
			el.css({ "overflow" : 'auto' });
			hScrollWidth = offsetHeight - clientHeight - borderTop - borderBottom;
			el.css({ "overflow" : 'hidden' });
		}
		function wrap(elem, vscroll, hscroll) {
			var el = $(elem);
			var elemId = el.attr('id');
			var wrap = 0;

			if (elemId !== undefined) {
				el.wrapInner('<div class="lb-wrap" id="lb-wrap-'+id+'-'+elemId+'"></div>');
				wrap = $('#lb-wrap-'+id+'-'+elemId);
			} else {
				el.wrapInner('<div class="lb-wrap" id="lb-wrap-'+id+'"></div>');
				wrap = $('#lb-wrap-'+id);
			}
			wrap.wrapInner('<div class="lb-content"></div>');
			if (vscroll) {
				el.prepend('<div class="lb-v-scrollbar"></div>');
				el.find('.lb-v-scrollbar').append('<div class="lb-v-scrollbar-slider"></div>');
			}
			if (hscroll) {
				el.prepend('<div class="lb-h-scrollbar"></div>');
				el.find('.lb-h-scrollbar').append('<div class="lb-h-scrollbar-slider"></div>');
			}

			// preparation for the next element
			id = id + 1;
		}
		function needScrollbars(elem) {
			var el = $(elem);
			addVScroll = false;
			addHScroll = false;

			getPadding(el);
			getBorders(el);

			el.css({ "overflow" : 'hidden' });

			// check for vertical scrollbars
			if (el.get(0).scrollHeight > el.get(0).clientHeight) {
				addVScroll = true;
				// setVScrollbarWidth(el);
			}

			// check for horizontal scrollbars
			if (el.get(0).scrollWidth > el.get(0).clientWidth) {
				addHScroll = true;
				// setHScrollbarWidth(el);
			}

			el.css({ "overflow" : 'auto' });

			if (addVScroll || addHScroll) {
 				return true;
 			}			
		}
		function getPadding(elem) {
			var el = $(elem);

			paddingTop = parseInt(el.css('padding-top').replace('px', ''));
			paddingLeft = parseInt(el.css('padding-left').replace('px', ''));
			paddingBottom = parseInt(el.css('padding-bottom').replace('px', ''));
			paddingRight = parseInt(el.css('padding-right').replace('px', ''));
		}
		function getBorders(elem) {
			var el = $(elem);

			borderTop = parseInt(el.css('border-top-width').replace('px', ''));
			borderRight = parseInt(el.css('border-right-width').replace('px', ''));
			borderBottom = parseInt(el.css('border-bottom-width').replace('px', ''));
			borderLeft = parseInt(el.css('border-left-width').replace('px', ''));
		}
		function getDimentions(elem, scroll) {
			var el = $(elem).get(0);

			scrollHeight = (typeof(scroll) != 'undefined') ? scroll.height : el.scrollHeight;
			scrollWidth = (typeof(scroll) != 'undefined') ? scroll.width : el.scrollWidth;
			clientHeight = el.clientHeight;
			clientWidth = el.clientWidth;
			offsetHeight = el.offsetHeight;
			offsetWidth = el.offsetWidth;

			setVScrollbarWidth($(elem));
			setHScrollbarWidth($(elem));
		}

		return this.each(function() {
			//var $this = $(this);
		});
	};
})( jQuery );

/**
* @fileOverview alib.ui.toolbar class
*
* This is used to build dynamic toolbars
*
* Example:
* <code>
*     var button = alib.ui.Tooltip(element, "Test Tooltip");
* </code>
*
* @author:    joe, sky.stebnicki@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Toolbar
 *
 * @constructor
 * @param {string} element      Html element to be attached with tooltip
 * @param {string} message      Message of the tooltip
 */
function Alib_Ui_Toolbar()
{
	/**
	 * The main outer container
	 *
	 * @private
	 * @var {DIV}
	 */
	this.mainCon = null;

	/**
	 * Child entries/buttons
	 *
	 * @var {Object[]) Object with properties: id (optional), button
	 */
	this.children = new Array();
}

/**
 * Add an item to the toolbar
 *
 * @public
 * @param {Ui_Component} uiComponent The component (button) to add
 * @param {bool} enabled The default state of this child
 * @param {string} id An optional id for referencing the child by name
 */
Alib_Ui_Toolbar.prototype.addChild = function(uiComponent, enabled, id)
{
	var id = id || null;
	var enabled = enabled || true;

	this.children.push({button:uiComponent, enabled:enabled, id:id});
}

/**
 * Get a child by id name
 *
 * @public
 * @param {string} id The unique id of the child to get
 */
Alib_Ui_Toolbar.prototype.getChild = function(id)
{
	for (var i = 0; i < this.children.length; i++)
	{
		if (this.children[i].id == id)
			return this.children[i].button;
	}
}


/**
 * Get the total height of this toolbar
 *
 * @public
 * @return {int} The exact height of this toolbar in pixels
 */
Alib_Ui_Toolbar.prototype.getHeight = function()
{
}

/**
 * Print the toolbar to a container
 *
 * @public
 * @param {DOMElement|string} con The container to print this toolbar into
 */
Alib_Ui_Toolbar.prototype.print = function(con)
{
	this.mainCon = alib.dom.createElement("div", con);
	this.mainCon.innerHTML = "";

	alib.dom.styleSetClass(this.mainCon, "alibToolbar");

	for (var i = 0; i < this.children.length; i++)
	{
		this.children[i].button.print(this.mainCon);
	}
}

/**
* @fileOverview alib.ui.ToolbarButton class
*
* This is used to create a new button using a div with the toolbar styles
*
* Exampl:
* <code>
* 	var button = alib.ui.ToolbarButton("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Button
 *
 * @constructor
 */
function Alib_Ui_ToolbarButton(content, options)
{
	var options = options || new Object();

	// Set default class
	if (!options.className)
		options.className = "alibToolbarButton";

	var btn = new Alib_Ui_Button(content, options, "div");
	return btn;
}

/**
* @fileOverview alib.ui.ToolbarToggleButton class
*
* This is used to create a new button using a div with the toolbar styles
* with a toggle enabled.
*
* Exampl:
* <code>
* 	var button = alib.ui.ToolbarButton("Button Content", {className:"blue", con:document.getElementById("toolbardiv"), tooltip:"My Text"});
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_Button
 *
 * @constructor
 */
function Alib_Ui_ToolbarToggleButton(content, options)
{
	var options = options || new Object();

	// Set default class
	if (!options.className)
		options.className = "alibToolbarButton";

	if (!options.toggle)
		options.toggle = true;

	var btn = new Alib_Ui_Button(content, options, "div");
	return btn;
}

/**
* @fileOverview alib.ui.Alib_Ui_ToolbarSeparator class
*
* This is used to create a new toolbar spacer element
* Exampl:
* <code>
* 	var button = alib.ui.ToolbarSpacer();
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Alib_Ui_ToolbarSeparator
 *
 * @constructor
 */
function Alib_Ui_ToolbarSeparator(options)
{
}

/**
 * Render the dom into the document
 */
Alib_Ui_ToolbarSeparator.prototype.print = function(con)
{
	var sep = alib.dom.createElement("span", con);
	alib.dom.styleSetClass(sep, "alibToolbarSeparator");
}

/**
 * @fileOverview Menu class used to build menus
 *
 * This class is a work in progress
 *
 * Example:
 * <code>
 * 	var menu = new alib.ui.Menu();
 * 	menu.addItem(new alib.ui.MenuItem("Item 1"), true, "opt_item_id");
 * 	menu.addItem(new alib.ui.MenuItem("Item 2"), true, "opt_item2_id");
 * 	menu.render(document.getElementById('divid'));
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance ui menu
 *
 * @constructor
 */
alib.ui.Menu = function(options)
{
	/**
	 * Main div contianer created when rendered
	 *
	 * @type {DOMElement}
	 */
	this.mainCon = null;

	/**
	 * Options object
	 *
	 * @type {Object}
	 */
	this.options = options || new Object();

	/**
	 * Array of entries
	 *
	 * @type {Array}
	 */
	this.entries = new Array();

	/**
	 * Index of selected entry
	 *
	 * @type {int}
	 */
	this.selectedEntry = -1;

	/**
	 * Flag to determine if we should show a filter search box
	 *
	 * @type {bool}
	 */
	this.isFiltered = this.options.filtered || false;

	/**
	 * Flag to set this as a submenu of a parent menu
	 *
	 * @type {bool}
	 */
	this.isSubmenu = this.options.submenu || false;

	/**
	 * Search input
	 *
	 * @type {DOMElement.input}
	 */
	this.filteredInput = null;

	/**
	 * Filter container
	 *
	 * @type {DOMElement.div}
	 */
	this.filterCon = null;

	/**
	 * Mobile mode flag
	 *
	 * @type {bool}
	 */
	this.mobile = this.options.mobile || ((alib.dom.getClientWidth() < 800)?true:false);
}

/**
 * Add a menu item to the menu
 *
 * @param {alib.ui.MenuItem} item
 */
alib.ui.Menu.prototype.addItem = function(item)
{
	this.entries.push(item);
	this.refresh(); // If alredy rendered then redraw with new item
	
	alib.events.triggerEvent(this, "onAddItem");
}

/**
 * Clear all current items in the menu
 */
alib.ui.Menu.prototype.clear = function()
{
	this.mainCon.innerHTML = "";
	this.entries = new Array();
}

/**
 * Refresh based on added items
 */
alib.ui.Menu.prototype.refresh = function()
{
	if (!this.mainCon)
		return;

	// Clear rendered div because IE appears to leave it orphaned while clearing all child content
	for (var i in this.entries)
	{
		if (this.entries[i].con)
			this.entries[i].con.parentNode.removeChild(this.entries[i].con);
	}

	if (this.filterCon != null)
		this.filterCon.innerHTML = "";

	//this.mainCon.innerHTML = "";

	this.render();
}

/**
 * Render this item into the DOM tree
 *
 * @param {DOMElement} con The container to render this menu into
 */
alib.ui.Menu.prototype.render = function(con)
{
	if (!this.mainCon && con)
	{
		this.mainCon = alib.dom.createElement("div", con);
		alib.dom.styleSetClass(this.mainCon, "alibMenu");
	}

	// If filtered then add search box
	if (this.isFiltered)
	{
		if (!this.filterCon)
			this.filterCon = alib.dom.createElement("div", this.mainCon);

		this.renderFilterForm(this.filterCon);
	}

	for (var i in this.entries)
	{
		this.entries[i].render(this.mainCon, this);
	}
}

/**
 * Create filtered search box
 *
 * @param {DOMElement} con
 */
alib.ui.Menu.prototype.renderFilterForm = function(con)
{
	var filterCon = alib.dom.createElement("div", con);
	alib.dom.styleSet(filterCon, "margin", "0 5px 0 5px");
	alib.dom.styleSet(filterCon, "min-width", "100px");

	var input = alib.dom.createElement("input", filterCon);
	input.type = "text";
	alib.dom.styleSet(input, "width", "98%");
	this.filteredInput = input;

	alib.events.listen(input, "keyup", function(evt) {
		evt.data.menu.filterSearch(this.value);
	}, {menu:this});
}

/**
 * Search through all the items in the array for a query string and hide anything that does not match
 *
 * @param {string} strQuery
 */
alib.ui.Menu.prototype.filterSearch = function(strQuery)
{
	for (var i in this.entries)
	{
		this.entries[i].applyVisibleFilter(strQuery);
	}
}

/**
 * Search through all the items in the array for an id if set
 *
 * @param {string} strQuery
 * @return {alib.ui.MenuItem}
 */
alib.ui.Menu.prototype.getItemById = function(id)
{
	for (var i in this.entries)
	{
		if (this.entries[i].id == id)
			return this.entries[i];
	}

	return null;
}

/**
 * Put this menu in mobile mode
 *
 * @param {bool} on If in, then render this in one box
 * @return {alib.ui.MenuItem}
 */
alib.ui.Menu.prototype.setMobileMode = function(on) {
	this.mobile = on;
}

/**
 * Move down an item from current position, or select first
 */
alib.ui.Menu.prototype.moveDown = function() {
	if (this.entries.length == 0)
		return;

	// Make sure some items are visible
	var isVisible = false;
	for (var i in this.entries)
	{
		if (this.entries[i].visible)
			isVisible = true;
	}
	if (!isVisible)
		return;

	this.selectedEntry++;

	// If beyond range then wrap to 0
	if (this.selectedEntry > (this.entries.length - 1))
		this.selectedEntry = 0;

	// If next item is not visible, then skip to next
	if (!this.entries[this.selectedEntry].visible)
		return this.moveDown();

	// Hover active, remove over class from all others
	for (var i in this.entries)
		this.entries[i].setSelected((i==this.selectedEntry)?true:false);
}

/**
 * Move down an item from current position, or select first
 */
alib.ui.Menu.prototype.moveUp = function() {
	if (this.entries.length == 0)
		return;

	// Make sure some items are visible
	var isVisible = false;
	for (var i in this.entries)
	{
		if (this.entries[i].visible)
			isVisible = true;
	}
	if (!isVisible)
		return;

	if (this.selectedEntry <= 0)
		this.selectedEntry = this.entries.length - 1;
	else
		this.selectedEntry--;

	// If next item is not visible, then skip to next
	if (!this.entries[this.selectedEntry].visible)
		return this.moveUp();

	// Hover active, remove over class from all others
	for (var i in this.entries)
		this.entries[i].setSelected((i==this.selectedEntry)?true:false);
}

/**
 * Listen for arrow keys and return
 */
alib.ui.Menu.prototype.captureKeyEvents = function() {

	var me = this;
	var onkeyDownHndler = function(evt) {
		if (!evt) evt = event;
		var a = evt.keyCode;
		
		switch (a)
		{
		// Up arrow
		case 38:
			me.moveUp();
			return false;
			break;

		// Down arrow
		case 40:
			me.moveDown();
			return false;
			break;

		// Return or tab gets hit
		case 13:
			if (me.selectedEntry)
				me.entries[me.selectedEntry].click();
			return true;
			/*
			if (actb_display)
			{
				actb_curr.m_inac = false;
				actb_caretmove = 1;
				actb_penter();
				return false;
			}
			else
			{
				return true;
			}
			*/
			break;

		default:
			return true;
			break;
		}
	};

	alib.dom.addEvent(document, "keydown", onkeyDownHndler);
	//alib.dom.addEvent(document,"keypress", actb_keypress);

	this.clearKeyEvents = function(){
		alib.dom.removeEvent(document,"keydown",onkeyDownHndler);
		//alib.dom.removeEvent(document,"keypress",actb_keypress);
	}
}

/**
 * Clear key event listeners
 */
alib.ui.Menu.prototype.clearKeyEvents = function() {
	// Will be defined when captureKeyEvents is called
}

/*
function actb_keypress(e)
	{
		if (actb_caretmove) alib.dom.stopEvent(e);
		return !actb_caretmove;
	}
	*/


/**
 * @fileOverview Menu item class used to represent each menu item
 *
 * This class is a work in progress
 *
 * Example of how it is used:
 * <code>
 * 	var menu = new alib.ui.Menu();
 * 	var item = new alib.ui.MenuItem("Item 1");
 * 	item.onclick = function() { alert("Clicked"); };
 * 	menu.addItem(item, true, "opt_item_id");
 * 	menu.addItem(new alib.ui.MenuItem("Item 2"), true, "opt_item2_id");
 * 	menu.render(document.getElementById('divid'));
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance ui menu
 *
 * @param {string} label The label of this menu item
 * @constructor
 */
alib.ui.MenuItem = function (label, options, id)
{
	/**
	 * Label
	 *
	 * @var {string}
	 */
	this.label = label;

	/**
	 * Options object
	 *
	 * @type {Object}
	 */
	this.options = options || new Object();

	/**
	 * Menu item container
	 *
	 * @type {DOMElement}
	 */
	this.con = null;

	/**
	 * Inner label container
	 *
	 * @type {DOMElement}
	 */
	this.labelCon = null;

	/**
	 * Generic object to hold callback properties
	 *
	 * @type {Object}
	 */
	this.cbData = new Object();

	/**
	 * Optional unique id
	 *
	 * @type {string}
	 */
	this.id = id || "";

	/**
	 * Is this item visible
	 *
	 * @type {bool}
	 */
	this.visible = true;
}

/**
 * Redner the menu item into the dom tree
 *
 * @param {DOMElement} con The parent container
 * @param {alib.ui.Menu} menu Handle to parent menu
 */
alib.ui.MenuItem.prototype.render = function(con, menu)
{
	if (!this.con)
	{
		this.con = alib.dom.createElement("div", con);
		alib.dom.styleSetClass(this.con, "alibMenuItem");

		// Add icon if set
		if (this.options.icon)
		{
			var iconCon = alib.dom.createElement("span", this.con);
			alib.dom.styleSetClass(iconCon, "alibMenuItemIcon");
			iconCon.innerHTML = this.options.icon;
		}

		alib.events.listen(this.con, "mouseover", function() {
			alib.dom.styleAddClass(this, "alibMenuItemHover");
		}, {});

		alib.events.listen(this.con, "mouseout", function() {
			alib.dom.styleRemoveClass(this, "alibMenuItemHover");
		}, {});

		alib.events.listen(this.con, "click", function(evt) {
			alib.events.triggerEvent(evt.data.mItem, "click");
		}, {mItem:this});

		this.labelCon = alib.dom.createElement("div", this.con);
		alib.dom.styleSetClass(this.labelCon, "alibMenuItemLabel");
		this.labelCon.innerHTML = this.label;

		// Setup manual onlclick callback
		alib.events.listen(this, "click", function(evt) { this.onclick(); });
	}
	else
	{
		con.appendChild(this.con);
	}
}

/**
 * Force click event
 */
alib.ui.MenuItem.prototype.click = function() {
	alib.events.triggerEvent(this, "click");
}

/**
 * Onclick callback
 */
alib.ui.MenuItem.prototype.onclick = function() {}

/**
 * Apply a search filter to this time
 *
 * If the filter does not match the label, this item will be hidden.
 *
 * @param {string} strQuery
 * @return {bool} True if item is visible, false if hidden
 */
alib.ui.MenuItem.prototype.applyVisibleFilter = function(strQuery)
{
	if(this.label.toLowerCase().indexOf(strQuery) !== -1 || !strQuery)
	{
		alib.dom.styleSet(this.con, "display", "block");
		this.visible = true;
	}
	else
	{
		alib.dom.styleSet(this.con, "display", "none");
		this.visible = false;
	}

	return this.visible;
}

/**
 * Set label
 *
 * @param {string} label The html to st to label to
 */
alib.ui.MenuItem.prototype.setLabel = function(label) {
	this.label = label;
	this.labelCon.innerHTML = this.label;
}

/**
 * Set label
 *
 * @param {bool} isSelected If true then the item is selected, otherwise false
 */
alib.ui.MenuItem.prototype.setSelected = function(isSelected) {
	if (isSelected)
		alib.dom.styleAddClass(this.con, "alibMenuItemHover");
	else
		alib.dom.styleRemoveClass(this.con, "alibMenuItemHover");
}

/**
 * @fileOverview Menu class used to build popup menus
 *
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance ui popup menu
 *
 * @constructor
 */
alib.ui.PopupMenu = function(options)
{
	/**
	 * Options object
	 *
	 * @var {Object}
	 */
	this.options = options || new Object();

	/**
	 * Menu container
	 *
	 * @type {DOMElement}
	 */
	this.menuDiv = alib.dom.createElement("div");

	/**
	 * Popup reference
	 *
	 * @var {alib.ui.Popup}
	 */
	this.popup = new alib.ui.Popup(this.menuDiv);

	/**
	 * Flag to determine if menu has been rendered yet
	 *
	 * @type {bool}
	 */
	this.isRendered = false;

	/**
	 * Flag to set this as a submenu of a parent menu
	 *
	 * @type {bool}
	 */
	this.isSubmenu = this.options.submenu || false;

	/**
	 * Mobile mode flag
	 *
	 * @type {bool}
	 */
	this.mobile = this.options.mobile || ((alib.dom.getClientWidth() < 800)?true:false);

	/**
	 * Menu reference
	 *
	 * @var {alib.ui.Menu}
	 */
	this.menu = new alib.ui.Menu({submenu:this.isSubmenu, mobile:this.mobile});

	// Setup events for active and inactive 
	this.setupEvents();
}

/**
 * Setup events
 *
 * @protected
 */
alib.ui.PopupMenu.prototype.setupEvents = function()
{
	// Setup events for active and inactive
	alib.events.listen(this.popup, "isActive", function(evt) { 
		alib.events.triggerEvent(evt.data.popMenu, "isActive");
	}, {popMenu:this});

	alib.events.listen(this.popup, "isInactive", function(evt) { 
		alib.events.triggerEvent(evt.data.popMenu, "isInactive");
	}, {popMenu:this});

	// Trigger popup show event
	alib.events.listen(this.popup, "onShow", function(evt) { 
		alib.events.triggerEvent(evt.data.popMenu, "onShow");
	}, {popMenu:this});

	// Trigger popup hide event
	alib.events.listen(this.popup, "onHide", function(evt) { 
		alib.events.triggerEvent(evt.data.popMenu, "onHide");
	}, {popMenu:this});

	// Focus search/filtered input if available
	alib.events.listen(this, "onShow", function(evt) { 
		if (evt.data.popMenu.menu.filteredInput) {
			// Clear previous filter
			evt.data.popMenu.menu.filteredInput.value = "";
			evt.data.popMenu.menu.filterSearch("");
			// Focus on input for filter
			evt.data.popMenu.menu.filteredInput.focus();
		}
	}, {popMenu:this});

	// Focus search/filtered input if item is dynamically added and this menu is visible
	alib.events.listen(this.menu, "onAddItem", function(evt) { 
		if (evt.data.popMenu.menu.filteredInput && evt.data.popMenu.popup.isVisible()) {
			evt.data.popMenu.menu.filteredInput.focus();
			evt.data.popMenu.popup.reposition();
		}
	}, {popMenu:this});

	// Capture key events in the menu
	alib.events.listen(this, "onShow", function(evt) { 
		if (evt.data.popMenu.menu && evt.data.popMenu.popup.isVisible()) {
			evt.data.popMenu.menu.captureKeyEvents();
		}
	}, {popMenu:this});

	// Capture key events in the menu
	alib.events.listen(this, "onHide", function(evt) { 
		if (evt.data.popMenu.menu) {
			evt.data.popMenu.menu.clearKeyEvents();
		}
	}, {popMenu:this});

}

/**
 * Toggle menu
 *
 * @public
 */
alib.ui.PopupMenu.prototype.setVisible = function()
{
	if (!this.isRendered)
		this.render();

	this.popup.setVisible();
}

/**
 * Set if this menu has a filter/search box
 *
 * @public
 * @param {bool} isFiltered
 */
alib.ui.PopupMenu.prototype.setFiltered = function(isFiltered)
{
	this.menu.isFiltered = isFiltered || false;
}

/**
 * Show this menu
 *
 * @public
 */
alib.ui.PopupMenu.prototype.show = function()
{
	//this.menu.filteredInput.value = ""; // Clear
	if (!this.popup.isRendered)
		this.popup.render();

	this.popup.setVisible(true);

	if (this.menu.filteredInput)
	{
		this.menu.filteredInput.focus();
	}
}

/**
 * Hide this menu
 *
 * @public
 * @param {bool} recur If true then walk up this.parentMenu tree to close the root
 */
alib.ui.PopupMenu.prototype.hide = function(recur)
{
	var pop = (recur) ? this.popup.getRootPopup() : this;
	pop.setVisible(false);
}

/**
 * Render the menu
 *
 * @public
 */
alib.ui.PopupMenu.prototype.render = function()
{
	document.body.appendChild(this.menuDiv);
	alib.dom.styleSet(this.menuDiv, "display", "none");
	alib.dom.styleSet(this.menuDiv, "position", "absolute");

	// Setup menu div
	this.menu.render(this.menuDiv);

	// Make sure we don't render twice
	this.isRendered = true;
}

/**
 * Attache this popup menu to an element
 *
 * @public
 * @param {DOMElement} el The element to attach to
 * @param {string} vRel Relative vertical direction - "up"|"down"|"side"
 * @param {string} hRel Relative horizontal pos - "left"|"right"|"center"
 * @param {bool} onHover Show the menu on hover in addition to click
 */
alib.ui.PopupMenu.prototype.attach = function(el, vRel, hRel, onHover)
{

	var vertRel = vRel || "down";
	var horizRel = hRel || null;
	var showOnHover = onHover || false;

	this.popup.anchorToEl(el, vertRel, horizRel);


	if (showOnHover)
	{
		// Show - delayed 300ms 
		alib.events.listen(el, "mouseover", function(evt) {

			this.active = true;

			if (!evt.data.pmenu.isRendered)
				evt.data.pmenu.render();

			var el = this;

			window.setTimeout(function() { 
				// If the menu is not active then hide
				if (evt.data.pmenu.popup.active || el.active)
					evt.data.pmenu.popup.setVisible(true);
			}, 300);
				
		}, {pmenu:this});

		// Hide - delayed 300ms 
		alib.events.listen(el, "mouseout", function(evt) {

			this.active = false;

			// Give the user .3 second to activate sub-popup
			window.setTimeout(function() { 
				// If the menu is not active then hide
				if (!evt.data.pmenu.popup.active)
					evt.data.pmenu.popup.setVisible(false);
			}, 300);

		}, {pmenu:this});
	}
	else
	{
		alib.events.listen(el, "click", function(evt) {

			if (!evt.data.pmenu.isRendered)
				evt.data.pmenu.render();
				
			evt.data.pmenu.popup.setVisible();
		}, {pmenu:this});
	}
}

/**
 * Pass through this.menu to add an item
 *
 * @param {alib.ui.MenuItem} item
 */
alib.ui.PopupMenu.prototype.addItem = function(item)
{
	// Check for a submenu to set parent popup
	if (item.menu && item.menu.setParent)
		item.menu.setParent(this);
		
	this.menu.addItem(item);

	if (!item.isSubmenu)
	{
		alib.events.listen(item, "click", function(evt) {
			evt.data.menu.hide(true); // Recurrsively close
		}, {menu:this});
	}
}

/**
 * Pass through this.menu to add a submenu
 *
 * @param {alib.ui.PopupMenu} mmenu
 */
alib.ui.PopupMenu.prototype.setParent = function(popupMenu)
{
	if (this.popup && popupMenu.popup)
		this.popup.setParentPopup(popupMenu.popup);
}

/**
 * Clear all current items in the menu
 */
alib.ui.PopupMenu.prototype.clear = function()
{
	if (this.menu)
		this.menu.clear();
}

/**
 * Search through all the items in the array for an id if set
 *
 * @param {string} strQuery
 * @return {alib.ui.MenuItem}
 */
alib.ui.PopupMenu.prototype.getItemById = function(id)
{
	if (this.menu)
		return this.menu.getItemById(id);
}

/**
 * Put this menu in mobile mode
 *
 * @param {bool} on If in, then render this in one box
 * @return {alib.ui.MenuItem}
 */
alib.ui.PopupMenu.prototype.setMobileMode = function(on)
{
	this.mobile = on;
	this.menu.setMobileMode(on);
}

/**
 * @fileOverview Menu class used to build popup menus
 *
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance a filtered ui popup window
 *
 * @constructor
 */
alib.ui.FilteredMenu = function(options)
{
	var popupMenu = new alib.ui.PopupMenu(options);
	popupMenu.setFiltered(true);
	return popupMenu;
}

/**
 * @fileOverview Menu item class used to create a submenu item
 *
 * This class is a work in progress
 *
 * Example of how it is used:
 * <code>
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance ui sub-menu
 *
 * @param {string} label The label of this menu item
 * @constructor
 */
alib.ui.SubMenu = function (label, options)
{
	/**
	 * Label
	 *
	 * @var {string}
	 */
	this.label = label;

	/**
	 * Options object
	 *
	 * @type {Object}
	 */
	this.options = options || new Object();

	/**
	 * Menu item container
	 *
	 * @type {DOMElement}
	 */
	this.con = null;

	/**
	 * Inner label container
	 *
	 * @type {DOMElement}
	 */
	this.labelCon = null;

	/**
	 * Flag used to distinguish from regular items
	 *
	 * @type {bool}
	 */
	this.isSubmenu = true;

	/**
	 * Is this item visible
	 *
	 * @type {bool}
	 */
	this.visible = true;

	/**
	 * Mobile mode flag
	 *
	 * @type {bool}
	 */
	this.mobile = this.options.mobile || ((alib.dom.getClientWidth() < 800)?true:false);

	/**
	 * Handle to popup menu
	 *
	 * @type {alib.ui.PopupMenu}
	 */
	this.menu = new alib.ui.PopupMenu({submenu:true, mobile:this.mobile});

	// If mobile mode and a submenu then print back item on top
	if (this.mobile)
	{
		var item = new alib.ui.MenuItem("Close", {icon:"&lt;"});
		item.cbData.menu = this.menu;
		this.menu.addItem(item);
	}
}

/**
 * Redner the menu item into the dom tree
 *
 * @param {DOMElement} con The parent container
 * @param {alib.ui.Menu} menu Handle to parent menu
 */
alib.ui.SubMenu.prototype.render = function(con)
{
	this.con = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(this.con, "alibMenuItem");

	alib.events.listen(this.con, "mouseover", function() {
		alib.dom.styleAddClass(this, "alibMenuItemHover");
	}, {});

	alib.events.listen(this.con, "mouseout", function() {
		alib.dom.styleRemoveClass(this, "alibMenuItemHover");
	}, {});

	alib.events.listen(this.con, "click", function(evt) {
		alib.events.triggerEvent(evt.data.mItem, "click");
	}, {mItem:this});

	this.labelCon = alib.dom.createElement("div", this.con);
	alib.dom.styleSetClass(this.labelCon, "alibMenuItemLabel");
	this.labelCon.innerHTML = this.label;

	var arrowCon = alib.dom.createElement("span", this.labelCon);
	alib.dom.styleSetClass(arrowCon, "alibSubMenuArrow");
	arrowCon.innerHTML = "&#9654;";

	// Setup manual onlclick callback
	alib.events.listen(this, "click", function(evt) { this.onclick(); });

	// Forward mobile mode if already set
	if (this.mobile)
		this.menu.setMobileMode(this.mobile);

	// Attach popup menu to this item
	if (this.mobile)
		this.menu.attach(this.con, "down", "left", false);
	else
		this.menu.attach(this.con, "side", "right", true);

	// Attach active events
	alib.events.listen(this.menu, "isActive", function(evt) {
		alib.dom.styleAddClass(evt.data.itemCon, "alibMenuItemHover");
	}, {itemCon:this.con});

	alib.events.listen(this.menu, "onShow", function(evt) {
		alib.dom.styleAddClass(evt.data.itemCon, "alibMenuItemHover");
	}, {itemCon:this.con});

	alib.events.listen(this.menu, "onHide", function(evt) {
		alib.dom.styleRemoveClass(evt.data.itemCon, "alibMenuItemHover");
	}, {itemCon:this.con});
}

/**
 * Force click event
 */
alib.ui.SubMenu.prototype.click = function() {
	alib.events.triggerEvent(this, "click");
}

/**
 * Onclick callback
 */
alib.ui.SubMenu.prototype.onclick = function() {}

/**
 * Pass through this.menu to add an item
 *
 * @param {alib.ui.MenuItem} item
 */
alib.ui.SubMenu.prototype.addItem = function(item)
{
	this.menu.addItem(item);
}

/**
 * Pass through this.menu to add a submenu
 *
 * @param {alib.ui.Menu} mmenu
 */
alib.ui.SubMenu.prototype.addSubmenu = function(menu)
{
	this.menu.addSubmenu(menu);
}

/**
 * Put this menu in mobile mode
 *
 * @param {bool} on If in, then render this in one box
 * @return {alib.ui.MenuItem}
 */
alib.ui.SubMenu.prototype.setMobileMode = function(on)
{
	this.mobile = on;
}

/**
 * Set label
 *
 * @param {string} label The html to st to label to
 */
alib.ui.SubMenu.prototype.setLabel = function(label) {
	this.label = label;
	this.labelCon.innerHTML = this.label;

	var arrowCon = alib.dom.createElement("span", this.labelCon);
	alib.dom.styleSetClass(arrowCon, "alibSubMenuArrow");
	arrowCon.innerHTML = "&#9654;";
}

/**
 * Set label
 *
 * @param {bool} isSelected If true then the item is selected, otherwise false
 */
alib.ui.SubMenu.prototype.setSelected = function(isSelected) {
	if (isSelected)
		alib.dom.styleAddClass(this.con, "alibMenuItemHover");
	else
		alib.dom.styleRemoveClass(this.con, "alibMenuItemHover");
}

/**
 * @fileOverview Menu item class used to create a submenu item
 *
 * This class is a work in progress
 *
 * Example of how it is used:
 * <code>
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Create a new alib.ui.Button that is attached to a menu
 *
 * @constructor
 * @param {string} content The HTML content of this button
 * @param {alib.ui.PopupMenu} menu A popup menu to display when the button is clicked
 * @param {Object} options Generic options to pass to button
 */
alib.ui.MenuButton = function(content, menu, options)
{
	// Add dropdown image span if set in 
	if (typeof content == "string")
	{
		content += "<span class='alibMenuButtonIcon'>&#9660;</span>";
	}
	else
	{
		var dmIcon = alib.dom.createElement("span", content, "&#9660;");
		alib.dom.styleSetClass("alibMenuButtonIcon");
	}

	var btn = new alib.ui.Button(content, options);

	// listen for onclick to show the menu
	menu.attach(btn.getButton());
	
	// listen for menu show to depress the button
	alib.events.listen(menu, "onShow", function(evt) {
		btn.toggle(true);
	});
	
	// listen for menu hide to return button to unpressed state
	alib.events.listen(menu, "onHide", function(evt) {
		btn.toggle(false);
	});

	return btn;
}


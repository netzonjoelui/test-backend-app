/**
 * @fileoverview This is the main Ant class and namespace for all ant classes
 *
 * @author joe, sky.stebnicki@aereus.com
 */

/**
 * Ant namespace
 */
var Ant = {}

/**
 * Flag to indicate if the session is loaded
 *
 * @private
 * @type {bool}
 */
Ant.isSessionLoaded_ = false;

/**
 * Create storage variable for tracking account usage
 *
 * @public
 * @type {Object}
 */
Ant.storage = {
	user_quota: 1000,
	user_used: 0,
	global_quota: 1000,
	global_used: 0
};

/**
 * Current account object
 *
 * @public
 * @type {Object}
 */
Ant.account = {
	id: null,
	name: "",
	companyName: "Netric"
};

/**
 * Current user object
 *
 * @public
 * @type {Object}
 */
Ant.user = {
	id: null,
	name: "",
	fullName: ""
};

/**
 * Current theme
 *
 * @public
 * @type {Object}
 */
Ant.theme = {
	id: null,
	name: "",
	title: ""
};

/**
 * Settings will need to be pulled from backend
 *
 * @public
 * @type {Object}
 */
Ant.settings = {
	email: {
		dropbox_catchall : "sys.netric.com"
	}
};

/**
 * Initialized applications
 *
 * @public
 * @type {Array}
 */
Ant.apps = new Array();

/**
 * Handle to update stream
 *
 * @private
 * @type {Ant.UpdateStream}
 */
Ant.updateStream_ = null;

/**
 * Flag to indicate if we are running in a mobile browser
 *
 * @public
 * @type {bool}
 */
Ant.isMobile = false;

Ant.m_processes = new Array();
Ant.m_appcontainer = document.getElementById('appbody');
Ant.m_document = document;
Ant.m_evwnd = window;
Ant.f_framed = false; // Used if ANT is running in a framed enviroment or false if stand-alone
Ant.m_includes = new Array();
Ant.m_hPopupRef = new Array();
Ant.m_hHinstRef = new Array();

/**
 * Init app session variables
 *
 * When finished onload is called
 *
 * @param {Function} opt_callback Optional callback function to call when session is loaded
 */
Ant.init = function(opt_callback)
{
	// Get current authenticated session information
	var xhr = new alib.net.Xhr();
	alib.events.listen(xhr, "load", function(evt) { 

		Ant.isSessionLoaded_ = true; 
		var resp = this.getResponse();

		// Set data
		if (resp.account)
		{
			Ant.account.id = resp.account.id;
			Ant.account.name = resp.account.name;
			Ant.account.companyName = resp.account.companyName;
		}

		if (resp.user)
		{
			Ant.user.id = resp.user.id;
			Ant.user.name = resp.user.name;
			Ant.user.fullName = resp.user.fullName;
		}

		if (resp.theme)
		{
			Ant.theme.name = resp.theme.name;
		}

		// Callbacks
		Ant.onload(resp);

		// Check for inline callback
		if (opt_callback) 
			opt_callback(resp); 

		// Start keepalive
		Ant.keepAlive();
	});
	xhr.send("/controller/User/getSession");

	// Attach on resize event
	this.antResizeTimer = null;
	alib.dom.addEvent(window, "resize", function(){ 
		if (Ant && !Ant.antResizeTimer)
		{
			Ant.antResizeTimer = window.setTimeout(function() {
				try{ Ant.resizeActiveApp(); } catch(e) {};
				Ant.antResizeTimer = null;
			}, 1000); // Delay for a second so we don't kill the CPU
		}
	});
}

/**
 * Onload callback used when the session vars have been initialized
 */
Ant.onload = function()
{
}

/******************************************************************************
*	Function:	include
*	Purpose:	Include required js files (only once)
*******************************************************************************/
Ant.include = function (path)
{
	// Check if script is already loaded
	var name = "js_cls_" + path;
	if (!document.getElementById(name))
	{
		this.m_includes[name] = false;

		// Load External file into this document
		var fileRef = document.createElement('script');
		fileRef.m_name = name;

		if (alib.userAgent.ie)
		{
			fileRef.onreadystatechange = function () 
			{ 
				if (this.readyState == "complete" || this.readyState == "loaded") 
					Ant.m_includes[this.m_name] = true;
			};
		}
		else
			fileRef.onload = function () {Ant.m_includes[this.m_name] = true; };

		fileRef.type = "text/javascript";
		fileRef.id = name;
		fileRef.src = path;
		document.getElementsByTagName("head")[0].appendChild(fileRef);

		// Loop until document is loaded
		var iTimeout = 30; // if this fails 30 times then skip

		for (var i = 1; this.m_includes[name] != true; i++)
		{
			if (i > iTimeout) // Make sure we don't hang the browser
				return;
					
			this.wait(1000) // 1 second
		}
	}
}

/******************************************************************************
*	Function:	wait
*	Purpose:	Pause execution for a given number of m-seconds
*******************************************************************************/
Ant.wait = function (millis)
{
	date = new Date();
	var curDate = null;

	do { var curDate = new Date(); } 
	while(curDate-date < millis);
}


/******************************************************************************
*	Function:	SetVars
*	Purpose:	Set interval pointers to document and body
*******************************************************************************/
Ant.SetDocumentVars = function ()
{
	this.m_document = document;
	ALib.m_evwnd = window;

	this.m_appcontainer = document.getElementById('appbody');

	return true;
}

/******************************************************************************
*	Function:	setNoBodyOverflow
*	Purpose:	Set no overflow for body
*******************************************************************************/
Ant.setNoBodyOverflow = function()
{
	document.body.style.overflow= "hidden";

	for (var i = 0; i < this.appShells.length; i++)
	{
		if (this.appShells[i].name == this.last_selected)
		{
			this.m_processes[this.appShells[i].process_id].noOverflow = true;
		}
	}
}

/******************************************************************************
*	Function:	setPopupCb
*	Purpose:	Store an object(app) reference so popups can call opener.Ant...
*******************************************************************************/
Ant.setPopupHandle = function(handle, name)
{
	this.m_hPopupRef[name] = handle;
}

/******************************************************************************
*	Function:	getPopupCb
*	Purpose:	Get an object(app) reference so popups can call opener.Ant...
*******************************************************************************/
Ant.getPopupHandle = function(name)
{
	if (this.m_hPopupRef[name])
		return this.m_hPopupRef[name];
	else
		return false;
}

/******************************************************************************
*	Function:	setHinst
*	Purpose:	Store an object(app) reference so popups can call opener.Ant...
*******************************************************************************/
Ant.setHinst = function(handle, name)
{
	this.m_hHinstRef[name] = handle;
}

/******************************************************************************
*	Function:	getHinst
*	Purpose:	Get an object(app) reference so popups can call opener.Ant...
*******************************************************************************/
Ant.getHinst = function(name)
{
	if (this.m_hHinstRef[name])
		return this.m_hHinstRef[name];
	else
		return false;
}

/******************************************************************************
*	Function:	clearHinst
*	Purpose:	Clear hinst to make sure there are no hanging references in mem
*******************************************************************************/
Ant.clearHinst = function(name)
{
	if (this.m_hHinstRef[name])
		this.m_hHinstRef[name] = null;
}

/******************************************************************************
*	Function:	checkNewEmailMessages
*	Purpose:	Get number of new messages for default email account
*******************************************************************************/
Ant.setNewEmailMessages = function()
{
	return true; // TODO: for now we are not loading this

	// Clear any existing timers
	if (this.m_email_check_timer)
		clearTimeout(this.m_email_check_timer);

	if (typeof this.m_email_nmcount == "undefined")
		this.m_email_nmcount = new Array();

	var ajax = new CAjax();
	ajax.m_antcls = this;
	// Set callback once xml is loaded
	ajax.onload = function(root)
	{
		// Get first node
		var num = root.getNumChildren();
		for (var i = 0; i < num; i++)
		{
			var mailbox = root.getChildNode(i);
			var boxid = mailbox.getChildNodeValByName("boxid");
			var newm = mailbox.getChildNodeValByName("newm");
			var useindex = this.m_antcls.m_email_nmcount.length;

			// Check if folder already exists
			for (var i = 0; i < this.m_antcls.m_email_nmcount.length; i++)
			{
				if (this.m_antcls.m_email_nmcount[i][0] == boxid)
				{
					useindex = i;
					break;
				}
			}

			this.m_antcls.m_email_nmcount[useindex] = [boxid, newm];
		}

		this.m_antcls.m_email_check_timer = window.setTimeout("Ant.setNewEmailMessages()", 30000);
	};
	// Get xml file	
	try
	{
		ajax.exec("/email/xml_check_for_new.awp");
	}
	catch (e)
	{
		this.m_email_check_timer = window.setTimeout("Ant.setNewEmailMessages()", 30000);
	}
}

/******************************************************************************
*	Function:	keepAlive
*	Purpose:	This function checks every 3 minutes to make sure that the timers
*				are all still active
*******************************************************************************/
Ant.keepAlive = function()
{
	try
	{
		if (!this.m_email_check_timer)
			this.setNewEmailMessages();        
	}
	catch(e) {}

	this.m_keepalive_timer = window.setTimeout("top.Ant.keepAlive()", 180000);	// 3 minutes
}

/******************************************************************************
*	Function:	getNewEmailMessages
*	Purpose:	Get number of new messages for default email account
*******************************************************************************/
Ant.getNewEmailMessages = function(boxid)
{
	if (boxid)
	{
		for (var i = 0; i < this.m_email_nmcount.length; i++)
		{
			if (this.m_email_nmcount[i][0] == boxid)
				return this.m_email_nmcount[i][1];
		}
	}
	else
		return this.m_email_nmcount;
}


/******************************************************************************
*	Function:	launchModuleTutorials
*	Purpose:	Load Tutorials page for a specific module
*******************************************************************************/
Ant.launchTutorials = function(module)
{
	var url = '/help/tutorials.php?cat='+module;

	window.open(url, 'tutorials', 'width=300,height=300,toolbar=no,menubar=no,location=no,directories=no,status=no,resizable=yes');
}

/******************************************************************************
*	Function:	getObjectDefinition
*	Purpose:	Load the definition for an ANT object such as customer
*******************************************************************************/
Ant.getObjectDefinition = function(id)
{
	if (typeof this.objectdefs == "undefined")
		this.objectdefs = new Array();
	
	// TODO: copy the syncronous code from lib/js/CAntObject to pull and cache definition
}

/**
 * Get current active app name from hash
 *
 * @public
 * @return {string} The name of the currently active application
 */
Ant.getActiveAppName = function()
{
	var path = document.location.hash.substring(1); // minus the #
	var pathParts = path.split('/');
	return pathParts[0];
}

/**
 * Get current active app from hash
 *
 * @public
 * @return {AntApp} A reference to the currently active application on succes, false on failure
 */
Ant.getActiveApp = function()
{
	var appname = this.getActiveAppName();
	
	if (appname)
	{
		if (typeof this.apps[appname] != "undefined")
			return this.apps[appname];
	}

	// Failed
	return false;
}

/**
 * Check if an application is active by name
 *
 * @public
 * @param {string} appname The unique name of the application to check against
 * @return {bool} true if appname is active, false if another app is active
 */
Ant.appIsActive = function(appname)
{
	var actApp = this.getActiveAppName();
	return (activeApp == appname) ? true : false;
}



/**
 * Call the 'resize' function of the active application
 */
Ant.resizeActiveApp = function()
{
	var activeAppName = this.getActiveAppName();

	if (typeof this.apps[activeAppName] != "undefined")
	{
		if (typeof(this.apps[activeAppName].resize) != "undefined")
			this.apps[activeAppName].resize();
	}
}

/**
 * Update notice badges for window title
 *
 * @param {string} content The content to set
 * @param {string} section The name of the section we are updating
 */
Ant.updateAppTitle = function(content, section)
{
	if (!this.titleSections)
		this.titleSections = new Object();

	var title = "";

	if (!section && content)
		title = content;

	if (section == "notifications")
	{
		if (content != 0)
			title += "(" + content + ") ";
	}

	/*
	if (section == "messages")
	{
	}

	if (section == "chats")
	{
	}
	*/

	//title += "Netric";

	var app = this.getActiveApp();
	if (app)
	{
		if (app.shortTitle == "Untitled")
			title += "Loading...";
		else
			title += app.shortTitle;
	}
	else
	{
		title += this.account.companyName;
	}


	window.document.title = title;
}

/******************************************************************************
*	Function:	ShowLogin
*	Purpose:	Display a login prompt of session has expired
*******************************************************************************/
Ant.ShowLogin = function()
{
	// Make sure form is only shown once
	if (typeof this.loginFrmAct == "undefined")
		this.loginFrmAct = false;
	if (this.loginFrmAct)
		return;
	this.loginFrmAct = true;

	var dlg = new CDialog("Login");
	dlg.f_close = false;
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 300, 200);

	var p = alib.dom.createElement("p", dv);
	p.innerHTML = "Either your session has expired or your internet connection was interrupted. Please log in below to continue working:";

	// Inputs
	// --------------------------------------------
	
	// Name
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "User Name:";
	var inpdv = alib.dom.createElement("div", dv);
	var txtName = alib.dom.createElement("input");
	alib.dom.styleSet(txtName, "width", "98%");
	txtName.type = 'text';
	txtName.value = this.user.name;
	inpdv.appendChild(txtName);
    
	// Pass
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "Password:";
	var inpdv = alib.dom.createElement("div", dv);
	var txtPass = alib.dom.createElement("input");
	alib.dom.styleSet(txtPass, "width", "98%");
	txtPass.type = 'password';
	txtPass.value = "";
	inpdv.appendChild(txtPass);

	var authuser = function(name, password, dlg)
	{
		var args = [["function", "login"], ["name", name.value], ["password", password.value]];
        
        ajax = new CAjax();
        ajax.cbData.cls = this;
        ajax.cbData.dlg = dlg;
        ajax.onload = function(ret)
        {
            if(ret.getNumChildren())
            {
                var ret = ret.getChildNodeValByName("retval")
                if (ret=="OK")
                {
                    this.cbData.dlg.hide();
                    Ant.loginFrmAct = false;
                    return;
                }
            }
            
            alert("There was a problem logging in. Please try again!");
            
        };
        ajax.exec("/security/wapi.php", args); 
	}
    
    // element events
    txtName.authFunc = authuser;
    txtName.cbDlg = dlg;
    txtName.cbPass = txtPass;
    txtName.onkeyup = function(evnt)
    {
        evnt = evnt || window.event;
        
        switch (evnt.keyCode)
        {
            case 13: // Enter
                this.authFunc(this, this.cbPass, this.cbDlg);
                if(evnt.preventDefault)
                    evnt.preventDefault()
                else
                    evnt.returnValue = false;                
                break;
        }
    }
    
    txtPass.authFunc = authuser;
    txtPass.cbDlg = dlg;
    txtPass.cbName = txtName;
    txtPass.onkeyup = function(evnt)
    {
        evnt = evnt || window.event;
        
        switch (evnt.keyCode)
        {
            case 13: // Enter
                this.authFunc(this.cbName, this, this.cbDlg);
                if(evnt.preventDefault)
                    evnt.preventDefault()
                else
                    evnt.returnValue = false;                
                break;
        }
    }

	// Buttons
	// --------------------------------------------
	var bntbar = alib.dom.createElement("div", dv);
	alib.dom.styleSet(bntbar, "margin", "6px 0px 3px 3px");

	var btn = new CButton("OK", authuser, [txtName, txtPass, dlg], "b2");
	btn.print(bntbar);

	var btn = new CButton("Log Out", function(dlg) { document.location = '/logout.php'; }, [dlg], "b3");
	btn.print(bntbar);
}

/******************************************************************************
*    Function:    userCheckin
*    Purpose:    User activity checkin
*******************************************************************************/
Ant.userCheckin = function()
{
    // User Activity Checkin
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
        {
            this.cls.ShowLogin();
            return;
        }
        
        if(ret=="1")
        {            
            window.setTimeout("Ant.userCheckin()", 60000);
        }
        else
            this.cls.ShowLogin();
    };

    var registerActive = 0;
    if (alib.dom.userActive)
        registerActive = 1;

    var args = new Array();
    args[args.length] = ['registerActive', registerActive];
    ajax.exec("/controller/User/userCheckin", args);
}

/******************************************************************************
*    Function:    changeTheme
*    Purpose:    Changes the UI theme
*******************************************************************************/
Ant.changeTheme = function(name)
{
	if (name != this.m_theme && name!="")
	{
		var cssDom = alib.dom.getElementById("ant_css_theme");
		cssDom.href = "/css/ant_" + name + ".css";
		this.m_theme = name;
	}
}

/**
 * Get account base uri
 */
Ant.getBaseUri = function()
{
	// Use the new netric code
	return netric.getBaseUri();
	/*
	var uri = window.location.protocol+'//'+window.location.hostname+(window.location.port ? ':'+window.location.port: '');
	return uri;
	*/
}

/**
 * Get update stream, create it if not already
 *
 * @return {Ant.UpdateStream}
 */
Ant.getUpdateStream = function()
{
	if (this.updateStream_ == null)
		this.updateStream_ = new Ant.UpdateStream();

	return this.updateStream_;
}

// Colors array used for all groups (mail, calendar, contacts, projects, files, notes, customers, etc...)
/*
["Poly Green", "9D9C6E", "000000"], ["Shallow Bay", "C2B274", "000000"], ["Milk Chocolate", "A18E6E", "000000"], 
["Magdalene", "7C6B64", "000000"], ["Adelaide", "5A3A45", "000000"],

["Butter", "EBD877", "000000"], ["Stone", "C4BEAE", "000000"], ["Muggy", "ACC1B2", "000000"], 
["Lake Blue", "79A29A", "000000"], ["Gray Green", "AFCD98", "000000"],

["Soft Green", "B5C666", "000000"], ["Mustard", "C2AE19", "000000"], ["Rusty", "C6891E", "ffffff"]
*/
var G_GROUP_COLORS = [
						["Blue", "2A4BD7", "ffffff"], ["Black", "000000", "81c57a"], ["Gray", "575757", "ffffff"], 
						["Light Gray", "A0A0A0", "ffffff"], ["White", "FFFFFF", "000000"], 
						["Green", "1D6914", "ffee33"], ["Brown", "814A19", "ffee33"], ["Purple", "8126C0", "ffcdf3"], 
						["Light Blue", "9DAFFF", "000000"], ["Light Green", "81C57A", "000000"],
						["Tan", "E9DEBB", "814a19"], ["Red", "AD2323", "ffee33"], ["Teal", "29D0D0", "000000"],
						["Yellow", "FFEE33", "000000"], ["Orange", "FF9233", "ffffff"], ["Pink", "FFCDF3", "ad2323"]
					  ];



// =====================================================================
// Functions
// =====================================================================
function copy(text2copy) 
{
  if (window.clipboardData) 
  {
    window.clipboardData.setData("Text",text2copy);
  } 
  else 
  {
    var flashcopier = 'flashcopier';
    if(!document.getElementById(flashcopier)) 
	{
      var divholder = document.createElement('div');
      divholder.id = flashcopier;
      document.body.appendChild(divholder);
    }

    document.getElementById(flashcopier).innerHTML = '';
    var divinfo = '<embed src="/flash/_clipboard.swf" FlashVars="clipboard='+escape(text2copy)+'" width="0" height="0" type="application/x-shockwave-flash"></embed>';
    document.getElementById(flashcopier).innerHTML = divinfo;
  }
}

/*************************************************************************
*	Function:	getColorTextForGroup
*
*	Purpose:	Get associated text color for group
**************************************************************************/
function getColorTextForGroup(color)
{
	var ret = "000000";
	for (var j = 0; j < G_GROUP_COLORS.length; j++)
	{
		if (G_GROUP_COLORS[j][1] == color)
			ret = G_GROUP_COLORS[j][2];
	}

	return ret;
}

/*************************************************************************
*	Function:	loadSupportDoc
*
*	Purpose:	This may be expanded in the future to load a support
*				document inline, but for now it will just open a page
*				going to our public support site.
**************************************************************************/
function loadSupportDoc(docid)
{
  window.open('http://www.netric.com/support/solutions/'+docid);
  return false;
}

/*************************************************************************
*	Function:	loadDacl
*
*	Purpose:	This may be expanded in the future to load a support
*				document inline, but for now it will just open a new window.
**************************************************************************/
function loadDacl(dacl, name, inheritfrom)
{
	var inh = (typeof inheritfrom != "undefined") ? inheritfrom : null;

	var dacl = new DaclEdit(name, inh);
	dacl.showDialog();
}

/*************************************************************************************
*	Description:	objectSetNameLabel	
*
*	Purpose:		Set innerHTML of con with the name of an object
**************************************************************************************/
function objectSetNameLabel(obj_type, id, con)
{
	if (obj_type && id)
	{
        ajax = new CAjax('json');
        ajax.cbData.con = con;
        ajax.onload = function(ret)
        {
            if (!ret['error'])
                this.cbData.con.innerHTML = unescape(ret);
        };
        var args = [["obj_type", obj_type], ["id", id]];
        ajax.exec("/controller/Object/getObjName", args);
	}
}

/*************************************************************************
*	Function:	objectSplitLbl
*
*	Purpose:	Split a label string into {type, id}
**************************************************************************/
function objectSplitValue(lblstr)
{
	var lbl_parts = lblstr.split(":");
	return {typeTitle:lbl_parts[0], objTitle:lbl_parts[1]};
}

/*************************************************************************
*	Function:	objectSplitLbl
*
*	Purpose:	Split a label string into title:id
**************************************************************************/
function objectSplitLbl(lblstr)
{
	var lbl_parts = lblstr.split(":");
	return {typeTitle:lbl_parts[0], objTitle:lbl_parts[1]};
}

/*************************************************************************
* 	@depricated Now use Ant.EntityDefinitionLoader
*
*	Function:	objectPreloadDef
*
*	Purpose:	Preload the definition for an object
*
*	Arguments:	type:string = object type name
*				force:bool = set to true to force a reload of cache
**************************************************************************/
function objectPreloadDef(type, force)
{
	// Make sure not already preloaded
	for (var i = 0; i < CAntObjectDefs.length; i++)
	{
		if (CAntObjectDefs[i].name == type)
		{
			if (force) // update cache
			{
				CAntObjectDefs.splice(i, 1);
				AntObjectForms.clearCache(type);
			}
			else
				return;
		}
	}

	// Get object definition
	var ajax = new CAjax();
	ajax.onload = function(root)
	{
		var def = new Object();
		def.name = type;
		def.root = root;
		CAntObjectDefs[CAntObjectDefs.length] = def;
	}

	var url = "/objects/xml_get_objectdef.php?oname=" + type;
	ajax.exec(url);
}

/**
 * Load an object loader form in a new dialog
 *
 * @param {string} obj_type The object type name
 * @param {string} oid The unique id of the object to load - optional
 * @param {DOMElement} con Depricated
 * @param {string[[]]} assoc Depricated
 * @param {Array} params Two dim array of field values to set
 * @return {AntObjectLoader} A reference to the loader
 */
function loadObjectForm(obj_type, oid, con, assoc, params)
{
	var params = (params) ? params : new Array();

	var dlg = new CDialog("");

	var oid = (oid) ? oid : "";

	var url = '/obj/' + obj_type;
	if (oid)
		url += '/' + oid;

	var objfrmCon = alib.dom.createElement("div", document.body);
	alib.dom.styleSet(objfrmCon, "height", "100%");
	alib.dom.styleSet(objfrmCon, "overflow", "auto");
	objfrmCon.cls = this;
	objfrmCon.dlg = dlg;
	objfrmCon.close = function()
	{                    
		this.dlg.hide();
	}

	// Print object loader 
	var ol = new AntObjectLoader(obj_type, oid);

	// Set params
	for (var i = 0; i < params.length; i++)
	{
		ol.setValue(params[i][0], params[i][1]);
	}
			
	ol.print(objfrmCon, this.isPopup);
		
	ol.objfrmCon = objfrmCon;
	ol.objBrwsrCls = this;
	alib.events.listen(ol, "close", function(evt) {
		evt.data.frm.close();
	}, {frm:objfrmCon});
	ol.onSave = function()
	{
	}
	ol.onRemove = function()
	{
	}

	dlg.customDialog(objfrmCon, 900, getWorkspaceHeight());

	return ol;

	/* Old New Window Code.
	 * Still may use someday for separate param to open in actual new window
	var url = '/obj/'+obj_type;
	if (oid)
		url += '/'+oid;
	
	var strWindName = (obj_type.replace(".", ""))+((oid)?oid:'new');
	var condv = alib.dom.createElement("div", alib.dom.m_document.body);
	alib.dom.styleSet(condv, "display", "none");
	alib.dom.styleSet(condv, "position", "absolute");
	
	var form = alib.dom.createElement("form", condv);
	form.setAttribute("method", "post");
	form.setAttribute("target", strWindName);
	form.setAttribute("action", url);
	
	if (params)
	{
		for (var i = 0; i < params.length; i++)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", params[i][0]);
			hiddenField.setAttribute("value", params[i][1]);
			form.appendChild(hiddenField);
		}
	}
		
	window.open(url, strWindName);

	if (form)
		form.submit();
	else
		alert('You must allow popups for this map to work.');
	
	alib.dom.m_document.body.removeChild(condv);
	*/
}

/*==========================================================================#
# * Function for adding a Filter to an Input Field                          #
# * @param  : [filterType  ] Type of filter 0=>Alpha, 1=>Num, 2=>AlphaNum   #
# * @param  : [evt         ] The Event Object                               #
# * @param  : [allowDecimal] To allow Decimal Point set this to true        #
# * @param  : [allowCustom ] Custom Characters that are to be allowed       #
#==========================================================================*/
function filterInput(filterType, evt, allowDecimal, allowCustom)
{
	var keyCode, Char, inputField, filter = '';
	var alpha = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
	var num   = '0123456789';
	// Get the Key Code of the Key pressed if possible else - allow
	if(window.event){
		keyCode = window.event.keyCode;
		evt = window.event;
	}else if (evt)keyCode = evt.which;
	else return true;
	// Setup the allowed Character Set
	if(filterType == 0) filter = alpha;
	else if(filterType == 1) filter = num;
	else if(filterType == 2) filter = alpha + num;
	if(allowCustom)filter += allowCustom;
	if(filter == '')return true;
	// Get the Element that triggered the Event
	inputField = evt.srcElement ? evt.srcElement : evt.target || evt.currentTarget;
	// If the Key Pressed is a CTRL key like Esc, Enter etc - allow
	if((keyCode==null) || (keyCode==0) || (keyCode==8) || (keyCode==9) || (keyCode==13) || (keyCode==27) )return true;
	// Get the Pressed Character
	Char = String.fromCharCode(keyCode);
	// If the Character is a number - allow
	if((filter.indexOf(Char) > -1)) return true;
	// Else if Decimal Point is allowed and the Character is '.' - allow
	else if(filterType == 1 && allowDecimal && (Char == '.') && inputField.value.indexOf('.') == -1)return true;
	else return false;
}

/*************************************************************************
*	Function:	getWorkspaceHeight
*
*	Purpose:	Get the hieght of the workspace for 100% height tools
**************************************************************************/
function getWorkspaceHeight()
{
	var total = alib.dom.getClientHeight();

	// Subtract the height of the header
	var header = document.getElementById("appheader");
	if (header)
		total -= alib.dom.getElementHeight(header, true);

	// Subtract the height of the tabs
	var tabs = document.getElementById("appnav");
	if (tabs)
		total -= alib.dom.getElementHeight(tabs, true);
	//total -= 10; // for top margin

	// Now get application title height if set
	if (typeof Ant != "undefined")
	{
		var app = Ant.getActiveApp();
		if (app)
		{
			total -= app.getAppHeaderHeight();
		}
	}

	// Subtract for margin on the bottom
	//total -= 10;

	//ALib.m_debug = true;
	//ALib.trace("WorkspaceHeight: "+total);
	return total;
}

/*************************************************************************
*	Function:	getThreadClass
*
*	Purpose:	Get a thread class name for a send/uid
**************************************************************************/
var g_EmailThreadGetAdressColorCache = new Array();
function EmailThreadGetAdressColor(senderaddress, useraddress)
{
	/*
	global $EML_THD_COLORS, $EML_THD_CLRS_CUR_INDX;
	if (!$EML_THD_CLRS_CUR_INDX) 
		$EML_THD_CLRS_CUR_INDX = 0;
	if (!is_array($EML_THD_COLORS))
		$EML_THD_COLORS = array();
	$retval = '';
	$getindex = ($type == 'expanded') ? 0 : 1;
	
	$sederCol = array("EmailThreadSenderExp", "EmailThreadSenderCol");
	$arrCol = array(array("EmailThreadRand1Exp", "EmailThreadRand1Col"), 
					array("EmailThreadRand2Exp", "EmailThreadRand2Col"), 
					array("EmailThreadRand3Exp", "EmailThreadRand3Col"), 
					array("EmailThreadRand4Exp", "EmailThreadRand4Col"), 
					array("EmailThreadRand5Exp", "EmailThreadRand5Col"), 
					array("EmailThreadRand6Exp", "EmailThreadRand6Col"), 
					array("EmailThreadRand7Exp", "EmailThreadRand7Col"), 
					array("EmailThreadRand8Exp", "EmailThreadRand8Col"), 
					array("EmailThreadRand9Exp", "EmailThreadRand9Col"), 
					array("EmailThreadRand10Exp", "EmailThreadRand10Col"));
	
	if ($senderaddress == $useraddress)
	{
		$retval = $sederCol[$getindex];
	}
	else
	{
		foreach ($EML_THD_COLORS as $addr=>$colr)
		{
			if ($addr == $senderaddress)
				$retval = $colr[$getindex];
		}
		// New sender
		if ($retval == '')
		{
			$EML_THD_COLORS[$senderaddress] = $arrCol[$EML_THD_CLRS_CUR_INDX];
			$retval = $arrCol[$EML_THD_CLRS_CUR_INDX][$getindex];
			
			$num_clrs = count($arrCol);
			if ($EML_THD_CLRS_CUR_INDX <= ($num_clrs-1))
			{
				$EML_THD_CLRS_CUR_INDX++;
			}
			else
			{
				$EML_THD_CLRS_CUR_INDX = 0;
			}
		}
	}
	return $retval;
	*/
}

/*************************************************************************
*    Function:    buildTable
* 
*    Purpose:    Build Table for every form input
**************************************************************************/
function buildTable(con)
{
    var table = alib.dom.createElement("table", con);
    table.setAttribute("cellpadding", 2);
    table.setAttribute("cellspacing", 2);
    alib.dom.styleSet(table, "width", "100%");
    
    var tbody = alib.dom.createElement("tbody", table);
    
    return tbody;
}

/*************************************************************************
*    Function:    buildFormInput
* 
*    Purpose:    Build form inputs inside table
**************************************************************************/
function buildFormInput(inputFormData, tbody)
{    
    for(formData in inputFormData)
    {
        // Row Label
        var rowInput = inputFormData[formData];
        var tr = buildTdLabel(tbody, rowInput.label, rowInput.labelWidth);        
        switch(rowInput.type)
        {            
            case "checkbox":
                var td = tr.firstChild;
                td.innerHTML = "";
                td.setAttribute("colspan", 2);
                alib.dom.styleSetClass(td, "formValue");
                td.appendChild(rowInput);
                if(rowInput.label)
                {
                    var label = alib.dom.createElement("label", td);
                    label.innerHTML = rowInput.label;
                }
                break;            
            case "hidden":
                alib.dom.styleSet(tr, "display", "none");
                var td = tr.firstChild;
                td.setAttribute("colspan", 2);
                td.appendChild(rowInput);
                break;            
            default:
                var td = alib.dom.createElement("td", tr);        
                alib.dom.styleSetClass(td, "formValue");
                alib.dom.styleSetClass(rowInput, "fancy");
                td.appendChild(rowInput);
                break;
        }
        
        if(rowInput.inputLabel)
        {
            var label = alib.dom.createElement("label", td);
            label.innerHTML = rowInput.inputLabel;
            alib.dom.styleSet(label, "fontSize", "11px");
        }
    }
    
    // return the last tr
    return tr;
}

/*************************************************************************
*    Function:    buildFormInputDiv
* 
*    Purpose:    Build form inputs inside div
**************************************************************************/
function buildFormInputDiv(inputFormData, con, setClear, marginRight)
{
    if(typeof marginRight == "undefined")
        marginRight = "3px";
        
    con.innerHTML = "";
    for(formData in inputFormData)
    {
        // Row Label
        var rowInput = inputFormData[formData];        
        switch(rowInput.type)
        {            
            default:
                var divCon = alib.dom.createElement("div", con);
                alib.dom.styleSet(divCon, "float", "left");
                alib.dom.styleSet(divCon, "marginRight", marginRight);
                divCon.appendChild(rowInput);
                
                if(rowInput.label)
                {
                    var label = alib.dom.createElement("label", divCon);                    
                    alib.dom.styleSet(label, "fontSize", "11px");
                    label.innerHTML = rowInput.label;
                    
                    if(rowInput.floatDir)
                        alib.dom.styleSet(label, "float", rowInput.floatDir);
                    else
                        alib.dom.styleSet(label, "float", "right");
                        
                    if(rowInput.labelWidth)
                        alib.dom.styleSet(label, "width", rowInput.labelWidth);
                }
                break;
        }
        
        if(setClear)
        {
            alib.dom.styleSet(divCon, "marginBottom", "5px");
            divClear(con);
        }            
            
    }
    
    // return the last tr
    return divCon;
}

/*************************************************************************
*    Function:    buildTdLabel
* 
*    Purpose:    Build Td Row for every form input
**************************************************************************/
function buildTdLabel(tbody, label, width)
{
    var tr = alib.dom.createElement("tr", tbody);
    var td = alib.dom.createElement("td", tr);
    alib.dom.styleSet(td, "fontSize", "12px");
    alib.dom.styleSet(td, "vertical-align", "middle");
    alib.dom.styleSet(td, "paddingBottom", "8px");
    if(width)
        td.setAttribute("width", width);
    
    if(label)
        td.innerHTML = label;
        
    return tr;
}

/*************************************************************************
*    Function:    inputAttribute - Depreciated
* 
*    Purpose:    Sets input attribute
**************************************************************************/
function createInputAttribute(input, type, id, label, width, value, labelWidth, floatDir)
{ 
    if(id)
        input.id = id;
    
    if(type)
        input.type = type;
        
    if(label)
        input.label = label;
        
    if(value)
        input.value = value;
        
    if(width)
        alib.dom.styleSet(input, "width", width);
        
    if(labelWidth)
        input.labelWidth = labelWidth;
        
    if(floatDir)
        input.floatDir = floatDir;
    
    return input;
}

/*************************************************************************
*    Function:    setElementAttr - (New)
* 
*    Purpose:    Sets Element attribute 
**************************************************************************/
function setElementAttr(input, attrData)
{ 
    for(attribute in attrData)
    {
        var attr = attrData[attribute][0];
        var value = attrData[attribute][1];
        
        switch(attr)
        {            
            case "width":                
                alib.dom.styleSet(input, "width", value);                
            default:
                input[attr] = value;
                break;
        }
    }
    
    return input;
}

/*************************************************************************
*    Function:    divClear
* 
*    Purpose:    clear the divs
**************************************************************************/
function divClear(parentDiv)
{
    var divClear = alib.dom.createElement("div", parentDiv);
    alib.dom.styleSet(divClear, "clear", "both");
    alib.dom.styleSet(divClear, "visibility", "hidden");
}

/*************************************************************************
*    Function:    showDialog
* 
*    Purpose:    Shows dialog message
**************************************************************************/
function showDialog(message)
{
    var dlg = new CDialog();
    var dv_load = document.createElement('div');
    alib.dom.styleSetClass(dv_load, "statusAlert");
    alib.dom.styleSet(dv_load, "text-align", "center");
    dv_load.innerHTML = message;
    dlg.statusDialog(dv_load, 250, 100);
    
    return dlg;
}

/*************************************************************************
*    Function:    getWindowSize
* 
*    Purpose:    Gets the width and height of the window
**************************************************************************/
function getWindowSize(getWidth) {
  var myWidth = 0, myHeight = 0;
  
  if( typeof( window.innerWidth ) == 'number' ) //Non-IE
  {    
    myWidth = window.innerWidth;
    myHeight = window.innerHeight;
  } 
  else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) //IE 6+ in 'standards compliant mode'
  {    
    myWidth = document.documentElement.clientWidth;
    myHeight = document.documentElement.clientHeight;
  } 
  else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) //IE 4 compatible
  {    
    myWidth = document.body.clientWidth;
    myHeight = document.body.clientHeight;
  }
  
  if(getWidth)
    return myWidth;
  else
    return myHeight;
}

/*************************************************************************
*    Function:    commentSettings
* 
*    Purpose:    displays the comments of the user
**************************************************************************/
function commentSettings(con, userId)
{
    if(typeof userId == "undefined" || userId == null)
    {
        ajax = new CAjax('json');
        ajax.cls = this;                
        ajax.onload = function(ret)
        {
            buildCommentSettings(con, ret);
        };
        ajax.exec("/controller/User/getUserId");        
    }
    else
        buildCommentSettings(con, userId);
}

function buildCommentSettings(con, userId)
{
    var divComment = alib.dom.createElement("div", con);
    alib.dom.styleSet(divComment, "borderTop", "1px solid");
    alib.dom.styleSet(divComment, "paddingTop", "5px");
    
    var divLeft = alib.dom.createElement("div", divComment);
    alib.dom.styleSet(divLeft, "float", "left");
    alib.dom.styleSet(divLeft, "width", "190px");
    
    var lblTitle = alib.dom.createElement("p", divLeft);
    alib.dom.styleSet(lblTitle, "fontWeight", "bold");
    alib.dom.styleSet(lblTitle, "fontSize", "12px");
    lblTitle.innerHTML = "Comments";
    
    var divRight = alib.dom.createElement("div", divComment);
    alib.dom.styleSet(divRight, "float", "left");
    
    var objComment = new AntObjectBrowser("comment");
    objComment.setFilter('associations', "user:"+userId);
    objComment.printComments(divRight, "user:"+userId);
    
    divClear(divComment);
}

/*************************************************************************
*    Function:    getHeaderHeights
* 
*    Purpose:    Gets all the heights of header
**************************************************************************/
function getHeaderHeights()
{
    // App Header
    var appheaderHeight = 0;
    var appHeader = document.getElementById('appheader');
    if(appHeader)
        appheaderHeight = alib.dom.getContentHeight(appHeader);
    
    // App Nav
    var appNavHeight = 0;
    var appNav = document.getElementById('appnav');
    if(appNav)
        appNavHeight = alib.dom.getContentHeight(appNav);
    
    // App Nav
    var appTitleHeight = 0;
    var appTitle = document.getElementById('apptitle');
    if(appTitle)
        appTitleHeight = alib.dom.getContentHeight(appTitle);
    
    var totalHeaderHeight = (appheaderHeight + appNavHeight + appTitleHeight);
    
    var ret = new Object;
    ret.appheaderHeight = appheaderHeight;
    ret.appNavHeight = appNavHeight;
    ret.appTitleHeight = appTitleHeight;
    ret.totalHeaderHeight = totalHeaderHeight;
    
    return ret;
}

/*************************************************************************
*    Function:    buildDropdown
* 
*    Purpose:    builds the dropdown using the array
**************************************************************************/
function buildDropdown(objElement, dataArray, currentValue)
{
    for(data in dataArray)
    {
        var currentData = dataArray[data];
        var objLen = objElement.length;
        var selected = false;
        
        if(typeof currentData == "object")
        {
            var value = currentData[0];
            var text = currentData[1];
        }        
        else
        {
            var value = currentData;
            var text = currentData;
        }
        
        if(currentValue == value)
            selected = true;
        
        objElement[objLen] = new Option(text, value, false, selected);
    }
}

/*************************************************************************
*    Function:    checkObjectData
* 
*    Purpose:    Checks the object if it has data
**************************************************************************/
function checkObjectData(objectData)
{
    for(object in objectData) 
        return true;
    
    return false;
}

/**
 * Put notified string into object
 *
 * @param {string} A notified string [recipeint]|label
 * @return {Object} {type:"", id:"", name:""};
 */
function getNotifiedParts(notified)
{
	var ret = {type:"text", id:"", email:"", name:""};

	var parts = notified.split("|");
	ret.name = parts[0]; // Assume text entry for backwards compatibility

	// Check if this is an object reference
	var fromParts = parts[0].split(":");
	if (fromParts.length > 1)
	{
		ret.type = fromParts[0];
		ret.id = fromParts[1];
	}
	else
	{
		// Check to see if we are working with an email address
		var fromParts = parts[0].split("@");
		if (fromParts.length > 1)
			ret.email = parts[0];
	}

	// Now get the name/label
	if (parts.length > 1)
	{
		ret.name = parts[1];
	}

	return ret;
}

/**
 * Creates a series of space
 *
 * @this {global}
 * @param {Integer} num     number of spaces
 */
function tabSpace(num)
{
    var space = "";
    for(var i = 0; i < num; i++)
    {
        space += "\t";
    }
    return space;
}

/**
 * Checks the folder/filename for special characters
 *
 * @this {global}
 * @param {String} type     file or folder
 * @param {String} value    the value to be checked
 * @param {DOM} element     field input
 */
function checkSpecialCharacters(type, value, element)
{
    var testSpecialChar = /^[a-zA-Z0-9_ %\[\]\.\(\)%&-]*$/.test(value);
    if(!testSpecialChar)
    {
        var cbFunc = function() 
        {
            alert("A " + type + " name can't contain any of the following characters: \n\n / ? < > \ : * | \"");
            
            if(element)
                element.focus();
        }
        
        setTimeout(cbFunc, 0);
        return false;
    }
    
    return true;
}

/** 
* it will capitalize the first letter of the string.
*/
String.prototype.capitalize = function()
{
    return this.replace( /(^|\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase(); } );
};

/** 
* Change the url string to a link
*/
String.prototype.linkify = function()
{
    var replaceText, replacePattern1, replacePattern2, replacePattern3;

    if(this.match(/\.(jpeg|jpg|gif|png|bmp)$/))
        return this;
    
    //URLs starting with http://, https://, or ftp://
    replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    replacedText = this.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

    //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
    replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');
    
    return replacedText;
};

/*======================================================================================
	
	Module:		CReport

	Purpose:	Load report data

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Usage:		var rpt = new CReport();

======================================================================================*/

function CReport()
{
	this.id = null;
	this.name = "";
	this.description = "";
	this.dimensions = new Array(); // array of objects{field, group}
	this.measures = new Array(); // array of objects{field, aggregate}
	this.view = null; // CAntObjectView
	this.cube = null; // COlapCube
	this.obj_type = null; // must be set to a valid ANT object type
	this.mainObject = null; // this is set with the setObjectType function and in load after obj_type is set
	this.chart_type = ""; // must be set to a valid chart type to load chart
	this.chart_width = 800; // this can be rest by a calling process
	this.fDisplayTable = true;
	this.fDisplayChart = true;
	this.fCalculate = true;
	this.hideloading = false; // for inline reports hide loading lialog
	this.aggregate_types = [["sum", "Sum / Add"], ["avg", "Average"], ["max", "Maximum"], ["min", "Minimum"]];
	this.timegroup_types = [["minute", "Minute"], ["hour", "Hour"], ["day", "Day"], ["month", "Month"], ["quarter", "Quarter"], ["year", "Year"]];
	this.scope = "system";
	this.daclId = null;
	this.customReport = ""; // used to pull data from a customized report
	this.conditions = new Array(); // Populate conditions prior to loading the report for run-time filtering
}

/**************************************************************************
* Function: 	setObjectType	
*
* Purpose:		Set the main object type of this report
**************************************************************************/
CReport.prototype.setObjectType = function(type)
{
	this.obj_type = type;
	this.mainObject = new CAntObject(type);
	this.view = new CAntObjectView(type);
	this.view.name = "Details";
}

/**************************************************************************
* Function: 	load	
*
* Purpose:		Load data for this report
**************************************************************************/
CReport.prototype.load = function(report_id)
{
	if (report_id)
		this.id = report_id;

	if (!this.id)
	{
		this.onloadError(-1, "No report ID to load");
		return;
	}

	var ajax = new CAjax();
	ajax.m_obj = this;
	ajax.onload = function(root)
	{
		for (var i = 0; i < root.getNumChildren(); i++)
		{
			var section = root.getChildNode(i);

			switch (section.m_name)
			{
			case "name":
				this.m_obj.name = unescape(section.m_text);
				break;
			case "dimensions":
				for (var j = 0; j < section.getNumChildren(); j++)
				{
					var dim = section.getChildNode(j);
					var fld = unescape(dim.getAttribute("field"));
					if (fld != "")
						this.m_obj.dimensions[j] = {field:fld, group:unescape(dim.getAttribute("group"))};
				}
				break;
			case "measures":
				for (var j = 0; j < section.getNumChildren(); j++)
				{
					var dim = section.getChildNode(j);
					this.m_obj.measures[j] = {field:unescape(dim.getAttribute("field")), aggregate:unescape(dim.getAttribute("aggregate"))};
				}
				break;
			case "description":
				this.m_obj.description = unescape(section.m_text);
				break;
			case "custom_report":
				this.m_obj.customReport = unescape(section.m_text);
				break;
			case "obj_type":
				this.m_obj.obj_type = unescape(section.m_text);
				this.m_obj.mainObject = new CAntObject(this.m_obj.obj_type);
				this.m_obj.view = new CAntObjectView(this.m_obj.obj_type);
				this.m_obj.view.name = "Details";
				break;
			case "view":
				this.m_obj.view = new CAntObjectView(this.m_obj.obj_type);
				this.m_obj.view.loadFromXml(section); // load view definition
				break;
			case "chart_type":
				this.m_obj.chart_type = unescape(section.m_text);
				break;
			case "f_display_table":
				this.m_obj.fDisplayTable = (section.m_text=='t')?true:false;
				break;
			case "f_display_chart":
				this.m_obj.fDisplayChart = (section.m_text=='t')?true:false;
				break;
			case "f_calculate":
				this.m_obj.fCalculate = (section.m_text=='t')?true:false;
				break;
			case "dacl_id":
				this.m_obj.daclId = unescape(section.m_text);
				break;
			}
		}

		// Copy run-time conditions to this view
		for (var i = 0; i < this.m_obj.conditions.length; i++)
		{
			this.m_obj.view.addCondition(this.m_obj.conditions[i].blogic, 
										 this.m_obj.conditions[i].fieldName, 
										 this.m_obj.conditions[i].operator, 
										 this.m_obj.conditions[i].condValue);
		}

		if (this.m_obj.fCalculate)
			this.m_obj.loadCube(); // onload will be called after the cube loads
		else
			this.m_obj.onload();
	};

	var url = "/datacenter/xml_get_report.php?rid=" + this.id;
	ajax.exec(url);
}

/**************************************************************************
* Function: 	loadCube	
*
* Purpose:		Load COlapCube after report definition
* 				this.obj_type & this.dimensions.length & this.measures.length
* 				must be set before the data can be loaded for this cube.
**************************************************************************/
CReport.prototype.loadCube = function(frm)
{
	if (this.obj_type && this.dimensions.length && this.measures.length)
	{
		if (!this.hideloading)
		{
			var dlg = new CDialog();
			var dv_load = document.createElement('div');
			alib.dom.styleSetClass(dv_load, "statusAlert");
			alib.dom.styleSet(dv_load, "text-align", "center");
			dv_load.innerHTML = "Loading report, please wait...";
			dlg.statusDialog(dv_load, 250, 100);
		}
		else
			var dlg = null;

		var d1 = this.dimensions[0].field;
		var d1_grp = this.dimensions[0].group;
		if ((this.dimensions.length > 1))
		{
			var d2 = this.dimensions[1].field;
			var d2_grp = this.dimensions[1].group;
		}
		else
		{
			var d2 = "";
			var d2_grp = "";
		}

		this.cube = new COlapCube(this.obj_type, this.view, this.measures);
		this.cube.cbObj = this;
		this.cube.loadingDlg = dlg;
		this.cube.chart_width = this.chart_width;
		this.cube.customReport = this.customReport;
		if (frm)
		{
			this.cube.onload = function() 
			{ 
				if (this.loadingDlg) this.loadingDlg.hide(); 
				this.cbObj.onCubeUpdate(); 
			};
		}
		else
		{
			this.cube.onload = function() 
			{ 
				if (this.loadingDlg) this.loadingDlg.hide(); 
				this.cbObj.onload(); 
			};
		}
		//ALib.m_debug = true;
		this.cube.load(d1, d1_grp, d2, d2_grp, this.chart_type);
	}
	else
	{
		this.onloadError(-1, "Not enough data has been set to load this report");
	}
}

/**************************************************************************
* Function: 	printCubeMicroForm	
*
* Purpose:		Print a small form that will be displayed at the top
* 				of a report for changing dimensions and filters
**************************************************************************/
CReport.prototype.printCubeMicroForm = function(con, fHideViewBy, fHideFilter)
{
	var fPrintViewBy = (fHideViewBy) ? false : true;
	var fPrintFilterBy = (fHideFilter) ? false : true;

	// Dimension 1
	// ------------------------------------------------------------------------
	var tbl = alib.dom.createElement("table", con);
	var tbody = alib.dom.createElement("tbody", tbl);

	if (fPrintViewBy && this.customReport == "") // Limit group by to dynamic reports only
	{
		var row_con = alib.dom.createElement("tr", tbody);
		var subopt_con1 = alib.dom.createElement("div"); // Used for group by
		// label 1
		var td = alib.dom.createElement("td", row_con);
		td.innerHTML = "View By:&nbsp;";
		// Field selectr
		var td = alib.dom.createElement("td", row_con);
		var field_sel = alib.dom.createElement("select", td);
		field_sel.report = this;
		field_sel.subopt_con1 = subopt_con1;
		field_sel.mainObject = this.mainObject;
		field_sel.onchange = function() 
		{ 
			var grp = "";
			if (this.value)
			{
				var field = this.mainObject.getFieldByName(this.value);
				if (field)
				{
					if (field.type == "date" || field.type == "timestamp")
					{
						this.subopt_con1.style.display = "inline";
						grp = this.report.timegroup_types[3][0]; // default to month
					}
					else
					{
						this.subopt_con1.style.display = "none";
					}
				}
			}
			this.report.dimensions[0] = {field:this.value, group:grp} 
			this.report.changeDimension();
		}
		var fields = this.mainObject.getFields();
		var curdim = (this.dimensions.length) ? this.dimensions[0].field : "";
		for (var i = 0; i < fields.length; i++)
		{
			if (fields[i].type != "fkey_multi")
			{
				field_sel[field_sel.length] = new Option(fields[i].title, fields[i].name, false, 
															(curdim==fields[i].name)?true:false);
			}
		}
		
		// Subgroup
		var lbl = alib.dom.createElement("span", subopt_con1);
		lbl.innerHTML = "&nbsp;&nbsp;Group By&nbsp;";

		var aggreg_sel = alib.dom.createElement("select", subopt_con1);
		aggreg_sel.report = this;
		aggreg_sel.onchange = function() 
		{ 
			var fld = (this.report.dimensions.length>1) ? this.report.dimensions[0].field : "";
			this.report.dimensions[0] = {field:fld, group:this.value} 
			this.report.changeDimension();
		}
		var curdim_grp = (this.dimensions.length) ? this.dimensions[0].group : "month";
		var fields = this.mainObject.getFields();
		for (var i = 0; i < this.timegroup_types.length; i++)
		{
			aggreg_sel[aggreg_sel.length] = new Option(this.timegroup_types[i][1], this.timegroup_types[i][0], 
														false, (curdim_grp==this.timegroup_types[i][0])?true:false);
		}
		td.appendChild(subopt_con1);
		subopt_con1.style.display = "none";
		if (curdim)
		{
			var field = this.mainObject.getFieldByName(curdim);
			if (field)
			{
				if (field.type == "date" || field.type == "timestamp")
					subopt_con1.style.display = "inline";
				else
					subopt_con1.style.display = "none";
			}
		}
	}

	// Dimension 2
	// ------------------------------------------------------------------------
	if (fPrintViewBy && this.dimensions.length>1 && this.customReport=="")
	{
		var row_con = alib.dom.createElement("tr", tbody);
		var subopt_con2 = alib.dom.createElement("div"); // Used for group by
		var td = alib.dom.createElement("td", row_con);
		td.innerHTML = "Then By:&nbsp;";
		// Field selectr
		var td = alib.dom.createElement("td", row_con);
		var field_sel2 = alib.dom.createElement("select", td);
		field_sel2.report = this;
		field_sel2.subopt_con2 = subopt_con2;
		field_sel2.mainObject = this.mainObject;
		field_sel2.onchange = function() 
		{ 
			var grp = "";
			if (this.value)
			{
				var field = this.mainObject.getFieldByName(this.value);
				if (field)
				{
					if (field.type == "date" || field.type == "timestamp")
					{
						this.subopt_con2.style.display = "inline";
						grp = this.report.timegroup_types[3][0]; // default to month
					}
					else
						this.subopt_con2.style.display = "none";
				}
			}
			this.report.dimensions[1] = {field:this.value, group:grp} 
			this.report.changeDimension();
		}
		var fields = this.mainObject.getFields();
		var curdim = (this.dimensions.length>1) ? this.dimensions[1].field : "";
		var curdim_grp = (this.dimensions.length>1) ? this.dimensions[1].group : "";
		for (var i = 0; i < fields.length; i++)
		{
			if (fields[i].type != "fkey_multi")
			{
				field_sel2[field_sel2.length] = new Option(fields[i].title, fields[i].name, false, 
															(curdim==fields[i].name)?true:false);
			}
		}

		// Subgroup
		var lbl = alib.dom.createElement("span", subopt_con2);
		lbl.innerHTML = "&nbsp;&nbsp;Group By&nbsp;";

		var aggreg_sel = alib.dom.createElement("select", subopt_con2);
		aggreg_sel.report = this;
		aggreg_sel.onchange = function() 
		{ 
			var fld = (this.report.dimensions.length>1) ? this.report.dimensions[1].field : "";
			this.report.dimensions[1] = {field:fld, group:this.value} 
			this.report.changeDimension();
		}
		var curdim_grp = (this.dimensions.length>1) ? this.dimensions[1].group : "";
		var fields = this.mainObject.getFields();
		for (var i = 0; i < this.timegroup_types.length; i++)
		{
			aggreg_sel[aggreg_sel.length] = new Option(this.timegroup_types[i][1], this.timegroup_types[i][0], 
														false, (curdim_grp==this.timegroup_types[i][0])?true:false);
		}
		td.appendChild(subopt_con2);
		subopt_con2.style.display = "none";
		if (curdim)
		{
			var field = this.mainObject.getFieldByName(curdim);
			if (field)
			{
				if (field.type == "date" || field.type == "timestamp")
					subopt_con2.style.display = "inline";
				else
					subopt_con2.style.display = "none";
			}
		}
	}
	

	//-----------------------------------------------------------------
	//	Add filter
	//-----------------------------------------------------------------
	var conds = (this.view) ? this.view.conditions : null;

	var filter_row = alib.dom.createElement("tr", tbody);
	filter_row.vAlign = "top";

	var lbl = alib.dom.createElement("td", filter_row);
	lbl.innerHTML = "Filter By:";
	
	var filter_con = alib.dom.createElement("td", filter_row);

	var fltr_query_con = alib.dom.createElement("div", filter_con);
	var fltr_btn_con = alib.dom.createElement("div", filter_con);

	// Build filter container
	// ------------------------------------------------------------
	alib.dom.styleSet(fltr_query_con, "display", "none");
	var conditionObj = this.mainObject.buildAdvancedQuery(fltr_query_con, conds);

	var act_dv = alib.dom.createElement("div", fltr_query_con);
	alib.dom.styleSet(act_dv, "text-align", "right");

	// Go link
	var lnk = alib.dom.createElement("a", act_dv);
	lnk.innerHTML = "Apply Filter";
	lnk.href = "javascript:void(0);";
	lnk.conditionObj = conditionObj;
	lnk.fltr_btn_con = fltr_btn_con;
	lnk.fltr_query_con = fltr_query_con;
	lnk.cls = this;
	lnk.onclick = function()
	{
		this.fltr_btn_con.style.display = "block";
		this.fltr_query_con.style.display = "none";

		var tmpcon = this.conditionObj.getCondDesc(this.cls.obj_type);
		this.fltr_btn_con.innerHTML = "";
		this.fltr_btn_con.appendChild(tmpcon);
		tmpcon = alib.dom.createElement("span", this.fltr_btn_con);
		tmpcon.innerHTML = "&nbsp;&nbsp;<a href='javascript:void(0);'>[click to edit]</a>";

		this.cls.view.conditions = new Array();
		for (var i = 0; i < this.conditionObj.getNumConditions(); i++)
		{
			var cond = this.conditionObj.getCondition(i);
			this.cls.view.conditions[i] = new Object();
			this.cls.view.conditions[i].blogic = cond.blogic;
			this.cls.view.conditions[i].fieldName = cond.fieldName;
			this.cls.view.conditions[i].operator = cond.operator;
			this.cls.view.conditions[i].condValue = cond.condValue;
		}

		this.cls.changeDimension();
		this.cls.onConditionChange();
	}

	// Cancel link
	var sp = alib.dom.createElement("span", act_dv);
	sp.innerHTML = "&nbsp;";
	
	var lnk = alib.dom.createElement("a", act_dv);
	lnk.innerHTML = "Cancel Edit";
	lnk.fltr_btn_con = fltr_btn_con;
	lnk.fltr_query_con = fltr_query_con;
	lnk.href = "javascript:void(0);";
	lnk.onclick = function()
	{
		this.fltr_btn_con.style.display = "block";
		this.fltr_query_con.style.display = "none";
	}

	// Build condition string and "Edit Filter" button
	// ------------------------------------------------------------
	fltr_btn_con.fltr_query_con = fltr_query_con;
	fltr_btn_con.innerHTML = "";
	var tmpcon = conditionObj.getCondDesc(this.obj_type);
	fltr_btn_con.appendChild(tmpcon);
	tmpcon = alib.dom.createElement("span", fltr_btn_con);
	tmpcon.innerHTML = "&nbsp;&nbsp;<a href='javascript:void(0);'>[click to edit]</a>";
	fltr_btn_con.onclick = function()
	{
		this.fltr_query_con.style.display = "block";
		this.style.display = "none";
	}
}

/**************************************************************************
* Function: 	changeDimension	
*
* Purpose:		Change dimension parameters
**************************************************************************/
CReport.prototype.changeDimension = function()
{
	this.loadCube(true);
}

/**************************************************************************
* Function: 	save	
*
* Purpose:		Save report to backend
**************************************************************************/
CReport.prototype.save = function()
{
	function cbdone(ret, cls, dlg)
	{
		dlg.hide();

		if (ret)
		{
			cls.id = ret;
			if (cls.view)
			{
				cls.view.reportId = ret;
				cls.view.save();
			}
			cls.onsave(ret);
		}
	}

	var args = [["name", this.name], ["description", this.description], ["obj_type", this.obj_type], 
				["scope", this.scope],
				["chart_type", this.chart_type],
				["f_display_table", (this.fDisplayTable)?'t':'f'],
				["f_display_chart", (this.fDisplayChart)?'t':'f'],
				["f_calculate", (this.fCalculate)?'t':'f']];

	if (this.dimensions.length)
	{
		args[args.length] = ["dim_one_fld", this.dimensions[0].field];
		args[args.length] = ["dim_one_grp", this.dimensions[0].group];
	}
	if (this.dimensions.length>1)
	{
		args[args.length] = ["dim_two_fld", this.dimensions[1].field];
		args[args.length] = ["dim_two_grp", this.dimensions[1].group];
	}
	if (this.measures.length)
	{
		args[args.length] = ["measure_one_fld", this.measures[0].field];
		args[args.length] = ["measure_one_agg", this.measures[0].aggregate];
	}

	if (this.id)
		args[args.length] = ["rid", this.id];

	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving report, please wait...";
	dlg.statusDialog(dv_load, 250, 100);

	/*
	ALib.m_debug = true;
	AJAX_TRACE_RESPONSE = true;
	*/

	var rpc = new CAjaxRpc("/datacenter/xml_actions.awp", "report_save", args, cbdone, [this, dlg], AJAX_POST);
}

/**************************************************************************
* Function: 	addFilterCondition
*
* Purpose:		Add a condition to filter by
**************************************************************************/
CReport.prototype.addFilterCondition = function(blogic, fieldName, operator, condValue) 
{
	var ind = this.conditions.length;
	this.conditions[ind] = new Object();
	this.conditions[ind].blogic = blogic;
	this.conditions[ind].fieldName =fieldName;
	this.conditions[ind].operator = operator;
	this.conditions[ind].condValue = condValue;
}

/**************************************************************************
* Function: 	onsave	
*
* Purpose:		To be over-ridden by calling process to detect when
* 				definition is finished saving.
**************************************************************************/
CReport.prototype.onsave = function(rid)
{
}

/**************************************************************************
* Function: 	onload	
*
* Purpose:		To be over-ridden by calling process to detect when
* 				definition is finished loading.
**************************************************************************/
CReport.prototype.onload = function()
{
}

/**************************************************************************
* Function: 	onloadError	
*
* Purpose:		Handle load errors
**************************************************************************/
CReport.prototype.onloadError = function(id, message)
{
}

/**************************************************************************
* Function: 	onCubeUpdate	
*
* Purpose:		To be over-ridden by calling process to detect when
* 				the dimensioins have been changed by the micro-form
**************************************************************************/
CReport.prototype.onCubeUpdate = function()
{
}

/**************************************************************************
* Function: 	onConditionChange	
*
* Purpose:		To be over-ridden by calling process to detect when
* 				the condtions for this report have been modified
**************************************************************************/
CReport.prototype.onConditionChange = function()
{
}

/**
* @fileoverview This is a Report Class Object
*
* @author    Marl Tumulak, marl.aereus@aereus.com
*             Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

var TABLE_TABULAR           = "tabular";
var TABLE_SUMMARY           = "summary";
var TABLE_PIVOT             = "pivot_matrix";

var REPORT_TYPE_OBJECT      = "object";
var REPORT_TYPE_DATAWARE    = "dataware";
var REPORT_TYPE_CUSTOM      = "custom";
var GRAPH_TYPE_SINGLE       = "single";
var GRAPH_TYPE_MULTI        = "multi";
var TABLE_TABULAR           = "tabular";
var TABLE_SUMMARY           = "summary";
var TABLE_PIVOT             = "pivot_matrix";
var MEASURE_COUNT           = "count";

/**
* Creates an instance of AntObjectLoader_Report.
*
* @constructor
* @param {id} int Report Id
*/
function Report(id)
{
    this.reportId = id;
    this.mainObject = new CAntObject("report", this.reportId);
    
    this.aggregateData = ["sum", "avg", "max", "min"];
    this.sortData = [["asc", "Ascending"], ["desc", "Descending"]];
    this.formatData = [["Y", "Year"], ["Y Q", "Quarter"], ["m", "Month"], ["Y d", "Day"]];    
    this.dimTypeData = new Object();    
    this.measureData = new Object();
    this.dimensionData = new Object();
    
    this.filterData = new Array();
    
    this.finishBuilding = false;
    this.displayReportName = true;
    this.tableType = null;
    this.chartWidth = null;
    this.chartHeight = null;
    this.cube = null;

	/**
	 * Buffer for storing callback data/properties
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();
}

/**
* To be over-ridden by calling process to detect when definition is finished loading.
*
* @public
* @this {Report} 
* @param {Object} ret   Object that is a result from ajax
*/
Report.prototype.onloadGraphs = function(ret)
{    
}

/**
* To be over-ridden by calling process to detect when definition is finished loading.
*
* @public
* @this {Report} 
* @param {Object} ret   Object that is a result from ajax
*/
Report.prototype.onload = function(ret)
{
}

/**
* To be over-ridden by calling process to detect when definition is finished saving.
*
* @public
* @this {Report} 
* @param {Object} ret   Object that is a result from ajax
*/
Report.prototype.onsave = function(ret)
{
}

/**
* Prints the report
*
* @public
* @this {Report}
*/
Report.prototype.print = function(con)
{
    var graphData = new Object;
    graphData.type = this.reportData.chart_type;
    graphData.dimension = this.reportData.chart_dim1;
    graphData.dimensionFormat = this.reportData.chart_dim1_grp;
    graphData.grouping = this.reportData.chart_dim2;
    graphData.groupingFormat = this.reportData.chart_dim2_grp;
    graphData.measure = this.reportData.chart_measure;
    graphData.aggregate = this.reportData.chart_measure_agg;
    
    // Display Report Info
    if(this.displayReportName)
    {
        var reportName = alib.dom.setElementAttr(alib.dom.createElement("div", con), [["innerHTML", this.reportData.name]]);
        alib.dom.styleSet(reportName, "fontWeight", "bold");
        alib.dom.styleSet(reportName, "fontSize", "12px");
        alib.dom.styleSet(reportName, "margin", "5px");
    }
    
    // Display Graph Data
    this.graphCon = alib.dom.createElement("div", con);
    this.graphCon.id = "GraphCon";
    this.displayGraph(this.graphCon, graphData, this.filterData);
    
    // Display Table Data
    this.tableResultCon = alib.dom.createElement("div", con);
    alib.dom.styleSet(this.tableResultCon, "display", "none");
    this.displayTableData()
}
     
/**
* Loads the report data using the Datacenter Controller
*
* @public
* @this {Report} 
*/
Report.prototype.loadReport = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.tableType = ret.reportData.table_type;
        this.cbData.cls.reportData = ret.reportData;
        this.cbData.cls.filterData = ret.filters;
        this.cbData.cls.reportDimensionData = ret.dimensions;
        this.cbData.cls.reportMeasureData = ret.measures;
        
        var objType = ret.reportData['obj_type'];
        var cubePath = ret.reportData['dataware_cube'];
        var customReport = ret.reportData['custom_report'];
            
        this.cbData.cls.cube = new OlapCube(objType, customReport, cubePath);
        var cube = this.cbData.cls.cube;
        
        cube.cls = this.cbData.cls;
        cube.reportData = ret;
        cube.onloadDefinition = function(dimensions, measures)
        {
            this.cls.dimensionData = dimensions;
            this.cls.measureData = measures;
            
            // Get the Dimension Types and put in an array
            for(dimension in this.cls.dimensionData)
            {
                var currentDimension = this.cls.dimensionData[dimension];        
                this.cls.dimTypeData[currentDimension.name] = currentDimension.type;
            }
            
            this.cls.finishBuilding = true;
            this.cls.onload(this.reportData);
        }
        cube.loadDefinition(this.cbData.cls);
        
    };

    var args = new Array();
    args[args.length] = ['id', this.reportId];
    ajax.exec("/controller/Datacenter/getReportData", args);
}

/**
* Loads the report data using the Datacenter Controller
*
* @public
* @this {Report} 
* @param {Integer} gType    Graph Type Id
*/
Report.prototype.getGraphTypes = function(gType)
{
    ajax = new CAjax('json');    
    ajax.cbData.cls = this;    
    ajax.onload = function(ret)
    {
        this.cbData.cls.onloadGraphs(ret);
    };
    
    var args = new Array();
    args[args.length] = ['gtype', gType];
    ajax.exec("/controller/Datacenter/reportGetGraphTypes", args);
}

/**
* Gets the ANT objects
*
* @public
* @this {Report} 
*/
Report.prototype.getObjects = function()
{
    ajax = new CAjax('json');    
    ajax.cbData.cls = this;    
    ajax.onload = function(ret)
    {
        this.cbData.cls.onload(ret);
    };
    ajax.exec("/controller/Object/getObjects");
}

/**
* Loads the report data using the Datacenter Controller
*
* @public
* @this {Report} 
* @param {DOMElement} con       The container where we can print the graph
* @param {Object} graphData     Object data which contains the graph details
* @param {Object} filterData    Object data which contains the filter conditions
*/
Report.prototype.displayGraph = function(con, graphData, filterData)
{
    // Set Olap Cube
    var olapCube = new OlapCube_Graph(this.cube);
    
    if(!graphData.type)
    {
        con.innerHTML = "Report Graph Type is not set.";
        alib.dom.styleSet(con, "height", "50px");
        return;
    }
    
    con.innerHTML = "<div class='loading'></div>";
    
    // Set X-Axis
    if(graphData.dimension.length)
        olapCube.addDimension(graphData.dimension, 'asc', graphData.dimensionFormat);
        
    // Set Grouping
    if(graphData.grouping.length)
        olapCube.addDimension(graphData.grouping, 'asc', graphData.groupingFormat);
    
    // Set Y-Axis
    var aggregate = '';
    if(graphData.measure !== MEASURE_COUNT)
        aggregate = graphData.aggregate;
    
    olapCube.addMeasure(graphData.measure, aggregate)
    
    // Set Filter Data
    for(filter in filterData)
    {
        var currentFilter = filterData[filter];
        olapCube.addFilter(currentFilter.blogic, currentFilter.fieldName, currentFilter.operator, currentFilter.condValue);
    }
    
    olapCube.chartType = graphData.type;
    olapCube.chartWidth = this.chartWidth;
	if (this.chartHeight)
    	olapCube.chartHeight = this.chartHeight;
    olapCube.print(con, false);
}

/**
* Loads the report data using the Datacenter Controller
*
* @public
* @this {Report} 
*/
Report.prototype.displayTableData = function()
{    
    if(!this.tableType)
        return;
    
    switch(this.tableType)
    {
        case TABLE_TABULAR:
            var olapTableCls = new AntObjectLoader_Report_Tabular(this);
            
            // Dimensions
            if(this.reportDimensionData.length)
            {                
                for(dimension in this.reportDimensionData)
                {
                    var currentDimension = this.reportDimensionData[dimension];
                    
                    olapTableCls.tabularDimensionData[dimension] = new Object();
                    var dimObject = olapTableCls.tabularDimensionData[dimension];
                    
                    dimObject.dimension = alib.dom.setElementAttr(alib.dom.createElement("div"), [["innerHTML", currentDimension.name]]);
                    dimObject.sort = alib.dom.setElementAttr(alib.dom.createElement("div"), [["innerHTML", currentDimension.sort]]);
                }
            }
            break;
        case TABLE_SUMMARY:
            var olapTableCls = new AntObjectLoader_Report_Summary(this);
            
            // Dimensions
            if(this.reportDimensionData.length)
            {        
                for(dimension in this.reportDimensionData)
                {
                    var currentDimension = this.reportDimensionData[dimension];
                        
                    olapTableCls.reportForm.summaryGroup[dimension] = new Object();
                    var dimObject = olapTableCls.reportForm.summaryGroup[dimension];
                    var dimType = this.dimTypeData[currentDimension.name];
                    
                    dimObject.dimension = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.name], ["dimType", dimType]]);
                    dimObject.sort = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.sort]]);
                    dimObject.format = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.format]]);
                }        
            }
            
            // Measures
            if(this.reportMeasureData.length)
            {        
                for(measure in this.reportMeasureData)
                {            
                    var currentMeasure = this.reportMeasureData[measure];
                    
                    olapTableCls.reportForm.summarySumm[measure] = new Object();
                    var measObject = olapTableCls.reportForm.summarySumm[measure];
                    
                    measObject.measure = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentMeasure.name]]);
                    measObject.aggregate = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentMeasure.aggregate]]);                    
                }        
            }
            break;
        case TABLE_PIVOT:
            var olapTableCls = new AntObjectLoader_Report_PivotMatrix(this);
            
            // Dimensions
            if(this.reportDimensionData.length)
            {        
                for(dimension in this.reportDimensionData)
                {
                    var currentDimension = this.reportDimensionData[dimension];
                    var dimType = this.dimTypeData[currentDimension.name];
                    
                    if(currentDimension.f_column=="t")
                    {
                        olapTableCls.reportForm.pivotColumn[dimension] = new Object();
                        var dimObject = olapTableCls.reportForm.pivotColumn[dimension];
                    }                        
                    else if(currentDimension.f_row=="t")
                    {
                        olapTableCls.reportForm.pivotRow[dimension] = new Object();
                        var dimObject = olapTableCls.reportForm.pivotRow[dimension];
                    }
                    
                    dimObject.dimension = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.name], ["dimType", dimType]]);
                    dimObject.sort = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.sort]]);
                    dimObject.format = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentDimension.format]]);
                }        
            }
            
            // Measures
            if(this.reportMeasureData.length)
            {        
                for(measure in this.reportMeasureData)
                {            
                    var currentMeasure = this.reportMeasureData[measure];
                    var measObject = olapTableCls.reportForm.pivotData;
                    
                    measObject.measure = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentMeasure.name]]);
                    measObject.aggregate = alib.dom.setElementAttr(alib.dom.createElement("hidden"), [["value", currentMeasure.aggregate]]);                    
                }        
            }
            
            // Total Checkboxes
            olapTableCls.reportForm.pivotTotals = new Object();
            var attrSub = [["type", "checkbox"], ["checked", (this.reportData.f_sub_totals=="f")?false:true]];
            olapTableCls.reportForm.pivotTotals.sub = alib.dom.setElementAttr(alib.dom.createElement("input"), attrSub);
            break;
        default:
            return;
    }
    
    olapTableCls.buildOlapData();
}

/**
* Saves the report data using the Datacenter Controller
*
* @public
* @this {Report} 
* @param {Array} args   Arguments used for controller
*/
Report.prototype.saveReport = function(args)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.onsave(ret);
    };
    ajax.exec("/controller/Datacenter/updateReportData", args);
}

/**
* Creates the report
*
* @public
* @this {Report} 
* @param {Array} args   Arguments used for controller
*/
Report.prototype.createReport = function(args)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.onsave(ret);
    };
    ajax.exec("/controller/Datacenter/saveReportData", args);
}

/**
 * Toggles the display from chart to table data and vice versa
 * This function is used in report widget
 *
 * @public
 * @this {Report} 
 * @param {Boolean} displayChart     Determines whether to display chart or table data
 */
Report.prototype.toggleDisplay = function(displayChart)
{
    alib.dom.styleSet(this.tableResultCon, "display", "none");     
    alib.dom.styleSet(this.graphCon, "display", "none");     
    
    if(displayChart)
        alib.dom.styleSet(this.graphCon, "display", "block");
    else
        alib.dom.styleSet(this.tableResultCon, "display", "block");
     
}

/****************************************************************************
*	
*	Class:		CCustActivity
*
*	Purpose:	Activity editor/viewer
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2009 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/
var CUST_TYPE_CONTACT = 1;
var CUST_TYPE_ACCOUNT = 2;

function CCustActivity(activity_id)
{
	var aid = (activity_id) ? activity_id : null;
	this.m_aid = aid;
	this.type_id = null;;		// Set the initial type
	// Record unique ids, at least one of these must be set
	this.customer_id = null;	// Customer id
	this.lead_id = null;		// Lead id
	this.opportunity_id = null;	// Opportunity id
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Public functin for building interface.
**************************************************************************/
CCustActivity.prototype.showDialog = function()
{
	this.buildInterface();
}

/*************************************************************************
*	Function:	buildInterface
*
*	Purpose:	Display activity interface
**************************************************************************/
CCustActivity.prototype.buildInterface = function()
{
	// Title
	if (this.m_aid)
	{
		this.title = "Edit/View Activity";
	}
	else
	{
		this.title = "Enter New Activity";
	}

	var dlg = new CDialog(this.title);
	this.m_dlg = dlg;

	var dv = alib.dom.createElement("div");
	this.m_maindiv = dv;
	dv.innerHTML = "";

	var tbl = alib.dom.createElement("table", dv);
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.cellPadding='0';
	tbl.cellSpacing='3';
	var tbody = alib.dom.createElement("tbody", tbl);

	// Subject
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Subject:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	this.txtSub = alib.dom.createElement("input", td_inp);
	alib.dom.styleSet(this.txtSub, "width", "100%");
	this.txtSub.maxLength = 32;

	// Type
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Type:";
	// Input
	this.dvSelCon = alib.dom.createElement("td", row);
	alib.dom.styleSet(this.dvSelCon, "margin", "0 3px 3px 58px");
	this.selTypes = alib.dom.createElement("select", this.dvSelCon);
	this.selTypes.dlgField = true; // selects are hidden by the dlg class - unhide
	this.getActivityTypes();

	// Direction
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Direction:";
	// Input
	this.dvDirCon = alib.dom.createElement("td", row);
	alib.dom.styleSet(this.dvDirCon, "margin", "0 3px 3px 58px");
	this.selDirection = alib.dom.createElement("select", this.dvDirCon);
	this.selDirection.dlgField = true; // selects are hidden by the dlg class - unhide
	this.selDirection[this.selDirection.length] = new Option("None", "", false, false);
	this.selDirection[this.selDirection.length] = new Option("Outgoing","o",  false, false);
	this.selDirection[this.selDirection.length] = new Option("Incoming", "i", false, false);

	// Date
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Date:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	this.txtDate = alib.dom.createElement("input", td_inp);
	alib.dom.styleSet(this.txtDate, "width", "75px");
	this.txtDate.value = this.getNowDateString();
	// Insert autocomplete
	var a_date = alib.dom.createElement("span", td_inp);
	a_date.innerHTML = "<img src='/images/calendar.gif' border='0'>";
	var start_ac = new CAutoCompleteCal(this.txtDate, a_date);

	// Time
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Time:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	this.txtTime = alib.dom.createElement("input", td_inp);
	alib.dom.styleSet(this.txtTime, "width", "75px");
	this.txtTime.value = this.getNowTimeString();
	var tobj = new CAutoCompleteTime(this.txtTime); // Autocomplete and time validation

	// Public
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Public:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	this.ckPublic = alib.dom.createElement("input");
	this.ckPublic.type = "checkbox";
	this.ckPublic.checked = true;
	td_inp.appendChild(this.ckPublic);

	// Notes
	// -----------------------------------------------
	var ndiv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(ndiv, "margin-right", "5px");
	alib.dom.styleSet(ndiv, "border", "0");
	this.taNotes = alib.dom.createElement("textarea", ndiv);
	alib.dom.styleSet(this.taNotes, "width", "100%");
	alib.dom.styleSet(this.taNotes, "height", "250px");
	alib.dom.styleSet(this.taNotes, "border", "1px solid");

	// Buttons
	// -----------------------------------------------
	var dv_btn = alib.dom.createElement("div", dv);
	var me = this;
	var btn = new CButton("Save", function(cls, dlg) { cls.save();  }, [me, me.m_dlg]);
	btn.print(dv_btn);
	this.btnSave = btn;

	var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [me.m_dlg]);
	btn.print(dv_btn);

	dlg.customDialog(dv, 600, 420);

	if (this.m_aid)
		this.loadActivity();
}

/*************************************************************************
*	Function:	save
*
*	Purpose:	Save changes or new activity to database
**************************************************************************/
CCustActivity.prototype.save = function()
{
	var args = [["name", this.txtSub.value], ["notes", this.taNotes.value], ["type_id", this.selTypes.value], ["direction", this.selDirection.value], 
				["time", this.txtTime.value], ["date", this.txtDate.value], ["f_public", (this.ckPublic.checked)?'t':'f']];
	if (this.m_aid)
		args[args.length] = ['aid', this.m_aid];
	if (this.lead_id)
		args[args.length] = ['lead_id', this.lead_id];
	if (this.opportunity_id)
		args[args.length] = ['opportunity_id', this.opportunity_id];
	if (this.customer_id)
		args[args.length] = ['customer_id', this.customer_id];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.m_dlg = this.m_dlg;
    ajax.onload = function(ret)
    {
        this.m_dlg.hide();
        this.cls.onSave(ret);
    };
    ajax.exec("/controller/Customer/activitySave", args);
}

/*************************************************************************
*	Function:	onSave
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CCustActivity.prototype.onSave = function(aid)
{
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CCustActivity.prototype.onCancel = function()
{
}


/*************************************************************************
*	Function:	getNowTimeString
*
*	Purpose:	Get HH:MM AM|PM string
**************************************************************************/
CCustActivity.prototype.getNowTimeString = function()
{
	var currentTime = new Date()
	var hours = currentTime.getHours()
	var minutes = currentTime.getMinutes()

	var suffix = "AM";
	if (hours >= 12) 
	{
		suffix = "PM";
		hours = hours - 12;
	}
	if (hours == 0) 
	{
		hours = 12;
	}

	if (minutes < 10)
		minutes = "0" + minutes;


	return  hours + ":" + minutes + " " + suffix;
}

/*************************************************************************
*	Function:	getNowDateString
*
*	Purpose:	Get mm/dd/yyyy string
**************************************************************************/
CCustActivity.prototype.getNowDateString = function()
{
	var currentTime = new Date()
	var month = currentTime.getMonth() + 1
	var day = currentTime.getDate()
	var year = currentTime.getFullYear()
	
	return  month + "/" + day + "/" + year;
}


/*************************************************************************
*	Function:	getActivityTypes
*
*	Purpose:	Get activity types via AJAX
**************************************************************************/
CCustActivity.prototype.getActivityTypes = function()
{   
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            if (ret.length)
            {
                for(types in ret)
                {
                    var currentType = ret[types];
                    this.cls.selTypes[cls.selTypes.length] = new Option(currentType.name, currentType.id, false, (this.cls.type_id==currentType.name)?true:false);
                }
            }
        }    
    };
    ajax.exec("/controller/Customer/getActivityTypes");
}

/*************************************************************************
*	Function:	loadActivity
*
*	Purpose:	Load activity details
**************************************************************************/
CCustActivity.prototype.loadActivity = function(aid)
{
	this.m_ajax = new CAjax();
	var me = this;
	this.m_ajax.m_ccls = me;
	this.m_ajax.onload = function(root)
	{
		var num = root.getNumChildren();
		for (i = 0; i < num; i++)
		{
			var child = root.getChildNode(i);

			if (child.m_name == "activity")
			{
				var id = child.getChildNodeValByName("id");
				var name = child.getChildNodeValByName("name");
				var type_id = child.getChildNodeValByName("type_id");
				var direction = child.getChildNodeValByName("direction");
				var type_name = child.getChildNodeValByName("type_name");
				var time_entered = child.getChildNodeValByName("time_entered");
				var date_entered = child.getChildNodeValByName("date_entered");
				var f_public = child.getChildNodeValByName("public");
				var f_readonly = child.getChildNodeValByName("f_readonly");
				var notes = child.getChildNodeValByName("notes");
				var email_id = child.getChildNodeValByName("email_id");
				var opportunity_id = child.getChildNodeValByName("opportunity_id");
				var lead_id = child.getChildNodeValByName("lead_id");
				var customer_id = child.getChildNodeValByName("customer_id");

				if (opportunity_id)
					this.m_ccls.opportunity_id = opportunity_id;
				if (lead_id)
					this.m_ccls.lead_id = lead_id;
				if (customer_id)
					this.m_ccls.customer_id = customer_id;

				if (!name) name = "untitled";
				
				// Now check for read only
				if (f_readonly == 't')
				{
					this.m_ccls.txtSub.disabled = true;
					this.m_ccls.taNotes.disabled = true;
					this.m_ccls.txtTime.disabled = true;
					this.m_ccls.txtDate.disabled = true;
					this.m_ccls.ckPublic.disabled = true;
					this.m_ccls.selTypes.disabled = true;
					this.m_ccls.selDirection.disabled = true;
					this.m_ccls.btnSave.disable();
				}

				// Populate values
				this.m_ccls.txtSub.value = unescape(name);
				this.m_ccls.taNotes.value = unescape(notes);
				this.m_ccls.txtTime.value = unescape(time_entered);
				this.m_ccls.txtDate.value = unescape(date_entered);
				this.m_ccls.ckPublic.checked = (f_public == 't') ? true : false;

				if (type_id)
				{
					for( intIndex = 0; intIndex < this.m_ccls.selTypes.options.length; intIndex++ )
					{
						// Is this the ID we are looking for?
						if(this.m_ccls.selTypes.options[intIndex].value == type_id)
						{
							// Select it
							this.m_ccls.selTypes.selectedIndex = intIndex;
							// Yes, so stop searching
							break;
						}
					}
				}
				else
				{
					this.m_ccls.dvSelCon.innerHTML = type_name;
				}
				
				if (direction)
				{
					for( intIndex = 0; intIndex < this.m_ccls.selDirection.options.length; intIndex++ )
					{
						// Is this the ID we are looking for?
						if(this.m_ccls.selDirection.options[intIndex].value == direction)
						{
							this.m_ccls.selDirection.selectedIndex = intIndex;
							break;
						}
					}
				}

				if (email_id)
				{
					/*
					// Create email link
					var alnk = alib.dom.createElement("a");
					alnk.href = "javascript:void(0);";
					alnk.innerHTML = unescape(name);
					alnk.m_id = unescape(id);
					alnk.m_browseclass = this.m_browseclass;
					alnk.cid = id;
					alnk.onclick = function()
					{
						var params = 'top=200,left=100,width=800,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
						window.open('/customer/edit_customer.awp?custid='+this.cid, 'cust_'+this.cid, params);
					}
					*/
				}

				// Populate fields
			}
		}
		if (!num)	
			this.m_ccls.m_maindiv.innerHTML = " Error loading activity";
	};

	var url = "/customer/xml_get_activities.php?";
	if (this.m_aid)
		url += "aid=" + this.m_aid;
	this.m_ajax.exec(url);
}

/****************************************************************************
*	
*	Class:		CCustomerBrowser
*
*	Purpose:	Browser to select or add customers within the page (no popup)
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2009 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/
var CUST_TYPE_CONTACT = 1;
var CUST_TYPE_ACCOUNT = 2;

function CCustomerBrowser()
{
	this.title = "Select Customer";		// Customize the title
	this.customerTitle = "Customer";	// Used to change the title of a customer
	this.allowNew = true;				// Show "create new customer" option
	this.filterType = null;				// Show filter out accounts or contacts
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Display a customer browser
**************************************************************************/
CCustomerBrowser.prototype.showDialog = function()
{
	var dlg = new CDialog(this.title);
	this.m_dlg = dlg;
	dlg.f_close = true;

	// Search Bar
	var dv = alib.dom.createElement("div");
	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = "Find: ";
	this.m_txtSearch = alib.dom.createElement("input", dv);
	alib.dom.styleSet(this.m_txtSearch, "width", "300px");
	this.m_txtSearch.m_cls = this;
	this.m_txtSearch.onkeyup = function(e)
	{
		if (typeof e == 'undefined') 
		{
			if (ALib.m_evwnd)
				e = ALib.m_evwnd.event;
			else
				e = window.event;
		}

		if (typeof e.keyCode != "undefined")
			var code = e.keyCode;
		else
			var code = e.which;

		if (code == 13) // keycode for a return
		{
			this.m_cls.loadCustomers();
		}
	}

	var btn = new CButton("Search", function(cls) {  cls.loadCustomers(); }, [this]);
	btn.print(dv);
	
	// Pagination and add
	this.pag_div = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.pag_div, "margin-bottom", "3px");
	alib.dom.styleSet(this.pag_div, "text-align", "right");
	this.pag_div.innerHTML = "Page 1 of 1";

	// Results
	this.m_browsedv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.m_browsedv, "height", "350px");
	alib.dom.styleSet(this.m_browsedv, "border", "1px solid");
	alib.dom.styleSet(this.m_browsedv, "background-color", "white");
	alib.dom.styleSet(this.m_browsedv, "overflow", "auto");
	this.m_browsedv.innerHTML = "<div style='margin:10px;vertical-align:middle;'><span class='loading'></span></div>";

	// New Customer Form
	this.dv_new = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.dv_new, "margin-top", "3px");
	alib.dom.styleSet(this.dv_new, "border", "1px solid");
	alib.dom.styleSet(this.dv_new, "padding", "3px");
	this.createNew();
	
	dlg.customDialog(dv, 600, 420);

	// Load customers
	this.loadCustomers();
}

/*************************************************************************
*	Function:	select
*
*	Purpose:	Internal function to select a customer then fire pubic onselect
**************************************************************************/
CCustomerBrowser.prototype.select = function(cid, name)
{
	this.m_dlg.hide();
	this.onSelect(cid, name);
}

/*************************************************************************
*	Function:	createNew
*
*	Purpose:	Create a new customer form
**************************************************************************/
CCustomerBrowser.prototype.createNew = function(showfrm)
{
	var show_form = (showfrm) ? true : false;
	this.dv_new.innerHTML = "";
	
	if (show_form)
	{
		var lbl = alib.dom.createElement("span", this.dv_new);
		lbl.innerHTML = "Type :&nbsp;";

		var sel = alib.dom.createElement("select", this.dv_new);
		sel.onchange = function () { }
		sel[sel.length] = new Option("Account", CUST_TYPE_ACCOUNT, false, true);
		sel[sel.length] = new Option("Contact", CUST_TYPE_CONTACT, false, false);

		var lbl = alib.dom.createElement("span", this.dv_new);
		lbl.innerHTML = "&nbsp;Name:&nbsp;";

		var inp = alib.dom.createElement("input");
		inp.type = 'text';
		alib.dom.styleSet(inp, "width", "150px");
		this.dv_new.appendChild(inp);

		var lbl = alib.dom.createElement("span", this.dv_new);
		lbl.innerHTML = "&nbsp;";

		function btnPressCreateNew(cls, cb_type, txt_name)
		{
			if (cb_type.value && txt_name.value)
			{
				cls.saveNewCustomer(cb_type.value, txt_name.value);
			}
			else
			{
				ALib.Dlg.messageBox("Please enter a name", cls.m_dlg);
			}
		}
		var btn = new CButton("Create", btnPressCreateNew, [this, sel, inp], "b2");
		btn.print(this.dv_new);

		var lbl = alib.dom.createElement("span", this.dv_new);
		lbl.innerHTML = "&nbsp;&nbsp;";

		var btn = new CButton("Cancel", function(cls) {  cls.createNew(); }, [this]);
		btn.print(this.dv_new);
	}
	else
	{
		var btn = new CButton("Create Contact/Account", function(cls) {  cls.createNew(true); }, [this], "b2");
		btn.print(this.dv_new);
	}
}

/*************************************************************************
*	Function:	saveNewCustomer
*
*	Purpose:	Save the new customer
**************************************************************************/
CCustomerBrowser.prototype.saveNewCustomer = function(type, name)
{
	var args = [["name",escape(name)], ["type_id", type]];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.name = name;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            this.cls.select(ret, this.name);
        }    
    };
    ajax.exec("/controller/Customer/createCustomer", args);
}

/*************************************************************************
*	Function:	onSelect
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CCustomerBrowser.prototype.onSelect = function(cid, name)
{
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CCustomerBrowser.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	loadCustomers
*
*	Purpose:	Load customers
**************************************************************************/
CCustomerBrowser.prototype.loadCustomers = function(start)
{
	var istart = (typeof start != "undefined") ? start : 0;

	this.m_browsedv.innerHTML = "<div class='loading'></div>";

	this.m_ajax = new CAjax();
	var me = this;
	this.m_ajax.m_browseclass = me;
	this.m_ajax.onload = function(root)
	{
		var num = root.getNumChildren();
		if (num)
		{
			this.m_browseclass.m_browsedv.innerHTML = "";
			this.m_browseclass.pag_div.innerHTML = "";

			this.m_browseclass.m_doctbl = new CToolTable("100%");
			var tbl = this.m_browseclass.m_doctbl;
			tbl.print(this.m_browseclass.m_browsedv);

			tbl.addHeader("ID");
			tbl.addHeader("Name");
			tbl.addHeader("&nbsp;", "center", "20px");
			tbl.addHeader("Phone");
			tbl.addHeader("Email");
			tbl.addHeader("Group(s)");
			for (i = 0; i < num; i++)
			{
				var rw = tbl.addRow();

				var child = root.getChildNode(i);

				if (child.m_name == "contact")
				{
					var id = child.getChildNodeValByName("id");
					var phone = child.getChildNodeValByName("number");
					var email = child.getChildNodeValByName("email");
					var labels = child.getChildNodeValByName("labels");
					var name = child.getChildNodeValByName("name");
					if (!name) name = "untitled";
					var alnk = alib.dom.createElement("a");
					alnk.href = "javascript:void(0);";
					alnk.innerHTML = unescape(name);
					alnk.m_id = unescape(id);
					alnk.m_browseclass = this.m_browseclass;
					alnk.m_cid = id;
					alnk.m_cname = unescape(name);;
					alnk.onclick = function()
					{
						this.m_browseclass.select(this.m_cid, this.m_cname);
					}
					rw.addCell(id, true, "center");
					rw.addCell(alnk);
					var sel_dv = ALib.m_document.createElement("div");
					sel_dv.innerHTML = "[open]";
					alib.dom.styleSet(sel_dv, "cursor", "pointer");
					sel_dv.m_cid = id;
					sel_dv.m_cname = unescape(name);;
					sel_dv.m_browseclass = this.m_browseclass;
					sel_dv.onclick = function()
					{
						loadObjectForm('customer', this.cid);
						//var params = 'top=200,left=100,width=800,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
						//window.open('/customer/edit_customer.awp?custid='+this.m_cid, 'cust_'+this.cid, params);
					}
					rw.addCell(sel_dv, true, "center");
					rw.addCell(unescape(phone));
					rw.addCell(unescape(email));
					rw.addCell(unescape(labels));
				}
				else if (child.m_name == "paginate")
				{
					var prev = child.getChildNodeValByName("prev");
					var next = child.getChildNodeValByName("next");
					var pag_str = child.getChildNodeValByName("pag_str");	
					
					var lbl = alib.dom.createElement("span", this.m_browseclass.pag_div);
					lbl.innerHTML = pag_str;

					if (prev || next)
					{
						var lbl = alib.dom.createElement("span", this.m_browseclass.pag_div);
						lbl.innerHTML = " | ";

						if (prev)
						{
							var lnk = alib.dom.createElement("span", this.m_browseclass.pag_div);
							lnk.innerHTML = "&laquo; previous";
							alib.dom.styleSet(lnk, "cursor", "pointer");
							lnk.start = prev;
							lnk.m_browseclass = this.m_browseclass;
							lnk.onclick = function()
							{
								this.m_browseclass.loadCustomers(this.start);
							}
						}

						if (next)
						{
							var lnk2 = alib.dom.createElement("span", this.m_browseclass.pag_div);
							lnk2.innerHTML = " next &raquo;";
							alib.dom.styleSet(lnk2, "cursor", "pointer");
							lnk2.start = next;
							lnk2.m_browseclass = this.m_browseclass;
							lnk2.onclick = function()
							{
								this.m_browseclass.loadCustomers(this.start);
							}
						}
					}
				}
			}
		}
		else
			this.m_browseclass.m_browsedv.innerHTML = " No records found.";
	};

	var url = "/customer/xml_get_customers.awp?fval=0";
	if (this.m_txtSearch.value && this.m_txtSearch.value != 'search here')
		url += "&search=" + escape(this.m_txtSearch.value);
	if (this.filterType)
		url += "&type_id=" + this.filterType;
	if (istart)
		url += "&start=" + istart;
	this.m_ajax.exec(url);
}

/****************************************************************************
*	
*	Class:		CWidgetBox
*
*	Purpose:	Used to contain widgets for home page and datacenter dashboard
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

g_CWidgetBoxId = 0;

function CWidgetBox(name, height, id)
{
	this.m_id = g_CWidgetBoxId;

	this.m_con = ALib.m_document.createElement("div");
	this.m_con.m_box = this;
	DragAndDrop.registerDropzone(this.m_con, name);
	if (height)
		alib.dom.styleSet(this.m_con, "height", height);
//	alib.dom.styleSet(this.m_con, "border-top", "5px solid transparent");
	alib.dom.styleSetClass(this.m_con, "CWidgetBoxDrSPOff");

	this.m_con.onDragEnter = function(e)
	{
		//alib.dom.styleSet(this, "border-top", "5px solid blue");
		alib.dom.styleSetClass(this, "CWidgetBoxDrSPOver");
	}

	this.m_con.onDragExit = function(e)
	{
		//alib.dom.styleSet(this, "border-top", "5px solid transparent");
		alib.dom.styleSetClass(this, "CWidgetBoxDrSPOff");
	}

	this.m_con.onDragDrop = function(e)
	{
		var orig_parent = e.root.parentNode;
		var new_parent = this.parentNode;

		if (orig_parent != this)
		{
			this.m_box.onBeforeMove(e, this);

			// Remove this child
			orig_parent.parentNode.removeChild(orig_parent);

			new_parent.insertBefore(orig_parent, this);

			this.m_box.onMoved(orig_parent);
		}

		alib.dom.styleSet(this, "border-top", "5px solid transparent");
	}

	this.onMoved = new Function();
	this.onBeforeMove = new Function();

	g_CWidgetBoxId++;
}

/*************************************************************************
*	Function:	getCon
*
*	Purpose:	Return container
**************************************************************************/
CWidgetBox.prototype.getCon = function()
{
	return this.m_con;
}

/**
 * Append this container to a dashboard column
 *
 * @param {DOMElement} e The containing element
 */
CWidgetBox.prototype.print = function(e)
{
	e.appendChild(this.m_con);
}

/**
 * Insert this widget before another widget
 */
CWidgetBox.prototype.printBefore = function(e, beforeme)
{
	e.insertBefore(this.m_con, beforeme);
}

/*======================================================================================
	
	Module:		CFlashObj

	Purpose:	Encapsulate the creation of flash ojbects for inclusion of swf media
				in ANT.

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Usage:		

======================================================================================*/
function CFlashObj(id_name, movie_src)
{
	this.m_objStr = "";
	this.m_embedAttrs = new Object();
	this.m_objAttrs = new Object();
	this.m_params = new Object();

	this.isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
	this.isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
	this.isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

	// Set defaults
	this.setAttribute("id", id_name);
	this.setAttribute("name", id_name);
	this.setAttribute("src", movie_src);
	this.setAttribute("movie", movie_src);
	this.setAttribute("classid", "clsid:166B1BCA-3F9C-11CF-8075-444553540000");
	this.setAttribute("codebase", "http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0");
	this.setAttribute("quality", "high");
	this.setAttribute("pluginspage", "http://www.adobe.com/go/getflashplayer");
	this.setAttribute("align", "middle");
	this.setAttribute("play", "true");
	this.setAttribute("loop", "true");
	this.setAttribute("scale", "showall");
	this.setAttribute("wmode", "window");
	this.setAttribute("devicefont", "false");
	this.setAttribute("bgcolor", "#ffffff");
	this.setAttribute("name", "window");
	this.setAttribute("menu", "true");
	this.setAttribute("allowFullScreen", "false");
	this.setAttribute("allowScriptAccess", "sameDomain");
	this.setAttribute("salign", "");
	this.setAttribute("width", "640");
	this.setAttribute("height", "480");
}

CFlashObj.prototype.generateObj = function(objAttrs, params, embedAttrs)
{
	var str = '';
	if (this.isIE && this.isWin && !this.isOpera)
	{
		str += '<object ';
		for (var i in objAttrs)
		{
			str += i + '="' + objAttrs[i] + '" ';
		}

		str += '>';
		for (var i in params)
		{
			str += '<param name="' + i + '" value="' + params[i] + '" /> ';
		}

		str += '</object>';
	}
	else
	{
		str += '<embed ';
		for (var i in embedAttrs)
		{
			str += i + '="' + embedAttrs[i] + '" ';
		}
		str += '> </embed>';
	}

	return str;
}

CFlashObj.prototype.getObjHtml = function()
{
	return this.generateObj(this.m_objAttrs, this.m_params, this.m_embedAttrs);
}

CFlashObj.prototype.setAttribute = function(name, value)
{
	var arg = name.toLowerCase();
	var ext = ".swf";
	var srcParamName = "src";
  
    switch (arg)
	{
	case "pluginspage":
		this.m_embedAttrs[arg] = value;
		break;
	case "src":
	case "movie":	
		value = AC_AddExtension(value, ext);
		this.m_embedAttrs["src"] = value;
		this.m_params[srcParamName] = value;
		break;
	case "onafterupdate":
	case "onbeforeupdate":
	case "onblur":
	case "oncellchange":
	case "onclick":
	case "ondblclick":
	case "ondrag":
	case "ondragend":
	case "ondragenter":
	case "ondragleave":
	case "ondragover":
	case "ondrop":
	case "onfinish":
	case "onfocus":
	case "onhelp":
	case "onmousedown":
	case "onmouseup":
	case "onmouseover":
	case "onmousemove":
	case "onmouseout":
	case "onkeypress":
	case "onkeydown":
	case "onkeyup":
	case "onload":
	case "onlosecapture":
	case "onpropertychange":
	case "onreadystatechange":
	case "onrowsdelete":
	case "onrowenter":
	case "onrowexit":
	case "onrowsinserted":
	case "onstart":
	case "onscroll":
	case "onbeforeeditfocus":
	case "onactivate":
	case "onbeforedeactivate":
	case "ondeactivate":
	case "type":
	case "codebase":
	case "id":
	case "classid":
		this.m_objAttrs[arg] = value;
	break;
	case "width":
	case "height":
	case "align":
	case "vspace": 
	case "hspace":
	case "class":
	case "title":
	case "accesskey":
	case "name":
	case "tabindex":
	case "type":
		this.m_embedAttrs[arg] = this.m_objAttrs[arg] = value;
		break;
	default:
		this.m_embedAttrs[arg] = this.m_params[arg] = value;
    }
}

//v1.7
// Flash Player Version Detection
// Detect Client Browser type
// Copyright 2005-2007 Adobe Systems Incorporated.  All rights reserved.
var isIE  = (navigator.appVersion.indexOf("MSIE") != -1) ? true : false;
var isWin = (navigator.appVersion.toLowerCase().indexOf("win") != -1) ? true : false;
var isOpera = (navigator.userAgent.indexOf("Opera") != -1) ? true : false;

function ControlVersion()
{
	var version;
	var axo;
	var e;

	// NOTE : new ActiveXObject(strFoo) throws an exception if strFoo isn't in the registry

	try {
		// version will be set for 7.X or greater players
		axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
		version = axo.GetVariable("$version");
	} catch (e) {
	}

	if (!version)
	{
		try {
			// version will be set for 6.X players only
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
			
			// installed player is some revision of 6.0
			// GetVariable("$version") crashes for versions 6.0.22 through 6.0.29,
			// so we have to be careful. 
			
			// default to the first public version
			version = "WIN 6,0,21,0";

			// throws if AllowScripAccess does not exist (introduced in 6.0r47)		
			axo.AllowScriptAccess = "always";

			// safe to call for 6.0r47 or greater
			version = axo.GetVariable("$version");

		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 4.X or 5.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = axo.GetVariable("$version");
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 3.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3");
			version = "WIN 3,0,18,0";
		} catch (e) {
		}
	}

	if (!version)
	{
		try {
			// version will be set for 2.X player
			axo = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
			version = "WIN 2,0,0,11";
		} catch (e) {
			version = -1;
		}
	}
	
	return version;
}

// JavaScript helper required to detect Flash Player PlugIn version information
function GetSwfVer()
{
	// NS/Opera version >= 3 check for Flash plugin in plugin array
	var flashVer = -1;
	
	if (navigator.plugins != null && navigator.plugins.length > 0) {
		if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) {
			var swVer2 = navigator.plugins["Shockwave Flash 2.0"] ? " 2.0" : "";
			var flashDescription = navigator.plugins["Shockwave Flash" + swVer2].description;
			var descArray = flashDescription.split(" ");
			var tempArrayMajor = descArray[2].split(".");			
			var versionMajor = tempArrayMajor[0];
			var versionMinor = tempArrayMajor[1];
			var versionRevision = descArray[3];
			if (versionRevision == "") {
				versionRevision = descArray[4];
			}
			if (versionRevision[0] == "d") {
				versionRevision = versionRevision.substring(1);
			} else if (versionRevision[0] == "r") {
				versionRevision = versionRevision.substring(1);
				if (versionRevision.indexOf("d") > 0) {
					versionRevision = versionRevision.substring(0, versionRevision.indexOf("d"));
				}
			}
			var flashVer = versionMajor + "." + versionMinor + "." + versionRevision;
		}
	}
	// MSN/WebTV 2.6 supports Flash 4
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") != -1) flashVer = 4;
	// WebTV 2.5 supports Flash 3
	else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") != -1) flashVer = 3;
	// older WebTV supports Flash 2
	else if (navigator.userAgent.toLowerCase().indexOf("webtv") != -1) flashVer = 2;
	else if ( isIE && isWin && !isOpera ) {
		flashVer = ControlVersion();
	}	
	return flashVer;
}

// When called with reqMajorVer, reqMinorVer, reqRevision returns true if that version or greater is available
function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision)
{
	versionStr = GetSwfVer();
	if (versionStr == -1 ) {
		return false;
	} else if (versionStr != 0) {
		if(isIE && isWin && !isOpera) {
			// Given "WIN 2,0,0,11"
			tempArray         = versionStr.split(" "); 	// ["WIN", "2,0,0,11"]
			tempString        = tempArray[1];			// "2,0,0,11"
			versionArray      = tempString.split(",");	// ['2', '0', '0', '11']
		} else {
			versionArray      = versionStr.split(".");
		}
		var versionMajor      = versionArray[0];
		var versionMinor      = versionArray[1];
		var versionRevision   = versionArray[2];

        	// is the major.revision >= requested major.revision AND the minor version >= requested minor
		if (versionMajor > parseFloat(reqMajorVer)) {
			return true;
		} else if (versionMajor == parseFloat(reqMajorVer)) {
			if (versionMinor > parseFloat(reqMinorVer))
				return true;
			else if (versionMinor == parseFloat(reqMinorVer)) {
				if (versionRevision >= parseFloat(reqRevision))
					return true;
			}
		}
		return false;
	}
}

function AC_AddExtension(src, ext)
{
  if (src.indexOf('?') != -1)
    return src.replace(/\?/, ext+'?'); 
  else
    return src + ext;
}

function AC_Generateobj(objAttrs, params, embedAttrs) 
{ 
  var str = '';
  if (isIE && isWin && !isOpera)
  {
    str += '<object ';
    for (var i in objAttrs)
    {
      str += i + '="' + objAttrs[i] + '" ';
    }
    str += '>';
    for (var i in params)
    {
      str += '<param name="' + i + '" value="' + params[i] + '" /> ';
    }
    str += '</object>';
  }
  else
  {
    str += '<embed ';
    for (var i in embedAttrs)
    {
      str += i + '="' + embedAttrs[i] + '" ';
    }
    str += '> </embed>';
  }

  document.write(str);
}

function AC_FL_RunContent(){
  var ret = 
    AC_GetArgs
    (  arguments, ".swf", "movie", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
     , "application/x-shockwave-flash"
    );
  AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_SW_RunContent(){
  var ret = 
    AC_GetArgs
    (  arguments, ".dcr", "src", "clsid:166B1BCA-3F9C-11CF-8075-444553540000"
     , null
    );
  AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs);
}

function AC_GetArgs(args, ext, srcParamName, classid, mimeType){
  var ret = new Object();
  ret.embedAttrs = new Object();
  ret.params = new Object();
  ret.objAttrs = new Object();
  
  for (var i=0; i < args.length; i=i+2)
  {
    var currArg = args[i].toLowerCase();    

    switch (currArg){	
      case "classid":
        break;
      case "pluginspage":
        ret.embedAttrs[args[i]] = args[i+1];
        break;
      case "src":
      case "movie":	
        args[i+1] = AC_AddExtension(args[i+1], ext);
        ret.embedAttrs["src"] = args[i+1];
        ret.params[srcParamName] = args[i+1];
        break;
      case "onafterupdate":
      case "onbeforeupdate":
      case "onblur":
      case "oncellchange":
      case "onclick":
      case "ondblclick":
      case "ondrag":
      case "ondragend":
      case "ondragenter":
      case "ondragleave":
      case "ondragover":
      case "ondrop":
      case "onfinish":
      case "onfocus":
      case "onhelp":
      case "onmousedown":
      case "onmouseup":
      case "onmouseover":
      case "onmousemove":
      case "onmouseout":
      case "onkeypress":
      case "onkeydown":
      case "onkeyup":
      case "onload":
      case "onlosecapture":
      case "onpropertychange":
      case "onreadystatechange":
      case "onrowsdelete":
      case "onrowenter":
      case "onrowexit":
      case "onrowsinserted":
      case "onstart":
      case "onscroll":
      case "onbeforeeditfocus":
      case "onactivate":
      case "onbeforedeactivate":
      case "ondeactivate":
      case "type":
      case "codebase":
      case "id":
        ret.objAttrs[args[i]] = args[i+1];
        break;
      case "width":
      case "height":
      case "align":
      case "vspace": 
      case "hspace":
      case "class":
      case "title":
      case "accesskey":
      case "name":
      case "tabindex":
        ret.embedAttrs[args[i]] = ret.objAttrs[args[i]] = args[i+1];
        break;
      default:
        ret.embedAttrs[args[i]] = ret.params[args[i]] = args[i+1];
    }
  }
  ret.objAttrs["classid"] = classid;
  if (mimeType) ret.embedAttrs["type"] = mimeType;
  return ret;
}


/*======================================================================================
	
	Module:		CVideoPlayer

	Purpose:	Handle playing video files from AntFs

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Deps:		/lib/js/CFlashObj.js

	Usage:		

======================================================================================*/

function CVideoPlayer(fid, width, height, play)
{
	var flash = new CFlashObj("tutorial", "/flash/video_player");
	flash.setAttribute("FlashVars", "fwdFileId="+fid+((play)?"&fwdPlay=1":"&fwdPlay=0"));
	flash.setAttribute("width", width);
	flash.setAttribute("height", height);
	this.m_flash = flash;
}

CVideoPlayer.prototype.getObjHtml = function()
{
	return this.m_flash.getObjHtml();
}

/****************************************************************************
*	
*	Class:		CUserBrowser
*
*	Purpose:	Browser to select users within the page (no popup)
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2010 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/
function CUserBrowser()
{
	this.title = "Select User";		// Customize the title
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Display a user browser
**************************************************************************/
CUserBrowser.prototype.showDialog = function()
{
	var dlg = new CDialog(this.title);
	this.m_dlg = dlg;
	dlg.f_close = true;

    var dv = alib.dom.createElement("div");
    
    var divWidth = 300;    
	// Search Bar
	var divSearch = alib.dom.createElement("div", dv);    
	var spanLbl = alib.dom.createElement("span", divSearch);
	spanLbl.innerHTML = "Find: ";
    
    // span container
    var spanContainer = alib.dom.createElement("span", divSearch);
    spanContainer.className = "clearIcon";
    
    // text search
    this.m_txtSearch = createInputAttribute(alib.dom.createElement("input", spanContainer), "text");
    if (this.inline)
        alib.dom.styleAddClass(this.m_txtSearch, "small");
    alib.dom.styleSet(this.m_txtSearch, "width", divWidth + "px");    
    alib.dom.styleSet(this.m_txtSearch, "paddingRight", "25px");        
    
    // span icon
    var spanIcon = alib.dom.createElement("span", spanContainer);
    spanIcon.className = "deleteicon";
    alib.dom.styleSet(spanIcon, "visibility", "hidden");
	
    // span icon onclick
    spanIcon.cls = this;            
    spanIcon.divWidth = divWidth;
    spanIcon.m_txtSearch = this.m_txtSearch;
    spanIcon.onclick = function()
    {
        this.m_txtSearch.value = "";
        this.m_txtSearch.focus();
        alib.dom.styleSet(this, "visibility", "hidden");
        this.cls.loadUsers();
    }
	
    // text search
    this.m_txtSearch.m_cls = this;
    this.m_txtSearch.spanIcon = spanIcon;
    this.m_txtSearch.onkeyup = function(e)
    {
        if (typeof e == 'undefined') 
        {
            if (ALib.m_evwnd)
                e = ALib.m_evwnd.event;
            else
                e = window.event;
        }

        if (typeof e.keyCode != "undefined")
            var code = e.keyCode;
        else
            var code = e.which;

        if (code == 13) // keycode for a return
        {
            this.m_cls.loadUsers();
        }
        
        // display the span icon
        if(this.m_cls.m_txtSearch.value.length > 0)                        
            alib.dom.styleSet(this.spanIcon, "visibility", "visible");
        else
            alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
    }
    
	var btn = new CButton("Search", function(cls) {  cls.loadUsers(); }, [this]);
    alib.dom.styleSet(btn.m_main, "marginLeft", "10px");    
	btn.print(divSearch);
	
	// Pagination and add
	this.pag_div = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.pag_div, "margin-bottom", "3px");
	alib.dom.styleSet(this.pag_div, "text-align", "right");
	this.pag_div.innerHTML = "Page 1 of 1";

	// Results
	this.m_browsedv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.m_browsedv, "height", "350px");
	alib.dom.styleSet(this.m_browsedv, "border", "1px solid");
	//alib.dom.styleSet(this.m_browsedv, "background-color", "white");
	alib.dom.styleSet(this.m_browsedv, "overflow", "auto");
	this.m_browsedv.innerHTML = "<div style='margin:10px;vertical-align:middle;'><span class='loading'></span></div>";
	
	dlg.customDialog(dv, 600, 410);

	// Load users
	this.loadUsers();
}

/*************************************************************************
*	Function:	select
*
*	Purpose:	Internal function to select a user then fire pubic onselect
**************************************************************************/
CUserBrowser.prototype.select = function(cid, name)
{
	this.m_dlg.hide();
	this.onSelect(cid, name);
}


/*************************************************************************
*	Function:	onSelect
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CUserBrowser.prototype.onSelect = function(cid, name)
{
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CUserBrowser.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	loadUsers
*
*	Purpose:	Load users
**************************************************************************/
CUserBrowser.prototype.loadUsers = function(start)
{
    var istart = (typeof start != "undefined") ? start : 0;
    this.m_browsedv.innerHTML = "<div class='loading'></div>";
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;    
    ajax.cbData.con = this.m_browsedv;
    ajax.onload = function(ret)
    {
        if(!ret)
        {
            this.cbData.con.innerHTML = " No records found.";
            return;
        }
        
        if (ret)
        {
            this.cbData.con.innerHTML = "";
            this.cbData.cls.pag_div.innerHTML = "";

            this.cbData.cls.m_doctbl = new CToolTable("100%");
            var tbl = this.cbData.cls.m_doctbl;
            tbl.print(this.cbData.con);

            tbl.addHeader("ID");
            tbl.addHeader("Name");
            tbl.addHeader("Title");
            tbl.addHeader("Team");
            for(user in ret)
            {                
                var currentUser = ret[user].details;
                var rw = tbl.addRow();
                
                if(!currentUser)
                    continue;
                
                var id = currentUser.id;
                var title = currentUser.title;
                var teamName = currentUser.teamName;
                var name = currentUser.fullName;                
                
                if (!name)
                    name = "untitled";
                
                var linkData = [["href", "javascript:void(0);"], ["innerHTML", name]];
                var nameLink = alib.dom.setElementAttr(alib.dom.createElement("a"), linkData);                
                nameLink.id = id;
                nameLink.name = name;
                nameLink.cls = this.cbData.cls;
                nameLink.onclick = function()
                {
                    this.cls.select(this.id, this.name);
                }
                rw.addCell(id, true, "center");
                rw.addCell(nameLink);
                rw.addCell(title);
                rw.addCell(teamName);
            }
            
            if(ret.paginate)
            {
                var prev = ret.paginate.prev;
                var next = ret.paginate.next;
                var pagStr = ret.paginate.pag_str;
                
                var lbl = alib.dom.createElement("span", this.cbData.cls.pag_div);
                lbl.innerHTML = pagStr;
                
                if (prev || next)
                {
                    var lbl = alib.dom.createElement("span", this.cbData.cls.pag_div);
                    lbl.innerHTML = " | ";

                    if (prev !== null)
                    {
                        var prevLink = alib.dom.createElement("span", this.cbData.cls.pag_div);
                        prevLink.innerHTML = "&laquo; previous";
                        alib.dom.styleSet(prevLink, "cursor", "pointer");
                        prevLink.start = prev;
                        prevLink.cls = this.cbData.cls;
                        prevLink.onclick = function()
                        {
                            this.cls.loadUsers(this.start);
                        }
                    }

                    if (next !== null)
                    {
                        var nextLink = alib.dom.createElement("span", this.cbData.cls.pag_div);
                        nextLink.innerHTML = " next &raquo;";
                        alib.dom.styleSet(nextLink, "cursor", "pointer");
                        nextLink.start = next;
                        nextLink.cls = this.cbData.cls;
                        nextLink.onclick = function()
                        {
                            this.cls.loadUsers(this.start);
                        }
                    }
                }
            }
        }
        else
            this.cbData.con.innerHTML = " No records found.";
    };
    var args = new Array();
    if (this.m_txtSearch.value && this.m_txtSearch.value != 'search here')
        args[args.length] = ['search', escape(this.m_txtSearch.value)];
    if (istart)
        args[args.length] = ['start', istart];
    
    ajax.exec("/controller/User/getUsers", args);
}

/****************************************************************************
*	
*	Class:		CActivity
*
*	Purpose:	Activity editor/viewer
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2009 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/

function CActivity(activity_id, association, obj_reference)
{
	this.m_aid = (activity_id) ? activity_id : null;
	this.mainObject = new CAntObject("activity", activity_id);
	this.association = (association) ? association : ""; // var can be used to forward association "obj_type:object_id"
	if (obj_reference)
		this.mainObject.setValue("obj_reference", obj_reference);


	this.type_id = null;;		// Set the initial type
	// Record unique ids, at least one of these must be set
	this.customer_id = null;	// Customer id
	this.lead_id = null;		// Lead id
	this.opportunity_id = null;	// Opportunity id
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Public functin for building interface.
**************************************************************************/
CActivity.prototype.showDialog = function()
{
	this.buildInterface();
}

/*************************************************************************
*	Function:	buildInterface
*
*	Purpose:	Display activity interface
**************************************************************************/
CActivity.prototype.buildInterface = function(loaded)
{
	var obj_loaded = (loaded) ? true : false;

	if (this.m_aid && !obj_loaded)
	{
		this.mainObject.actObj = this;
		this.mainObject.onload = function() { this.actObj.buildInterface(true); };
		this.mainObject.load();
		return;
	}

	var f_readonly = (this.mainObject.getValue("f_readonly")) ? true : false;

	// Title
	if (this.m_aid)
	{
		this.title = "Edit/View Activity";
	}
	else
	{
		this.title = "Enter New Activity";
	}

	var dlg = new CDialog(this.title);
	this.m_dlg = dlg;

	var dv = alib.dom.createElement("div");
	this.m_maindiv = dv;
	dv.innerHTML = "";

	dlg.customDialog(dv, 600, 420);

	var dv_content = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_content, "overflow", "auto");
	alib.dom.styleSet(dv_content, "height", "390px");

	var tbl = alib.dom.createElement("table", dv_content);
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.cellPadding='0';
	tbl.cellSpacing='3';
	var tbody = alib.dom.createElement("tbody", tbl);

	// Subject
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Subject:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	td_inp.colSpan = 3;
	if (f_readonly)
		td_inp.innerHTML = this.mainObject.getValue("name");
	else
		this.mainObject.fieldGetValueInput(td_inp, "name");

	// Type
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Type:";
	// Input
	this.dvSelCon = alib.dom.createElement("td", row);
	if (f_readonly)
		this.dvSelCon.innerHTML = this.mainObject.getValueName("type_id");
	else
		this.mainObject.fieldGetValueInput(this.dvSelCon, "type_id", {filter:["obj_type", ""]});

	// Direction
	// -----------------------------------------------
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Direction:";
	// Input
	this.dvDirCon = alib.dom.createElement("td", row);
	if (f_readonly)
		this.dvDirCon.innerHTML = this.mainObject.getValueName("direction");
	else
		this.mainObject.fieldGetValueInput(this.dvDirCon, "direction");

	// Type
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "When:";
	// Input
	this.dvWhenCon = alib.dom.createElement("td", row);
	this.dvWhenCon.colSpan = 3;
	if (f_readonly)
		this.dvWhenCon.innerHTML = this.mainObject.getValue("ts_entered");
	else
		this.mainObject.fieldGetValueInput(this.dvWhenCon, "ts_entered");

	// Associations
	// -----------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td_lbl = alib.dom.createElement("td", row);
	td_lbl.vAlign = "top";
	alib.dom.styleSetClass(td_lbl, "formLabel");
	alib.dom.styleSet(td_lbl, "width", "55px");
	td_lbl.innerHTML = "Associations:";
	// Input
	var td_inp = alib.dom.createElement("td", row);
	td_inp.colSpan = 3;
	//var assc_str = "";
	if (this.association)
	{
		this.mainObject.setMultiValue("associations", this.association);
		//assc_str = this.mainObject.setMultiValue("associations", this.association);
		//assc_str = this.association;
	}
	/*
	if (assc_str) assc_str += "; ";
	assc_str += this.mainObject.getMultiValueStr("associations");
	td_inp.innerHTML = assc_str;
	*/
	var vals = this.mainObject.getMultiValues("associations");
	for (var m = 0; m < vals.length; m++)
	{
		var parts =  vals[m].split(":");
		if (parts.length == 2)
		{
			//var lbl_parts = objectSplitLbl(this.mainObject.getValueName("associations", vals[m]));

			if (m)
			{
				var sp = alib.dom.createElement("span", td_inp);
				sp.innerHTML = "; ";
			}

			var assoc_con = alib.dom.createElement("span", td_inp);
			//assoc_con.innerHTML = lbl_parts.typeTitle + ": ";

			var a = alib.dom.createElement("a", assoc_con);
			a.obj_type = parts[0];
			a.oid = parts[1];
			a.href = "javascript:void(0)";
			a.innerHTML = this.mainObject.getValueName("associations", vals[m]); //lbl_parts.objTitle;
			a.onclick = function() { loadObjectForm(this.obj_type, this.oid); };
		}
	}

	// Notes
	// -----------------------------------------------
	var ndiv = alib.dom.createElement("div", dv_content);
	alib.dom.styleSet(ndiv, "margin-right", "5px");
	alib.dom.styleSet(ndiv, "border", "0");
	if (f_readonly)
	{
		var val = this.mainObject.getValue("notes");
		var re = new RegExp ("\n", 'gi') ;
		ndiv.innerHTML = "<div class='formLabel' style='margin-left:3px;'>Details/Notes:</div><div style='margin:5px;'>"+val.replace(re, "<br />")+"</div>";
	}
	else
	{
		this.mainObject.fieldGetValueInput(ndiv, "notes", {multiLine:true, height:"300px", width:"100%"});
	}

	// Comments
	// -----------------------------------------------
	if (this.m_aid)
	{
		var lbl = alib.dom.createElement("div", dv_content);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = "Comments:";
		var ob = new CAntObjectBrowser("comment");
		ob.setFilter("associations", "activity:"+this.m_aid);
		ob.printComments(dv_content, "activity:"+this.m_aid);
	}

	// Buttons
	// -----------------------------------------------
	var dv_btn = alib.dom.createElement("div", dv);
	var me = this;

	if (f_readonly)
	{
		var btn = new CButton("Close", function(dlg) {  dlg.hide(); }, [me.m_dlg]);
		btn.print(dv_btn);
	}
	else
	{
        var btn = alib.ui.Button("Save &amp; Close", 
                    {
                        className:"b2", cls:me, dlg:me.m_dlg,
                        onclick:function() 
                        {
                            this.cls.save();
                            this.dlg.hide();
                        }
                    });
        this.btnSave = btn.getButton();
        dv_btn.appendChild(this.btnSave);
        
        var btn = alib.ui.Button("Cancel", 
                    {
                        className:"b1", dlg:me.m_dlg,
                        onclick:function() 
                        {
                            this.dlg.hide();
                        }
                    });
        dv_btn.appendChild(btn.getButton());
	}
}

/*************************************************************************
*	Function:	save
*
*	Purpose:	Save changes or new activity to database
**************************************************************************/
CActivity.prototype.save = function()
{
	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);

	if (!this.mainObject.id && Ant)
	{
		this.mainObject.setValue("user_id", Ant.user.id);
	}

	this.mainObject.actObj = this;
	this.mainObject.dlgSaving = dlg;
	this.mainObject.dlgForm = this.m_dlg;
	this.mainObject.onsave = function() { this.dlgForm.hide(); this.dlgSaving.hide(); this.actObj.onSave(); }
	this.mainObject.save();
}

/*************************************************************************
*	Function:	onSave
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CActivity.prototype.onSave = function(aid)
{
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CActivity.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	getActivityTypes
*
*	Purpose:	Get activity types via AJAX
**************************************************************************/
CActivity.prototype.getActivityTypes = function()
{
	/*var funct = function(ret,cls)
	{
		if (ret)
		{			
			if (ret.length)
			{
				for(types in ret)
                {
                    var currentType = ret[types];
					cls.selTypes[cls.selTypes.length] = new Option(currentType.name, currentType.id, false, (cls.type_id==currentType.id)?true:false);
				}
			}
		}
	}
	var me = this;	
    var xmlrpc = new CAjaxRpc("/controller/Object/getActivityTypes", "getActivityTypes", null, funct, [me], AJAX_POST, true, "json");    */
    
    ajax = new CAjax('json');
    ajax.cbData.cls = me;
    ajax.onload = function(ret)
    {
        if (ret)
        {            
            if (ret.length)
            {
                for(types in ret)
                {
                    var currentType = ret[types];
                    this.cbData.cls.selTypes[this.cbData.cls.selTypes.length] = new Option(currentType.name, currentType.id, false, (this.cbData.cls.type_id==currentType.id)?true:false);
                }
            }
        }
    };
    ajax.exec("/controller/Object/getActivityTypes");
}


function contactOpen(cid, cbonsave, assoc)
{
	var params = 'top=200,left=100,width=850,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? cbonsave : '';
	var url = "/contacts/edit_contact.awp?new_win=1";
	if (cid)
		url += "&cid="+cid;
	if (cbonsave)
		url += "&cbonsave="+cbonsave;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open(url, 'contact_'+cid, params);
}

/****************************************************************************
*	
*	Class:		CProjectStart
*
*	Purpose:	Dialog to start a new project
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2009 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/

function CProjectStart()
{
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Public functin for building interface.
**************************************************************************/
CProjectStart.prototype.showDialog = function()
{
	this.buildInterface();
}

/*************************************************************************
*	Function:	buildInterface
*
*	Purpose:	Display activity interface
**************************************************************************/
CProjectStart.prototype.buildInterface = function()
{
	// Create loader callback
	var okfunct = function(dlg, cls, inp_name, sel_templates, inp_date_start, inp_date_deadline)
	{
        ajax = new CAjax('json');
        ajax.cbData.cls = cls;
        ajax.cbData.dlg = dlg;
        ajax.onload = function(ret)
        {
            this.cbData.dlg.hide();
            if (!ret['error'])
                this.cbData.cls.onSave(ret);
            else
                this.cbData.cls.onSaveError();
        };
        ajax.exec("/controller/Project/createProject",
                    [["name", inp_name.value], ["template_id", sel_templates.value], ["date_deadline", inp_date_deadline.value], ["date_started", inp_date_start.value]]);
	}

	var dlg = new CDialog("Create New Project");
	dlg.f_close = true;
	var dv = alib.dom.createElement("div");

	// Name
	var dv_hdr= alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(dv_hdr, "headerTwo");
	alib.dom.styleSet(dv_hdr, "margin-top", "5px");
	dv_hdr.innerHTML = "Project Name (required)";
	var dv_inp = alib.dom.createElement("div", dv);
	var inp_name = alib.dom.createElement("input", dv_inp);
	alib.dom.styleSet(inp_name, "width", "98%");

	// Template
	var dv_hdr= alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(dv_hdr, "headerTwo");
	alib.dom.styleSet(dv_hdr, "margin-top", "5px");
	dv_hdr.innerHTML = "Use Template";
	var dv_inp = alib.dom.createElement("div", dv);
	var sel_templates = alib.dom.createElement("select", dv_inp);
	sel_templates.dlgField = true; // selects are hidden by the dlg class - unhide
	sel_templates[sel_templates.length] = new Option("None", "", false, true);
	this.getTemplates(sel_templates);

	// Date Start
	var dv_hdr= alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(dv_hdr, "headerTwo");
	alib.dom.styleSet(dv_hdr, "margin-top", "5px");
	dv_hdr.innerHTML = "Start Date (required)";
	var dv_inp = alib.dom.createElement("div", dv);
	var inp_date_start = alib.dom.createElement("input", dv_inp);
	alib.dom.styleSet(inp_date_start, "width", "100px");
	var currentTime = new Date();
	inp_date_start.value = (currentTime.getMonth() + 1)+"/"+currentTime.getDate()+"/"+currentTime.getFullYear();

	// Date Deadline
	var dv_hdr= alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(dv_hdr, "headerTwo");
	alib.dom.styleSet(dv_hdr, "margin-top", "5px");
	dv_hdr.innerHTML = "Deadline (optional - if blank then project will be ongoing)";
	var dv_inp = alib.dom.createElement("div", dv);
	var inp_date_deadline = alib.dom.createElement("input", dv_inp);
	alib.dom.styleSet(inp_date_deadline, "width", "100px");

	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");
	var btn = new CButton("Continue", okfunct, [dlg, this, inp_name, sel_templates, inp_date_start, inp_date_deadline], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [dlg]);
	btn.print(dv_btn);

	dlg.customDialog(dv, 450);
}

/*************************************************************************
*	Function:	save
*
*	Purpose:	Save changes or new activity to database
**************************************************************************/
CProjectStart.prototype.save = function()
{
	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Creating project, please wait...";
	dlg.statusDialog(dv_load, 150, 100);
}

/*************************************************************************
*	Function:	onSave
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CProjectStart.prototype.onSave = function(pid)
{
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CProjectStart.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	getActivityTypes
*
*	Purpose:	Get activity types via AJAX
**************************************************************************/
CProjectStart.prototype.getTemplates = function(selTemplates)
{
    ajax = new CAjax('json');    
    ajax.cbData.selTemplates = selTemplates;
    ajax.onload = function(ret)
    {
        if (ret.length)
        {            
            for(template in ret)
            {
                var currentTemplate = ret[template];
                this.cbData.selTemplates[this.cbData.selTemplates.length] = new Option(currentTemplate.name, currentTemplate.id, false, false);
            }
        }
    };
    ajax.exec("/controller/Project/getTemplates");
}

var CUST_TYPE_CONTACT = 1;
var CUST_TYPE_ACCOUNT = 2;

var g_custnewwin = 0;
function custOpen(cid, cbonsave, assoc)
{
	loadObjectForm("customer", cid, null, null, assoc);
	/*
	var params = 'top=200,left=100,width=850,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? cbonsave : '';
	var url = "/obj/customer";
	if (cid)
		url += "/"+cid;
	if (cbonsave)
		url += "&cbonsave="+cbonsave;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	var wndname = (cid) ? cid : g_custnewwin++;

	window.open(url, 'cust_'+wndname, params);
	*/
}

function custOppOpen(id, cid, assoc)
{
	loadObjectForm("opportunity", cid, null, null, assoc);
	/*
	var url_vars = "fval=0";
	if (id)
		url_vars += id;
	//if (cid)
		//url_vars += '&custid='+cid;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url_vars += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open('/obj/opportunity'+url_vars, 'opp_'+id, 'width=750,height=550,toolbar=no,scrollbars=yes');
	*/
}

function custInvOpen(id, assoc)
{
	var url_vars = "";
	if (id)
		url_vars += 'invid='+id;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url_vars += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open('/customer/invoice.php?'+url_vars, 'inv_'+id, 'width=750,height=550,toolbar=no,scrollbars=yes');
}

function custEmailOpen(mid)
{
	window.open('/email/message_view.awp?new_win=1&mid='+mid, 'msg_'+mid, 'width=750,height=550,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes');
}

function custLeadOpen(lid, cbonsave, assoc)
{
	var url = "/customer/lead_edit.php?new_win=1";
	if (lid)
		url += "&lid="+lid;
	if (cbonsave)
		url += "&cbonsave="+cbonsave;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open(url, 'lead_'+lid, 'width=648,height=600,toolbar=no');
}

var g_evid = 0;

function calEventOpen(eid, cbonsave, assoc, newwin)
{
	var params = 'width=1080,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? Base64.encode(unescape(cbonsave)) : '';
	var wndid = (eid) ? eid : g_evid++;
	var newwin = (typeof newwin != "undefined") ? newwin : true;
	var url = '/obj/calendar_event?cbonsave='+onsave;

	if (eid)
		url += "&oid="+eid;
        
	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	if (newwin)
		window.open(url, 'event_'+wndid, params);
	else
		document.location = url;
	
	/*
	var params = 'width=800,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? Base64.encode(unescape(cbonsave)) : '';
	var wndid = (eid) ? eid : g_evid++;
	var newwin = (typeof newwin != "undefined") ? newwin : true;
	var url = '/calendar/event?cbonsave='+onsave;

	if (eid)
		url += "&eid="+eid;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	if (newwin)
		window.open(url, 'event_'+wndid, params);
	else
		document.location = url;
		*/
}

function calEventCoordOpen(ecid, cbonsave, assoc)
{
	var params = 'width=800,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? Base64.encode(unescape(cbonsave)) : '';
	var wndid = (ecid) ? ecid : g_evid++;
    //var url = '/calendar/event_coord.php?cbonsave='+onsave;
	var url = '/obj/calendar_event_proposal';

	if (ecid)
		url += "&ecid="+ecid;

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open(url, 'eventcooord_'+wndid, params);
}

function calGetMonthName(month_number)
{
	var mn=['January','February','March','April','May','June','July','August','September','October','November','December'];
	if (month_number && month_number <= 12)
		return mn[month_number-1];
	else
		return -1;
}

function calGetMonthNumDays(year, month)
{
	var oD = new Date(year, month-1, 1); //DD replaced line to fix date bug when current day is 31st
	oD.od=oD.getDay()+1; //DD replaced line to fix date bug when current day is 31st

	var dim=[31,0,31,30,31,30,31,31,30,31,30,31]; // Dumber of days in each month
	// Handle number of days in february
	dim[1]=(((oD.getFullYear()%100!=0)&&(oD.getFullYear()%4==0))||(oD.getFullYear()%400==0))?29:28;

	return dim[month-1];
}

/*****************************************************************************
* Function:		calGetWeekStartDate
*
* Purpose:		Get the starting day for the current week
*****************************************************************************/
function calGetWeekStartDate(year, month, day) 
{
	var od=new Date(year, month-1, day);
	var weekday = od.getDay();

	if (weekday)
	{
		od = calDateAddSubtract(od, "day", -weekday);
	}

	return od;
}

/*****************************************************************************
* Function:		calDateAddSubtract
*
* Purpose:		Add or subtract a given number of days,weeks,months,years
*****************************************************************************/
function calDateAddSubtract(od, unit, interval) 
{
	var dte = new Date(od);
	switch (unit)
	{
	case "minute":
		//var dinc=60*1000;  //1 day in milisec
		var tm=dte.getTime();  //milliseconds, 0=January 1, 1970
		tm = tm+(dinc*interval);
		dte.setMinutes(od.getMinutes()+interval);
		break;
	case "hour":
		//var dinc=3600*1000;  //1 day in milisec
		var tm=dte.getTime();  //milliseconds, 0=January 1, 1970
		tm = tm+(dinc*interval);
		dte.setTime(tm);
		break;
	case "day":
		var dinc=3600*24*1000;  //1 day in milisec
		dte.setDate(od.getDate()+interval);
		break;
	case "month":
		if (interval == 1)
		{
			var thisMonth = dte.getMonth();
			dte.setMonth(thisMonth+1);
			if(dte.getMonth() != thisMonth+1 && dte.getMonth() != 0)
				dte.setDate(0)
		}
		else if (interval == -1)
		{
			var thisMonth = dte.getMonth();
			dte.setMonth(thisMonth-1);
			if (dte.getMonth() != thisMonth-1 && (dte.getMonth() != 11 || (thisMonth == 11 && dte.getDate() == 1)))
				dte.setDate(0);
		}
		break;
	}

	
	return dte;
}


/*****************************************************************************
* Function:		calDaysBetweenDates
*
* Purpose:		Get the number of days between two dates
*****************************************************************************/
function calDaysBetweenDates(date1, date2) 
{
    // The number of milliseconds in one day
    var ONE_DAY = 1000 * 60 * 60 * 24

    // Convert both dates to milliseconds
    var date1_ms = date1.getTime()
    var date2_ms = date2.getTime()

    // Calculate the difference in milliseconds
    var difference_ms = Math.abs(date1_ms - date2_ms)
    
    // Convert back to days and return
    return Math.round(difference_ms/ONE_DAY)
}

/*****************************************************************************
* Function:		calGetClockTime
*
* Purpose:		Get the time in a date as HH:MM AM/PM
*****************************************************************************/
function calGetClockTime(now)
{
   var hour   = now.getHours();
   var minute = now.getMinutes();
   var second = now.getSeconds();
   var ap = "AM";
   if (hour   > 11) { ap = "PM";             }
   if (hour   > 12) { hour = hour - 12;      }
   if (hour   == 0) { hour = 12;             }
   if (hour   < 10) { hour   = "0" + hour;   }
   if (minute < 10) { minute = "0" + minute; }
   if (second < 10) { second = "0" + second; }
   var timeString = hour +
					':' +
					minute +
					" " +
					ap;
   return timeString;
}

var G_PROJ_NEWWIN_ID = 1;

function projTaskOpen(eid, onsave, assoc)
{
	var attribs = "top=200,left=100,width=620,height=550,toolbar=no,menubar=no,scrollbars=no,location=no,directories=no,status=no,resizable=no";
	var name = (tid) ? "task_"+tid : "task_new_"+G_PROJ_NEWWIN_ID;
	//var savefunc = (onsave) ? "&cbonsave="+escape(onsave) : "";
	var savefunc = (onsave) ? Base64.encode(unescape(onsave)) : '';
	var tid = (eid) ? eid : '';
	var other = ''; //(other_get) ? other_get : '';
	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			other += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open('/project/task_edit.awp?onexit='+escape("window.close();")+"&cbonsave="+savefunc+"&eid="+tid+other, name, attribs);

	G_PROJ_NEWWIN_ID++;
}

function projOpen(eid, onsave, assoc)
{
	var attribs = "width=800,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes";
	var name = (tid) ? "proj_"+tid : "proj_new_"+G_PROJ_NEWWIN_ID;
	var savefunc = (onsave) ? "&cbonsave="+escape(onsave) : "";
	var tid = (eid) ? eid : '';
	var other = ''; //(other_get) ? other_get : '';
	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			other += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

    if (eid)
	    window.open('/project/project.awp?new_win=1&onexit='+escape("window.close();")+savefunc+"&pid="+tid+other, name, attribs);
    else
	    window.open('/project/project_add.awp?new_win=1&onexit='+escape("window.close();")+savefunc+"&pid="+tid+other, name, attribs);

	G_PROJ_NEWWIN_ID++;
}

function projTicketOpen(eid, onsave, assoc)
{
	/*
	var attribs = "top=200,left=100,width=620,height=550,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes";
	var name = (tid) ? "ticket_"+tid : "ticket_new_"+G_PROJ_NEWWIN_ID;
	var savefunc = (onsave) ? "&cbonsave="+escape(onsave) : "";
	var tid = (eid) ? eid : '';
	var other = ''; //(other_get) ? other_get : '';
	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			other += "&" + assoc[i][0] + "=" + assoc[i][1];
		}
	}

	window.open('/project/quality_edit.awp?new_win=1&onexit='+escape("window.close();")+savefunc+"&bugid="+tid+other, name, attribs);

	G_PROJ_NEWWIN_ID++;
	*/
	loadObjectForm("case", eid, null, null, assoc);
}

var g_email_cmpid=1;

function emailComposeOpen(cbonsave, assoc)
{
	var params = 'width=780,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var onsave = (cbonsave) ? Base64.encode(cbonsave) : '';
	g_email_cmpid++;
	//var url = '/email/compose.awp?new_win=1&cbonsave='+onsave;
    var url = '/obj/email_message';

	if (assoc)
	{
		for (var i = 0; i < assoc.length; i++) 
		{
			url += (i == 0) ? "?" : "&";
			url += assoc[i][0] + "=" + escape(assoc[i][1]);
		}
	}

	var cmp = window.open(url, null, params);
}

/**
 * @depricated No longer referenced anywhere
function emailInvCalAccept(share_id, conid)
{
	if (typeof conid == "string")
		conid = document.getElementById(conid);
    
    ajax = new CAjax('json');
    ajax.conid = conid;
    ajax.onload = function(ret)
    {
        this.conid.innerHTML = "Invitation Accepted. Open the calendar application to view this calendar.";
    };
    ajax.exec("/controller/Email/acceptCalShare", 
                [["share_id", share_id]]);
}
 */

/**
 * @depricated No longer referenced anywhere
function emailInvConGrpAccept(share_id, conid)
{
	if (typeof conid == "string")
		conid = document.getElementById(conid);
    
    ajax = new CAjax('json');
    ajax.conid = conid;
    ajax.onload = function(ret)
    {
        this.conid.innerHTML = "Invitation Accepted. Open the contacts application to view this group.";   
    };
    ajax.exec("/controller/Email/acceptCongrpShare", 
                [["share_id", share_id]]);
}
 */

/**
 * @depricated Use emailAssocObj
function emailAssocCustomer(mid)
{
	var cbrowser = new CCustomerBrowser();
	cbrowser.onSelect = function(cid, name) 
	{
        ajax = new CAjax('json');        
        ajax.name = name;
        ajax.onload = function(ret)
        {
            ALib.statusShowAlert("Email Activity Created For " + this.name, 3000, "bottom", "right");
        };
        ajax.exec("/controller/Email/assocWithCust", 
                    [["mid", mid], ["custid", cid]]);
	}
	cbrowser.showDialog();
}
 */ 

/**
 * Used by the email loader to associate any object with the message
 *
 * TODO: we may want to make this more generic in the CAntObject class
 *
 * @param {int} mid The object id
 * @param {string} obj_type The object type name to associate with
 */
function emailAssocObj(mid, obj_type)
{
	var cbrowser = new AntObjectBrowser(obj_type);
	cbrowser.cbData.emailId = mid;
	cbrowser.cbData.assocWithOtype = obj_type;
	cbrowser.onSelect = function(oid) 
	{
        ajax = new CAjax('json');        
        ajax.onload = function(ret)
        {
            ALib.statusShowAlert("Email Activity Created ", 3000, "bottom", "right");
        };
        ajax.exec("/controller/Email/assocWithObj", 
                    [["mid", this.cbData.emailId], ["object_id", oid], ["obj_type", this.cbData.assocWithOtype]]);
	}
	cbrowser.displaySelect();
}

function emailListFormatTimeDel(timeEnteredStr)
{
	var parts = timeEnteredStr.split("-");
	if (parts.length>1)
		timeEnteredStr = parts[0];

	var parts = timeEnteredStr.split(" ");
	if (parts.length>1)
		timeEnteredStr = parts[0];

	try
	{
		/*
		var time = new Date(timeEnteredStr);
		var today = new Date();
		timeEnteredStr = "";
		timeEnteredStr = time.getMonth()+1;
		timeEnteredStr += "/"+time.getDate();
		timeEnteredStr += "/"+time.getFullYear();

		if (today.getMonth() == time.getMonth() && today.getDay() == time.getDate() && today.getFullYear() == time.getFullYear())
		{
			// If today then display time
		}
		else
		{
			// Display date
		}
		*/

	}
	catch (e)
	{
		//ALib.m_debug = true;
		//ALib.trace(e);
	}

	return timeEnteredStr;
}

/*======================================================================================
	
	Module:		CRecurrencePattern

	Purpose:	Handles Recurrence Pattern

======================================================================================*/
function CRecurrencePattern(rpid)
{
	this.type = 0; // None
	this.id = 0;
	this.save_type = "all"; // exception | all
	this.interval = 1; 		
	this.dateStart = "";
	this.dateEnd = "";
	this.timeStart = null;
	this.timeEnd = null;
	this.fAllDay = null;		
	this.dayOfMonth = 1;
	this.monthOfYear = 1;
	this.dayOfWeekMask = null;		
	this.duration = null; 			
	this.instance = null;
				
	this.fActive = true;	
	this.object_type_id = null;	
	this.object_type = null;		
	this.parentId = null;	
	this.calendarId = null;		
	this.dateProcessedTo = null;	
	this.id = null;				
	this.useId = null;				
	this.fieldDateStart = null;	
	this.fieldTimeStart = null; 	
	this.fieldDateEnd = null;		
	this.fieldTimeEnd = null;		
	this.arrChangeLog = new Array();
	
	this.day1 = 'f';
	this.day2 = 'f';
	this.day3 = 'f';
	this.day4 = 'f';
	this.day5 = 'f';
	this.day6 = 'f';
	this.day7 = 'f';
	
	this.dbFieldValues = null;
	
	this.humanDesc = '';
	
	this.dbvalLoaded = false;
	this.dbvalLoadCount = null;
	
	this.m_dlgElements = new Object();
	
	if(rpid)
	{
		this.load(rpid);
	}
}


/**************************************************************************
* Function: 	load	
*
* Purpose:		Load recurrence pattern from backend
**************************************************************************/
CRecurrencePattern.prototype.load = function(rpid)
{
	if (rpid) 
	{
		this.id = rpid;

		this.dbvalLoaded = false;
		this.dbvalLoadCount = 1;
		
		var ajax = new CAjax();
		ajax.m_obj = this;
		ajax.onload = function(root)
		{
			if (root.getNumChildren())
			{
				this.m_obj.dbFieldValues = JSON.parse(unescape(root.getChildNodeValByName("objpt_json")));
	
				this.m_obj.type = this.m_obj.dbFieldValues.type;
				this.m_obj.interval = this.m_obj.dbFieldValues.interval; 		
				this.m_obj.dateStart = this.m_obj.dbFieldValues.dateStart; 		
				this.m_obj.dateEnd = this.m_obj.dbFieldValues.dateEnd; 			
				this.m_obj.timeStart = this.m_obj.dbFieldValues.timeStart;		
				this.m_obj.timeEnd = this.m_obj.dbFieldValues.timeEnd;		
				this.m_obj.fAllDay = this.m_obj.dbFieldValues.fAllDay; 			
				this.m_obj.dayOfMonth = this.m_obj.dbFieldValues.dayOfMonth;
				this.m_obj.monthOfYear = this.m_obj.dbFieldValues.monthOfYear;
				this.m_obj.dayOfWeekMask = this.m_obj.dbFieldValues.dayOfWeekMask;		
				this.m_obj.duration = this.m_obj.dbFieldValues.duration; 			
				this.m_obj.instance = this.m_obj.dbFieldValues.instance; 	
						
				this.m_obj.fActive = this.m_obj.dbFieldValues.fActive;	
				this.m_obj.object_type_id = this.m_obj.dbFieldValues.object_type_id;	
				this.m_obj.object_type = this.m_obj.dbFieldValues.object_type;		
				this.m_obj.parentId = this.m_obj.dbFieldValues.parentId;	
				this.m_obj.calendarId = this.m_obj.dbFieldValues.calendarId;		
				this.m_obj.dateProcessedTo = this.m_obj.dbFieldValues.dateProcessedTo;	
				this.m_obj.id = this.m_obj.dbFieldValues.id;				
				this.m_obj.useId = this.m_obj.dbFieldValues.useId;				
				this.m_obj.fieldDateStart = this.m_obj.dbFieldValues.fieldDateStart;	
				this.m_obj.fieldTimeStart = this.m_obj.dbFieldValues.fieldTimeStart; 	
				this.m_obj.fieldDateEnd = this.m_obj.dbFieldValues.fieldDateEnd;		
				this.m_obj.fieldTimeEnd = this.m_obj.dbFieldValues.fieldTimeEnd;		
				this.m_obj.arrChangeLog = this.m_obj.dbFieldValues.arrChangeLog; 
				
				this.m_obj.day1 = this.m_obj.dbFieldValues.day1;
				this.m_obj.day2 = this.m_obj.dbFieldValues.day2;
				this.m_obj.day3 = this.m_obj.dbFieldValues.day3;
				this.m_obj.day4 = this.m_obj.dbFieldValues.day4;
				this.m_obj.day5 = this.m_obj.dbFieldValues.day5;
				this.m_obj.day6 = this.m_obj.dbFieldValues.day6;
				this.m_obj.day7 = this.m_obj.dbFieldValues.day7;
				
				this.m_obj.dbvalLoaded = true;
				this.m_obj.onchange();
				this.m_obj.onload();
			}
			
		};
	
		var url = "/objects/xml_get_rp.php?rpid=" + this.id;
		ajax.exec(url);
		
	}
	
}

/**************************************************************************
* Function: 	onload	
*
* Purpose:		Fired once the recurrence pattern has been fully loaded
**************************************************************************/
CRecurrencePattern.prototype.onload = function()
{
}

/**************************************************************************
* Function: 	set	
*
* Purpose:		Set will populate partern variables from the form
**************************************************************************/
CRecurrencePattern.prototype.set = function()
{
	this.onchange();
}

/**************************************************************************
* Function: 	onchange
*
* Purpose:		Function will be fired when pattern changes
**************************************************************************/
CRecurrencePattern.prototype.onchange = function()
{
}

/**************************************************************************
* Function: 	onsave
*
* Purpose:		Function will be fired when pattern save is finished
*
* Params:		(bool) ret : true = success, false = fail
**************************************************************************/
CRecurrencePattern.prototype.onsave = function(ret)
{
}

/**************************************************************************
* Function: 	save	
*
* Purpose:		Save recurrence pattern to backend
**************************************************************************/
CRecurrencePattern.prototype.save = function(silent)
{
	var obj = new Object();
	
	obj.type = this.type;
	obj.object_type = this.object_type;
	obj.object_type_id = this.object_type_id;
	obj.interval = this.interval;
	obj.dateStart = this.dateStart;
	obj.dateEnd = this.dateEnd;
	obj.timeStart = this.timeStart;
	obj.timeEnd = this.timeEnd;
	obj.fAllDay = this.fAllDay;
	obj.dayOfMonth = this.dayOfMonth;
	obj.monthOfYear = this.monthOfYear;
	obj.dayOfWeekMask = this.dayOfWeekMask;
	obj.instance = this.instance;
	
	obj.object_type_id = this.object_type_id;
	obj.object_type = this.object_type;
	obj.parentId = this.parentId;
	obj.calendarId = this.calendarId;
	obj.dateProcessedTo = this.dateProcessedTo;
	obj.id = this.id;
	obj.day1 = this.day1;
	obj.day2 = this.day2;
	obj.day3 = this.day3;
	obj.day4 = this.day4;
	obj.day5 = this.day5;
	obj.day6 = this.day6;
	obj.day7 = this.day7;
    
    /*var funct = function(ret, cls)
    {     
        // close box
        if( cls.m_dlg )
        { 
            cls.m_dlg.hide();
            ALib.statusShowAlert("Recurrence Saved!", 3000, "bottom", "right");
        }
        if( cls.m_dlg_saving ) cls.m_dlg_saving.hide(); 
        cls.onsave();
    }
	var args = 	[['objpt_json',JSON.stringify(obj)]];
    var rpc = new CAjaxRpc("/controller/Object/saveRecurrencepattern", "saveRecurrencepattern", args, funct, [this], AJAX_POST, true, "json");*/
	
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(this.cbData.cls.m_dlg )
        { 
            this.cbData.cls.m_dlg.hide();
            ALib.statusShowAlert("Recurrence Saved!", 3000, "bottom", "right");
        }
        if( this.cbData.cls.m_dlg_saving ) this.cbData.cls.m_dlg_saving.hide(); 
        this.cbData.cls.onsave();
    };
    var args = [['objpt_json',JSON.stringify(obj)]];
    ajax.exec("/controller/Object/saveRecurrencepattern", args);
}


CRecurrencePattern.prototype.showDialog = function()
{
	var me = this;
	
	if( this.id>0 )
	{
		// load values
		if( !this.dbvalLoaded )
		{
			if( this.dlgLoadFromDB==null )
			{
				// Create loading div
				var dlgLoadFromDB = new CDialog();
				var dv_load = document.createElement('div');
				alib.dom.styleSetClass(dv_load, "statusAlert");
				alib.dom.styleSet(dv_load, "text-align", "center");
				alib.dom.styleSet(dv_load, "text-align", "center");
				dv_load.innerHTML = "Loading, please wait...";
				dlgLoadFromDB.statusDialog(dv_load);
			
				this.dlgLoadFromDB = dlgLoadFromDB;
			}
			
			if( this.dbvalLoadCount==null )
			{
				this.load();
			}
			else
			{
				this.dbvalLoadCount++;
			}

			if( this.dbvalLoadCount<100 )
			{
				var me = this;
				setTimeout(function(){ me.showDialog(); },100);
				return false;
			}
		}else{
			if( this.dlgLoadFromDB!=null )
			{
				this.dlgLoadFromDB.hide();
				this.dlgLoadFromDB=null;
			}
		}
	}
	
	// save old values
	if( this.dbFieldValues == null )
		this.dbFieldValues = new Object();
		
	this.dbFieldValues.type = this.type;
	this.dbFieldValues.interval = this.interval; 		
	this.dbFieldValues.dateStart = this.dateStart; 		
	this.dbFieldValues.dateEnd = this.dateEnd; 			
	this.dbFieldValues.timeStart = this.timeStart;		
	this.dbFieldValues.timeEnd = this.timeEnd;		
	this.dbFieldValues.fAllDay = this.fAllDay; 			
	this.dbFieldValues.dayOfMonth = this.dayOfMonth;
	this.dbFieldValues.monthOfYear = this.monthOfYear;
	this.dbFieldValues.dayOfWeekMask = this.dayOfWeekMask;		
	this.dbFieldValues.duration = this.duration; 			
	this.dbFieldValues.instance = this.instance; 	
			
	this.dbFieldValues.fActive = this.fActive;	
	this.dbFieldValues.object_type_id = this.object_type_id;	
	this.dbFieldValues.object_type = this.object_type;		
	this.dbFieldValues.parentId = this.parentId;	
	this.dbFieldValues.calendarId = this.calendarId;		
	this.dbFieldValues.dateProcessedTo = this.dateProcessedTo;	
	this.dbFieldValues.id = this.id;				
	this.dbFieldValues.useId = this.useId;				
	this.dbFieldValues.fieldDateStart = this.fieldDateStart;	
	this.dbFieldValues.fieldTimeStart = this.fieldTimeStart; 	
	this.dbFieldValues.fieldDateEnd = this.fieldDateEnd;		
	this.dbFieldValues.fieldTimeEnd = this.fieldTimeEnd;		
	this.dbFieldValues.arrChangeLog = this.arrChangeLog; 
	
	this.dbFieldValues.day1 = this.day1;
	this.dbFieldValues.day2 = this.day2;
	this.dbFieldValues.day3 = this.day3;
	this.dbFieldValues.day4 = this.day4;
	this.dbFieldValues.day5 = this.day5;
	this.dbFieldValues.day6 = this.day6;
	this.dbFieldValues.day7 = this.day7;
	
	
	if (this.id)
	{
		this.title = "Edit/View Recurrence";
	}
	else
	{
		this.title = "Enter New Recurrence";
	}
	
	var dlg = new CDialog(this.title);
	this.m_dlg = dlg;
	
	var dv = alib.dom.createElement("div");
	
	
	var frm1 = new CWindowFrame("Recurrence pattern", null, "3px");
	frm1.print(dv);
	var frmcon = frm1.getCon();
	
	var dvfield = alib.dom.createElement("div", frmcon);
	alib.dom.styleSet(dvfield, "margin-top", "3px");
	var td = alib.dom.createElement("div", dvfield);
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "120px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSet(td, "margin-left", "3px");
	td.innerHTML = "Repeats: ";
	
	var td = alib.dom.createElement("div", dvfield);
	var sel = alib.dom.createElement("select", td);
	sel.rpcls = this;
	sel[sel.length] = new Option("Does Not Repeat", "0", false, (this.type == "0")?true:false);
	sel[sel.length] = new Option("Daily", "1", false, (this.type == "1")?true:false);
	sel[sel.length] = new Option("Weekly", "2", false, (this.type == "2")?true:false);
	sel[sel.length] = new Option("Monthly", "m", false, (this.type == "3" || this.type == "4")?true:false);
	sel[sel.length] = new Option("Yearly", "y", false, (this.type == "5" || this.type == "6")?true:false);
	sel.onchange = function() 
	{ 
		if( this.value=='m' )
		{
		
			if( this.rpcls.type==0 || (this.rpcls.interval>0 && this.rpcls.dayOfMonth>0) ){
				this.rpcls.type = '3'; // monthly
			}
			else
			{
				this.rpcls.type = '4'; // monthnth
			}			
		}
		else if( this.value=='y' )
		{
			if(this.rpcls.type==0 || (this.rpcls.interval>0 && this.rpcls.dayOfMonth>0) ){
				this.rpcls.type = '5'; // yearly
			}
			else
			{
				this.rpcls.type = '6'; // yearnth
			}			
		}
		else
		{
			this.rpcls.type = this.value; 
		}
		
		this.rpcls.showRecurring(this.rpcls.type); 
	}
	

	
	this.m_dlgElements.dv_range = alib.dom.createElement("div", frmcon);
	alib.dom.styleSet(this.m_dlgElements.dv_range, "margin-left", "4px");
	alib.dom.styleSet(this.m_dlgElements.dv_range, "margin-top", "6px");

	
	
	var frm1 = new CWindowFrame("Range of recurrence", null, "3px");
	frm1.print(dv);
	var frmcon = frm1.getCon();
	
	// Start Date
	// ------------------------------------------------------------------
	var dvfield = alib.dom.createElement("div", frmcon);
	alib.dom.styleSet(dvfield, "margin-top", "3px");
	var td = alib.dom.createElement("div", dvfield);
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "120px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSet(td, "margin-left", "3px");
	td.innerHTML = "Start Date: ";
	var td = alib.dom.createElement("div", dvfield);
	alib.dom.styleSet(td, "margin-left", "55px");
	var txtDateStart = alib.dom.createElement("input");
	txtDateStart.type = "text";
	td.appendChild(txtDateStart);
	alib.dom.styleSet(txtDateStart, "width", "100px");
	
	if( !this.dateStart )
	{
		var d = new Date();	
		this.dateStart = (d.getMonth()+1)+"/"+d.getDate()+"/"+d.getFullYear();
	}
	
	txtDateStart.value = this.dateStart;
	txtDateStart.rpcls = this;
	txtDateStart.onchange = function() {  this.rpcls.dateStart = this.value;  }
	// Insert autocomplete
	var a_CalStart = alib.dom.createElement("span", td);
	a_CalStart.innerHTML = "<img src='/images/calendar.gif' border='0' />";
	var start_rng_ac = new CAutoCompleteCal(txtDateStart, a_CalStart);
	

	// End Date
	// ------------------------------------------------------------------
	var dvfield = alib.dom.createElement("div", frmcon);
	alib.dom.styleSet(dvfield, "margin-top", "3px");
	var td = alib.dom.createElement("div", dvfield);
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "120px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSet(td, "margin-left", "3px");
	td.innerHTML = "End Date: ";
	var td = alib.dom.createElement("div", dvfield);
	alib.dom.styleSet(td, "margin-left", "55px");
	var txtEndDate = alib.dom.createElement("input");
	txtEndDate.type = "text";
	td.appendChild(txtEndDate);
	alib.dom.styleSet(txtEndDate, "width", "100px");
	if (!this.dateEnd && this.type) 
	{
		txtEndDate.value = "Never";
		txtEndDate.disabled = true;
	}
	else if (this.dateEnd) 
		txtEndDate.value = this.dateEnd;
	else if (!this.type) 
	{
		txtEndDate.value = "Never";
		txtEndDate.disabled = true;
	}
	txtEndDate.onchange = function() { me.dateEnd = this.value; }
	// Insert autocomplete
	var a_CalEnd = alib.dom.createElement("span", td);
	a_CalEnd.innerHTML = "<img src='/images/calendar.gif' border='0'>";
	var end_ac = new CAutoCompleteCal(txtEndDate, a_CalEnd);
	
	// Never ends
	// ------------------------------------------------------------------
	var never_dv = alib.dom.createElement("div", frmcon);
	alib.dom.styleSet(never_dv, "padding-left", "124px");
	var never_lbl = alib.dom.createElement("span", never_dv);
	never_lbl.innerHTML = "Never ends ";
	var never_chk = alib.dom.createElement("input");
	never_chk.type = 'checkbox';
	never_chk.m_end_date = txtEndDate;
	never_dv.appendChild(never_chk);
	never_chk.checked = (!me.dateEnd) ? true :  false;
	never_chk.onclick = function()
	{
		if (this.checked)
		{
			this.m_end_date.value = "Never";
			this.m_end_date.disabled = true;
			me.dateEnd = "";
		}
		else
		{
			this.m_end_date.value = me.dateStart;
			me.dateEnd = me.dateStart;
			this.m_end_date.disabled = false;
		}
	}


	// Buttons
	// -----------------------------------------------
	var dv_btn = alib.dom.createElement("div", dv);
	dv_btn.id = 'rp_dialog_buttons';
	
	var btn = new CButton("OK", 
		function(cls, dlg) 
		{ 
			me.set();
			cls.m_dlg.hide();
		}, 
		[me, me.m_dlg]);
		
	btn.print(dv_btn);
	this.btnSave = btn;

	var btn = new CButton("Cancel", function(dlg) {  
		
		me.type = me.dbFieldValues.type;
		me.interval = me.dbFieldValues.interval; 		
		me.dateStart = me.dbFieldValues.dateStart; 		
		me.dateEnd = me.dbFieldValues.dateEnd; 			
		me.timeStart = me.dbFieldValues.timeStart;		
		me.timeEnd = me.dbFieldValues.timeEnd;		
		me.fAllDay = me.dbFieldValues.fAllDay; 			
		me.dayOfMonth = me.dbFieldValues.dayOfMonth;
		me.monthOfYear = me.dbFieldValues.monthOfYear;
		me.dayOfWeekMask = me.dbFieldValues.dayOfWeekMask;		
		me.duration = me.dbFieldValues.duration; 			
		me.instance = me.dbFieldValues.instance; 	
				
		me.fActive = me.dbFieldValues.fActive;	
		me.object_type_id = me.dbFieldValues.object_type_id;	
		me.object_type = me.dbFieldValues.object_type;		
		me.parentId = me.dbFieldValues.parentId;	
		me.calendarId = me.dbFieldValues.calendarId;		
		me.dateProcessedTo = me.dbFieldValues.dateProcessedTo;	
		me.id = me.dbFieldValues.id;				
		me.useId = me.dbFieldValues.useId;				
		me.fieldDateStart = me.dbFieldValues.fieldDateStart;	
		me.fieldTimeStart = me.dbFieldValues.fieldTimeStart; 	
		me.fieldDateEnd = me.dbFieldValues.fieldDateEnd;		
		me.fieldTimeEnd = me.dbFieldValues.fieldTimeEnd;		
		me.arrChangeLog = me.dbFieldValues.arrChangeLog; 
		
		me.day1 = me.dbFieldValues.day1;
		me.day2 = me.dbFieldValues.day2;
		me.day3 = me.dbFieldValues.day3;
		me.day4 = me.dbFieldValues.day4;
		me.day5 = me.dbFieldValues.day5;
		me.day6 = me.dbFieldValues.day6;
		me.day7 = me.dbFieldValues.day7;
		
		dlg.hide(); 
	
	}, [me.m_dlg]);
	btn.print(dv_btn);
		
	
	dlg.customDialog(dv, 320, null);
	alib.dom.styleSet(sel, "visibility", "visible");
	
	
	// show range
	this.showRecurring(this.type);
	
	
	// temporary, show all select 
 	var selects = document.getElementsByTagName("select");
    for (var i=0; i<selects.length; i++)
    	selects[i].style.visivility = "visible";
}

CRecurrencePattern.prototype.showRecurring = function(type)
{
	type = parseInt(type);
	var me = this;

	
	this.m_dlgElements.dv_range.innerHTML = "";
	
	
	var dvfield = alib.dom.createElement("div", this.m_dlgElements.dv_range);
	switch (type)
	{
	case 1: // daily
	
		dvfield.style.display = "block";
		var lbl = alib.dom.createElement("span", dvfield);
		lbl.innerHTML = "Every ";
		var inp = alib.dom.createElement("input", dvfield);
		inp.size = 2;
		inp.value = (me.interval) ? me.interval : 1;
		inp.onchange = function()
		{
			me.interval = this.value;
		}
		var lbl = alib.dom.createElement("span", dvfield);
		lbl.innerHTML = " days";
		break;
		
	case 2: // weekly

		dvfield.style.display = "block";
		var lbl = alib.dom.createElement("span", dvfield);
		lbl.innerHTML = "Every ";
		var inp = alib.dom.createElement("input", dvfield);
		inp.size = 2;
		inp.value = (me.interval) ? me.interval : 1;
		inp.onchange = function()
		{
			me.interval = this.value;
		}
		var lbl = alib.dom.createElement("span", dvfield);
		lbl.innerHTML = " week(s) on: <br />";

		// Day 1
		var row = alib.dom.createElement("div", dvfield);
		var daychk1 = alib.dom.createElement("input");
		daychk1.type = "checkbox";
		row.appendChild(daychk1);
		daychk1.checked = (me.day1 == 't') ? true : false;
		daychk1.onchange = function()
		{
			me.day1 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Sunday";
		lbl.onclick = function()
		{
			daychk1.checked = daychk1.checked ? false : true;
			me.day1 = (daychk1.checked) ? 't' : 'f';
		}

		// Day 2
		var row = alib.dom.createElement("div", dvfield);
		var daychk2 = alib.dom.createElement("input");
		daychk2.type = "checkbox";
		row.appendChild(daychk2);
		daychk2.checked = (me.day2 == 't') ? true : false;
		daychk2.onchange = function()
		{
			me.day2 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Monday";
		lbl.onclick = function()
		{
			daychk2.checked = daychk2.checked ? false :true;
			me.day2 = (daychk2.checked) ? 't' : 'f';
		}

		// Day 3
		var row = alib.dom.createElement("div", dvfield);
		var daychk3 = alib.dom.createElement("input");
		daychk3.type = "checkbox";
		row.appendChild(daychk3);
		daychk3.checked = (me.day3 == 't') ? true : false;
		daychk3.onchange = function()
		{
			me.day3 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Tuesday";
		lbl.onclick = function()
		{
			daychk3.checked = daychk3.checked ? false :true;
			me.day3 = (daychk3.checked) ? 't' : 'f';
		}

		// Day 4
		var row = alib.dom.createElement("div", dvfield);
		var daychk4 = alib.dom.createElement("input");
		daychk4.type = "checkbox";
		row.appendChild(daychk4);
		daychk4.checked = (me.day4 == 't') ? true : false;
		daychk4.onchange = function()
		{
			me.day4 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Wednesday";
		lbl.onclick = function()
		{
			daychk4.checked = daychk4.checked ? false :true;
			me.day4 = (daychk4.checked) ? 't' : 'f';
		}

		// Day 5
		var row = alib.dom.createElement("div", dvfield);
		var daychk5 = alib.dom.createElement("input");
		daychk5.type = "checkbox";
		row.appendChild(daychk5);
		daychk5.checked = (me.day5 == 't') ? true : false;
		daychk5.onchange = function()
		{
			me.day5 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Thursday";
		lbl.onclick = function()
		{
			daychk5.checked = daychk5.checked ? false :true;
			me.day5 = (daychk5.checked) ? 't' : 'f';
		}

		// Day 6
		var row = alib.dom.createElement("div", dvfield);
		var daychk6 = alib.dom.createElement("input");
		daychk6.type = "checkbox";
		row.appendChild(daychk6);
		daychk6.checked = (me.day6 == 't') ? true : false;
		daychk6.onchange = function()
		{
			me.day6 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Friday";
		lbl.onclick = function()
		{
			daychk6.checked = daychk6.checked ? false :true;
			me.day6 = (daychk6.checked) ? 't' : 'f';
		}

		// Day 7
		var row = alib.dom.createElement("div", dvfield);
		var daychk7 = alib.dom.createElement("input");
		daychk7.type = "checkbox";
		row.appendChild(daychk7);
		daychk7.checked = (me.day7 == 't') ? true : false;
		daychk7.onchange = function()
		{
			me.day7 = (this.checked) ? 't' : 'f';
		}
		var lbl = alib.dom.createElement("label", row);
		lbl.innerHTML = " Saturday";
		lbl.onclick = function()
		{
			daychk7.checked = daychk7.checked ? false :true;
			me.day7 = (daychk7.checked) ? 't' : 'f';
		}

		break;
		
	case 3: // monthly
	case 4: // monthnth
		
		dvfield.style.display = "block";
		var tbl = alib.dom.createElement("table", dvfield);
		var tbody = alib.dom.createElement("tbody", tbl);
	
		var row = alib.dom.createElement("row", tbody);
		var td = alib.dom.createElement("td", row);
		var rbtn1 = alib.dom.createElement("input");
		rbtn1.type='radio';
		rbtn1.name='monthly_type';
		rbtn1.value='day';
		rbtn1.rpcls = this;
		rbtn1.onchange = function()
		{  
			this.rpcls.type = 3; // monthly
			this.rpcls.recurToggleMontlyType(); 
		}
		td.appendChild(rbtn1);
		//  day
		var td = alib.dom.createElement("td", row);
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = "Day ";
		this.m_dlgElements.rt_m_d_day = alib.dom.createElement("input");
		this.m_dlgElements.rt_m_d_day.style.width = "20px";
	
		this.m_dlgElements.rt_m_d_day.value = (me.dayOfMonth) ? me.dayOfMonth : 1;
		this.m_dlgElements.rt_m_d_day.onchange = function()
		{
			me.dayOfMonth = this.value;
		}
		td.appendChild(this.m_dlgElements.rt_m_d_day);
		
		// interval
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = " of every ";
		this.m_dlgElements.rt_m_d_int = alib.dom.createElement("input");
		this.m_dlgElements.rt_m_d_int.style.width = "20px";
		if (me.interval)
		{
			this.m_dlgElements.rt_m_d_int.value = me.interval;
		}
		else
		{
			this.m_dlgElements.rt_m_d_int.value = 1;
			me.interval = 1;
		}
		this.m_dlgElements.rt_m_d_int.onchange = function()
		{
			me.interval = this.value;
		}
		td.appendChild(this.m_dlgElements.rt_m_d_int);
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = " month(s)";

		
		var row = alib.dom.createElement("row", tbody);
		var td = alib.dom.createElement("td", row);

		var rbtn2 = alib.dom.createElement("input");
		rbtn2.type='radio';
		rbtn2.name='monthly_type';
		rbtn2.value='relative';
		rbtn2.rpcls = this;
		rbtn2.onchange = function()
		{  
			this.rpcls.type = 4; // monthth
			this.rpcls.recurToggleMontlyType(); 			 
		}
		td.appendChild(rbtn2);
		rbtn2.checked= true;
		
		
		// monthlynth elements
		var td = alib.dom.createElement("td", row);
		// Relative Type
		this.m_dlgElements.rt_m_rel_nth = alib.dom.createElement("select", td);
		var vals = new Array("First", "Second", "Third", "Fourth", "Last");
		for (var i = 0; i < vals.length; i++)
			this.m_dlgElements.rt_m_rel_nth[this.m_dlgElements.rt_m_rel_nth.length] = new Option("The " + vals[i], (i+1), false, (me.instance == (i + 1))?true:false);
		this.m_dlgElements.rt_m_rel_nth.onchange = function()
		{
			me.instance = this.value;
		}
		
		// Relavtive Section or Day
		var lbl = alib.dom.createElement("br", td);
		this.m_dlgElements.rt_m_day_nth = alib.dom.createElement("select", td);

		var vals = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
		var sel_selected = false;
		for (var i = 0; i < vals.length; i++)
		{
			sel_selected = false;
			switch(i)
			{

				case 0:	sel_selected = (me.day1 == 't')?true:false; break;
				case 1:	sel_selected = (me.day2 == 't')?true:false; break;
				case 2:	sel_selected = (me.day3 == 't')?true:false; break;
				case 3:	sel_selected = (me.day4 == 't')?true:false; break;
				case 4:	sel_selected = (me.day5 == 't')?true:false; break;
				case 5:	sel_selected = (me.day6 == 't')?true:false; break;
				case 6:	sel_selected = (me.day7 == 't')?true:false; break;
			}
			this.m_dlgElements.rt_m_day_nth[this.m_dlgElements.rt_m_day_nth.length] = new Option(vals[i], (i+1), false, sel_selected);
		}
		this.m_dlgElements.rt_m_day_nth.onchange = function()
		{
			me.day1 = (this.value == 1)?'t':'f';
			me.day2 = (this.value == 2)?'t':'f';
			me.day3 = (this.value == 3)?'t':'f';
			me.day4 = (this.value == 4)?'t':'f';
			me.day5 = (this.value == 5)?'t':'f';
			me.day6 = (this.value == 6)?'t':'f';
			me.day7 = (this.value == 7)?'t':'f';
		}
		
		// interval monthlynth
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = "<br />of every ";
		this.m_dlgElements.rt_m_d_int_nth = alib.dom.createElement("input");
		this.m_dlgElements.rt_m_d_int_nth.style.width = "20px";
	
		if (me.interval)
		{
			this.m_dlgElements.rt_m_d_int_nth.value = me.interval;
		}
		else
		{
			this.m_dlgElements.rt_m_d_int_nth.value = 1;
			me.interval = 1;
		}
		this.m_dlgElements.rt_m_d_int_nth.onchange = function()
		{
			me.interval = this.value;
		}
		td.appendChild(this.m_dlgElements.rt_m_d_int_nth);
		
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = " month(s)";

		if (this.type == 3 )
		{
			this.recurToggleMontlyType();
			rbtn1.checked = true;
		}
		else
		{
			this.recurToggleMontlyType();
			rbtn2.checked = true;
		}

		break;
	case 5: // yearly
	case 6: // yearnth
		
		dvfield.style.display = "block";

		var months = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");

		var tbl = alib.dom.createElement("table", dvfield);
		var tbody = alib.dom.createElement("tbody", tbl);

		
		var row = alib.dom.createElement("row", tbody);
		var td = alib.dom.createElement("td", row);
		var rbtn1 = alib.dom.createElement("input");
		rbtn1.type='radio';
		rbtn1.name = "yearly_type";
		rbtn1.rpcls = this;
		rbtn1.onchange = function() 
		{  
			this.rpcls.type = 5;
			this.rpcls.recurToggleYearlyType(); 
		}
		td.appendChild(rbtn1);
		//  Specific Day of the moonth
		var td = alib.dom.createElement("td", row);
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = "Every ";
		this.m_dlgElements.rt_y_m = alib.dom.createElement("select", td);
		this.m_dlgElements.rt_y_m.id = "rt_y_m";
		for (var i = 0; i < months.length; i++)
			this.m_dlgElements.rt_y_m[this.m_dlgElements.rt_y_m.length] = new Option(months[i], (i+1), false, (me.monthOfYear == (i + 1))?true:false);
		this.m_dlgElements.rt_y_m.onchange = function()
		{
			me.monthOfYear = this.value;
		}
		// interval
		var lbl = alib.dom.createElement("span", td);
		lbl.innerHTML = "&nbsp;";
		this.m_dlgElements.rt_y_d = alib.dom.createElement("input");
		this.m_dlgElements.rt_y_d.style.width = "20px";
		
		this.m_dlgElements.rt_y_d.value = (me.dayOfMonth) ? me.dayOfMonth : 1;
		this.m_dlgElements.rt_y_d.onchange = function()
		{
			me.dayOfMonth = this.value;
		}
		td.appendChild(this.m_dlgElements.rt_y_d);


		var row = alib.dom.createElement("row", tbody);
		var td = alib.dom.createElement("td", row);
		var rbtn2 = alib.dom.createElement("input");
		rbtn2.type='radio';
		rbtn2.name = "yearly_type";
		rbtn2.rpcls = this;
		rbtn2.onchange = function() 
		{
			this.rpcls.type = 6;
			this.rpcls.recurToggleYearlyType(); 
		}
		td.appendChild(rbtn2);

		var td = alib.dom.createElement("td", row);

		// Relative Type
		this.m_dlgElements.rt_y_rel = alib.dom.createElement("select", td);
		//this.m_dlgElements.rt_y_rel.id = "rt_y_rel";
		var vals = new Array("First", "Second", "Third", "Fourth", "Last");
		
		for (var i = 0; i < vals.length; i++)
			this.m_dlgElements.rt_y_rel[this.m_dlgElements.rt_y_rel.length] = new Option("The " + vals[i], (i+1), false, (me.instance == (i + 1))?true:false);
		this.m_dlgElements.rt_y_rel.onchange = function()
		{
			me.instance = this.value;
		}
		// Relavtive Section or Day of the week
		var lbl = alib.dom.createElement("br", td);
		this.m_dlgElements.rt_y_day = alib.dom.createElement("select", td);
		//this.m_dlgElements.rt_y_day.id = "rt_y_day";
		var vals = new Array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday");
		var sel_selected = false;
		for (var i = 0; i < vals.length; i++)
		{
			sel_selected = false;
			switch(i)
			{
				case 0:	sel_selected = (me.day1 == 't')?true:false; break;
				case 1:	sel_selected = (me.day2 == 't')?true:false; break;
				case 2:	sel_selected = (me.day3 == 't')?true:false; break;
				case 3:	sel_selected = (me.day4 == 't')?true:false; break;
				case 4:	sel_selected = (me.day5 == 't')?true:false; break;
				case 5:	sel_selected = (me.day6 == 't')?true:false; break;
				case 6:	sel_selected = (me.day7 == 't')?true:false; break;
			}
			this.m_dlgElements.rt_y_day[this.m_dlgElements.rt_y_day.length] = new Option(vals[i], (i+1), false, sel_selected);
		}
		this.m_dlgElements.rt_y_day.onchange = function()
		{
			me.day1 = (this.value == 1)?'t':'f';
			me.day2 = (this.value == 2)?'t':'f';
			me.day3 = (this.value == 3)?'t':'f';
			me.day4 = (this.value == 4)?'t':'f';
			me.day5 = (this.value == 5)?'t':'f';
			me.day6 = (this.value == 6)?'t':'f';
			me.day7 = (this.value == 7)?'t':'f';
		}
		//  Month
		var lbl = alib.dom.createElement("br", td);
		this.m_dlgElements.rt_y_r_m = alib.dom.createElement("select", td);
		//this.m_dlgElements.rt_y_r_m.id = "rt_y_r_m";
		for (var i = 0; i < months.length; i++)
			this.m_dlgElements.rt_y_r_m[this.m_dlgElements.rt_y_r_m.length] = new Option("of " + months[i], (i+1), false, (me.monthOfYear == (i + 1))?true:false);
		this.m_dlgElements.rt_y_r_m.onchange = function()
		{
			me.monthOfYear = this.value;
		}
		
				
		if (me.type==0 || (me.instance==null && me.dayOfMonth!=null))
		{
			this.type = 5;
			this.recurToggleYearlyType(); 
			rbtn1.checked = true;
		}
		else
		{			
			this.type = 6;
			me.recurToggleYearlyType(); 
			rbtn2.checked = true;
		}

		break;
	default: // Blank - no recurrence
		dvfield.innerHTML = "";
		dvfield.style.display = "none";
		break;
	}
}


CRecurrencePattern.prototype.getHumanDesc = function()
{ 
	this.humanDesc = '';
	var me = this;
	
	if( this.id>0 )
	{
		// load values
	}
	
	switch( parseInt(this.type) )
	{
		case 1: // Daily
			
			// interval
			if( this.interval>1 )
			{
				this.humanDesc += ' Every '+this.interval+' days';
			}
			else
			{
				this.humanDesc += 'Every day ';
			}
			break;
		
		case 2: // Weekly
			
			// interval
			if( this.interval>1 )
			{
				this.humanDesc += 'Every '+this.interval+' weeks on ';
			}
			else
			{
				this.humanDesc += 'Every ';
			}
			
			// week days
			if( this.day1=='t' )
				this.humanDesc += 'Sunday, ';
			if( this.day2=='t' )
				this.humanDesc += 'Monday, ';
			if( this.day3=='t' )
				this.humanDesc += 'Tuesday, ';
			if( this.day4=='t' )
				this.humanDesc += 'Wednesday, ';
			if( this.day5=='t' )
				this.humanDesc += 'Thursday, ';
			if( this.day6=='t' )
				this.humanDesc += 'Friday, ';
			if( this.day7=='t' )
				this.humanDesc += 'Saturday, ';
			
			this.humanDesc = this.humanDesc.replace(/, $/,"");

			break;
		
		case 3: // Monthly
		
			var n = parseInt(this.dayOfMonth) % 100;
			var suff = ["th", "st", "nd", "rd", "th"];
			var ord= n<21?(n<4 ? suff[n]:suff[0]): (n%10>4 ? suff[0] : suff[n%10]);
			this.humanDesc += this.dayOfMonth+ord+' day of every ';
			
			if( parseInt(this.interval)>1 )
			{
				this.humanDesc += parseInt(this.interval)+' months';
			}
			else
			{
				this.humanDesc += parseInt(this.interval)+' month';
			}
			break;
			
		case 4: // Monthnth
		
			this.humanDesc += 'The ';
			switch( parseInt(this.instance) )
			{
				case  1: this.humanDesc += 'first ';
					break;
				case  2: this.humanDesc += 'second ';
					break;
				case  3: this.humanDesc += 'third ';
					break;
				case  4: this.humanDesc += 'fourth ';
					break;
				case  5: this.humanDesc += 'last ';
					break;
			}
			
			this.humanDesc += (this.day1=='t' ? ' Sunday ' : '');
			this.humanDesc += (this.day2=='t' ? ' Monday ' : '');
			this.humanDesc += (this.day3=='t' ? ' Tuesday ' : '');
			this.humanDesc += (this.day4=='t' ? ' Wednesday ' : '');
			this.humanDesc += (this.day5=='t' ? ' Thursday ' : '');
			this.humanDesc += (this.day6=='t' ? ' Friday ' : '');
			this.humanDesc += (this.day7=='t' ? ' Saturday ' : '');
			
			if( parseInt(this.interval)>1 )
			{
				this.humanDesc += ' of every '+parseInt(this.interval)+' months';
			}
			else
			{
				this.humanDesc += ' of every month';
			}
			break;
		
		case 5: // Yearly
		
			var n = parseInt(this.dayOfMonth) % 100;
			var suff = ["th", "st", "nd", "rd", "th"];
			var ord= n<21?(n<4 ? suff[n]:suff[0]): (n%10>4 ? suff[0] : suff[n%10]);
			this.humanDesc += 'Every '+this.dayOfMonth+ord+' day of ';
			
			switch(parseInt(this.monthOfYear))
			{
				case 1: this.humanDesc += ' January'; break;
				case 2: this.humanDesc += ' February'; break;
				case 3: this.humanDesc += ' March'; break;
				case 4: this.humanDesc += ' April'; break;
				case 5: this.humanDesc += ' May'; break;
				case 6: this.humanDesc += ' June'; break;
				case 7: this.humanDesc += ' July'; break;
				case 8: this.humanDesc += ' August'; break;
				case 9: this.humanDesc += ' September'; break;
				case 10: this.humanDesc += ' October'; break;
				case 11: this.humanDesc += ' November'; break;
				case 12: this.humanDesc += ' December'; break;
			}
			break;
		
		case 6: // Yearnth
		
			this.humanDesc += 'The ';
			switch( parseInt(this.instance) )
			{
				case  1: this.humanDesc += 'first ';
					break;
				case  2: this.humanDesc += 'second ';
					break;
				case  3: this.humanDesc += 'third ';
					break;
				case  4: this.humanDesc += 'fourth ';
					break;
				case  5: this.humanDesc += 'last ';
					break;
			}
			
			this.humanDesc += (me.day1=='t' ? ' Sunday ' : '');
			this.humanDesc += (me.day2=='t' ? ' Monday ' : '');
			this.humanDesc += (me.day3=='t' ? ' Tuesday ' : '');
			this.humanDesc += (me.day4=='t' ? ' Wednesday ' : '');
			this.humanDesc += (me.day5=='t' ? ' Thursday ' : '');
			this.humanDesc += (me.day6=='t' ? ' Friday ' : '');
			this.humanDesc += (me.day7=='t' ? ' Saturday ' : '');
			
			this.humanDesc += 'of ';
			
			switch(parseInt(this.monthOfYear))
			{
				case 1: this.humanDesc += ' January'; break;
				case 2: this.humanDesc += ' February'; break;
				case 3: this.humanDesc += ' March'; break;
				case 4: this.humanDesc += ' April'; break;
				case 5: this.humanDesc += ' May'; break;
				case 6: this.humanDesc += ' June'; break;
				case 7: this.humanDesc += ' July'; break;
				case 8: this.humanDesc += ' August'; break;
				case 9: this.humanDesc += ' September'; break;
				case 10: this.humanDesc += ' October'; break;
				case 11: this.humanDesc += ' November'; break;
				case 12: this.humanDesc += ' December'; break;
				
			}
			
			break;
		default:
			this.humanDesc = "Does not repeat";	
			return this.humanDesc;		
	}
	
	// date
	var strdateStart = new Date(this.dateStart);
	this.humanDesc += ' effective ' + alib.dateTime.format(strdateStart, "MM/dd/yyyy");
	// end date
	if( this.dateEnd )
	{
		var strendStart = new Date(this.dateEnd);
		this.humanDesc += ' until ' + alib.dateTime.format(strendStart, "MM/dd/yyyy");
	}
	
	// time
	if( this.fAllDay == 'f' ){
		this.humanDesc += ' at '+this.timeStart+' to '+this.timeEnd;
	}
	
	return this.humanDesc;

}

CRecurrencePattern.prototype.recurToggleMontlyType = function()
{ 
	
	if (this.type == 3)
	{
	
		this.m_dlgElements.rt_m_d_day.disabled = false; 
		this.m_dlgElements.rt_m_d_int.disabled = false; 
		
		this.m_dlgElements.rt_m_rel_nth.disabled = true; 
		this.m_dlgElements.rt_m_day_nth.disabled = true; 
		this.m_dlgElements.rt_m_d_int_nth.disabled = true; 

		this.instance = 1;
		this.day1 = (this.m_dlgElements.rt_m_d_day.value == 1)?'t':'f';
		this.day2 = (this.m_dlgElements.rt_m_d_day.value == 2)?'t':'f';
		this.day3 = (this.m_dlgElements.rt_m_d_day.value == 3)?'t':'f';
		this.day4 = (this.m_dlgElements.rt_m_d_day.value == 4)?'t':'f';
		this.day5 = (this.m_dlgElements.rt_m_d_day.value == 5)?'t':'f';
		this.day6 = (this.m_dlgElements.rt_m_d_day.value == 6)?'t':'f';
		this.day7 = (this.m_dlgElements.rt_m_d_day.value == 7)?'t':'f';
		this.interval = this.m_dlgElements.rt_m_d_day.value;

	}
	else
	{
		this.m_dlgElements.rt_m_d_day.disabled = true; 
		this.m_dlgElements.rt_m_d_int.disabled = true; 
		
		this.m_dlgElements.rt_m_rel_nth.disabled = false; 
		this.m_dlgElements.rt_m_day_nth.disabled = false; 
		this.m_dlgElements.rt_m_d_int_nth.disabled = false; 
		
		this.day1 = (this.m_dlgElements.rt_m_day_nth.value == 1)?'t':'f';
		this.day2 = (this.m_dlgElements.rt_m_day_nth.value == 2)?'t':'f';
		this.day3 = (this.m_dlgElements.rt_m_day_nth.value == 3)?'t':'f';
		this.day4 = (this.m_dlgElements.rt_m_day_nth.value == 4)?'t':'f';
		this.day5 = (this.m_dlgElements.rt_m_day_nth.value == 5)?'t':'f';
		this.day6 = (this.m_dlgElements.rt_m_day_nth.value == 6)?'t':'f';
		this.day7 = (this.m_dlgElements.rt_m_day_nth.value == 7)?'t':'f';
		
		this.dayOfMonth = this.m_dlgElements.rt_m_day_nth.value;
		this.interval = this.m_dlgElements.rt_m_d_int_nth.value;
		this.instance = this.m_dlgElements.rt_m_rel_nth.value;
	}
}

CRecurrencePattern.prototype.recurToggleYearlyType = function()
{ 

	if (this.type == 5)
	{ 	// yearly
		this.m_dlgElements.rt_y_m.disabled = false; 
		this.m_dlgElements.rt_y_d.disabled = false; 

		this.m_dlgElements.rt_y_rel.disabled = true; 
		this.m_dlgElements.rt_y_day.disabled = true; 
		this.m_dlgElements.rt_y_r_m.disabled = true; 
		
		this.monthOfYear = this.m_dlgElements.rt_y_m.value;
		this.dayOfMonth = this.m_dlgElements.rt_y_d.value;
		
		this.instance =  null;
	}
	else
	{

		// yearnth
		this.m_dlgElements.rt_y_m.disabled = true; 
		this.m_dlgElements.rt_y_d.disabled = true; 

		this.m_dlgElements.rt_y_rel.disabled = false; 
		this.m_dlgElements.rt_y_day.disabled = false; 
		this.m_dlgElements.rt_y_r_m.disabled = false; 
		
		this.instance = this.m_dlgElements.rt_y_rel.value;
		this.monthOfYear = this.m_dlgElements.rt_y_r_m.value;
		
		this.dayOfMonth = null;

	}
} 

/**
 * @fileOverview This client handles listening to the server for stream updates
 *
 * It is desinged to eventually use Websockets, but for now relies on "long poll:
 * with ajax to simulate real-time two-way communication.
 *
 * Clients can listen to the stream for updates by adding an listen event for the
 * type they are looking for.
 *
 * Example of listening for an event of type 'chat'
 * <code>
 * var updateStream = new AntUpdateStream();
 * alib.events.listen(updateStream, "chat", function(evt) { alert(evt.data.friendName); });
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntUpdateStream
 *
 * @constructor
 */
Ant.UpdateStream = function() {
	// Begin polling server for updates
	this.getUpdates();
}

/**
 * Poll server for updates
 */
Ant.UpdateStream.prototype.getUpdates = function()
{
	// Poll the server until we get data or timeout
	var xhr = new alib.net.Xhr();

	// Retrieve results
	alib.events.listen(xhr, "load", function(evt) { 

		var updates = this.getResponse();

		if (updates.length)
		{
			// For each update trigger an event for listeners
			for (var i in updates)
			{
				try {
					alib.events.triggerEvent(Ant.getUpdateStream(), updates[i].type, updates[i].data);
				}
				catch (e) { alert(e); }
			}
		}
		
		// Load again in 1 second
		setTimeout(function() { Ant.getUpdateStream().getUpdates(); }, 1000);
	});

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
		// Try again in 3 seconds
		setTimeout(function() { Ant.getUpdateStream().getUpdates(); }, 3000);
	});

	xhr.send("/controller/User/getUpdateStream");
}

/**
 * Poll server for updates
 *
 * @param {string} evntName The name of the event
 * @param {Function} callback The callback function to call when event is triggered
 * @param {Object} data Optional data to foward
 */
Ant.UpdateStream.prototype.listen = function(evntName, callback, data)
{
	var fwdData = data || new Object();

	alib.events.listen(this, evntName, callback, fwdData);
}

/**
 * @fileOverview This tool will handle a global "Create New" dropdown
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntUpdateStream
 *
 * @constructor
 */
Ant.NewObjectTool = function()
{
	/**
	 * The container that will house the rendered tool
	 *
	 * @var {DOMElement}
	 */
	this.con = null;

	/**
	 * The mode can be 'inline' or 'popup'
	 *
	 * @var {string}
	 */
	this.mode = 'popup';

	/**
	 * If renderd inline then an antView will be provided
	 *
	 * @var {AntView}
	 */
	this.antView = null;

	/**
	 * This will be the cache of objects loaded from the server
	 *
	 * For now we will just manually define the most commonly used
	 *
	 * @private
	 * @var {Object[]}
	 */
	this.objects_ = [
		{title: "Email Message", obj_type: "email_message", icon:"/images/icons/objects/email_message_16.png"},
		{title: "Task", obj_type: "task", icon:"/images/icons/objects/task_16.png"},
		{title: "Case", obj_type: "case", icon:"/images/icons/objects/case_16.png"},
		{title: "Project", obj_type: "project", icon:"/images/icons/objects/project_16.png"},
		{title: "Log Time", obj_type: "time", icon:"/images/icons/objects/time_16.png"},
		{title: "Project Story", obj_type: "project_story", icon:"/images/icons/objects/project_story_16.png"},
		{title: "Calendar Event", obj_type: "calendar_event", icon:"/images/icons/objects/calendar_event_16.png"},
		{title: "Reminder", obj_type: "reminder", icon:"/images/icons/objects/reminder_16.png"},
		{title: "Note", obj_type: "note", icon:"/images/icons/objects/note_16.png"},
		{title: "Person or Organization", obj_type: "customer", icon:"/images/icons/objects/customers/person_16.png"},
		{title: "Lead", obj_type: "lead", icon:"/images/icons/objects/lead_16.png"},
		{title: "Opportunity", obj_type: "opportunity", icon:"/images/icons/objects/opportunity_16.png"}
	];
}

/**
 * Render new objects into an AntView
 *
 * @param {AntView} antView Render this into an antview rather than a popup
 */
Ant.NewObjectTool.prototype.renderView = function(antView)
{
	this.antView = antView;

	// Set the mode to print inline
	this.mode = 'inline';

	// Get objects
 	this.getObjects();
}

/**
 * Anchor popup interface to an element
 *
 * @param DOMElement con The container that will house the rendered tool
 */
Ant.NewObjectTool.prototype.anchorToEl = function(con)
{
	this.con = alib.dom.createElement("a", con, "<img src='/images/icons/add_24.png' />");
	this.con.href = "javascript:void(0);";
	this.con.title = "Click to create a new object";

	// Get objects
 	this.getObjects();
}

/**
 * Get list of objects
 */
Ant.NewObjectTool.prototype.getObjects = function()
{
	// For now just manually build drop-down with common objects
	if (this.mode == "inline")
		return this.buildViewInterface();
	else
		return this.buildDropDown();

	// Poll the server until we get data or timeout
	var xhr = new alib.net.Xhr();

	// Retrieve results
	alib.events.listen(xhr, "load", function(evt) { 

		var objects = this.getResponse();

		evt.data.cls.objects_ = objects;

		// For now just manually build drop-down with common objects
		if (evt.data.cls.mode == "inline")
			evt.data.cls.buildViewInterface();
		else
			evt.data.cls.buildDropDown();
	}, {cls:this});

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
		// Try again in 3 seconds
		setTimeout(function() { evt.data.toolCls.getObjects(); }, 3000);
	}, {toolCls:this});

	xhr.send("/controller/Object/getObjects");
}

/**
 * Build manual dropdown list
 */
Ant.NewObjectTool.prototype.buildDropDown = function()
{
	var menu = new alib.ui.FilteredMenu();

	for (var i in this.objects_)
	{
		var item = new alib.ui.MenuItem(this.objects_[i].title, {icon:"<img src='" + this.objects_[i].icon + "' />"});
		item.cbData.obj_type = this.objects_[i].obj_type;
		item.onclick = function() { loadObjectForm(this.cbData.obj_type); };
		menu.addItem(item);
	}
	/*
	// Email Message
	var item = new alib.ui.MenuItem("Email Message", {icon:"<img src='/images/icons/objects/email_message_10.png' />"});
	item.onclick = function() { loadObjectForm('email_message'); };
	menu.addItem(item);

	// Task
	var item = new alib.ui.MenuItem("Task", {icon:"<img src='/images/icons/objects/task_10.png' />"});
	item.onclick = function() { loadObjectForm('task'); };
	menu.addItem(item);

	// Case
	var item = new alib.ui.MenuItem("Case", {icon:"<img src='/images/icons/objects/case_10.png' />"});
	item.onclick = function() { loadObjectForm('case'); };
	menu.addItem(item);

	// Contact
	var item = new alib.ui.MenuItem("Person or Organization", {icon:"<img src='/images/icons/objects/customers/person_10.png' />"});
	item.onclick = function() { loadObjectForm('customer'); };
	menu.addItem(item);

 	// Calendar Event
	var item = new alib.ui.MenuItem("Calendar Event", {icon:"<img src='/images/icons/objects/calendar_event_10.png' />"});
	item.onclick = function() { loadObjectForm('calendar_event'); };
	menu.addItem(item);

	// Note
	var item = new alib.ui.MenuItem("Note", {icon:"<img src='/images/icons/objects/note_10.png' />"});
	item.onclick = function() { loadObjectForm('note'); };
	menu.addItem(item);
	*/

	menu.attach(this.con);
}

/**
 * Build interface into AntView
 */
Ant.NewObjectTool.prototype.buildViewInterface = function()
{
	var con = this.antView.con;

	for (var i in this.objects_)
	{
		var entry = alib.dom.createElement("article", con);
		alib.dom.styleSetClass(entry, "nav");
		entry.innerHTML = "<a behavior='selectable' href=\"#"+this.antView.getPath()+"/"+this.objects_[i].obj_type+"\" onclick=\"alib.dom.styleAddClass(this, 'selected');\">"
						+ "<span class='icon'><img src='"+this.objects_[i].icon+"' /></span><h2><span class='more'></span>New "+this.objects_[i].title+"</h2></a>";
		var viewNew = this.antView.addView(this.objects_[i].obj_type, {type:this.objects_[i].obj_type});
		viewNew.onshow = function()
		{
			this.con.innerHTML = "";

			var ol = new AntObjectLoader(this.options.type);
			ol.setAntView(this);
			ol.print(this.con);
			ol.cbData.antView = this;
			ol.onClose = function()
			{
				this.cbData.antView.goup();
			}
			ol.onRemove = function()
			{
			}
			ol.onSave = function()
			{
			}
		}
	}
	/*
	// Email Message
	var item = new alib.ui.MenuItem("Email Message", {icon:"<img src='/images/icons/objects/email_message_10.png' />"});
	item.onclick = function() { loadObjectForm('email_message'); };
	menu.addItem(item);

	// Task
	var item = new alib.ui.MenuItem("Task", {icon:"<img src='/images/icons/objects/task_10.png' />"});
	item.onclick = function() { loadObjectForm('task'); };
	menu.addItem(item);

	// Case
	var item = new alib.ui.MenuItem("Case", {icon:"<img src='/images/icons/objects/case_10.png' />"});
	item.onclick = function() { loadObjectForm('case'); };
	menu.addItem(item);

	// Contact
	var item = new alib.ui.MenuItem("Person or Organization", {icon:"<img src='/images/icons/objects/customers/person_10.png' />"});
	item.onclick = function() { loadObjectForm('customer'); };
	menu.addItem(item);

 	// Calendar Event
	var item = new alib.ui.MenuItem("Calendar Event", {icon:"<img src='/images/icons/objects/calendar_event_10.png' />"});
	item.onclick = function() { loadObjectForm('calendar_event'); };
	menu.addItem(item);

	// Note
	var item = new alib.ui.MenuItem("Note", {icon:"<img src='/images/icons/objects/note_10.png' />"});
	item.onclick = function() { loadObjectForm('note'); };
	menu.addItem(item);

	menu.attach(this.con);
	*/
}

/**
* @fileOverview Dialg used to set Dacl permissions
*
* @author	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011-2012 Aereus Corporation. All rights reserved.
*/

/**
 * Class constructor
 *
 * @constructor
 * @param {string} name The unique name of this Dacl
 * @param {string} inheritFrom Optional existing DACL to inherit from
 */
function DaclEdit(name, inheritFrom)
{
	/**
	 * Dialog canvas
	 * 
	 * @var {DOMElement}
	 */
	this.con = null;

	/**
	 * The unique name of this dacl
	 *
	 * @var {string}
	 */
	this.name = name;

	/**
	 * The unique name of this dacl
	 *
	 * @var {string}
	 */
	this.inheritFrom = (inheritFrom) ? inheritFrom : null;

	/**
	 * Permissions
	 *
	 * Permissions have two properties: name and children
	 *
	 * @var {Object[]}
	 */
	this.permissions = new Array();

	/**
	 * Entries
	 *
	 * Array of dacl entries {user_id, group_id, pname}
	 *
	 * @var {Object[]}
	 */
	this.entries = new Array();

	/**
	 * Users and groups with access 
	 *
	 * Each will be an object with group_id|user_id, name
	 *
	 * @var {Object[]}
	 */
	this.usersAndGroups  = new Array();
}

/**
* Display dialog
*
* @param {object} parentDlg Dialog of parent
*/
DaclEdit.prototype.showDialog = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.dlg = new CDialog("Edit Permissions", this.parentDlg);
	this.dlg.f_close = true;

	this.con = alib.dom.createElement("div");
	
	this.dlg.customDialog(this.con, 500, 450);
	this.buildInterface();
}

/**
* Build object edit interface
*/
DaclEdit.prototype.buildInterface = function()
{	
	// Clear canvas
	this.con.innerHTML = "";

	var formCon = alib.dom.createElement("div", this.con);
	alib.dom.styleSet(formCon, "overflow", "hidden");
	alib.dom.styleSet(formCon, "margin-bottom", "10px");
	alib.dom.styleSet(formCon, "height", "400px");

	// Print header / title
	var ttl = alib.dom.createElement("h2", formCon, "Modifying permissions for: " + this.name);

	// Print HR
	var hr = alib.dom.createElement("hr", formCon);

	// Add inherit
	// -------------------------------------------
	if (this.inheritFrom != null)
	{
		var inhCon = alib.dom.createElement("div", formCon);
		var cb = alib.dom.createElement("input", inhCon);
		cb.type = "checkbox";
		cb.checked =  true;
		var lbl = alib.dom.createElement("span", inhCon, "Inherit from parent object or permission");
	}

	// Print users and groups
	// -------------------------------------------
	var ttl = alib.dom.createElement("h3", formCon, "Users &amp; Groups With Access (click to view details)");

	this.usersCon = alib.dom.createElement("div", formCon);
	alib.dom.styleSet(this.usersCon, "max-height", "75px");
	alib.dom.styleSet(this.usersCon, "margin-bottom", "5px");
	alib.dom.styleSet(this.usersCon, "overflow", "auto");
	alib.dom.styleSet(this.usersCon, "padding-left", "2px");
	this.loadUserAndGroups();

	var buttonCon = alib.dom.createElement("div", formCon);

	// Add user
	var button = alib.ui.Button("Add User", {
		className:"b1", tooltip:"Click to give a specific user permission to this object", cls:this, 
		onclick:function() { this.cls.addUser(); }
	});
	button.print(buttonCon);

	// Add group
	var grpsel = new AntObjectGroupingSel("Add Group", "user", "groups");
	grpsel.cbData.cls = this;
	grpsel.onSelect = function(gid, name) 
	{ 
		this.setLabel("Add Group"); // rest, by default the selected group name will become the button name
		this.cbData.cls.insertUserGroup(null, gid, name);
		this.cbData.cls.setEntry(null, gid, "Full Control");
	}
	grpsel.print(buttonCon);
	/*
	var button = alib.ui.Button("Add Group", {
		className:"b1", tooltip:"Click to give a group access to this object", cls:this, 
		onclick:function() { this.cls.addGroup(); }
	});
	button.print(buttonCon);
	*/
	
	// Print permissions
	// -------------------------------------------
	this.permissionsTitle = alib.dom.createElement("h3", formCon, "Permissions (select a user or group above to edit permissions)");
	this.permissionsCon = alib.dom.createElement("div", formCon);
	alib.dom.styleSet(this.permissionsCon, "max-height", "146px");
	alib.dom.styleSet(this.permissionsCon, "overflow", "auto");
	alib.dom.styleSet(this.permissionsCon, "padding", "2px");
	this.loadEntries();

	// Print action buttons
	// -------------------------------------------
	var buttonCon = alib.dom.createElement("div", this.con);
	alib.dom.styleSet(buttonCon, "text-align", "right");

	// Save & close
	var button = alib.ui.Button("Save &amp; Close", {
		className:"b2", tooltip:"Save changes and close dialog", cls:this, 
		onclick:function() { this.cls.save(true); }
	});
	button.print(buttonCon);

	// Save
	var button = alib.ui.Button("Save", {
		className:"b1", tooltip:"Save any changes you have made", cls:this, 
		onclick:function() { this.cls.save(); }
	});
	button.print(buttonCon);

	// Cancel
	var button = alib.ui.Button("Cancel", {
		className:"b1", tooltip:"Close without saving any changes", cls:this, 
		onclick:function() { this.cls.dlg.hide(); }
	});
	button.print(buttonCon);
}

/**
 * Load users and groups
 *
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 */
DaclEdit.prototype.loadUserAndGroups = function(user, group)
{
	if (typeof user == "undefined") 
		var user = null;
	if (typeof group == "undefined") 
		var group = null;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;        
	ajax.cbData.selectOnLoad = {user:user, group:group, name:""};
	ajax.onload = function(ret)
	{
		this.cbData.cls.usersCon.innerHTML = "";
		for (var i = 0; i < ret.length; i++)
		{
			var usrgrp = ret[i];

			this.cbData.cls.insertUserGroup((usrgrp.user_id) ? usrgrp.user_id : null, 
											(usrgrp.group_id) ? usrgrp.group_id : null,
											usrgrp.name);
		}
		/*
		if (this.cbData.selectOnLoad.user || this.cbData.selectOnLoad.group)
		{
			this.cbData.cls.loadEntries(this.cbData.selectOnLoad.user, 
										this.cbData.selectOnLoad.group, 
										this.cbData.selectOnLoad.name);

			this.cbData.cls.selectUserGroup(this.cbData.selectOnLoad.user, this.cbData.selectOnLoad.group);
		}
		*/
	}

	var params = [["name", this.name]];
	ajax.exec("/controller/Security/loadDaclUsersAndGroups", params);
}

/**
 * Add a user|group to the array and table
 *
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 */
DaclEdit.prototype.insertUserGroup = function(user, group, name)
{
	if (typeof user == "undefined") 
		var user = null;
	if (typeof group == "undefined") 
		var group = null;

	// Add to array
	var atInd = -1;
	for (var i in this.usersAndGroups)
	{
		if (user)
		{
			if (this.usersAndGroups[i].user_id == user)
				atInd = i;
		}
		else if (group)
		{
			if (this.usersAndGroups[i].group_id == group)
				atInd = i;
		}
	}

	if (atInd == -1)
	{
		this.usersAndGroups.push({user_id:user, group_id:group, name:name});

		var con = alib.dom.createElement("div", this.usersCon);
		alib.dom.styleSetClass(con, "aobListRow");
		alib.dom.styleSet(con, 'padding', "3px");
		var icon = (user) ? "user_16.png" : "group_16.png";
		con.innerHTML = "<img src='/images/icons/" + icon + "'> " + name;
		con.usrgrp = {user_id:user, group_id:group};
		con.cls = this;
		con.onclick = function()
		{
			//this.cls.loadEntries(user, group, this.usrgrp.name);
			this.cls.printEntries(this.usrgrp.user_id, this.usrgrp.group_id);
		}
	}
}

/**
 * Load permissions and entries for this DACL
 */
DaclEdit.prototype.loadEntries = function()
{	
	this.permissionsCon.innerHTML = "<div class='loading'></div>";
	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(ret)
	{
		// Set permissions
		this.cbData.cls.permissions = ret.permissions;
		this.cbData.cls.entries = ret.entries;
		//this.cbData.cls.permissionsCon.innerHTML = "";
		this.cbData.cls.printEntries();
	}
	ajax.exec("/controller/Security/loadDaclPermissions", [["name", this.name]]);
}

/**
 * Load permissions
 *
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 * @param {int} lvl The number of levels deep we are (for the prefix of the name)
 * @param {Array} childPerms Array of permissions to print
 * @param {DOMElement} pntCon The parent container
 */
DaclEdit.prototype.printEntries = function(user, group, lvl, parentCon, childPerms)
{	
	var user = (user) ? user : null;
	var group = (group) ? group : null;

	if (user || group)
	{
		this.permissionsTitle.innerHTML = "What would you like " + this.getUsrGrpName(user, group)+ " to have access to? (uncheck all to delete)";
		this.selectUserGroup(user, group);
	}
	
	// Create prefix
	var level = (typeof lvl != "undefined") ? lvl : 0;
	var pre = "";
	for (var i = 0; i < lvl; i++) pre += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
	if (typeof childPerms == "undefined") this.permissionsCon.innerHTML = ""; // clear container

	var permissions = (typeof childPerms != "undefined") ? childPerms : this.permissions;

	// Loop through all available permissions and print
	for (var i = 0; i < permissions.length; i++)
	{
		var per = permissions[i];

		var entCon = alib.dom.createElement("div", this.permissionsCon);
		entCon.cls = this;
		entCon.name = per.name;
		entCon.usrgrp = {user_id: user, group_id: group};
		entCon.childCons = new Array();

		var spacer = alib.dom.createElement("span", entCon, pre);
		entCon.chk = alib.dom.createElement("input", entCon);
		entCon.chk.type = "checkbox";
		entCon.chk.entCon = entCon;
		entCon.chk.onclick = function() { this.entCon.setToggled(this.checked); }
		entCon.chk.checked = this.isEntry(user, group, per.name);
		if (!entCon.chk.checked && parentCon)
			entCon.chk.checked = parentCon.chk.checked;

		// We can only set permissions for actual user or group
		if (user==null && group==null)
			entCon.chk.disabled = true;

		var lbl = alib.dom.createElement("span", entCon, "&nbsp;" + per.name);

		// Set access function
		entCon.setToggled = function(on)
		{
			this.chk.checked = on;

			if (on)
				this.cls.setEntry(this.usrgrp.user_id, this.usrgrp.group_id, this.name);
			else
				this.cls.removeEntry(this.usrgrp.user_id, this.usrgrp.group_id, this.name);

			if (this.pnt)
				this.pnt.childrenChanged(on);
			
			for (var i = 0 ; i < this.childCons.length; i++)
				this.childCons[i].setToggled(on);
		}

		// Event fired when a child changes
		entCon.childrenChanged = function(on)
		{
			if (this.chk.checked && !on)
				this.chk.checked = on;
			else
			{
				var allSel = true;
				for (var i = 0; i < this.childCons.length; i++)
					if (!this.childCons[i].chk.checked) allSel = false;

				if (allSel)
					this.chk.checked = on;
			}
		}

		// Check if we have a parent container
		entCon.pnt = (typeof parentCon != "undefined") ? parentCon : null;
		if (typeof parentCon != "undefined")
			parentCon.childCons.push(entCon);

		if (per.children && per.children.length)
			this.printEntries(user, group, ++level, entCon, per.children);
	}
}

/**
 * Select specific user or group
 */
DaclEdit.prototype.selectUserGroup = function(user, group)
{	
	for (var i = 0; i < this.usersCon.childNodes.length; i++)
	{
		var el = this.usersCon.childNodes[i];
		var selected = false;
		if (group)
		{
			if (el.usrgrp.group_id && el.usrgrp.group_id  == group)
				selected = true;
		}
		else if (user)
		{
			if (el.usrgrp.user_id && el.usrgrp.user_id == user)
				selected = true;
		}

		alib.dom.styleSetClass(el, (selected) ? "aobListRowAct" : "aobListRow");
	}
}

/**
 * Save entries for this DACL
 *
 * @private
 * @param {bool} close If set to true then close on success
 */
DaclEdit.prototype.save = function(close)
{
	var params = [["name", this.name]];

	// Loop through all entries and see if they are checked
	for (var i in this.entries)
		params.push(["entries[]", JSON.stringify(this.entries[i])]);

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.closeOnSave = (typeof close != "undefined") ? close : false;
	ajax.onload = function(ret)
	{
		if (this.cbData.closeOnSave)
			this.cbData.cls.dlg.hide();
	}
	ajax.exec("/controller/Security/saveDaclEntries", params);
}

/**
 * Add a user and start them off with full controll
 *
 * @private
 */
DaclEdit.prototype.addUser = function()
{
	var ob = new AntObjectBrowser("user");
	ob.cbData.cls = this;
	ob.onSelect = function(oid, name) 
	{
		this.cbData.cls.insertUserGroup(oid, null, name);
		this.cbData.cls.setEntry(oid, null, "Full Control");
	}
	ob.displaySelect(this.dlg);
}

/**
 * Check if a user or group has access to a permission entry
 *
 * @private
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 * @param {string} perName The name of the permission entry
 */
DaclEdit.prototype.isEntry = function(user_id, group_id, perName)
{
	var user = (user_id) ? user_id : null;
	var group = (group_id) ? group_id : null;

	for (var i in this.entries)
	{
		if (this.entries[i].pname == perName)
		{
			if ((user && this.entries[i].user_id==user) || (group && this.entries[i].group_id==group))
				return true;
		}
	}

	return false;
}

/**
 * Set a user or group to have access to a permission
 *
 * @private
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 * @param {string} perName The name of the permission entry
 */
DaclEdit.prototype.setEntry = function(user_id, group_id, perName)
{
	var user = (user_id) ? user_id : null;
	var group = (group_id) ? group_id : null;
	var atInd = -1;

	// Check if entry already exists
	for (var i in this.entries)
	{
		if (this.entries[i].pname == perName)
		{
			if ((user && this.entries[i].user_id==user) || (group && this.entries[i].group_id==group))
				atInd = i;
		}
	}

	// If not already added, then add to array
	// all entries denote access
	if (atInd == -1)
	{
		this.entries.push({user_id:user, group_id:group, pname:perName});
	}
}

/**
 * Save entries for the given user or group
 *
 * @private
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 */
DaclEdit.prototype.removeEntry = function(user_id, group_id, perName)
{
	var user = (user_id) ? user_id : null;
	var group = (group_id) ? group_id : null;

	for (var i in this.entries)
	{
		if (this.entries[i].pname == perName)
		{
			if ((user && this.entries[i].user_id==user) || (group && this.entries[i].group_id==group))
			{
				this.entries.splice(i, 1);
			}
		}
	}
}

/**
 * Get the name of a user or group
 *
 * @param {int} user If set load permissions for a specific user
 * @param {int} group If set load permissions for a specific group
 * @param {string} The name of the user or group
 */
DaclEdit.prototype.getUsrGrpName = function(user, group)
{	
	for (var i in this.usersAndGroups)
	{
		if (user)
		{
			if (this.usersAndGroups[i].user_id == user)
				return this.usersAndGroups[i].name;
		}
		else if (group)
		{
			if (this.usersAndGroups[i].group_id == group)
				return this.usersAndGroups[i].name;
		}
	}

	// Not found
	return (user) ? "User" : "Group";
}

/**
 * @fileOverview Plugin used for handling composing new emails
 *
 * Example of composing a new email
 * <code>
 * Ant.Emailer.compose("my@address.com", { subject: "My Test Subject" });
 * </code>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2014 Aereus Corporation. All rights reserved.
 */

/**
 * Static namespace
 */
Ant.Emailer = {};

/**
 * Flag to determine if settings have been retrieved
 *
 * @private
 * @type {bool}
 */
Ant.Emailer.settingsRetrieved_ = false;

/**
 * Flag to determine if we are using netric to compose emails or the 'mailto' client
 *
 * @private
 * @type {bool}
 */
Ant.Emailer.composeNetric_ = false;

/**
 * Flag to determine if we should be logging all mail (add bcc to mailto)
 *
 * @private
 * @type {bool}
 */
Ant.Emailer.logAllMail_ = false;


/**
 * Compose a new email
 *
 * @param {string|array} to Can either be a single address, or an array of addresses
 * @param {Object} opt Additional options like cc, bcc, subject...
 */
Ant.Emailer.compose = function(to, opt) {

	var options = opt || new Object();
	var sendTo = null;

	if (typeof to === "string")
	{
		sendTo = to;
	}
	else if (typeof to != "undefined" || to.length > 0)
	{
		for (var i in to)
		{
			sendTo += (sendTo) ? "," + to[i] : to[i];
		}
	}
	
	if (!this.settingsRetrieved_)
	{
		this.getSettings_(sendTo, options);
		return;
	}

	if (this.composeNetric_)
	{
		var args = new Array();
		if (sendTo)
			args.push(["send_to", sendTo]);
		else if (options.to)
			args.push(["send_to", options.to]);
			
		if (options.subject)
			args.push(["subject", options.subject])
		if (options.cc)
			args.push(["cc", options.cc])
		if (options.bcc)
			args.push(["bcc", options.bcc])
		if (options.body)
			args.push(["body", options.body])

		// No need to log because that will happen on the backend
		loadObjectForm("email_message", null, null, null, args);
	}
	else
	{
		// Use mailto
		// Check if we have a reference we can use to log this email
		if (this.logAllMail_)
		{
			if (options.obj_type && options.oid)
			{
				options.bcc = Ant.account.name + "-act-" + options.obj_type + "." + options.oid + "@" + Ant.settings.email.dropbox_catchall;
			}
		}

		var cmpStr = "mailto:";

		if (sendTo)
			cmpStr += sendTo;
		else if (options.to)
			cmpStr += options.to;

		cmpStr += "?fv=1";

		if (options.subject)
			cmpStr += "&subject=" + escape(options.subject);
		if (options.cc)
			cmpStr += "&cc=" + escape(options.cc);
		if (options.bcc)
			cmpStr += "&bcc=" + escape(options.bcc);
		if (options.body)
			cmpStr += "&body=" + escape(options.body);

		window.location.href = cmpStr;
	}
}

/**
 * Get and cache composer settings
 *
 * @param {string|array} to Optional queued compose request to call once settings are loaded
 * @param {Object} opt Optional options to send with compose request
 */
Ant.Emailer.getSettings_ = function(to, opt) {
	// Poll the server until we get data or timeout
	var xhr = new alib.net.Xhr();

	// Retrieve results
	alib.events.listen(xhr, "load", function(evt) { 

		var settings = this.getResponse();

		if (!settings["error"])
		{
			if (settings["email/compose_netric"])
				evt.data.cls.composeNetric_ = (settings["email/compose_netric"] == 1) ? true : false;

			if (settings["email/log_allmail"])
				evt.data.cls.logAllMail_ = (settings["email/log_allmail"] == 1) ? true : false;
		}

		evt.data.cls.settingsRetrieved_ = true;

		Ant.Emailer.compose(to, opt);
	}, {cls:this});

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
		// Display error?
	});

	xhr.send("/controller/Admin/getSetting", "POST", {get:["email/compose_netric", "email/log_allmail"]});
}

var WF_TIME_UNIT_MINUTE	= 1;
var WF_TIME_UNIT_HOUR	= 2;
var WF_TIME_UNIT_DAY	= 3;
var WF_TIME_UNIT_WEEK	= 4;
var WF_TIME_UNIT_MONTH	= 5;
var WF_TIME_UNIT_YEAR	= 6;

var WF_ATYPE_SENDEMAIL 	= 1;
var WF_ATYPE_CREATEOBJ 	= 2;
var WF_ATYPE_UPDATEFLD 	= 3;
var WF_ATYPE_STARTCHLD 	= 4;
var WF_ATYPE_STOPWF 	= 5;
var WF_ATYPE_APPROVAL   = 8;
var WF_ATYPE_CALLPAGE 	= 9;
var WF_ATYPE_ASSIGNRR 	= 10;
var WF_ATYPE_WAITCONDITION 	= 11;
var WF_ATYPE_CHECKCONDITION 	= 12;


function WorkFlow(id)
{    
	this.id = (id) ? id : null;
	this.name = "Untitled";
	this.fActive = false;
	this.object_type = "";

	// Set launch conditions to null
	this.conditions = new Array();

	// List of actions to perform
	this.actions = new Array();
    this.gWfCondUid = 0;
}

WorkFlow.prototype.getNumConditions = function()
{
    return this.conditions.length;
}

WorkFlow.prototype.addCondition = function(blogic, fieldName, operator, condValue, condId)
{
    if(!condId)
    {
        var condId = "new" + this.gWfCondUid;
        this.gWfCondUid++;
    }    
    var cond = new WorkFlowCondition(blogic, fieldName, operator, condValue, condId);
    this.conditions[this.conditions.length] = cond;    
}

WorkFlow.prototype.delConditions = function()
{
    this.conditions = new Array();;
}

/**
 * Legacy: actions used to be called tasks
 */
WorkFlow.prototype.getNumTasks = function()
{
	return this.getNumActions();
}

/**
 * Get the number of actions at the root level of this workflow
 *
 * @this {WorkFlow}
 * @return {number} number of actions
 */
WorkFlow.prototype.getNumActions = function()
{
	return this.actions.length;
}

/**
 * Add action
 *
 * @this {WorkFlow}
 * @param {number} type One of the defined WF_ATYPE_* id numbers
 * @param {Object] data Optional data used to populate action properties
 * @return {number} number of actions
 */
WorkFlow.prototype.addAction = function(type, data)
{
	var act = new WorkFlow_Action(type, this);

	if (typeof data != "undefined")
		act.loadFromData(data);

	this.actions[this.actions.length] = act;
	return act;
}

/**
 * Remove action
 *
 * @this {WorkFlow}
 * @param {WorkFlow_Action} act Reference to action that should be removed
 */
WorkFlow.prototype.removeAction = function(act)
{
	for (var i = 0; i < this.actions.length; i++)
	{
		if (this.actions[i] == act)
		{
			this.actions[i].remove();

			// Remove from array
			this.actions.splice(i, 1);
		}
	}
}

WorkFlow.prototype.delActionById = function(id)
{
	for (var i = 0; i < this.actions.length; i++)
	{
		if (this.actions[i].id == id)
		{
			this.actions[i].edit_status = "delete";
			//this.actions[i].splice(i, 1);
			return;
		}
	}
}

WorkFlow.prototype.getTasks = function(ind)
{
	return this.actions[ind];
}

WorkFlow.prototype.delTask = function(id)
{
	return this.actions[ind];
}

WorkFlow.prototype.load = function()
{    
	ajax = new CAjax('json');
    ajax.cbData.cls = this;    
    ajax.cbData.id = this.id;
	ajax.onload = function(ret)
	{
        if(ret)
        {
            var wfInfo = ret.wfInfo;
            this.cbData.cls.id = wfInfo.id;
            this.cbData.cls.name = wfInfo.name;
            this.cbData.cls.notes = wfInfo.notes;
            this.cbData.cls.object_type = wfInfo.object_type;        
            this.cbData.cls.fActive = wfInfo.f_active;        
            this.cbData.cls.fOnCreate = wfInfo.f_on_create;        
            this.cbData.cls.fOnUpdate = wfInfo.f_on_update;        
            this.cbData.cls.fOnDelete = wfInfo.f_on_delete;        
            this.cbData.cls.fOnDaily= wfInfo.f_on_daily;        
            this.cbData.cls.fSingleton = wfInfo.f_singleton;        
            this.cbData.cls.fAllowManual = wfInfo.f_allow_manual;
            this.cbData.cls.fConditionUnmet = wfInfo.f_condition_unmet;
            
            var wfCondition = ret.wfCondition;
            for(cond in wfCondition)
            {
                var currentCond = wfCondition[cond];
                this.cbData.cls.addCondition(currentCond.blogic, currentCond.field_name, currentCond.operator, currentCond.cond_value, currentCond.id);
            }
        }        
        
		// Now get actions from server
		this.cbData.cls.loadActions();
	};
    
    ajax.exec("/controller/WorkFlow/getWorkflowDetails", [["wfid", this.id]]);
	
}

/**
 * Load actions array
 *
 * @this {WorkFlow}
 * @private
 */
WorkFlow.prototype.loadActions = function()
{
	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(actions)
	{
		for (var i = 0; i < actions.length; i++)
		{
			this.cbData.cls.addAction(actions[i].type, actions[i]);
		}

		this.cbData.cls.onload();
	};    
	ajax.exec("/controller/WorkFlow/getWorkFlowActions", [["wfid", this.id]]);
}

WorkFlow.prototype.onload = function()
{
	// This function exists to be defined before load is called above
}

WorkFlow.prototype.save = function()
{
	var args = [["name", this.name], ["notes", this.notes], ["object_type", this.object_type],
				["f_on_create", (this.fOnCreate)?'t':'f'], ["f_on_update", (this.fOnUpdate)?'t':'f'], 
				["f_on_delete", (this.fOnDelete)?'t':'f'], ["f_on_daily", (this.fOnDaily)?'t':'f'],
				["f_allow_manual", (this.fAllowManual)?'t':'f'], 
				["f_singleton", (this.fSingleton)?'t':'f'], 
                ["f_active", (this.fActive)?'t':'f'],
                ["f_condition_unmet", (this.fConditionUnmet)?'t':'f']];
	if (this.id)
		args[args.length] = ["wid", this.id];
        
    // Add workflow conditions
    for (var i = 0; i < this.getNumConditions(); i++)
    {
        var cid = this.conditions[i].id;
        args[args.length] = ["conditions[]", cid];
        args[args.length] = ["condition_blogic_"+cid, this.conditions[i].blogic];
        args[args.length] = ["condition_fieldname_"+cid, this.conditions[i].fieldName];
        args[args.length] = ["condition_operator_"+cid, this.conditions[i].operator];
        args[args.length] = ["condition_condvalue_"+cid, this.conditions[i].condValue];
    }
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            if (!this.cbData.cls.id)
            {
                this.cbData.cls.id = ret;
            }

            if (this.cbData.cls.getNumTasks())
                this.cbData.cls.saveActions();
            else
                this.cbData.cls.onsave();
        }
        else
            this.cbData.cls.onsaveError();
    };
    ajax.exec("/controller/WorkFlow/saveWorkflow", args);
}

WorkFlow.prototype.saveActions = function()
{
	for (var i = 0; i < this.getNumActions(); i++)
	{
		if (this.actions[i].isDirty(true)) // the true param will search child actions
		{
			this.actions[i].cbData.workflow = this;
			this.actions[i].onsaved = function()
			{
				this.cbData.workflow.saveActions();
			}
			this.actions[i].save();

			// once child is saved this function will be called again until all children are processed
			return;
		}
	}

	this.onsave();
}

WorkFlow.prototype.onsave = function()
{
	// This function exists to be defined before save is called above
}

WorkFlow.prototype.onsaveError = function()
{
	// This function exists to be defined before save is called above
}



//============================================================================
//    Class: 	WorkFlowCondition
//    			Class that stores and manages single/multi conditions for
//    			any objects.
//============================================================================
function WorkFlowCondition(blogic, fieldName, operator, condValue, condId)
{
    var cond = new Object();
	cond.id = condId;
	cond.blogic = blogic;
	cond.fieldName = fieldName;
	cond.operator = operator;
	cond.condValue = condValue;
    
    return cond;
}


//============================================================================
//     Workflow Functions
//============================================================================
function wfGetTimeUnits()
{
	var buf = new Array();

	buf[0] = new Array(WF_TIME_UNIT_MINUTE, "Minute(s)");
	buf[1] = new Array(WF_TIME_UNIT_HOUR, "Hour(s)");
	buf[2] = new Array(WF_TIME_UNIT_DAY, "Day(s)");
	buf[3] = new Array(WF_TIME_UNIT_WEEK, "Week(s)");
	buf[4] = new Array(WF_TIME_UNIT_MONTH, "Month(s)");
	buf[5] = new Array(WF_TIME_UNIT_YEAR, "Year(s)");

	return buf;
}

function wfGetTimeUnitName(unit)
{
	var buf = "";
	var units = wfGetTimeUnits();

	for (var i = 0; i < units.length; i++)
	{
		if (units[i][0] == unit)
			buf = units[i][1];
	}

	return buf;
}

/**
* @fileOverview User selector
*
* This selector is used by workflow action dialogs to get available 
* options for selecting a user as a variable.
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of WorkFlow_Selector_User
 *
 * @constructor
 * @this {WorkFlow_Selector_User}
 * @param {CAntObject} obj Reference to object type to pull fields from
 */
function WorkFlow_Selector_User(obj)
{
	/**
	* Array of objects that can be used to pull fields from
	*
	* @private
	* @type {[CAntObject]}
	*/
    this.objects = [obj];	

	/**
	* Optional parent dialog
	*
	* @private
	* @type {[CDialog]}
	*/
    this.parentDialog = null;	
}


/**
 * Print the grid inside a dom element/container
 *
 * @public
 * @this {WorkFlow_Selector_User}
 * @return {DOMElement} con The container that will be used to house the grid
 */
WorkFlow_Selector_User.prototype.print = function(con, inpt)
{
    var sel = alib.dom.createElement("select", con);
	sel.inpt = inpt;
    sel[sel.length] = new Option("Click to select user", "", false, true);

	for (var j = 0; j < this.objects.length; j++)
	{
		for (var i = 0; i < this.objects[j].getNumFields(); i++)
		{
			var field = this.objects[j].getField(i);

			if (field.type == "object" && field.subtype == "user")
			{
    			sel[sel.length] = new Option(this.objects[j].title + "." + field.title,"<%"+field.name+"%>");

				// Add manager
    			sel[sel.length] = new Option(this.objects[j].title + "." + field.title + ".Manager","<%"+field.name+".manager_id%>");
			}
		}
	}

    sel[sel.length] = new Option("Select Specific User", "browse");
	sel.parentDialog = this.parentDialog;
	sel.onchange = function()
	{
		if (this.value == "browse")
		{
			var ob = new AntObjectBrowser("user");
			ob.cbData.inpt = inpt;
			ob.onSelect = function(oid, name) 
			{
				this.cbData.inpt.value = oid;

				try
				{
					if (this.cbData.inpt.onchange)
						this.cbData.inpt.onchange();
				}
				catch (e) {}
			}
			ob.displaySelect(this.parentDialog);
		}
		else if (this.value)
		{
			this.inpt.value = this.value;

			try
			{
				if (this.inpt.onchange)
					this.inpt.onchange();
			}
			catch (e) {}
		}

		// Reset selection to the beginning
		this.selectedIndex = 0;
	}
}

/**
 * Set parent dialog for modal display
 *
 * @public
 * @this {WorkFlow_Selector_User}
 * @param {CDialog} dlg The parent dialog
 */
WorkFlow_Selector_User.prototype.setParentDialog = function(dlg)
{
	this.parentDialog = dlg;
}

/**
* @fileOverview Merge field selector
*
* This will take a handle to an object and print a friendly drop-down to add values into a text box or textarea as merge fields
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of WorkFlow_Selector_MergeField
 *
 * @constructor
 * @param {CAntObject} obj Reference to object type to pull fields from
 */
function WorkFlow_Selector_MergeField(obj)
{
	/**
	 * Array of objects that can be used to pull fields from
	 *
	 * @private
	 * @type {[CAntObject]}
	 */
    this.objects = [obj];	

	/**
	 * The input where we will be putting the merge field value
	 *
	 * @private
	 * @type {[CDialog]}
	 */
    this.input = null;	
}


/**
 * Print the grid inside a dom element/container
 *
 * @public
 * @return {DOMElement} con The container that will be used to house the grid
 */
WorkFlow_Selector_MergeField.prototype.attach = function(lnkCon, inpt)
{
	var menuAct = new alib.ui.PopupMenu();
	this.input = inpt;

	// Add object link
	var item = new alib.ui.MenuItem("Link to " + this.objects[0].title, {cls:this});
	item.onclick = function() { this.options.cls.insertText("<%object_link%>"); };
	menuAct.addItem(item);

	for (var j = 0; j < this.objects.length; j++)
	{
		for (var i = 0; i < this.objects[j].getNumFields(); i++)
		{
			var field = this.objects[j].getField(i);

			if (field.type != "object_multi" && field.type != "fkey_multi")
			{
				if (field.type == "object" && field.subtype)
				{
					var submenu = new alib.ui.SubMenu(this.objects[j].title + "." + field.title);
					this.addSubObjects(submenu, field);
					menuAct.addItem(submenu);
				}
				else
				{
					var item = new alib.ui.MenuItem(this.objects[j].title + "." + field.title, {mergeVal:"<%" + field.name + "%>", cls:this});
					item.onclick = function() { this.options.cls.insertText(this.options.mergeVal); };
					menuAct.addItem(item);
				}
			}
		}
	}

	menuAct.attach(lnkCon);
}


/**
 * Print the grid inside a dom element/container
 *
 * @public
 * @return {DOMElement} con The container that will be used to house the grid
 */
WorkFlow_Selector_MergeField.prototype.addSubObjects = function(subMenu, pField)
{
	var obj = new CAntObject(pField.subtype);

	for (var i = 0; i < obj.getNumFields(); i++)
	{
		var field = obj.getField(i)

		if (field.type != "object_multi" && field.type != "fkey_multi")
		{
			var item = new alib.ui.MenuItem(field.title, {mergeVal:"<%" + pField.name + "." + field.name + "%>", cls:this});
			item.onclick = function() { this.options.cls.insertText(this.options.mergeVal); };
			subMenu.addItem(item);
		}
	}
}

/**
 * Print the grid inside a dom element/container
 *
 * @public
 * @return {DOMElement} con The container that will be used to house the grid
 */
WorkFlow_Selector_MergeField.prototype.insertText = function(text)
{
	this.input.value = this.input.value + text;
}

//============================================================================
//    Class: 	WorkFlow_Action
//============================================================================
var g_ActId = 0;
function WorkFlow_Action(type, workflow, parentAction)
{
	this.workflow = workflow;
	this.parentAction = (parentAction) ? parentAction : null;
	this.parentActionId = (parentAction) ? parentAction.id : null;
	this.parentActionEvent = null;

	this.id = null;
	this.name = "Untitled";
	this.edit_status = "nochange";

	// Set launch conditions to null (will inherit from WorkFlow)
    this.conditions = new Array();
	this.antConditionsObj = null;

	// Set launch time
	this.when = new Object();
	this.when.interval = 0;
	this.when.unit = type;

	// Set type
	this.type = type;

	// WF_ATYPE_SENDEMAIL
	this.send_email_fid 	= "object_name/type";

	// WF_ATYPE_UPDATEFLD
	this.update_field 		= null; // field_name
	this.update_to 			= null; // field_value

	// WF_ATYPE_CREATEOBJ
	this.create_obj 		= null; // object_name/type
	this.create_obj_fid		= null; // File ID for object template
	this.create_obj_values 	= new Array(); // [['field_name', 'field_value'], ['field2_name', 'field2_value']]
	
	// WF_ATYPE_STARTCHLD
	this.start_wfid 		= null; // The workflow id to start

	// WF_ATYPE_STOPWF
	this.stop_wfid 			= null; // The workflow id to stop - should default to this one

	// Array of child actions
	this.childActions = new Array(); 
	this.cbData = new Object();
	this.dirty = true;
}

/**
 * Save this action and any children actions
 *
 * When finished this.onsaved will be called
 *
 * @public
 * @this {WorkFlow_Action}
 * @param {bool} force If true, action will be saved even if it is not dirty
 */
WorkFlow_Action.prototype.save = function(force)
{
	if (this.isDirty() || force)
	{
		alib.m_debug = true;
		var ajax = new CAjax('json');
		ajax.cbData.cls = this;
		ajax.onload = function(aid)
		{
			if (!this.cbData.cls.id && aid)
				this.cbData.cls.id = aid;

			this.cbData.cls.dirty = false;
			this.cbData.cls.saveChildren();
		};

		var args = [
			["id", this.id],
			["workflow_id", this.workflow.id],
			["type", this.type],
			["when_interval", this.when.interval],
			// ["when_unit", this.when.unit], Depricated - Removed the wait condition and moved it to wf wait condition action
			["name", this.name],
			["send_email_fid", this.send_email_fid],
			["update_field", this.update_field],
			["update_to", this.update_to],
			["parent_action_id", (this.parentAction) ? this.parentAction.id : this.parentActionId],
			["parent_action_event", this.parentActionEvent],
			["create_obj", this.create_obj],
			["start_wfid", this.start_wfid],
			["stop_wfid", this.stop_wfid]
		];


		/* Depricated - Removed the check condition and moved it to wf checko condition action
		// Add antConditionsObj into args
		for (var i = 0; i < this.antConditionsObj.getNumConditions(); i++)
        {
            var currentCondition = this.antConditionsObj.getCondition(i);        
            var cid = currentCondition.condId;
        
            if(!cid > 0)
                cid = "new" + i;
                
			args[args.length] = ["conditions[]", cid];
			args[args.length] = ["condition_" + cid + "_blogic", currentCondition.blogic];
			args[args.length] = ["condition_" + cid + "_fieldname", currentCondition.fieldName];
			args[args.length] = ["condition_" + cid + "_operator", currentCondition.operator];
			args[args.length] = ["condition_" + cid + "_condvalue", currentCondition.condValue];
		}
		*/

		// Add object values
		for (var i = 0; i < this.getNumObjectValues(); i++)
		{
			var oval = this.getObjectValueByIdx(i);
			args[args.length] = ["ovals[]", oval.name];

			var pVarName = "oval_"+oval.name;
			if (oval.isMulti)
			{
				var mvals = this.getObjectMultiValues(oval.name);
				for (var j = 0; j < mvals.length; j++)
				{
					args[args.length] = [pVarName+"[]", mvals[j]];
				}
			}
			else
			{
				args[args.length] = [pVarName, oval.value];
			}
		}

		ajax.exec("/controller/WorkFlow/saveAction", args);
	}
	else
	{        
		this.saveChildren();
	}
}

/**
 * Recurrsively save children
 *
 * @public
 * @this {WorkFlow_Action}
 */
WorkFlow_Action.prototype.saveChildren = function()
{    
	// Loop through all children marked as dirty
	for (var i = 0; i < this.childActions.length; i++)
	{
		if (this.childActions[i].isDirty(true))
		{
			this.childActions[i].cbData.parentAct = this;
			this.childActions[i].onsaved = function()
			{
				this.cbData.parentAct.saveChildren();
			}
			this.childActions[i].save();

			// once child is saved this function will be called again until all children are processed
			return;
		}
	}

	// Register finished
	this.onsaved();
}

/**
 * Callback used to notify calling process when this and all child actions have been saved
 *
 * @public
 * @this {WorkFlow_Action}
 */
WorkFlow_Action.prototype.onsaved = function()
{
}

/**
 * Callback function called any time updates are saved for this action
 *
 * @public
 * @this {WorkFlow_Action}
 */
WorkFlow_Action.prototype.onupdate = function()
{
}

/**
 * Check if this action needs to be saved
 *
 * @public
 * @this {WorkFlow_Action}
 * @param {bool} checkChildren If set to true, action will be dirty if a child is dirty
 * @return {bool} true if action has changed since last save
 */
WorkFlow_Action.prototype.isDirty = function(checkChildren)
{
	var ret = this.dirty;

	if (checkChildren)
	{
		for (var i = 0; i < this.childActions.length; i++)
		{
			if (this.childActions[i].isDirty(true))
			{
				ret = true;
			}
			else
			{
			}
		}
	}

	return ret;
}

/**
 * Set properties from a data object
 *
 * @public
 * @this {WorkFlow_Action}
 * @param {Object} data Object with properties set to be copied to this action
 */
WorkFlow_Action.prototype.loadFromData = function(data)
{
	if (typeof data == "undefined")
		return false;

	if (data.id)
		this.id = parseInt(data.id);

	if (data.type)
		this.type = parseInt(data.type);

	if (data.workflow_id)
		this.workflow_id = data.workflow_id;

	if (data.when_interval)
		this.when.interval = data.when_interval;

	if (data.when_unit)
		this.when.unit = data.when_unit;

	if (data.name)
		this.name = data.name;

	if (data.send_email_fid)
		this.send_email_fid = parseInt(data.send_email_fid);

	if (data.update_field)
		this.update_field = data.update_field;

	if (data.update_to)
		this.update_to = data.update_to;

	if (data.parentActionId)
		this.parentActionId = parseInt(data.parentActionId);

	if (data.parentActionEvent)
		this.parentActionEvent = data.parentActionEvent;

	if (data.create_obj)
		this.create_obj = data.create_obj;

	if (data.start_wfid)
		this.start_wfid = parseInt(data.start_wfid);

	if (data.stop_wfid)
		this.stop_wfid = parseInt(data.stop_wfid);

	for (var name in data.object_values)
		this.setObjectValue(name, data.object_values[name]);

	for (var i = 0; i < data.conditions.length; i++)    
        this.addCondition(data.conditions[i].blogic, data.conditions[i].fieldName, data.conditions[i].operator, data.conditions[i].condValue, data.conditions[i].id);
		

	for (var i = 0; i < data.child_actions.length; i++)
		this.addAction(parseInt(data.child_actions[i].type), data.child_actions[i]);

	// Does not need to be saved until edited
	this.dirty = false;
}

/**
 * Remove this action
 *
 * @public
 * @this {WorkFlow_Action}
 */
WorkFlow_Action.prototype.remove = function()
{
	// Loop through and delete all child actions
	for (var i = 0; i < this.childActions.length; i++)
	{
		this.childActions[i].remove();
	}

	// Delete from backend if this was previously saved
	if (this.id)
	{
		var ajax = new CAjax('json');
		ajax.onload = function(resp)
		{
			// TODO: so far we are just letting this process in the background
		};
		var url = "/admin/xml_get_workflows.php?otypes="+this.workflow.object_type;
		ajax.exec("/controller/WorkFlow/removeAction", [["id", this.id]]);
	}
}

/**
 * Add action
 *
 * @this {WorkFlow_Action}
 * @param {number} type One of the defined WF_ATYPE_* id numbers
 * @param {Object] data Optional data used to populate action properties
 * @return {number} number of actions
 */
WorkFlow_Action.prototype.addAction = function(type, data)
{
	var act = new WorkFlow_Action(type, this.workflow, this);

	if (typeof data != "undefined")
		act.loadFromData(data);

	this.childActions[this.childActions.length] = act;
	return act;
}

/**
 * Remove action
 *
 * @this {WorkFlow}
 * @param {WorkFlow_Action} act Reference to action that should be removed
 */
WorkFlow_Action.prototype.removeAction = function(act)
{
	for (var i = 0; i < this.childActions.length; i++)
	{
		if (this.childActions[i] == act)
		{
			this.childActions[i].remove();

			// Remove from array
			var ret = this.childActions.splice(i, 1);
		}
	}
}

WorkFlow_Action.prototype.showDialog = function(parentDialog)
{
	var pdialog = (parentDialog) ? parentDialog : null;
	var lbl = (this.id) ? "Edit Action" : "Create New Action";
	var actDlg = new CDialog(lbl, pdialog);
	actDlg.f_close = true;
	var dv = alib.dom.createElement("div");
	actDlg.customDialog(dv, 560);

	var tbl = alib.dom.createElement("table", dv);
	var tbody = alib.dom.createElement("tbody", tbl);

	// Title
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "Name";
	var td = alib.dom.createElement("td", row);
	var txtTaskTitle = alib.dom.createElement("input", td);
	txtTaskTitle.act = this;
	txtTaskTitle.value = this.name;
	txtTaskTitle.onchange = function() { this.act.name = this.value; };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "&nbsp;give this action a unique name";

	// Depricated - Removed the wait condition and moved it to wf wait condition action
	// Timeframe
	// --------------------------------------------
	/*
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "When";
	var td = alib.dom.createElement("td", row);

	var txtWhenInterval = alib.dom.createElement("input", td);
	alib.dom.styleSet(txtWhenInterval, "width", "28px");
	txtWhenInterval.act = this;
	txtWhenInterval.value = this.when.interval;
	txtWhenInterval.onchange = function() { this.act.when.interval = this.value; };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "&nbsp;";

	var cbWhenUnit = alib.dom.createElement("select", td);
	var time_units = wfGetTimeUnits();
	for (var i = 0; i < time_units.length; i++)
	{
		cbWhenUnit[cbWhenUnit.length] = new Option(time_units[i][1], time_units[i][0], false, (this.when.unit==time_units[i][0])?true:false);
	}
	cbWhenUnit.act = this;
	cbWhenUnit.onchange = function() { this.act.when.unit = this.value; };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " after workflow starts (enter 0 for immediate)";
	*/

	// Depricated - Removed the check condition and moved it to wf check condition action
	// Conditions
	// --------------------------------------------
	/*
	var row = alib.dom.createElement("tr", tbody);
	var lbl = alib.dom.createElement("td", row);
	lbl.colSpan = 2;
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "Only execute action if the following conditions are met (optional):";
	var row = alib.dom.createElement("tr", tbody);
	var condCon = alib.dom.createElement("td", row);
	condCon.colSpan = 2;
	var dv_cnd = alib.dom.createElement("div", condCon);
	var tmpAntObj = new CAntObject(this.workflow.object_type);
	this.antConditionsObj = tmpAntObj.buildAdvancedQuery(dv_cnd, this.conditions);
	*/

	// Do
	// --------------------------------------------
	var divDo = alib.dom.createElement("div", dv);
	alib.dom.styleSet(divDo, "height", '400px');
	alib.dom.styleSet(divDo, "overflow", 'auto');
	switch (this.type)
	{
	case WF_ATYPE_SENDEMAIL:
		var email_action = new WorkFlow_Action_Email(this.workflow.object_type);
		email_action.taskSendEmail(divDo, this);
		break;
	case WF_ATYPE_UPDATEFLD:
		var actCon = alib.dom.createElement("div", divDo);
        var updateAction = new WorkFlow_Action_Update(this.workflow.object_type, actDlg);
        updateAction.print(actCon, this);
		break;
	case WF_ATYPE_STARTCHLD:		
        var actCon = alib.dom.createElement("div", divDo);
        var childAction = new WorkFlow_Action_Child(this.workflow.object_type, actDlg);
        childAction.print(actCon, this);
		break;
	case WF_ATYPE_ASSIGNRR:		
        var actCon = alib.dom.createElement("div", divDo);
        var childAction = new WorkFlow_Action_AssignRR(this.workflow.object_type, actDlg);
        childAction.print(actCon, this);
		break;
	case WF_ATYPE_APPROVAL:
		var actCon = alib.dom.createElement("div", divDo);
		var app_action = new WorkFlow_Action_Approval(this.workflow.object_type, actDlg);
		app_action.print(actCon, this);
		// TODO: display approval form
		break;
    case WF_ATYPE_CALLPAGE:
        var actCon = alib.dom.createElement("div", divDo);
        var app_action = new WorkFlow_Action_CallPage(this.workflow.object_type, actDlg);
        app_action.print(actCon, this);
        break;
	case WF_ATYPE_WAITCONDITION:
		var actCon = alib.dom.createElement("div", divDo);
		var app_action = new WorkFlow_Action_WaitCondition(this.workflow.object_type, actDlg);
		app_action.print(actCon, this);
		break;
	case WF_ATYPE_CHECKCONDITION:
		var actCon = alib.dom.createElement("div", divDo);
		var app_action = new WorkFlow_Action_CheckCondition(this.workflow.object_type, actDlg);
		app_action.print(actCon, this);
		break;
	default: // Create new
		if (this.create_obj == "task")
		{
			var task_action = new WorkFlow_Action_Task(this.workflow.object_type)
			task_action.taskCreateTask(divDo, this);
		}
		if (this.create_obj == "invoice")
		{
			var task_invoice = new WorkFlow_Action_Invoice(this.workflow.object_type);
			task_invoice.taskCreateInvoice(divDo, this);
		}
		if (this.create_obj == "notification")
		{
			var task_action = new WorkFlow_Action_Notification(this.workflow.object_type)
			task_action.render(divDo, this);
		}
	}
	
	// Buttons
	// --------------------------------------------
	var bntbar = alib.dom.createElement("div", dv);
	alib.dom.styleSet(bntbar, "margin", "6px 0px 3px 3px");
	
	var btn = new CButton("Save", 
	function(cls, dlg, act, condObj, isnew) 
	{
		dlg.hide();
		cls.dirty = true;        
		//cls.saveTask(act, condObj, isnew);        
		cls.onupdate();
	}, [this, actDlg, this, this.conditions, (this.id)?false:true], "b2");
	btn.print(bntbar);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [actDlg], "b1");
	btn.print(bntbar);


	actDlg.reposition();
}

WorkFlow_Action.prototype.getNumObjectValues = function()
{
	return this.create_obj_values.length;
}

WorkFlow_Action.prototype.getObjectValueByIdx = function(ind)
{
	var fMulti = (typeof this.create_obj_values[ind][1] == "object") ? true : false;

	return { name:this.create_obj_values[ind][0], value:this.create_obj_values[ind][1], isMulti:fMulti };
}

WorkFlow_Action.prototype.setObjectValue = function(name, value)
{    
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			this.create_obj_values[i][1] = value;
			return;
		}
	}

	var ind = this.create_obj_values.length;
	this.create_obj_values[ind] = new Array();
	this.create_obj_values[ind][0] = name;
	this.create_obj_values[ind][1] = value;
}

WorkFlow_Action.prototype.getObjectValue = function(name)
{
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			return this.create_obj_values[i][1];
		}
	}
	
	return null;
}

WorkFlow_Action.prototype.setObjectMultiValue = function(name, value)
{
	// Update value
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			var bFound = false;
			for (var m = 0; m < this.create_obj_values[i][1].length; m++)
			{
				if (this.create_obj_values[i][1][m] == value)
					bFound == true;
			}

			if (!bFound)
			{
				this.create_obj_values[i][1][this.create_obj_values[i][1].length] = value;
			}

			return;
		}
	}

	// New value
	var ind = this.create_obj_values.length;
	this.create_obj_values[ind] = new Array();
	this.create_obj_values[ind][0] = name;
	this.create_obj_values[ind][1] = new Array();
	this.create_obj_values[ind][1][0] = value;
}

WorkFlow_Action.prototype.getObjectMultiValueExists = function(name, value)
{
	// Check if value is already set
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			for (var m = 0; m < this.create_obj_values[i][1].length; m++)
			{
				if (this.create_obj_values[i][1][m] == value)
					return true;
			}
		}
	}

	// Does not exist
	return false;
}

WorkFlow_Action.prototype.getObjectMultiValues = function(name)
{
	var ret = new Array();
	// Check if value is already set
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			for (var m = 0; m < this.create_obj_values[i][1].length; m++)
			{
				ret[ret.length] = this.create_obj_values[i][1][m];
			}
		}
	}

	// Does not exist
	return ret;
}

WorkFlow_Action.prototype.delObjectMultiValue = function(name, value)
{
	// Delete value
	for (var i = 0; i < this.create_obj_values.length; i++)
	{
		if (this.create_obj_values[i][0] == name)
		{
			for (var m = 0; m < this.create_obj_values[i][1].length; m++)
			{
				if (this.create_obj_values[i][1][m] == value)
					this.create_obj_values[i][1].splice(m, 1);
			}
		}
	}
}

//--------------------------------------------------------------------------
//	Conditions
//--------------------------------------------------------------------------
WorkFlow_Action.prototype.addCondition = function(blogic, fieldName, operator, condValue, condId)
{
	var cond = new WorkFlowCondition(blogic, fieldName, operator, condValue, condId);
	this.conditions[this.conditions.length] = cond;
}

WorkFlow_Action.prototype.addConditionObj = function(blogic, fieldName, operator, condValue)
{
	var cond = new WorkFlowCondition(blogic, fieldName, operator, condValue);
	this.conditions[this.conditions.length] = cond;
}

WorkFlow_Action.prototype.delConditions = function()
{
	this.conditions = new Array();;
}

//--------------------------------------------------------------------------
//	Other
//--------------------------------------------------------------------------
WorkFlow_Action.prototype.getTypeDesc = function()
{
	switch (this.type)
	{
	    case WF_ATYPE_SENDEMAIL:
		    return "Send Email";
	    case WF_ATYPE_UPDATEFLD:
		    return "Update Field";
	    case WF_ATYPE_STARTCHLD:
		    return "Start Child Workflow";
	    case WF_ATYPE_STOPWF:
		    return "Stop Workflow";
	    case WF_ATYPE_CREATEOBJ:
		    return "Create New " + this.create_obj;
	    case WF_ATYPE_APPROVAL:
		    return "Request Approval";
        case WF_ATYPE_CALLPAGE:
            return "Call Page";
        case WF_ATYPE_ASSIGNRR:
            return "Assign";
		case WF_ATYPE_WAITCONDITION:
			return "Wait";
		case WF_ATYPE_CHECKCONDITION:
			return "Execute Workflow";
	}
}

WorkFlow_Action.prototype.getTypeName = function()
{
	switch (this.type)
	{
	case WF_ATYPE_SENDEMAIL:
		return "email";
	case WF_ATYPE_UPDATEFLD:
		return "update";
	case WF_ATYPE_STARTCHLD:
		return "Start Child Workflow";
	case WF_ATYPE_STOPWF:
		return "Stop Workflow";
	case WF_ATYPE_CREATEOBJ:
		return "task";
	case WF_ATYPE_APPROVAL:
		return "approval";
	case WF_ATYPE_ASSIGNRR:
		return "assign";
	}
}

WorkFlow_Action.prototype.getWhenDesc = function()
{
	if (this.type == WF_ATYPE_CHECKCONDITION)
		return "If";
	if (this.when.interval == 0) {
		return "Immediately";
	}
	else {
		return this.when.interval + " " + wfGetTimeUnitName(this.when.unit) + " after workflow starts";
	}
}

WorkFlow_Action.prototype.getCondDesc = function()
{
	var buf = "";
    
    if(this.antConditionsObj)
    {
        this.conditions = new Array();
    
        for (var i = 0; i < this.antConditionsObj.getNumConditions(); i++)
        {
            var currentCondition = this.antConditionsObj.getCondition(i);
            
            this.addCondition(currentCondition.blogic, currentCondition.fieldName, currentCondition.operator, currentCondition.condValue, currentCondition.condId)
            
            if (buf.length)
                buf += " " + currentCondition.blogic + " ";
            
            buf += currentCondition.fieldName + " " + currentCondition.operator + " " + currentCondition.condValue;
        }
    }
    else
    {
        for (var i = 0; i < this.conditions.length; i++)
        {
            if (buf.length)
                buf += " " + this.conditions[i].blogic + " ";

            buf += this.conditions[i].fieldName + " " + this.conditions[i].operator + " " + this.conditions[i].condValue;
        }
    }
    
	return buf;
}

/**
 * Get sub-action events. All actions have '' as a subevent which means it launches on execution.
 *
 * @this {WorkFlow_Action}
 * @return {Object[]} Array of objects with .name and .description properties
 */
WorkFlow_Action.prototype.getSubActionEvents = function()
{
	var ret = [];

	// default
	ret[ret.length] = {name:"", description:"After Action Completes:"};

	if (this.type == WF_ATYPE_APPROVAL)
	{
		ret[ret.length] = {name:"approved", description:"On Approved:"};
		ret[ret.length] = {name:"declined", description:"On Declined:"};
	}

	return ret;
}

/**
 * Get summary description of this action
 *
 * @this {WorkFlow_Action}
 * @return {string} Human readable description of this action
 */
WorkFlow_Action.prototype.getSummary = function()
{
	var desc = this.name + ": " + this.getTypeDesc() + " " + this.getWhenDesc() + " " + this.getCondDesc();
	return desc;
}

/**
* @fileOverview The child action is used to request and handle childs on any object type
*
* @author:    joe, sky.stebnicki@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Child Action
 *
 * @constructor
 * @param {string} objType The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_Child(objType, dlg)
{
    /**
    * The object that is the subject of this child request
    *
    * @private
    * @type {CAntObject}
    */
    this.mainObject = new CAntObject(objType);

    /**
    * Optional dialog reference
    *
    * @private
    * @type {[CDialog]}
    */
    this.dialog = (dlg) ? dlg : null;    
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_Child}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_Child.prototype.print = function(con, taskObj)
{
    taskObj.type = WF_ATYPE_STARTCHLD;

    var lbl = alib.dom.createElement("div", con);
    alib.dom.styleSetClass(lbl, "formLabel");
    alib.dom.styleSet(lbl, "margin", "6px 0px 3px 3px");
    lbl.innerHTML = "Select a child workflow to launch: test";

    var frm_dv = alib.dom.createElement("div", con);
    var workflows = alib.dom.createElement("select", frm_dv);
    workflows.size = 20;
    workflows.style.width = "98%";
    workflows.taskObj = taskObj;
    workflows.onchange = function()
    {
        this.taskObj.start_wfid = this.value;
    }

    // Set: start_wfid
    ajax = new CAjax('json');
    ajax.workflows = workflows;
    ajax.taskObj = taskObj;
    ajax.onload = function(ret)
    {
        if(ret.length)
        {            
            for (workflow in ret)
            {
                var currentWorkflow = ret[workflow];
                
                if (currentWorkflow.f_active == 't')
                    this.workflows[this.workflows.length] = new Option(currentWorkflow.name, currentWorkflow.id, (currentWorkflow.id == this.taskObj.start_wfid)?true:false);                
            }
        }        
    };
    var args = new Array();
    args[args.length] = ['otypes', taskObj.workflow.object_type];
    ajax.exec("/controller/WorkFlow/getWorkflow", args);
}

/****************************************************************************
*	
*	Class:		WorkFlow_Action_Invoice
*
*	Purpose:	Invoice action for workflow
*
*****************************************************************************/
function WorkFlow_Action_Invoice(obj_type)
{
	this.g_antObject = new CAntObject(obj_type);
}

/*************************************************************************
*	Function:	taskCreateInvoice
*
*	Purpose:	Invoice action for workflow
**************************************************************************/
WorkFlow_Action_Invoice.prototype.taskCreateInvoice = function(con, task_obj)
{
	task_obj.create_obj = "invoice";
	task_obj.type = WF_ATYPE_CREATEOBJ;

	var dv_cnd = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", dv_cnd);
	lbl.innerHTML = "Create Invoice";

	var tbl = alib.dom.createElement("table", dv_cnd);
	var tbody = alib.dom.createElement("tbody", tbl);

	var tmpAntObj = new CAntObject("invoice");

	// Name
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Name Title";
	var td = alib.dom.createElement("td", row);
	var txtName = alib.dom.createElement("input", td);
	txtName.value = task_obj.getObjectValue("name");
	txtName.m_obj = task_obj;
	txtName.onchange = function() { this.m_obj.setObjectValue("name", this.value); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " this will be the name of the invoice";

	// Status
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Status";
	var td = alib.dom.createElement("td", row);
	var inp = tmpAntObj.fieldCreateValueInput(td, "status_id", task_obj.getObjectValue("status_id"));
	inp.m_obj = task_obj;
	inp.onchange = function() { this.m_obj.setObjectValue("status_id", this.value); }

	// Assign To
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Owner";
	var td = alib.dom.createElement("td", row);
	var cbAssignTo = alib.dom.createElement("select", td);
	cbAssignTo.m_act = task_obj;
	cbAssignTo.onchange = function() { this.m_act.setObjectValue("owner_id", this.value); }
	var assigned_to = task_obj.getObjectValue("owner_id");
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.type == "fkey" && field.subtype == "users")
		{
			var varname = "<%"+field.name+"%>";

			if (!assigned_to)
			{
				task_obj.setObjectValue("owner_id", varname);
				assigned_to = varname;
			}

			cbAssignTo[cbAssignTo.length] = new Option(this.g_antObject.title + "." + field.title, varname, 
													   false, (assigned_to==varname)?true:false);
		}
	}
	
	this.wf_frm_loadUsers(cbAssignTo, assigned_to);

	cbAssignTo.m_obj = task_obj;
	cbAssignTo.onchange = function() { this.m_obj.setObjectValue("owner_id", this.value); };

	// Product ID
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Product ID";
	var td = alib.dom.createElement("td", row);
	var txtName = alib.dom.createElement("input", td);
	txtName.value = task_obj.getObjectValue("ent_product_0");
	txtName.m_obj = task_obj;
	txtName.onchange = function() { this.m_obj.setObjectValue("ent_product_0", this.value); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " REQUIRED: enter the id of a product";

	// Quantity
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Quantity";
	var td = alib.dom.createElement("td", row);
	var txtName = alib.dom.createElement("input", td);
	txtName.value = task_obj.getObjectValue("ent_quantity_0");
	txtName.m_obj = task_obj;
	txtName.onchange = function() { this.m_obj.setObjectValue("ent_quantity_0", this.value); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " REQUIRED: the number of the selected product(s) to add";

	// Bill Default Credit Card
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "";
	var td = alib.dom.createElement("td", row);
	var chkBill = alib.dom.createElement("input");
	chkBill.type = "checkbox";
	td.appendChild(chkBill);
	chkBill.checked = (task_obj.getObjectValue("paywithdefcard") == 't') ? true : false;
	chkBill.m_obj = task_obj;
	chkBill.onclick = function() { this.m_obj.setObjectValue("paywithdefcard", (this.checked)?'1':'0'); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " Automatically bill this invoice to customer's default card";

	// Auto-billing triggers
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "";
	var td = alib.dom.createElement("td", row);
	
	// Add success actions
	var hdr = alib.dom.createElement("div", td);
	hdr.innerHTML = "If transaction is approved:";
	alib.dom.styleSetClass(hdr, "formLabel");
	alib.dom.styleSet(hdr, "margin-bottom", "5px");

	var con = alib.dom.createElement("div", td);
	alib.dom.styleSet(con, "margin-bottom", "5px");
	var lbl = alib.dom.createElement("span", con);
	lbl.innerHTML = "Set invoice status to: ";
	var inpCon = alib.dom.createElement("span", con);
	var inp = tmpAntObj.fieldCreateValueInput(inpCon, "status_id", task_obj.getObjectValue("billing_success_status"));
	inp.m_obj = task_obj;
	inp.onchange = function() { this.m_obj.setObjectValue("billing_success_status", this.value); }

	var con = alib.dom.createElement("div", td);
	var lbl = alib.dom.createElement("span", con);
	lbl.innerHTML = "Send email notification to: ";
	var inp = alib.dom.createElement("input", con);
	inp.m_obj = task_obj;
	inp.value = task_obj.getObjectValue("billing_success_notify");
	inp.onchange = function() { this.m_obj.setObjectValue("billing_success_notify", this.value);  }

	// Add failure actions
	var hdr = alib.dom.createElement("div", td);
	hdr.innerHTML = "If transaction is declined:";
	alib.dom.styleSetClass(hdr, "formLabel");
	alib.dom.styleSet(hdr, "margin", "5px 0 5px 0");

	var con = alib.dom.createElement("div", td);
	alib.dom.styleSet(con, "margin-bottom", "5px");
	var lbl = alib.dom.createElement("span", con);
	lbl.innerHTML = "Set invoice status to: ";
	var inpCon = alib.dom.createElement("span", con);
	var inp = tmpAntObj.fieldCreateValueInput(inpCon, "status_id", task_obj.getObjectValue("billing_fail_status"));
	inp.m_obj = task_obj;
	inp.onchange = function() { this.m_obj.setObjectValue("billing_fail_status", this.value); }

	var con = alib.dom.createElement("div", td);
	var lbl = alib.dom.createElement("span", con);
	lbl.innerHTML = "Send email notification to: ";
	var inp = alib.dom.createElement("input", con);
	inp.m_obj = task_obj;
	inp.value = task_obj.getObjectValue("billing_fail_notify");
	inp.onchange = function() { this.m_obj.setObjectValue("billing_fail_notify", this.value);  }
}

/*************************************************************************
*	Function:	wf_frm_loadUsers
*
*	Purpose:	Invoice action for workflow
**************************************************************************/
WorkFlow_Action_Invoice.prototype.wf_frm_loadUsers = function(cbAssignTo, assigned_to)
{
	var ajax = new CAjax();
	ajax.cbAssignTo = cbAssignTo;
	ajax.assigned_to = assigned_to;
	ajax.onload = function(root)
	{
		// The result will be held in a variable called 'retval'
		var num = root.getNumChildren();
		if (num)
		{
			for (i = 0; i < num; i++)
			{
				var child = root.getChildNode(i);
				if (child.m_name == "user")
				{
					var id = child.getChildNodeValByName("id");
					var title = child.getChildNodeValByName("title");
					var team_name = child.getChildNodeValByName("team_name");
					var name = child.getChildNodeValByName("full_name");
					if (!name) name = "untitled";

					this.cbAssignTo[this.cbAssignTo.length] = new Option(unescape(name), id, 
																		   false, (this.assigned_to==id)?true:false);
				}
			}
		}
	};

	var url = "/users/xml_get_users.php?fval=0";
	ajax.exec(url);
}

/****************************************************************************
*	
*	Class:		WorkFlow_Action_Task
*
*	Purpose:	Task action for workflow
*
*****************************************************************************/
function WorkFlow_Action_Task(obj_type)
{
	this.g_antObject = new CAntObject(obj_type);
}

/*************************************************************************
*	Function:	taskCreateTask
*
*	Purpose:	Task action for workflow
**************************************************************************/
WorkFlow_Action_Task.prototype.taskCreateTask = function(con, task_obj)
{
	task_obj.create_obj = "task";
	task_obj.type = WF_ATYPE_CREATEOBJ;

	var dv_cnd = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", dv_cnd);
	lbl.innerHTML = "Create Task";

	var tbl = alib.dom.createElement("table", dv_cnd);
	var tbody = alib.dom.createElement("tbody", tbl);

	// Subject
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Subject";
	var td = alib.dom.createElement("td", row);
	var txtName = alib.dom.createElement("input", td);
	txtName.value = task_obj.getObjectValue("name");
	txtName.m_obj = task_obj;
	txtName.onchange = function() { this.m_obj.setObjectValue("name", this.value); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " this will be the name the end-user sees when the task is created";

	// Assign To
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Assign To";
	var td = alib.dom.createElement("td", row);
	var cbAssignTo = alib.dom.createElement("select", td);
	cbAssignTo.m_act = task_obj;
	cbAssignTo.onchange = function() { this.m_act.setObjectValue("user_id", this.value); }
	var assigned_to = task_obj.getObjectValue("user_id");
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.type == "object" && field.subtype == "user")
		{
			var varname = "<%"+field.name+"%>";

			if (!assigned_to)
			{
				task_obj.setObjectValue("user_id", varname);
				assigned_to = varname;
			}

			cbAssignTo[cbAssignTo.length] = new Option(this.g_antObject.title + "." + field.title, varname, 
													   false, (assigned_to==varname)?true:false);

			// Add manager
			cbAssignTo[cbAssignTo.length] = new Option(this.g_antObject.title + "." + field.title + ".Manager", "<%"+field.name+".manager_id%>", 
													   false, (assigned_to=="<%"+field.name+".manager_id%>")?true:false);
		}
	}
	
	this.wf_frm_loadUsers(cbAssignTo, assigned_to);

	cbAssignTo.m_obj = task_obj;
	cbAssignTo.onchange = function() { this.m_obj.setObjectValue("user_id", this.value); };

	// Due Date
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Task Is Due";
	var td = alib.dom.createElement("td", row);

	var txtWhenInterval = alib.dom.createElement("input", td);
	alib.dom.styleSet(txtWhenInterval, "width", "14px");
	var interval = task_obj.getObjectValue("due_interval");
	if (!interval)
		task_obj.setObjectValue("due_interval", "0");
	txtWhenInterval.value = (interval != null) ? interval : "0";
	txtWhenInterval.m_obj = task_obj;
	txtWhenInterval.onchange = function() { this.m_obj.setObjectValue("due_interval", this.value); };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "&nbsp;";

	var cbWhenUnit = alib.dom.createElement("select", td);
	var time_units = wfGetTimeUnits();
	var due_unit = task_obj.getObjectValue("due_unit");
	if (!due_unit)
		task_obj.setObjectValue("due_unit", time_units[2][0]); // Days
	for (var i = 2; i < time_units.length; i++) // Start on days
	{
		cbWhenUnit[cbWhenUnit.length] = new Option(time_units[i][1], time_units[i][0], false, false);
	}
	cbWhenUnit.m_obj = task_obj;
	cbWhenUnit.onchange = function() { this.m_obj.setObjectValue("due_unit", this.value); };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " after task is created (enter 0 for immediate)";
}

/*************************************************************************
*	Function:	wf_frm_loadUsers
*
*	Purpose:	Task action for workflow
**************************************************************************/
WorkFlow_Action_Task.prototype.wf_frm_loadUsers = function(cbAssignTo, assigned_to)
{
	var ajax = new CAjax();
	ajax.cbAssignTo = cbAssignTo;
	ajax.assigned_to = assigned_to;
	ajax.onload = function(root)
	{
		// The result will be held in a variable called 'retval'
		var num = root.getNumChildren();
		if (num)
		{
			for (i = 0; i < num; i++)
			{
				var child = root.getChildNode(i);
				if (child.m_name == "user")
				{
					var id = child.getChildNodeValByName("id");
					var title = child.getChildNodeValByName("title");
					var team_name = child.getChildNodeValByName("team_name");
					var name = child.getChildNodeValByName("full_name");
					if (!name) name = "untitled";

					this.cbAssignTo[this.cbAssignTo.length] = new Option(unescape(name), id, 
																		   false, (this.assigned_to==id)?true:false);
				}
			}
		}
	};

	var url = "/users/xml_get_users.php?fval=0";
	ajax.exec(url);
}

/**
 * @fileoverview This is the notifiaction action interface
 */
function WorkFlow_Action_Notification(obj_type)
{
	this.g_antObject = new CAntObject(obj_type);
}

/*************************************************************************
*	Function:	taskCreateTask
*
*	Purpose:	Task action for workflow
**************************************************************************/
WorkFlow_Action_Notification.prototype.render = function(con, act)
{
	act.create_obj = "notification";
	act.type = WF_ATYPE_CREATEOBJ;

	var dv_cnd = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", dv_cnd);
	lbl.innerHTML = "Send Notification";

	var tbl = alib.dom.createElement("table", dv_cnd);
	var tbody = alib.dom.createElement("tbody", tbl);

	// Subject
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Subject";
	var td = alib.dom.createElement("td", row);
	var txtName = alib.dom.createElement("input", td);
	txtName.value = act.getObjectValue("name");
	txtName.m_obj = act;
	txtName.onchange = function() { this.m_obj.setObjectValue("name", this.value); };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " short description of the notification";

	// Send To
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row,  "Send To");
	alib.dom.styleSetClass(td, "formLabel");
	alib.dom.styleSet(td, "vertical-align", "top");
	var td = alib.dom.createElement("td", row);
	var cbAssignTo = alib.dom.createElement("select", td);
	cbAssignTo.m_act = act;
	cbAssignTo.onchange = function() { this.m_act.setObjectValue("owner_id", this.value); }
	var assigned_to = act.getObjectValue("owner_id");
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.type == "object" && field.subtype == "user")
		{
			var varname = "<%"+field.name+"%>";

			if (!assigned_to)
			{
				act.setObjectValue("owner_id", varname);
				assigned_to = varname;
			}

			cbAssignTo[cbAssignTo.length] = new Option(this.g_antObject.title + "." + field.title, varname, 
													   false, (assigned_to==varname)?true:false);
		}
	}
	
	this.wf_frm_loadUsers(cbAssignTo, assigned_to);

	cbAssignTo.m_obj = act;
	cbAssignTo.onchange = function() { this.m_obj.setObjectValue("owner_id", this.value); };

	// Method
	var mrow = alib.dom.createElement("div", td);
	var chk = alib.dom.createElement("input", mrow);
	chk.type = "checkbox";
	chk.checked = true;
	chk.disabled = true;
	var lbl = alib.dom.createElement("span", mrow, "Notification Center");

	var mrow = alib.dom.createElement("div", td);
	var chk = alib.dom.createElement("input", mrow);
	chk.type = "checkbox";
	chk.checked = (act.getObjectValue("f_popup") == 't') ? true : false;
	var lbl = alib.dom.createElement("span", mrow, "Popup Alert");
	chk.act = act;
	chk.onclick = function() { this.act.setObjectValue("f_popup", (this.checked) ? 't' : 'f'); }

	var mrow = alib.dom.createElement("div", td);
	var chk = alib.dom.createElement("input", mrow);
	chk.type = "checkbox";
	chk.checked = (act.getObjectValue("f_email") == 't') ? true : false;
	var lbl = alib.dom.createElement("span", mrow, "Send Email");
	chk.act = act;
	chk.onclick = function() { this.act.setObjectValue("f_email", (this.checked) ? 't' : 'f'); }

	var mrow = alib.dom.createElement("div", td);
	var chk = alib.dom.createElement("input", mrow);
	chk.type = "checkbox";
	chk.checked = (act.getObjectValue("f_sms") == 't') ? true : false;
	var lbl = alib.dom.createElement("span", mrow, "SMS (text message to mobile)");
	chk.act = act;
	chk.onclick = function() { this.act.setObjectValue("f_sms", (this.checked) ? 't' : 'f'); }


	// Message
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row, "Message");
	alib.dom.styleSetClass(td, "formLabel");
	alib.dom.styleSet(td, "vertical-align", "top");

	var td = alib.dom.createElement("td", row);
	var taBody = alib.dom.createElement("textarea", td);
	alib.dom.styleSet(taBody, "height", "200px");
	alib.dom.styleSet(taBody, "width", "98%");
	taBody.value = act.getObjectValue("description");
	taBody.act = act;
	taBody.onchange = function() { this.act.setObjectValue("description", this.value); };
}

/*************************************************************************
*	Function:	wf_frm_loadUsers
*
*	Purpose:	Task action for workflow
**************************************************************************/
WorkFlow_Action_Notification.prototype.wf_frm_loadUsers = function(cbAssignTo, assigned_to)
{
	var ajax = new CAjax();
	ajax.cbAssignTo = cbAssignTo;
	ajax.assigned_to = assigned_to;
	ajax.onload = function(root)
	{
		// The result will be held in a variable called 'retval'
		var num = root.getNumChildren();
		if (num)
		{
			for (i = 0; i < num; i++)
			{
				var child = root.getChildNode(i);
				if (child.m_name == "user")
				{
					var id = child.getChildNodeValByName("id");
					var title = child.getChildNodeValByName("title");
					var team_name = child.getChildNodeValByName("team_name");
					var name = child.getChildNodeValByName("full_name");
					if (!name) name = "untitled";

					this.cbAssignTo[this.cbAssignTo.length] = new Option(unescape(name), id, 
																		   false, (this.assigned_to==id)?true:false);
				}
			}
		}
	};

	var url = "/users/xml_get_users.php?fval=0";
	ajax.exec(url);
}

/****************************************************************************
*	
*	Class:		WorkFlow_Action_Email
*
*	Purpose:	Email action for workflow
*
*****************************************************************************/
function WorkFlow_Action_Email(obj_type)
{
	this.g_antObject = new CAntObject(obj_type);
	this.defaultFrom = "";
}

/*************************************************************************
*	Function:	taskSendEmail
*
*	Purpose:	Email action for workflow
**************************************************************************/
WorkFlow_Action_Email.prototype.taskSendEmail = function(con, task_obj)
{
	task_obj.type = WF_ATYPE_SENDEMAIL;

	var dv_cnd = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", dv_cnd);
	lbl.innerHTML = "Send Email";
	var tbl = alib.dom.createElement("table", dv_cnd);
	var tbody = alib.dom.createElement("tbody", tbl);

	// From
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "From";
	var td = alib.dom.createElement("td", row);
	var txtFrom = alib.dom.createElement("input", td);
	txtFrom.m_task_obj = task_obj;
	txtFrom.onchange = function() { this.m_task_obj.setObjectValue("from", this.value); };
	var cbFrom = alib.dom.createElement("select", td);
	cbFrom.txtFrom = txtFrom;
	cbFrom.cls = this;
	cbFrom[cbFrom.length] = new Option("Default", "");
	cbFrom.onchange = function() { if (this.value) this.txtFrom.value = this.value; else this.txtFrom.value = this.cls.defaultFrom; }
	// Get user variables
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.type == "object" && field.subtype == "user")
		{
			cbFrom[cbFrom.length] = new Option(this.g_antObject.title + "." + field.title, 
						   "<%"+field.name+"%>");

			cbFrom[cbFrom.length] = new Option(this.g_antObject.title + "." + field.title + ".Manager", 
						   "<%"+field.name+".manager_id%>");
		}
	}
	var from = task_obj.getObjectValue("from");
	if (!from)
	{
		var ajax = new CAjax("json");
		ajax.cbData.inp = txtFrom;
		ajax.cbData.cls = this;
		ajax.onload = function(ret){
			this.cbData.inp.value = ret;
			this.cbData.cls.defaultFrom = ret;
		}
		ajax.exec("/controller/Admin/getNoReply");
	}
	else
	{
		txtFrom.value = from;
		this.defaultFrom = from;
	}

	// To
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "To";
	var td = alib.dom.createElement("td", row);
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.subtype == "email" || (field.type == "object" && field.subtype == "user"))
		{
			var emRow = alib.dom.createElement("div", td);
			var chk = alib.dom.createElement("input");
			chk.type = "checkbox";
			emRow.appendChild(chk);
			chk.value = "<%"+field.name+"%>";
			chk.checked = (task_obj.getObjectMultiValueExists("to", "<%"+field.name+"%>")) ? true : false;
			chk.m_task_obj = task_obj;
			chk.onchange = function() 
			{ 
				if(this.checked) 
					this.m_task_obj.setObjectMultiValue("to", this.value); 
				else 
					this.m_task_obj.delObjectMultiValue("to", this.value); 
			};
			var lbl = alib.dom.createElement("span", emRow);
			lbl.innerHTML = " "+this.g_antObject.title + "." + field.title;

			// Add manager
			if (field.type == "object" && field.subtype == "user")
			{
				var emRow = alib.dom.createElement("div", td);
				var chk = alib.dom.createElement("input");
				chk.type = "checkbox";
				emRow.appendChild(chk);
				chk.value = "<%"+field.name+".manager_id%>";
				chk.checked = (task_obj.getObjectMultiValueExists("to", "<%"+field.name+".manager_id%>")) ? true : false;
				chk.m_task_obj = task_obj;
				chk.onchange = function() 
				{ 
					if(this.checked) 
						this.m_task_obj.setObjectMultiValue("to", this.value); 
					else 
						this.m_task_obj.delObjectMultiValue("to", this.value); 
				};
				var lbl = alib.dom.createElement("span", emRow);
				lbl.innerHTML = " "+this.g_antObject.title + "." + field.title + ".Manager";
			}
		}
	}
	var emRow = alib.dom.createElement("div", td);
	var txtTo = alib.dom.createElement("input", emRow);
	txtTo.value = task_obj.getObjectValue("to_other");
	txtTo.m_task_obj = task_obj;
	txtTo.onchange = function() { this.m_task_obj.setObjectValue("to_other", this.value); };
	var lbl = alib.dom.createElement("span", emRow);
	lbl.innerHTML = " other email addresses - separate with commas";

	// Cc
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "Cc";
	var td = alib.dom.createElement("td", row);
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.subtype == "email" || (field.type == "object" && field.subtype == "user"))
		{
			var emRow = alib.dom.createElement("div", td);
			var chk = alib.dom.createElement("input");
			chk.type = "checkbox";
			chk.value = "<%"+field.name+"%>";
			chk.checked = (task_obj.getObjectMultiValueExists("cc", "<%"+field.name+"%>")) ? true : false;
			chk.m_task_obj = task_obj;
			chk.onchange = function() 
			{ 
				if(this.checked) 
					this.m_task_obj.setObjectMultiValue("cc", this.value); 
				else 
					this.m_task_obj.delObjectMultiValue("cc", this.value); 
			};
			emRow.appendChild(chk);
			var lbl = alib.dom.createElement("span", emRow);
			lbl.innerHTML = " "+this.g_antObject.title + "." + field.title;


			// Add manager
			if (field.type == "object" && field.subtype == "user")
			{
				var emRow = alib.dom.createElement("div", td);
				var chk = alib.dom.createElement("input");
				chk.type = "checkbox";
				emRow.appendChild(chk);
				chk.value = "<%"+field.name+".manager_id%>";
				chk.checked = (task_obj.getObjectMultiValueExists("cc", "<%"+field.name+".manager_id%>")) ? true : false;
				chk.m_task_obj = task_obj;
				chk.onchange = function() 
				{ 
					if(this.checked) 
						this.m_task_obj.setObjectMultiValue("cc", this.value); 
					else 
						this.m_task_obj.delObjectMultiValue("cc", this.value); 
				};
				var lbl = alib.dom.createElement("span", emRow);
				lbl.innerHTML = " "+this.g_antObject.title + "." + field.title + ".Manager";
			}
		}
	}
	var emRow = alib.dom.createElement("div", td);
	var txtCc = alib.dom.createElement("input", emRow);
	txtCc.value = task_obj.getObjectValue("cc_other");
	txtCc.m_task_obj = task_obj;
	txtCc.onchange = function() { this.m_task_obj.setObjectValue("cc_other", this.value); };
	var lbl = alib.dom.createElement("span", emRow);
	lbl.innerHTML = " other email addresses - separate with commas";

	// Bcc
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "Bcc";
	var td = alib.dom.createElement("td", row);
	for (var i = 0; i < this.g_antObject.getNumFields(); i++)
	{
		var field = this.g_antObject.getField(i);

		if (field.subtype == "email" || (field.type == "object" && field.subtype == "user"))
		{
			var emRow = alib.dom.createElement("div", td);
			var chk = alib.dom.createElement("input");
			chk.type = "checkbox";
			chk.value = "<%"+ field.name +"%>";
			chk.checked = (task_obj.getObjectMultiValueExists("bcc", "<%"+field.name+"%>")) ? true : false;
			chk.m_task_obj = task_obj;
			chk.onchange = function() 
			{ 
				if(this.checked) 
					this.m_task_obj.setObjectMultiValue("bcc", this.value); 
				else 
					this.m_task_obj.delObjectMultiValue("bcc", this.value); 
			};
			emRow.appendChild(chk);
			var lbl = alib.dom.createElement("span", emRow);
			lbl.innerHTML = " "+this.g_antObject.title + "." + field.title;

			// Add manager
			if (field.type == "object" && field.subtype == "user")
			{
				var emRow = alib.dom.createElement("div", td);
				var chk = alib.dom.createElement("input");
				chk.type = "checkbox";
				emRow.appendChild(chk);
				chk.value = "<%"+field.name+".manager_id%>";
				chk.checked = (task_obj.getObjectMultiValueExists("bcc", "<%"+field.name+".manager_id%>")) ? true : false;
				chk.m_task_obj = task_obj;
				chk.onchange = function() 
				{ 
					if(this.checked) 
						this.m_task_obj.setObjectMultiValue("bcc", this.value); 
					else 
						this.m_task_obj.delObjectMultiValue("bcc", this.value); 
				};
				var lbl = alib.dom.createElement("span", emRow);
				lbl.innerHTML = " "+this.g_antObject.title + "." + field.title + ".Manager";
			}
		}
	}
	var emRow = alib.dom.createElement("div", td);
	var txtBcc = alib.dom.createElement("input", emRow);
	txtBcc.value = task_obj.getObjectValue("bcc_other");
	txtBcc.m_task_obj = task_obj;
	txtBcc.onchange = function() { this.m_task_obj.setObjectValue("bcc_other", this.value); };
	var lbl = alib.dom.createElement("span", emRow);
	lbl.innerHTML = " other email addresses - separate with commas";

	// New or Template
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	td.colSpan = 2;

	var rbtn1 = alib.dom.createElement("input");
	rbtn1.checked = (!task_obj.getObjectValue("fid")) ? true : false;
	rbtn1.type='radio';
	rbtn1.name = "email_compose";
	rbtn1.m_task_obj = task_obj;
	rbtn1.onchange = function() 
	{ 
		document.getElementById("frmComposeNewEmail").style.display = "block"; 
		document.getElementById("frmComposeTemplate").style.display = "none"; 
		document.getElementById("fileNameLabel").innerHTML = "No File Selected&nbsp;&nbsp;"; 
		
		this.m_task_obj.setObjectValue("fid", "");
		this.m_task_obj.setObjectValue("fname", "");
	}
	td.appendChild(rbtn1);
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "Compose New Email ";

	var rbtn1 = alib.dom.createElement("input");
	rbtn1.type='radio';
	rbtn1.checked = (task_obj.getObjectValue("fid")) ? true : false;
	rbtn1.name = "email_compose";
	rbtn1.m_task_obj = task_obj;
	rbtn1.onchange = function()
	{ 
		document.getElementById("frmComposeNewEmail").style.display = "none"; 
		document.getElementById("frmComposeTemplate").style.display = "block"; 
	}
	td.appendChild(rbtn1);
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "Use Email Template ";

	// ----------------------------------------------------------------
	// Compose New
	// ================================================================
	var div_compose_new = alib.dom.createElement("div", td);
	div_compose_new.id = "frmComposeNewEmail";
	alib.dom.styleSet(div_compose_new, "margin", "10px 0 0 10px");

	// Subject
	// --------------------------------------------
	var lbl = alib.dom.createElement("div", div_compose_new);
	alib.dom.styleSet(div_compose_new, "display", (task_obj.getObjectValue("fid"))?"none":"block");
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "Subject";
    alib.dom.styleSet(lbl, "text-align", "left");
	var inprow = alib.dom.createElement("div", div_compose_new);
	var txtSubject = alib.dom.createElement("input", inprow);
	txtSubject.value = task_obj.getObjectValue("subject");
	txtSubject.m_task_obj = task_obj;
	txtSubject.onchange = function() { this.m_task_obj.setObjectValue("subject", this.value); };

	var lbl = alib.dom.createElement("div", div_compose_new);
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "Body ";

	var mlink = alib.dom.createElement("a", lbl, "Insert Merge Field");
	mlink.href = "javascript:void(0);";

    alib.dom.styleSet(lbl, "text-align", "left");
	var inprow = alib.dom.createElement("div", div_compose_new);
	var taBody = alib.dom.createElement("textarea", inprow);
	alib.dom.styleSet(taBody, "height", "200px");
	alib.dom.styleSet(taBody, "width", "98%");
	taBody.value = task_obj.getObjectValue("body");
	taBody.m_task_obj = task_obj;
	taBody.onchange = function() { this.m_task_obj.setObjectValue("body", this.value); };

	// Activate merge fields selector
	var mergeField = new WorkFlow_Selector_MergeField(this.g_antObject);
	mergeField.attach(mlink, taBody);

	// ----------------------------------------------------------------
	// Compose Template
	// ================================================================
	var div_compose_temp = alib.dom.createElement("div", td);
	alib.dom.styleSet(div_compose_temp, "margin", "10px 0 0 10px");
	div_compose_temp.id = "frmComposeTemplate";
	alib.dom.styleSet(div_compose_temp, "display", (task_obj.getObjectValue("fid"))?"block":"none");
    
	var emtfunct = function(lbl, cls, task_obj)
	{
        var objBrowser = new AntObjectBrowser("html_template");        
        objBrowser.cbData.cls = cls;
        objBrowser.cbData.task_obj = task_obj;
        objBrowser.cbData.lbl = lbl;
        objBrowser.onSelect = function(oid, name) 
        {
            this.cbData.lbl.innerHTML = name + "&nbsp;&nbsp;";
            this.cbData.task_obj.setObjectValue("fid", oid);
            this.cbData.task_obj.setObjectValue("fname", name);
        }
        
        objBrowser.displaySelect();
	}
    
    var lbl = alib.dom.createElement("span", div_compose_temp);
    alib.dom.styleSetClass(lbl, "strong");
    lbl.id = "fileNameLabel";
    lbl.innerHTML = (task_obj.getObjectValue("fname")) ? task_obj.getObjectValue("fname") : "No File Selected&nbsp;&nbsp;";

    var btn = new CButton("Select Template", emtfunct, [lbl, this, task_obj], "b1");
    btn.print(div_compose_temp);
}

/**
* @fileOverview The approval action is used to request and handle approvals on any object type
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Approval Action
 *
 * @constructor
 * @param {string} obj_type The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_Approval(obj_type, dlg)
{
	/**
	* The object that is the subject of this approval request
	*
	* @private
	* @type {CAntObject}
	*/
	this.mainObject = new CAntObject(obj_type);

	/**
	* Optional dialog reference
	*
	* @private
	* @type {[CDialog]}
	*/
    this.dialog = (dlg) ? dlg : null;	
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_Approval}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_Approval.prototype.print = function(con, action)
{
	var innerCon = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(innerCon, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", innerCon);
	lbl.innerHTML = "Request Approval";
	var tbl = alib.dom.createElement("table", innerCon);
	var tbody = alib.dom.createElement("tbody", tbl);

	// Create user input
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	td.innerHTML = "Request Approval From: ";
	var td = alib.dom.createElement("td", row);
	var inpt = alib.dom.createElement("input", td);
	inpt.act = action;
	inpt.value = action.getObjectValue("owner_id");
	inpt.onchange = function()
	{
		this.act.setObjectValue("owner_id", this.value);
	}
	var td = alib.dom.createElement("td", row);
	var selCon = alib.dom.createElement("span", td);
	var selector = new WorkFlow_Selector_User(this.mainObject);
	selector.setParentDialog(this.dialog);
	selector.print(selCon, inpt);
}

/**
* @fileOverview The callpage action is used to request and opens a webpage url
*
* @author:    joe, sky.stebnicki@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of CallPage Action
 *
 * @constructor
 * @param {string} obj_type The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_CallPage(obj_type, dlg)
{
    /**
    * The object that is the subject of this approval request
    *
    * @private
    * @type {CAntObject}
    */
    this.mainObject = new CAntObject(obj_type);

    /**
    * Optional dialog reference
    *
    * @private
    * @type {[CDialog]}
    */
    this.dialog = (dlg) ? dlg : null;    
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_CallPage}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_CallPage.prototype.print = function(con, action)
{
    var innerCon = alib.dom.createElement("fieldset", con);
    alib.dom.styleSet(innerCon, "margin", "6px 0px 3px 3px");
    var lbl = alib.dom.createElement("legend", innerCon);
    lbl.innerHTML = "Call Page";
    
    var tableForm = alib.dom.createElement("table", innerCon);
    var tBody = alib.dom.createElement("tbody", tableForm);
    
    var urlForm = new Object();
    urlForm.url = alib.dom.setElementAttr(alib.dom.createElement("input"), [["type", "text"], ["value", action.getObjectValue("url")], ["label", "Url:"], ["width", "500px"]]);
    buildFormInput(urlForm, tBody);
    
    urlForm.url.act = action;
    urlForm.url.onchange = function() 
    {
        this.act.setObjectValue("url", this.value); 
    };
}

/**
* @fileOverview Use Round-Robin to assign any object to a user
*
* @author:    joe, sky.stebnicki@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of CallPage Action
 *
 * @constructor
 * @param {string} obj_type The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_AssignRR(obj_type, dlg)
{
    /**
    * The object that is the subject of this approval request
    *
    * @private
    * @type {CAntObject}
    */
    this.mainObject = new CAntObject(obj_type);

    /**
    * Optional dialog reference
    *
    * @private
    * @type {[CDialog]}
    */
    this.dialog = (dlg) ? dlg : null;    
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_CallPage}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_AssignRR.prototype.print = function(con, action)
{
    var lbl = alib.dom.createElement("div", con);
    lbl.innerHTML = "Set: ";

    var sel_fields = alib.dom.createElement("select", lbl);

    var tmpAntObj = new CAntObject(action.workflow.object_type);
    sel_fields.m_taskObj = action;
    sel_fields.m_ant_obj = tmpAntObj;
    sel_fields.onchange = function()
    {
        this.m_taskObj.update_field = this.value;        
    }

    var fields = tmpAntObj.getFields();
    for (var i = 0; i < fields.length; i++)
    {     
        if (fields[i].type == "object" && fields[i].subtype == "user")
        {
            sel_fields[sel_fields.length] = new Option(fields[i].title, fields[i].name, false, (action.update_field == fields[i].name)?true:false);

            if (fields[i].subtype)
            {
                var ref_obj = new CAntObject(fields[i].subtype);
                var ref_fields = ref_obj.getFields();
                for (var j = 0; j < ref_fields.length; j++)
                {
                    var val = fields[i].name+"."+ref_obj.name+"."+ref_fields[j].name;
                    sel_fields[sel_fields.length] = new Option(fields[i].title+"."+ref_fields[j].title, 
                                                                val, false, (action.update_field == val)?true:false);
                }
            }
        }

    }

    // Add to
    var lbl = alib.dom.createElement("div", con);
    lbl.innerHTML = "Assign to (enter users names separated by a comma ',': ";

    var inp_con = alib.dom.createElement("div", con);
    var ta = alib.dom.createElement("textarea", inp_con);
    alib.dom.styleSet(ta, "width", "100%");
    ta.value = action.getObjectValue("update_to");
    ta.act = action;
    ta.onchange = function() {
        this.act.setObjectValue("update_to", this.value);
    }
}

/**
* @fileOverview The update action is used to request and handle updates on any object type
*
* @author:    joe, sky.stebnicki@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Update Action
 *
 * @constructor
 * @param {string} objType The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_Update(objType, dlg)
{
    /**
    * The object that is the subject of this update request
    *
    * @private
    * @type {CAntObject}
    */
    this.mainObject = new CAntObject(objType);

    /**
    * Optional dialog reference
    *
    * @private
    * @type {[CDialog]}
    */
    this.dialog = (dlg) ? dlg : null;    
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_Update}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_Update.prototype.print = function(con, taskObj)
{
    var dv_cnd = alib.dom.createElement("fieldset", con);
    alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
    var lbl = alib.dom.createElement("legend", dv_cnd);
    lbl.innerHTML = "Update Field";

    var lbl = alib.dom.createElement("div", dv_cnd);
    lbl.innerHTML = "Change: ";

    var sel_fields = alib.dom.createElement("select", lbl);

    var lbl = alib.dom.createElement("div", dv_cnd);
    lbl.innerHTML = "To: ";

    var inp_con = alib.dom.createElement("span", lbl);

    var tmpAntObj = new CAntObject(taskObj.workflow.object_type);
    sel_fields.m_taskObj = taskObj;
    sel_fields.m_inp_con = inp_con;
    sel_fields.m_ant_obj = tmpAntObj;
    sel_fields.onchange = function()
    {
        if (this.value.indexOf(".")!=-1)
        {
            var parts = this.value.split(".");
            if (parts.length==3)
            {
                var ref_obj = new CAntObject(parts[1]);
                this.m_taskObj.frm_changeto = ref_obj.fieldCreateValueInput(this.m_inp_con, parts[2]);
            }
        }
        else
        {
            this.m_taskObj.frm_changeto = this.m_ant_obj.fieldCreateValueInput(this.m_inp_con, this.value);
        }

        this.m_taskObj.update_field = this.value;        
    }

    var fields = tmpAntObj.getFields();
    for (var i = 0; i < fields.length; i++)
    {
        sel_fields[sel_fields.length] = new Option(fields[i].title, fields[i].name, false, (taskObj.update_field == fields[i].name)?true:false);
        if (fields[i].type == "object")
        {
            if (fields[i].subtype)
            {
                var ref_obj = new CAntObject(fields[i].subtype);
                var ref_fields = ref_obj.getFields();
                for (var j = 0; j < ref_fields.length; j++)
                {
                    var val = fields[i].name+"."+ref_obj.name+"."+ref_fields[j].name;
                    sel_fields[sel_fields.length] = new Option(fields[i].title+"."+ref_fields[j].title, 
                                                                val, false, (taskObj.update_field == val)?true:false);
                }
            }
            else
            {
                for (var m = 0; m < this.g_objTypes.length; m++)
                {
                    if (this.g_objTypes[m][0] != tmpAntObj.name)
                    {
                        var ref_obj = new CAntObject(this.g_objTypes[m][0]);
                        var ref_fields = ref_obj.getFields();
                        for (var j = 0; j < ref_fields.length; j++)
                        {
                            var val = fields[i].name+"."+ref_obj.name+"."+ref_fields[j].name;
                            sel_fields[sel_fields.length] = new Option(fields[i].title+"."+ref_obj.title+"."+ref_fields[j].title, 
                                                                        val, false, (taskObj.update_field == val)?true:false);
                        }
                    }
                }                
            }
        }

    }
    var fld = (taskObj.update_field) ? taskObj.update_field : fields[0].name;
    taskObj.frm_changeto = tmpAntObj.fieldCreateValueInput(inp_con, fld, taskObj.getObjectValue("update_to"));    
    taskObj.frm_changeto.act = taskObj;
    taskObj.frm_changeto.onchange = function()
    {
        this.act.setObjectValue("update_to", this.value);
    }
}

/**
 * @fileOverview The wait condition action is used to check when to execute the action
 *
 * @author:	Marl Tumulak, marl.tumulak@aereus.com;
 * 			Copyright (c) 2016 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of Wait Condition Action
 *
 * @constructor
 * @param {string} obj_type The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_WaitCondition(obj_type, dlg)
{
    /**
     * The object that is the subject of this approval request
     *
     * @private
     * @type {CAntObject}
     */
    this.mainObject = new CAntObject(obj_type);

    /**
     * Optional dialog reference
     *
     * @private
     * @type {[CDialog]}
     */
    this.dialog = (dlg) ? dlg : null;
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_WaitCondition}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_WaitCondition.prototype.print = function(con, action)
{
    var innerCon = alib.dom.createElement("fieldset", con);
    alib.dom.styleSet(innerCon, "margin", "6px 0px 3px 3px");
    var lbl = alib.dom.createElement("legend", innerCon);
    lbl.innerHTML = "Wait Condition";
    var tbl = alib.dom.createElement("table", innerCon);
    var tbody = alib.dom.createElement("tbody", tbl);

    var row = alib.dom.createElement("tr", tbody);
    var td = alib.dom.createElement("td", row);
    alib.dom.styleSetClass(td, "strong");
    td.innerHTML = "When";
    var td = alib.dom.createElement("td", row);

    var txtWhenInterval = alib.dom.createElement("input", td);
    alib.dom.styleSet(txtWhenInterval, "width", "28px");
    txtWhenInterval.act = action;
    txtWhenInterval.value = action.when.interval;
    txtWhenInterval.onchange = function() { this.act.when.interval = this.value; };

    var lbl = alib.dom.createElement("span", td);
    lbl.innerHTML = "&nbsp;";

    var cbWhenUnit = alib.dom.createElement("select", td);
    var time_units = wfGetTimeUnits();
    for (var i = 0; i < time_units.length; i++)
    {
        cbWhenUnit[cbWhenUnit.length] = new Option(time_units[i][1], time_units[i][0], false, (action.when.unit==time_units[i][0])?true:false);
    }
    cbWhenUnit.act = action;
    cbWhenUnit.onchange = function() { this.act.when.unit = this.value; };

    var lbl = alib.dom.createElement("span", td);
    lbl.innerHTML = " after workflow starts (enter 0 for immediate)";
}

/**
 * @fileOverview The check condition action is used to check if the workflow should be executed
 *
 * @author:	Marl Tumulak, marl.tumulak@aereus.com;
 * 			Copyright (c) 2016 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of Check Condition Action
 *
 * @constructor
 * @param {string} obj_type The type of object that is being approved with this action
 * @param {CDialog} dlg Optional reference to the dialog being used to edit this action
 */
function WorkFlow_Action_CheckCondition(obj_type, dlg)
{
    /**
     * The object that is the subject of this approval request
     *
     * @private
     * @type {CAntObject}
     */
    this.mainObject = new CAntObject(obj_type);

    /**
     * Optional dialog reference
     *
     * @private
     * @type {[CDialog]}
     */
    this.dialog = (dlg) ? dlg : null;
}

/**
 * Print form
 *
 * @public
 * @this {WorkFlow_Action_CheckCondition}
 * @param {DOMElement} con The container where we can print the form
 * @param {WorkFlow_Action} action The parent action
 */
WorkFlow_Action_CheckCondition.prototype.print = function(con, action)
{
    var innerCon = alib.dom.createElement("fieldset", con);
    alib.dom.styleSet(innerCon, "margin", "6px 0px 3px 3px");
    var lbl = alib.dom.createElement("legend", innerCon);
    lbl.innerHTML = "Check Condition";
    var tbl = alib.dom.createElement("table", innerCon);
    var tbody = alib.dom.createElement("tbody", tbl);

    var row = alib.dom.createElement("tr", tbody);
    var lbl = alib.dom.createElement("td", row);
    lbl.colSpan = 2;
    alib.dom.styleSetClass(lbl, "strong");
    lbl.innerHTML = "Only execute action if the following conditions are met:";
    var row = alib.dom.createElement("tr", tbody);
    var condCon = alib.dom.createElement("td", row);
    condCon.colSpan = 2;
    var dv_cnd = alib.dom.createElement("div", condCon);
    var tmpAntObj = new CAntObject(action.workflow.object_type);
    action.antConditionsObj = tmpAntObj.buildAdvancedQuery(dv_cnd, action.conditions);
}

/**
* @fileOverview WorkFlow_ActionsGrid
*
* The actions grid creates a table of actions for a given
* workflow and optional parent action. The grid can be nested
* as actions can have an unlimited number of child actions/grids
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of WorkFlow_ActionsGrid
 *
 * @constructor
 * @this {WorkFlow_ActionsGrid}
 * @param {WorkFlow} wf Required handle to a workflow object
 * @param {WorkFlow_Action} parentAction Optional parent action
 */
function WorkFlow_ActionsGrid(wf, parentAction)
{
	/**
	* The workflow ID to pull actions for
	*
	* @private
	* @type {WorkFlow}
	*/
    this.workflow = wf;	

	/**
	* Optional parent action used for nesting grids
	*
	* @private
	* @type {WorkFlow_Action}
	*/
    this.parentAction = (parentAction) ? parentAction : null;

	/**
	* Optional parent action event
	*
	* @private
	* @type {WorkFlow_Action}
	*/
    this.parentActionEvent = null;

	/**
	* The container for all grid actions
	*
	* @private
	* @type {DOMElement}
	*/
    this.gridCon = null;

	/**
	* Optional parent dialog
	*
	* @public
	* @type {CDialog}
	*/
    this.parentDlg = null;
}

/**
 * Print the grid inside a dom element/container
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 * @return {DOMElement} con The container that will be used to house the grid
 */
WorkFlow_ActionsGrid.prototype.print = function(con)
{
	// Create container for the actions grid
	this.gridCon = alib.dom.createElement("div", con);

	// Create container for 'add action' bar
	var addActCon = alib.dom.createElement("div", con);
	alib.dom.styleSet(addActCon, "padding", "3px");
	var addActLnk = alib.dom.createElement("a", addActCon, (this.parentAction == null) ? "Add Action" : "Add Sub-Action");
	addActLnk.href = "javascript:void(0);";
	
	var menuAct = new alib.ui.PopupMenu();

	// Send Email
	var item = new alib.ui.MenuItem("Send Email", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_SENDEMAIL); }
	menuAct.addItem(item);

	// Send Notification
	var item = new alib.ui.MenuItem("Send Notification", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_CREATEOBJ, "notification"); }
	menuAct.addItem(item);

	// Create Task
	var item = new alib.ui.MenuItem("Create Task", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_CREATEOBJ, "task"); }
	menuAct.addItem(item);

	// Create Invoice
	var item = new alib.ui.MenuItem("Create Invoice", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_CREATEOBJ, "invoice"); }
	menuAct.addItem(item);

	// Update Field
	var item = new alib.ui.MenuItem("Update Field", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_UPDATEFLD); }
	menuAct.addItem(item);

	// Start Child Workflow
	var item = new alib.ui.MenuItem("Start Child Workflow", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_STARTCHLD); }
	menuAct.addItem(item);

	// Request Approval
	var item = new alib.ui.MenuItem("Request Approval", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_APPROVAL); }
	menuAct.addItem(item);

	// Call Page
	var item = new alib.ui.MenuItem("Call Page", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_CALLPAGE); }
	menuAct.addItem(item);

	// Round Robin
	var item = new alib.ui.MenuItem("Assign Round Robin", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_ASSIGNRR); }
	menuAct.addItem(item);

	// Wait Condition
	var item = new alib.ui.MenuItem("Wait Condition", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_WAITCONDITION); }
	menuAct.addItem(item);

	// Check Condition
	var item = new alib.ui.MenuItem("Check Condition", {cls:this});
	item.onclick = function() { this.options.cls.newAction(WF_ATYPE_CHECKCONDITION); }
	menuAct.addItem(item);

	menuAct.attach(addActLnk);

	/*
	var dm = new CDropdownMenu();
	dm.addEntry("Send Email", function (cls) { cls.newAction(WF_ATYPE_SENDEMAIL); }, null, null, [this]);
	dm.addEntry("Send Notification", function (cls) { cls.newAction(WF_ATYPE_CREATEOBJ, "notification"); }, null, null, [this]);
	dm.addEntry("Create Task", function (cls) { cls.newAction(WF_ATYPE_CREATEOBJ, "task"); }, null, null, [this]);
	dm.addEntry("Create Invoice", function (cls) { cls.newAction(WF_ATYPE_CREATEOBJ, "invoice"); }, null, null, [this]);
	dm.addEntry("Update Field", function (cls) { cls.newAction(WF_ATYPE_UPDATEFLD); }, null, null, [this]);
	dm.addEntry("Start Child Workflow", function (cls) { cls.newAction(WF_ATYPE_STARTCHLD); }, null, null, [this]);
    dm.addEntry("Request Approval", function (cls) { cls.newAction(WF_ATYPE_APPROVAL); }, null, null, [this]);
	dm.addEntry("Call Page", function (cls) { cls.newAction(WF_ATYPE_CALLPAGE); }, null, null, [this]);
	addActCon.appendChild(dm.createLinkMenu("Add Action"));
	*/

	this.loadActions();
}

/**
 * Build actions grid by looping through all actions in the workflow
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 */
WorkFlow_ActionsGrid.prototype.loadActions = function()
{
	if (this.parentAction)
	{
		for (var i =0; i < this.parentAction.childActions.length; i++)
		{
			var fAdd = true;
			if (this.parentActionEvent)
			{
				if (this.parentActionEvent != this.parentAction.childActions[i].parentActionEvent)
					fAdd = false;
			}
			else if (this.parentAction.childActions[i].parentActionEvent)
				fAdd = false;

			if (fAdd)
				this.insertActionRow(this.parentAction.childActions[i]);
		}
	}
	else if (this.workflow)
	{
		for (var i =0; i < this.workflow.actions.length; i++)
		{
			this.insertActionRow(this.workflow.actions[i]);
		}
	}
}

/**
 * Add a new action
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 * @param {number} type Globally defined WF_ATYPE_*
 */
WorkFlow_ActionsGrid.prototype.newAction = function(type, subtype)
{
	if (this.parentAction)
	{
		var act = this.parentAction.addAction(type);
	}
	else if (this.workflow)
	{
		var act = this.workflow.addAction(type);
	}
	else
		return false;

	if (subtype)
		act.create_obj = subtype;

	if (this.parentActionEvent)
		act.parentActionEvent = this.parentActionEvent;

	act.cbData.actGrid = this;

	// If 'OK' is clicked, then make sure we insert the action row
	act.onupdate = function()
	{
		this.cbData.actGrid.insertActionRow(this);
	}
	
	// If 'cancel' is clicked then do nothing
	act.showDialog(this.parentDlg);
}

/**
 * Edit an existing action
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 * @param {WorkFlow_Action} act Handle to action class
 * @param {DOMElement} descCon The DOM element containing the description of edited action
 */
WorkFlow_ActionsGrid.prototype.editAction = function(act, descCon)
{
	act.showDialog(this.parentDlg);

	// On finished update grid display
	act.cbData.descCon = descCon;
	act.onupdate = function()
	{        
		this.cbData.descCon.innerHTML = this.getSummary();
	}
}

/**
 * Insert into action row into the grid
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 * @param {WorkFlow_Action} act Handle to action class
 */
WorkFlow_ActionsGrid.prototype.insertActionRow = function(act)
{
	var actCon = alib.dom.createElement("div", this.gridCon);
	alib.dom.styleSet(actCon, "margin-bottom", "5px");
	alib.dom.styleSet(actCon, "padding", "3px 0 3px 3px");
	alib.dom.styleSet(actCon, "border-bottom", "1px solid #ccc");
	actCon.myAct = act;

	var iconCon = alib.dom.createElement("img", actCon);
	iconCon.src = "/images/icons/tri.png";
	alib.dom.styleSet(iconCon, "margin-right", "3px");

	var descCon = alib.dom.createElement("span", actCon);
	descCon.innerHTML = act.getSummary();
	alib.dom.styleSet(descCon, "cursor", "pointer");
	alib.dom.styleSet(descCon, "padding-right", "10px");
	alib.dom.styleSetClass(descCon, "strong");
	descCon.act = act;
	descCon.wfagcls = this;
	descCon.onclick = function()
	{
		this.wfagcls.editAction(this.act, this);
	}

	var remLink = alib.dom.createElement("a", actCon);
	remLink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	remLink.href = "javascript:void(0);";
	remLink.wfagcls = this;
	remLink.act = act;
	remLink.actCon = actCon;
	remLink.onclick = function()
	{
		this.wfagcls.removeAction(this.act, this.actCon);
	}

	// Now create child grid for this new action
	var subActEvents = act.getSubActionEvents();
	for (var i = 0; i < subActEvents.length; i++)
	{
		var actConGrid = alib.dom.createElement("div", actCon); 

		alib.dom.styleSet(actConGrid, "padding-left", "15px");

		// Create label
		var lbl = alib.dom.createElement("div", actConGrid);
		lbl.innerHTML = subActEvents[i].description;
		alib.dom.styleSetClass(lbl, "italic");

		var grid = new WorkFlow_ActionsGrid(this.workflow, act);
		grid.parentActionEvent = subActEvents[i].name;
		grid.print(actConGrid);
	}
}

/**
 * Remove action including all children
 *
 * @public
 * @this {WorkFlow_ActionsGrid}
 * @param {WorkFlow_Action} act Handle to action class
 */
WorkFlow_ActionsGrid.prototype.removeAction = function(act, con)
{
	// Delete action
	if (this.parentAction)
	{
		this.parentAction.removeAction(act);
	}
	else if (this.workflow)
	{
		this.workflow.removeAction(act);
	}
	else
	{
		act.remove();
	}

	// Remove DOM element from the grid
	this.gridCon.removeChild(con);
}


/**
* @fileOverview Main router for handling hashed URLS and routing them to AntViews
*
* Views are a little like pages but stay
* within the DOM. The main advantage is hash codes are used to navigate
* though a page. Using views allows you to bind function calls to url hashes.
* Each view only handles one lovel in the url but can have children so
* /my/url would be represented by views[my].views[url].show
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of AntViewsRouter
 *
 * @constructor
 */
function AntViewsRouter()
{
    this.cloneId = "";
	this.lastLoaded = "";
	this.defaultView = ""; // Used to set a default view
	this.options = new Object();
	var me = this;
	this.interval = window.setInterval(function(){ me.checkNav(); }, 50);
}

AntViewsRouter.prototype.checkNav = function()
{
	var load = "";
	if (document.location.hash)
	{
		var load = document.location.hash.substring(1);
	}
    
	if (load == "" && this.defaultView != "")
		load = this.defaultView;

	if (load != "" && load != this.lastLoaded)
	{
		this.lastLoaded = load;
		//ALib.m_debug = true;
		//ALib.trace(load);
		this.onchange(load);
	}
}

/**
* Can be overridden. Triggen when a hash changes in the URL
*/
AntViewsRouter.prototype.onchange = function(path)
{
}

/**
* @fileOverview Manage single layer of views in an array.
*
* Each view has a parent manager (reposible for showing and hiding it) then  
* a child manager to handle sub-views. These are basically simple routers.
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of AntViewManager
 *
 * @constructor
 */
function AntViewManager()
{
	this.path = "";
	this.currViewName = "";
	this.views = new Array();
	this.pageView = false; 			// Pageview means only one view is avaiable at a time
	this.pageViewSingle = false; 	// pageViewSingle means that if a child view shows, this view is hidden
	this.isMobile = false;			// Handle creating things differently
}

/**
* Add a new view
*
* @param {string} name The unique name (in this viewmanager) of this view
* @param {object} optionsargs Object of optional params that populates this.options
* @param {object} con Contiaining lement. If passed, then a sub-con will automatically be created. 
* 							If not passed, then pure JS is assumed though utilizing the onshow 
* 							and onhide callbacks for this view			
* @param {object} parentView An optional reference to the parent view. 
* 							This is passed when the view.addView function is called to maintain heiarchy.		 
*/
AntViewManager.prototype.addView = function(name, optionargs, con, parentView)
{
	var pView = (parentView) ? parentView : null;
	var useCon = (con) ? con : null;

	// Make sure this view is unique
	for (var i = 0; i < this.views.length; i++)
	{
		if (this.views[i].nameMatch(name))
			return this.views[i];
	}

	var view = new AntView(name, this, pView);
	view.options = optionargs;
	if (useCon)
	{
		view.conOuter = useCon;
	}
	else if (parentView)
	{
		if (parentView.conOuter)
			view.conOuter = parentView.conOuter;
	}
	if (this.isMobile)
	{
		var contentCon = document.getElementById(view.getPath()+"_con");
		if (!contentCon)
		{
			var path = view.getPath();
			var pageCon = alib.dom.createElement("div", document.getElementById("main"));
			pageCon.style.display="none";
			pageCon.style.position="absolute";
			pageCon.style.top="0px";
			pageCon.style.width="100%";
			pageCon.id = path;

			// Main header container
			var headerCon = alib.dom.createElement("div", pageCon);
			alib.dom.styleSetClass(headerCon, "header");

			// Right button container
			var rightButton = alib.dom.createElement("button", headerCon);
			alib.dom.styleSetClass(rightButton, "right");

			// Left button container
			if (view.hasback())
			{
				var leftButton = alib.dom.createElement("button", headerCon, "Back");
				alib.dom.styleSetClass(leftButton, "left arrow");
				leftButton.view = view;
				leftButton.onclick = function() { view.goup(); }
				/*
				var goback = alib.dom.createElement("img", leftButton);
				goback.src = '/images/icons/arrow_back_mobile_24.png';
				goback.view = view;
				goback.onclick = function() { view.goup(); }
				*/
			}

			// Title container
			var title = alib.dom.createElement("h1", headerCon);

			if (typeof Ant != "undefined")
				title.innerHTML = view.getTitle();
				//title.innerHTML = Ant.account.companyName;

			// joe: I believe this may be depriacted but needs to be verified
			var conAppTitle = alib.dom.createElement("div", headerCon);
			
			var contentCon = alib.dom.createElement("div", pageCon);
			contentCon.id = path+"_con";
			alib.dom.styleSetClass(contentCon, "viewBody");

			// Used by the AntApp class to set the title of the application
			view.conAppTitle = conAppTitle;
		}
		
		view.con = contentCon;
	}
	else
	{
		view.con = (view.conOuter) ? alib.dom.createElement("div", view.conOuter) : null;
		if (view.con)
			view.con.style.display = 'none';
	}

	this.views[this.views.length] = view;
	return view;
}

/**
 * Resize the active view and it's children
 */
AntViewManager.prototype.resizeActiveView = function()
{
	if (this.currViewName)
	{
		var actView = this.getView(this.currViewName);
		if (actView)
			actView.resize();
	}

}

/**
* Load a view by converting a path to a name
*
* @param {string} path path like my/app/name will load "my" view of this viewManager
*/
AntViewManager.prototype.load = function(path)
{
	this.path = path;
	var postFix = "";
	var nextView = "";

	if (this.path.indexOf("/")!=-1)
	{
		var parts = this.path.split("/");
		this.currViewName = parts[0];
		if (parts.length > 1)
		{
			for (var i = 1; i < parts.length; i++) // Skip of first which is current view
			{
				if (postFix != "")
					postFix += "/";
				postFix += parts[i];
			}
		}
	}
	else
		this.currViewName = path;

	var variable = "";
	var parts = this.currViewName.split(":");
	if (parts.length > 1)
	{
		this.currViewName = parts[0];
		variable = parts[1];
	}

	return this.loadView(this.currViewName, variable, postFix);
}

/**
* Even fires when all views have finished loading
*/
AntViewManager.prototype.onload = function()
{
}

/**
* Get a view by name
*
* @param {string} name unique name of the view to load
*/
AntViewManager.prototype.getView = function(name)
{
	for (var i = 0; i < this.views.length; i++)
	{
		// Find the view by name
		if (this.views[i].name == name)
			return this.views[i];
	}

	return null
}

/**
* Load a view by name
*
* @param {string} name unique name of the view to load
* @param {string}  variable if view has a nane like id:[number] then a variable of number would be passed
* @param {string} postFix  traling URL hash my/app would translate to name = "my" and postFix = "app"
*/
AntViewManager.prototype.loadView = function(name, variable, postFix)
{
	var bFound = false;

	if (!postFix)
		var postFix = "";

	// Loop through child views, hide all but the {name} field
	for (var i = 0; i < this.views.length; i++)
	{
		// Find the view by name
		if (this.views[i].name == name)
		{
			this.views[i].variable = variable;

			// Flag that we found the view
			bFound = true;

			/*
			* If we are a child view and the views are set to single pages only
			* the last view in the list should be viewable and the parent will be hidden
			*/
			if (this.pageViewSingle && this.views[i].parentView)
				this.views[i].parentView.hide();

			if (postFix!="") // This is not the top level view - there are children to display in the path
			{
				/*
				* Check to see if this view has been rendered 
				* already - we only render the first time
				* It is possible in a scenario where a deep url is loaded
				* like /my/path to have 'my' never shown because we jump
				* straight to 'path' but we still need to make sure it is rendered.
				*/
				if (this.views[i].isRendered == false)
				{
					this.views[i].render();
					this.views[i].isRendered = true;
				}

				/*
				* As mentioned above, if we are in singleView mode then 
				* don't show views before the last in the list
				*/
				if (!this.pageViewSingle)
					this.views[i].show();

				// Continue loading the remainder of the path - the child view(s)
				this.views[i].load(postFix);
			}
			else // This is a top-level view meaning there are no children
			{
				this.views[i].show(); // This will also render if the view has not yet been rendered
				this.views[i].hideChildren();
			}

			// Call load callbacks for view
			this.views[i].triggerEvents("load");
		}
		else if (this.pageView) // Hide this view if we are in pageView because it was not selected
		{
			/*
			 * pageView is often used for tab-like behavior where you toggle 
			 * through pages/views at the same level - not affecting parent views
			 */
			this.views[i].hide();
			this.views[i].hideChildren();
		}
	}

	//ALib.m_debug = true;
	//ALib.trace("Showing: " + name + " - " + bFound);
	return bFound;
}

/**
* Change fToggle flag. If true, then only one view is visible at a time. If one is shown, then all other views are looped through and hidden. This is great for tabs.
*
* @param {boolean} fToggle toggle view; default: true
*/
AntViewManager.prototype.setViewsToggle = function(fToggle)
{
	this.pageView = fToggle;
}

/**
* Change pageViewSingle flag. If true, then only one view is visible at a time and the parent view is hidden. This setting is per ViewManager and isolated to one level so you can have: 
* viewRoot (pageView - tabs) -> viewNext (will leave root alone) 
* viewApp (single will hide/replace viewNext)
*
* @param {boolean} fToggle toggle view; default: true
*/
AntViewManager.prototype.setViewsSingle = function(fToggle)
{
	this.pageViewSingle = fToggle;
}

/**
 * Get active views at this manager level only
 *
 * @public
 * @return {AntViews[]}
 */
AntViewManager.prototype.getActiveViews = function()
{
	var ret = new Array();

	for (var i in this.views)
	{
		if (this.views[i].isActive())
			ret.push(this.views[i]);
	}

	return ret;
}

/**
* @fileOverview AntView(s) allow doms to be treated like pages.
*
* Each view has a parent manager (reposible for showing and hiding it) then  
* a child manager to handle sub-views. These are basically simple routers.
*
* Views enable a single-page application (no refresh) to have multi-level views
* and deep-linking through the use of a hash url.
*
* Example:
* <code>
* 	parentView.setViewsSingle(true); // Only display one view at a time - children hide parent view
*
* 	var viewItem = parentView.addView("viewname", {});
*
*	viewItem.options.param = "value to forward"; // options is a placeholder object for passing vars to callbacks
*
*	viewItem.render = function() // called only the first time the view is shown
*	{ 
*		this.con.innerHTML = "print my form here"; // this.con is automatically created
*	} 
*
*	viewItem.onshow = function()  // draws in onshow so that it redraws every time the view is displayed
*	{ 
*	};
*
*	viewItem.onhide = function()  // is called every time the view is hidden
*	{ 
*	};
* </code>
*
* @author: 	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
* Create a view instance of AntView and place in in an array in viewman
*
* @constructor
* @param {string} name Required unique string name of this view
* @param {object} viewman Required reference to AntViewManager object
* @param {object} parentView reference to a parent AntView object
*/
function AntView(name, viewman, parentView)
{
	/**
	 * Bound events
	 *
	 * @var {Array}
	 */
	this.boundEvents = new Array();

	this.parentViewManager = viewman;
	this.viewManager = null;
	this.parentView = (parentView) ? parentView : null;
	this.activeChildView = null;
	this.isActive = false;
	this.isRendered = false;
	this.options = new Object();
	this.conOuter = null; 		// container passed to place view in
	this.con = null;	 		// child container of conOuter that holds this rendered view
	this.conChildren = null; 	// child container of conOuter that holds all rendered children
	this.variable = ""; 		// variables can exist in url part. Example: view p:pnum would render view p with variable num
	this.pathRelative = ""; 	// path relative to this view
	this.title = "";			// optional human readable title
	this.defaultView = "";
	this.setOnTitleChange = new Array();
    this.fromClone = false;     // determines if the object was being cloned
    
	var parts = name.split(":");
	this.name = parts[0];
	if (parts.length > 1)
	{
		// Possible save the variable name if we are going to use multiple variables
	}
}

/**
 * Set a callback function to call given a certian event name
 *
 * @param {string} evname Required The name of the event to hook into
 * @param {function} cb_fun Required The function to call when a view loads
 * @param {object} options Required object that will be passed to the cb
 */
AntView.prototype.on = function(evname, cb_fun, options)
{
	this.boundEvents[this.boundEvents.length] = {cb:cb_fun, opts:options, name:evname};
}

/**
 * Set a callback function to call when this or a child view loads or is shown. 
 *
 * This is displayed every time the view is loaded which includes all child view loads. 
 * If you only want o call a function when this view is shown, then use bindOnViewShow instead.
 *
 * Example:
 * view.bindOnViewLoad(function(opts, remPath) { opts.cls.setClassFunPath(remPath); }, { cls:this });
 *
 * @param {string} cb_fun Required The function to call when a view loads
 * @param {object} options Required object that will be passed to the cb
 */
AntView.prototype.bindOnViewLoad = function(cb_fun, options)
{
	this.on("load", cb_fun, options);
	//this.boundEvents[this.boundEvents.length] = {cb:cb_fun, opts:options, name:"load"};
}

/**
 * Call all bound callback functions because this view just loaded
 *
 * @param {string} evname The name of the event that was fired
 */
AntView.prototype.triggerEvents = function(evname)
{
	for (var i = 0; i < this.boundEvents.length; i++)
	{
		if (this.boundEvents[i].name == evname)
		{
			if ("load" == evname) // add extra param
				this.boundEvents[i].cb(this.boundEvents[i].opts, this.pathRelative);
			else
				this.boundEvents[i].cb(this.boundEvents[i].opts);
		}
	}
}

/**
 * Call all bound callback functions because this view just loaded
 */
AntView.prototype.setDefaultView = function(viewname)
{
	this.defaultView = viewname;
}

/**
 * Call this function to fire all resize events
 *
 * @param {bool} resizeChildren If set to true, all active children will be resized
 */
AntView.prototype.resize = function(resizeChildren)
{
	var resizeCh = (resizeChildren) ? true : false;

	if (resizeCh)
		this.viewManager.resizeActiveView();

	this.onresize();
}

/**
 * Internal function to show this view. Will call render on the first time. redner shold be overridden.
 */
AntView.prototype.show = function()
{
	//ALib.m_debug = true;
	//ALib.trace("Show: " + this.getPath());

	if (!this.isRendered)
	{
		this.isRendered = true;
		this.render();
	}

	if (this.con)
	{
		//alib.fx.fadeIn(this.con, function() { alib.dom.styleSet(this, "display", "block");  });
		alib.dom.styleSet(this.con, "display", "block");
	}

	if (this.parentViewManager.isMobile)
	{
		var isBack = (window.avChangePageback) ? true : false;
		changePage(this.getPath(true), isBack); // The true param excludes vars to make change to containers rather than specific ids
		window.avChangePageback = false; // Reset flag for next time
	}

	if (this.defaultView && !this.hasChildrenVisible())
		this.navigate(this.defaultView);
	
	this.triggerEvents("show");
	this.onshow();
	this.onresize();
	this.isActive = true;
}

/**
* Internal function to hide this view.
*/
AntView.prototype.hide = function(exclChild)
{
	if (!this.isActive)
		return false;

	if (this.con)
	{
		this.con.style.display = "none";
		//alib.fx.fadeOut(this.con, function() { alib.dom.styleSet(this, "display", "none"); });
	}

	this.isActive = false;

	if (this.isRendered)
	{
		this.triggerEvents("hide");
		this.onhide();
	}
}

/**
* Pass-through to this.parentViewManager.addView with this as parent
* See AntViewManager::addView
*/
AntView.prototype.addView = function(name, optionargs, con)
{
	var usecon = (con) ? con : null;

	if (this.viewManager == null)
	{
		this.viewManager = new AntViewManager();
		if (this.parentViewManager)
			this.viewManager.isMobile = this.parentViewManager.isMobile;
	}

	//ALib.m_debug = true;
	//ALib.trace("Adding View: " + this.getPath() + "/" + name);

	return this.viewManager.addView(name, optionargs, usecon, this);
}

/**
* Get a child view by name
*
* @param {string} name unique name of the view to load
* @return {AntView} View if found by name, null if no child view exists
*/
AntView.prototype.getView = function(name)
{
	if (this.viewManager)
	{
		return this.viewManager.getView(name);
	}

	return null
}

/**
* Pass-through to this.parentViewManager.setViewsToggle
* See AntViewManager::addView
*/
AntView.prototype.setViewsToggle = function(fToggle)
{
	if (this.viewManager == null)
	{
		this.viewManager = new AntViewManager();

		if (this.parentViewManager)
			this.viewManager.isMobile = this.parentViewManager.isMobile;
	}
	
	this.viewManager.setViewsToggle(fToggle);
}

/**
* Pass-through to this.parentViewManager.setViewsToggle. When a child shows then hide this view - used for heiarch
* See AntViewManager::setViewsSingle
*/
AntView.prototype.setViewsSingle = function(fToggle)
{
	if (this.viewManager == null)
	{
		this.viewManager = new AntViewManager();

		if (this.parentViewManager)
			this.viewManager.isMobile = this.parentViewManager.isMobile;
	}
	
	this.viewManager.setViewsSingle(fToggle);
}

/**
 * Get the parent view if set
 *
 * @return {AntView|bool} View if parent is set, false if there is no parent
 */
AntView.prototype.getParentView = function()
{
	return (this.parentView) ? this.parentView : false;
}

/**
* Traverse views and get the full path of this view:
* view('app').view('customers') = 'app/customers'
*
* @param bool excludevars If set to true, then vars will not be included in the returned path
*/
AntView.prototype.getPath = function(excludevars)
{
	var name = this.name;
	var doNotPrintVar = (typeof excludevars != "undefined") ? excludevars : false;
    
	// Make sure the variable in included
	if (this.variable && doNotPrintVar == false)
		name += ":" + this.variable;
        
	if (this.parentView)
		var path = this.parentView.getPath() + "/" + name;
	else
		var path = name;

	return path;
}

/**
* Get a numan readable title. If not set, then create one.
*
* @this {AntView}
* @public
* @param {DOMElement} el An optional dom element to bind 'onchange' event to. When title of view changes, the innerHTML of el will change
* @return {string} The title of this view
*/
AntView.prototype.getTitle = function(el)
{
	if (this.title)
	{
		var title = this.title;
	}
	else
	{
		// replace dash with space
		var title = this.name.replace('-', ' ');
		// replace underline with space
		var title = this.name.replace('_', ' ');
		// ucword
		title = title.replace(/^([a-z])|\s+([a-z])/g, function ($1) { return $1.toUpperCase(); });
	}

	if (typeof el != "undefined")
	{
		el.innerHTML = title;
		this.setOnTitleChange[this.setOnTitleChange.length] = el;
	}
	else
	{
		return title;
	}
}

/**
* Set a human readable title
*/
AntView.prototype.setTitle = function(title)
{
	this.title = title;
	for (var i = 0; i < this.setOnTitleChange.length; i++)
	{
		try
		{
			this.setOnTitleChange[i].innerHTML = title;
		}
		catch(e) {}
	}
}

/**
* Check url part to see if the name matches this view
*/
AntView.prototype.nameMatch = function(name)
{
	if (typeof name == "undefined")
	{
		throw "No view name was passed to AntView::nameMatch for " + this.getPath();
	}

	var parts = name.split(":");
	name = parts[0];

	return (name == this.name) ? true : false;
}

/**
* Set the hash and load a view programatically. 
*/
AntView.prototype.navigate = function(viewname)
{
	document.location.hash = "#" + this.getPath() + "/" + viewname;
}

/**
* Check if going back a view is an option (are we on first level).
*
* This does not rely entirely on the history object because if 
* we are at the root view (home), then we don't want to go back.
*/
AntView.prototype.hasback = function()
{
	var ret = false; // Assume we are on the root
	var path = this.getPath();

	if (path.indexOf("/")!=-1)
	{
		if (history.length > 1)
			ret = true;
	}

	return ret;
}

/**
* Navigate up to parent view
*/
AntView.prototype.goup = function(depth)
{
	if (this.parentView)
	{
		document.location.hash = "#" + this.parentView.getPath();
	}
	else
	{
		history.go(-1);
	}

	// global avChangePageback is used in mobile to determine transition direction
	window.avChangePageback = true;
}

/**
* Check if child views are being shown = check for deep linking
*
* @return {bool} True if the hash path has child views visible, otherwise false
*/
AntView.prototype.hasChildrenVisible = function()
{
	if (document.location.hash == "#" + this.getPath() || document.location.hash == "") // last assumes default
		return false;
	else
		return true;
}

/**
* Go back
*/
AntView.prototype.goback = function(depth)
{
	history.go(-1);

	// global avChangePageback is used in mobile to determine transition direction
	window.avChangePageback = true;
}

/**
* Pass-through to this.parentViewManager.load
* See AntViewManager::load
*/
AntView.prototype.load = function(path)
{
	this.pathRelative = path; // path relative to this view

	if (this.viewManager != null)
	{
		if (!this.viewManager.load(path))
		{
			this.m_tmpLoadPath = path; // If it failed to load, cache for later just in case views are still loading
		}
	}
	else
	{
		this.m_tmpLoadPath = path; // If it failed to load, cache for later just in case views are still loading
	}
}

/**
* Clear loading flag that will cause all subsequent load calls to be queued until setViewsLoaded is called.
*/
AntView.prototype.setViewsLoaded = function()
{
	//ALib.m_debug = true;
	//ALib.trace("View ["+this.name+"] finished loading ");

	if (this.m_tmpLoadPath)
	{
		//ALib.m_debug = true;
		//ALib.trace("Found delayed load " + this.m_tmpLoadPath);
		this.load(this.m_tmpLoadPath);
		this.m_tmpLoadPath = "";
	}

	if (this.defaultView && !this.hasChildrenVisible())
		this.navigate(this.defaultView);

	// Call load callbacks for view
	this.triggerEvents("load");
}

/**
* Find out if this view had children views
*/
AntView.prototype.hideChildren = function()
{
	if (this.viewManager)
	{
		for (var i = 0; i < this.viewManager.views.length; i++)
		{
			this.viewManager.views[i].hide();
			this.viewManager.views[i].hideChildren();
		}
	}

	this.pathRelative = ""; // Reset relative path
}

/**
 * Gets the object id from hash url string
 *
 * @public
 * @this {AntView}
 * @param {string} objName      Object Name to be checked
 */
AntView.prototype.getHashObjectId = function(objName)
{
    if(this.name == objName)
        return this.variable;
        
    if (this.parentView)
        var objId = this.parentView.getHashObjectId(objName);
    
    if(objId)
        return objId;
    else
        return false;
}

/**
* Used to draw view and should be overriden. 
*
* If a containing element was passed on new AntView then this.con 
* will be populated with a div that can be manipulated with contents. 
* this.options is also available for any processing.
*/
AntView.prototype.render = function()
{
}

/**
* Can be overridden. Fires once a view is shown.
*/
AntView.prototype.onshow = function()
{
}

/**
* Can be overridden. Fires once a view is hidden.
*/
AntView.prototype.onhide = function()
{
}

/**
* Can be overridden. Fires once a view is shown for resizing.
*/
AntView.prototype.onresize = function()
{
	//alib.m_debug = true;
	//alib.trace("Resize: " + this.name);
}

/**
 * @fileoverview This form load will be used to load forms for objec types
 */

/**
 * Constructor
 */
AntObjectForms = {};

/**
 * Cache loaded forms
 *
 * @private
 * @type {{objType, scope, xml}}
 */
AntObjectForms.loadedForms = new Array();

/**
 * Load an object form it is not already cached
 *
 * @public
 * @param {string} objType The name of the object type to load the form for
 * @param {function} callback The function to call
 */
AntObjectForms.loadForm = function(objType, callback, cbData, scope)
{
	var scope = scope || "default";
	var callbackData = cbData || new Object();

	// First check to see if it has been loaded already
	for (var i in this.loadedForms)
	{
		if (this.loadedForms[i].objType == objType && this.loadedForms[i].scope == scope)
			return this.loaded(callback, callbackData, this.loadedForms[i].xml);
	}

	// Not cached, get xml from object controller
    var ajax = new CAjax('xml');
    ajax.cbData.cls = this;
	ajax.cbData.callback = callback;
	ajax.cbData.callbackData = callbackData;
	ajax.cbData.objType = objType;
	ajax.cbData.scope = scope;
    ajax.onload = function(root)
    {
		this.cbData.cls.loadedForms.push({
			objType:this.cbData.objType,
			scope:this.cbData.scope,
			xml:root
		});
		this.cbData.cls.loaded(this.cbData.callback, this.cbData.callbackData, root);
    };
    ajax.exec("/controller/Object/getFormUIML", 
                [["obj_type", objType], ["scope", scope]]);
}

/**
 * Get form root xml
 *
 * This function will force a non-asycn get of form if not already cached which hangs the ui.
 * It is highly recommended that you use loadFrom above with an async callback
 *
 * @param {string} objType The object type name to load
 * @param {string} scope The scope if not default
 */
AntObjectForms.getFormXml = function(objType, scope)
{
	var scope = scope || "default";

	for (var i in this.loadedForms)
	{
		if (this.loadedForms[i].objType == objType && this.loadedForms[i].scope == scope)
		{
			return this.loadedForms[i].xml;
		}
	}

	// Else get from ajax with non asyc call
	var ajax = new CAjax("xml");
    var root = ajax.exec("/controller/Object/getFormUIML", 
              			  [["obj_type", objType], ["scope", scope]], false);

	// Cache future requests
	this.cbData.cls.loadedForms.push({
		objType:objType,
		scope:scope,
		xml:root
	});

	return root;
}

/**
 * Form is loaded, call the callback
 *
 * @private
 * @param {function|Object} cb Either a function or an object with {context, method} properties
 * @param {Object} cbData Data object to pass to callback
 * @param {CXml} xml The root xml node
 */
AntObjectForms.loaded = function(cb, cbData, xml)
{
	// Call the callback
	// -----------------------------------------
	if (typeof cb == "function")
	{
		cb(xml, cbData);
	}
	else if (cb.context && cb.method)
	{
		cb.context[cb.method](xml, cbData);
	}

	return true;
}

/**
 * Clear cache for an object tyep
 *
 * @public
 * @param {string} objType The name of the object forms to clear
 */
AntObjectForms.clearCache  = function(objType)
{
	// First check to see if it has been loaded already
	for (var i in this.loadedForms)
	{
		if (this.loadedForms[i].objType == objType)
		{
			this.loadedForms.splice(i, 1);

			// Call recurrsively to remove all scopes
			this.clearCache(objType);
		}
	}
}

/*======================================================================================
    
    Class:        CAntObject

    Purpose:    ANT Objects store all data in ANT

    Author:        joe, sky.stebnicki@aereus.com
                Copyright (c) 2010 Aereus Corporation. All rights reserved.
    
    Usage:        var obj = new CAntObject("customer");

======================================================================================*/

var CAntObjectDefs = new Array();

function CAntObject(type, oid)
{    
    this.title = type; // title of object - customer
    this.titlePl = type; // title of object plural - customers
    this.label = "";    // name of instance of object (like first_name + " " + last_name)
    this.name = type; // legacy, use obj_type below
    this.obj_type = type;
    this.id = (oid) ? oid : null;
    this.loaded = false; // Set to true when object data is fully loaded
    this.nameField = "id"; // The field that serves as the title or name for an object
    this.dirty = false; // This will be set to true the second 'setValue' is called

    this.repressOnSave = false; // Can be used to repress onsave callback
    this.cbProps = new Object(); // Callback properties object
    this.associations = new Array();    // objects for associations
    this.fields = new Array();    
    this.values = new Array(); // Actual values for a specific object
    this.views = new Array();
    this.m_filters = new Array(); // Used for filtering data - especially fkey references
    this.teamFormLayouts = new Array(); // custom form layouts can be defined for each team

    // for adding and removing fields
    this.addfields = new Array();
    this.removefields = new Array();
    this.propertyFormOrder = new Array(); // used to resort fields

    // Add security
    this.security = new Object();
    this.security.view = true;
    this.security.edit = true;
    this.security.del = true;
    this.security.childObjects = new Array();
    
    // Personal user settings - number of objects to show per browser page
    this.showper = 0;

    // Personal user settings - mode of browser {previewV, previewH, table}
    this.browserMode = "table";

	/**
	 * The html message printed in a browser (objectList) when there are no items to display
	 * 
	 * @public
	 * @var {string}
	 */
    this.browserBlankStateMsg = "";

	/**
	 * Generic callback properties buffer
	 *
	 * @var {Object}
	 */
	this.cbData = new Object();
    
    // recurrence object properties
    this.recurrencePattern = null;
    this.recurRules = null; // does this type of object support recurrence
    
    // Determines wheter to load the objects sub field for condition dropdown
    this.loadQuerySubObjects = true;
    
    // arguments for forms opened in new window
    this.newWindowArgs = null;    

	/**
	 * Optional icon name
	 *
	 * This string is set if an icon exists for this object type.
	 *
	 * @var {stirng}
	 */
	this.iconName = null;


	/**
	 * New entity defintiion
	 *
	 * @type {Ant.EntityDefinition}
	 */
	this.def = Ant.EntityDefinitionLoader.get(type);

	// Old definitions
	/*
    var cachedInd = this.getCachedObjDef(type);
    if (cachedInd == -1)
    {
        // Get object definition
        var ajax = new CAjax();
        var url = "/objects/xml_get_objectdef.php?oname=" + type;
        if (typeof Ant != "undefined" && Ant.isMobile)
            url += "&mobile=1";
        var root = ajax.exec(url, null, false);
    }
    else
    {
        var root = CAntObjectDefs[cachedInd].root;
    }
	*/


    //if (root.getNumChildren())
    //{
        //var def = new Object();
        //def.name = type;
        //def.fields = new Array();

   		this.title = this.def.title;

        if ("y" == this.title.charAt(this.title.length - 1))
        {
            this.titlePl = this.title.substr(0, this.title.length - 1) +"ies";
        }
        else if ("s" != this.title.charAt(this.title.length - 1))
            this.titlePl = this.title+"s";
        else
            this.titlePl = this.title;
        
        // Get the name/listTitle field - usually eather a field called either "title" or "name"
        this.nameField= this.def.listTitle;

        // Get views
		this.views = this.def.getViews();
		/*
		var views = this.def.getViews();
        for (var i in views)
        {
            var view = new AntObjectBrowserView(this.name);
			view.fromData(views[i]);
            this.views[this.views.length] = view;
        }
		*/
		/*
        var view_nodes = root.getChildNodeByName("views");
        for (var i = 0; i < view_nodes.getNumChildren(); i++)
        {
            var child = view_nodes.getChildNode(i);

            var view = new AntObjectBrowserView(this.name);
            view.loadFromXml(child);
            this.views[this.views.length] = view;
        }
		*/

		/**
         * Get secuirty
		 * Note: Child object security is temporarily disabled due to performance issues
        var security_nodes = root.getChildNodeByName("security");
        for (var i = 0; i < security_nodes.getNumChildren(); i++)
        {
            var child = security_nodes.getChildNode(i);

            switch (child.m_name)
            {
            case 'child_object':
                this.security.childObjects[this.security.childObjects.length] = child.m_text;
                break;
            }
        }
		*/

		/**
		 * Use defaults for now. Acutally, once we go to progressive load this won't matter
        var buf = unescape(root.getChildNodeValByName("showper"));
        if (buf && buf!="0")
            this.showper = buf;
		 */

		// Not sure if this belongs in the defintion
		if (this.def.browserMode)
            this.browserMode = this.def.browserMode;
		/*
        var buf = unescape(root.getChildNodeValByName("browser_mode"));
        if (buf && buf!="0")
            this.browserMode = buf;

        var buf = unescape(root.getChildNodeValByName("browser_blank_state"));
        if (buf)
            this.browserBlankStateMsg = buf;

        // Get form layout
        this.xmlFormLayout = root.getChildNodeByName("form");
        this.xmlFormLayoutText = unescape(root.getChildNodeValByName("form_layout_text")); // Default text only used for editing
		*/

        // Get recurrence if any
		if (this.def.recurRules)
		{
            this.recurRules = new Object();
            this.recurRules.fieldTimeStart  = this.def.recurRules.field_time_start;
            this.recurRules.fieldTimeEnd    = this.def.recurRules.field_time_end;
            this.recurRules.fieldDateStart  = this.def.recurRules.field_date_start;
            this.recurRules.fieldDateEnd    = this.def.recurRules.field_date_end;
            this.recurRules.fieldRecurId    = this.def.recurRules.field_recur_id; // local field that stores the recur pattern id
		}
		/*
        var recurNode = root.getChildNodeByName("recurrence");
        if (recurNode.getAttribute('hasrecur')=='t')
        {    
            this.recurRules = new Object();
            this.recurRules.fieldTimeStart     = recurNode.getChildNodeValByName("field_time_start");
            this.recurRules.fieldTimeEnd    = recurNode.getChildNodeValByName("field_time_end");
            this.recurRules.fieldDateStart    = recurNode.getChildNodeValByName("field_date_start");
            this.recurRules.fieldDateEnd    = recurNode.getChildNodeValByName("field_date_end");
            this.recurRules.fieldRecurId    = recurNode.getChildNodeValByName("field_recur_id"); // local field that stores the recur pattern id
        }
		*/

		var fields = this.def.getFields();
        for (var i in fields)
        {
			var srcField = fields[i];

            var field = {
				optional_vals : new Array(),
                name : srcField.name,
                title : srcField.title,
                type : srcField.type,
                subtype : srcField.subtype,
                useWhen : srcField.useWhen,
                iconName : "",
                default_value: srcField.getDefault("null"),
                readonly : srcField.readonly,
                required : srcField.required,
				system : srcField.system,
				tabnum : 0,
                fieldsetnum : 0
			}

			if (srcField.optionalValues)
			{
				for (var key in srcField.optionalValues)
				{
					// Very bad design, eventually we just need to return the fields in this.def
					field.optional_vals[field.optional_vals.length] = [
						key, 
						srcField.optionalValues[key],
						false, 	// legacy
						false	// legacy
					];                                                
				}
			}
			/*
			var opt_vals = child.getChildNodeByName("optional_values");
			if (opt_vals)
			{
				for (var j = 0; j < opt_vals.getNumChildren(); j++)
				{
					var val = opt_vals.getChildNode(j);                        
					// check if there's a form posted value, if so, do not display the already selected value from the dropdown                        
				}
			}
			*/

            this.fields[this.fields.length] = field;
        }
        // Loop through fields
		/*
        var field_nodes = root.getChildNodeByName("fields");
        for (var i = 0; i < field_nodes.getNumChildren(); i++)
        {
            var field = new Object();
            field.optional_vals = new Array();

            var child = field_nodes.getChildNode(i);
            
            if (child.m_name == "field")
            {                
                field.name        = unescape(child.getChildNodeValByName("name"));
                field.title        = unescape(child.getChildNodeValByName("title"));
                field.type         = unescape(child.getChildNodeValByName("type"));
                field.subtype    = unescape(child.getChildNodeValByName("subtype"));
                field.useWhen = unescape(child.getChildNodeValByName("use_when"));
                field.iconName        = unescape(child.getChildNodeValByName("icon_name"));
                field.default_value    = unescape(child.getChildNodeValByName("default_value"));
                //field.heiarch    = (child.getChildNodeValByName("heiarch")=='t') ? true : false;
                //field.parent_id    = unescape(child.getChildNodeValByName("parent"));
                field.readonly    = (child.getChildNodeValByName("readonly")=='t')?true:false;
                field.required = (child.getChildNodeValByName("required")=='t')?true:false;
                field.system = (child.getChildNodeValByName("system")=='t')?true:false;
                field.tabnum     = 0;
                field.fieldsetnum = 0;    
                
                var fkey_table     = child.getChildNodeByName("fkey_table");
                if (fkey_table)
                {
                    // TODO: add fkey
                }

                var opt_vals = child.getChildNodeByName("optional_values");
                if (opt_vals)
                {
                    for (var j = 0; j < opt_vals.getNumChildren(); j++)
                    {
                        var val = opt_vals.getChildNode(j);                        
                        // check if there's a form posted value, if so, do not display the already selected value from the dropdown                        
                        field.optional_vals[field.optional_vals.length] = [unescape(val.getAttribute("key")), 
                                                                               unescape(val.getAttribute("title")),
                                                                               (val.getAttribute("heiarch")=='t') ? true : false, 
                                                                               val.getAttribute("parent_id")];                                                
                    }
                }

                this.fields[this.fields.length] = field;
            }
        }
		*/

		/*
        if (cachedInd == -1)
        {
            var def = new Object();
            def.name = type;
            def.root = root;
            CAntObjectDefs[CAntObjectDefs.length] = def;
        }
		*/
    //}

    this.condition = new CAntObjectCond();

	// Now check for extensions to the base object class
	var subClassName = "";
	var onameParts = this.obj_type.split("_");
	for (var i = 0; i < onameParts.length; i++)
	{
		subClassName += onameParts[i].charAt(0).toUpperCase() + onameParts[i].substr(1);
	}

	subClassName = "CAntObject_" + subClassName;

	if (typeof subClassName != "undefined")
	{
		var extFunct = null;

		try
		{
			var extFunct = eval(subClassName);
		}
		catch (e) {}

		// Now extend this object with the subclass
		if (extFunct != null)
			extFunct(this);
	}
}

/**
 * Load the values for this object
 *
 * @public
 * @param {int} id If set then load id, otherwise try to get this.id
 */
CAntObject.prototype.load = function(id)
{
	var oid = (typeof id != "undefined") ? id : this.id;

    if (oid == null)
        return;

    var ajax = new CAjax("json");
	ajax.m_obj = this;
    ajax.onload = function(objData)
    {
        if (objData)
        {
			this.m_obj.id = objData.id;

            if(objData.security)
            {
                this.m_obj.security.view = objData.security.view;
                this.m_obj.security.edit = objData.security.view;
                this.m_obj.security.del= objData.security.view;
            }

            // Handle iconName
			if (objData.iconName)
				this.m_obj.iconName = objData.iconName;
            
            for (var i = 0; i < this.m_obj.fields.length; i++)
            {
                var field = this.m_obj.fields[i];

                if(this.m_obj.newWindowArgs && typeof this.m_obj.newWindowArgs[field.name] == "undefined")
                    continue;
                
                if (field.type == "fkey_multi" || field.type == "object_multi")
                {
					// check if new window has posted values
					if(this.m_obj.newWindowArgs)
					{
						// split the keys and titles from posted multi values
						var multiKey = unescape_utf8(this.m_obj.newWindowArgs[field.name][0]).split(",");
						var multiTitle = unescape_utf8(this.m_obj.newWindowArgs[field.name + "Multi"][0]).split(",");
						
						// loop thru post the keys and values and set the multi value
						for(var multiArg = 0; multiArg < multiKey.length; multiArg++)
						{
							if(multiKey[multiArg].length)
							{
								this.m_obj.setMultiValue(field.name, multiKey[multiArg], multiTitle[multiArg]);
							
								// Cache the label if not already exists so extra query is not necessary
								var bFound = false;
								for (var j = 0; j < field.optional_vals; j++)
								{
									if (field.optional_vals[j][0] == multiKey[multiArg])
										bFound = true;
								}
								
								if (!bFound)
								{
									var ind = field.optional_vals.length;
									field.optional_vals[ind] = new Array();
									field.optional_vals[ind][0] = multiKey[multiArg];
									field.optional_vals[ind][1] = unescape(multiTitle[multiArg]);
								}
							}                                
						}
					}
					else
					{
						if (objData[field.name + "_fval"])
						{
							for (var fvalid in objData[field.name + "_fval"])
							{
								this.m_obj.setMultiValue(field.name, fvalid, objData[field.name + "_fval"][fvalid]);
							}
						}
					}
                    
                    var divBlankState = document.getElementById('divBlankState');
                    if(divBlankState)
                        divBlankState.parentNode.removeChild(divBlankState);
                        
                }
                else
                {
                    if (field.type == "fkey" || field.type == "object")
                    {   
                        // check if new window has posted values
                        if(this.m_obj.newWindowArgs)
                        {
                            var fieldKey = this.m_obj.newWindowArgs[field.name][0];
                            var fieldValue = this.m_obj.newWindowArgs[field.name + "Fkey"][0];
                            this.m_obj.setValue(field.name, fieldKey, unescape_utf8(fieldValue));
                        }
                        else
                        {
							if (objData[field.name + "_fval"])
							{
								for (var fvalid in objData[field.name + "_fval"])
									this.m_obj.setValue(field.name, fvalid, objData[field.name + "_fval"][fvalid]);

							}
                        }                        
                    }
                    else if (field.type == "bool")
                    {
                        // added newWindowArgs to fetch the edited values from inline form
                        if(this.m_obj.newWindowArgs)
                        {
                            var boolValue = this.m_obj.newWindowArgs[field.name][0];
                            if(boolValue=="t")
                                boolValue = true;
                            else if(boolValue=="f")
                                boolValue = false;
                                
                            this.m_obj.setValue(field.name, boolValue);
                        }                            
                        else
                            this.m_obj.setValue(field.name, (objData[field.name]=='t')?true:false);

						// If readonly flag the edit the security to disable edit
						if (field.name == "f_readonly" && objData[field.name]=='t')
							this.m_obj.security.edit = false;
                    }
                    else
                    {
                        // added newWindowArgs to fetch the edited values from inline form
                        if(this.m_obj.newWindowArgs)
                            this.m_obj.setValue(field.name, unescape_utf8(this.m_obj.newWindowArgs[field.name][0]));
                        else
                            this.m_obj.setValue(field.name, objData[field.name]);
                    }
                }
            }
        }

        // check for recurrence pattern. If exists then load first before calling this.onload
        if (this.m_obj.recurRules != null)
        {
            if (this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId))
            {
                var rp = this.m_obj.getRecurrencePattern(true);
                rp.objcls = this.m_obj;
                rp.onload = function()
                {
                    this.objcls.onload();
                }
                rp.load(this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId));
            }
            else
            {
                this.m_obj.onload();
            }
        }
        else
        {
            this.m_obj.onload();
        }
        this.m_obj.loaded = true;
        this.m_obj.dirty = false;
    };

    var url = "/svr/entity/get?obj_type="+ this.name +"&id=" + oid;
    ajax.exec(url);
}


/**
 * Set data for this object from data object
 *
 * @public
 * @this {CAntObject}
 */
CAntObject.prototype.setData = function(objData)
{
	if (objData.id)
		this.id = objData.id;

	for (var i = 0; i < this.fields.length; i++)
	{
		var field = this.fields[i];
		
		// Skip over undefined data
		if (typeof objData[field.name] == "undefined")
			continue;

		var fieldData = objData[field.name];

		if (field.type == "fkey_multi" || field.type == "object_multi")
		{
			if (fieldData)
			{
				for (var m = 0; m < fieldData.length; m++)
				{
					if (fieldData[m].key)
					{                                
						this.setMultiValue(field.name, fieldData[m].key, fieldData[m].value);

						// Cache the label if not already exists so extra query is not necessary
						var bFound = false;
						for (var j = 0; j < field.optional_vals; j++)
						{
							if (field.optional_vals[j][0] == fieldData[m].key)
								bFound = true;
						}
						
						if (!bFound)
						{
							var ind = field.optional_vals.length;
							field.optional_vals[ind] = new Array();
							field.optional_vals[ind][0] = fieldData[m].key;
							field.optional_vals[ind][1] = fieldData[m].value;
						}                                
					}
				}  
				
			}
		}
		else
		{
			if (field.type == "fkey" || field.type == "object")
			{   
				this.setValue(field.name, fieldData.key, fieldData.value);
			}
			else if (field.type == "bool" && typeof fieldData === "string")
			{
				this.setValue(field.name, (fieldData=='t')?true:false);
			}
			else
			{
				this.setValue(field.name, fieldData);
			}
		}
	}

	// check for recurrence pattern. If exists then load first before calling this.onload
	// TODO: load recur rules
	/*
	if (this.m_obj.recurRules != null)
	{
		if (this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId))
		{
			var rp = this.m_obj.getRecurrencePattern(true);
			rp.objcls = this.m_obj;
			rp.onload = function()
			{
				this.objcls.onload();
			}
			rp.load(this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId));
		}
	}
	*/

	this.loaded = true;
	this.dirty = false;
}

/**
 * Get raw data for this object from data object
 *
 * @public
 * @this {CAntObject}
 */
CAntObject.prototype.getData = function(objData)
{
	var objData = new Object();
	if (objData.id)
		objData.id = this.id;

	/*
	var sec_view = root.getAttribute("sec_view");
	var sec_edit = root.getAttribute("sec_edit");
	var sec_delete= root.getAttribute("sec_delete");

	this.m_obj.security.view = (sec_view == 't') ? true : false;
	this.m_obj.security.edit = (sec_edit == 't') ? true : false;
	this.m_obj.security.del= (sec_delete == 't') ? true : false;
	*/

	for (var i = 0; i < this.fields.length; i++)
	{
		var field = this.fields[i];
		
		if (field.type == "fkey_multi" || field.type == "object_multi")
		{
			var vals = this.getMultiValues(field.name);
			if (vals)
			{
				objData[field.name] = new Array();

				for (var m = 0; m < vals.length; m++)
				{
					var key = vals[0];
					var val = this.getValueName(field.name, key);

					objData[field.name][objData[field.name].length] = {key:key, value:val};
				}  
				
			}
		}
		else
		{
			if (field.type == "fkey" || field.type == "object" || field.type == "alias")
			{   
				objData[field.name] = {key:this.getValue(field.name), value:this.getValueName(field.name)};
			}
			/*
			else if (field.type == "bool")
			{
				objData[field.name] = (this.getValue(field.name)=='t') ? true : false;
			}
			*/
			else
			{
				objData[field.name] = this.getValue(field.name);
			}
		}
	}

	// Add security obj
	objData.security = new Object();
	objData.security.view = this.security.view;
	objData.security.edit = this.security.edit;
	objData.security["delete"] = this.security.del;
	objData.iconName = this.iconName;
	objData.iconPath = this.getIcon(16, 16); // Default icon for lists

    
    /*if(this.obj_type == "email_thread")
    {
        objData.flag_seen = "f"; // Make sure that new thread entries are unread
    }*/

	// check for recurrence pattern. If exists then load first before calling this.onload
	// TODO: load recur rules
	/*
	if (this.m_obj.recurRules != null)
	{
		if (this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId))
		{
			var rp = this.m_obj.getRecurrencePattern(true);
			rp.objcls = this.m_obj;
			rp.onload = function()
			{
				this.objcls.onload();
			}
			rp.load(this.m_obj.getValue(this.m_obj.recurRules.fieldRecurId));
		}
	}
	*/

	this.loaded = true;
	this.dirty = false;

	return objData;
}

/*************************************************************************
*    Function:    onload
*
*    Purpose:    Over-ride
**************************************************************************/
CAntObject.prototype.onload = function()
{
    // This function exists to be defined before load is called above
}

/*************************************************************************
*    Function:    getCachedObjDef
*
*    Purpose:    Find out of the definition for this object has been cached
*                Defs can take a few seconds to load so caching them is important
**************************************************************************/
CAntObject.prototype.getCachedObjDef = function(obj_name)
{
    for (var i = 0; i < CAntObjectDefs.length; i++)
    {
        if (CAntObjectDefs[i].name == obj_name)
        {
            return i;
        }
    }

    return -1;
}

/**
 * Get the name of this object
 *
 * @return {string} The name of this object based on common name fields like 'name' 'title 'subject'
 */
CAntObject.prototype.getName = function()
{
    if (this.getValue("name"))
        return this.getValue("name");
    else if (this.getValue("title"))
        return this.getValue("title");
    else if (this.getValue("subject"))
        return this.getValue("subject");
    else if (this.getValue("id"))
        return this.getValue("id");
    else
        return "";
}

/**
 * @depricated Use this.getName
 * 
 * Leave in place for backwards compatibility
 */
CAntObject.prototype.getLabel = function()
{
	return this.getName();
}

/**************************************************************************
* Function:     getFields    
*
* Purpose:        Get an array of all fields in the object type
**************************************************************************/
CAntObject.prototype.getFields = function()
{
    var fields = new Array();

    for (var i = 0; i < this.fields.length; i++)
    {
        // Filter "use with" to only show fields marked to use with certain values like when user_id equals 1
        if (this.fields[i].useWhen)
        {
            var useWithParts = this.fields[i].useWhen.split(":");
            if (this.getValue(useWithParts[0]) == useWithParts[1])
                fields[fields.length] = this.fields[i];
        }
        else
        {
            fields[fields.length] = this.fields[i];
        }
    }

    return fields;
}

/**************************************************************************
* Function:     getFieldByName    
*
* Purpose:        Get a specific field by name
**************************************************************************/
CAntObject.prototype.getFieldByName = function(name)
{
    if (name.indexOf(".")!=-1)
    {
        var parts = name.split(".");
        if (parts.length==2)
        {
            var fld = this.getFieldByName(parts[0]);
//        	console.log("Name: " + name);
//        	console.log("Start: " + parts[0]);
//            console.log(fld);
//            console.log("End: " + parts[0]);
            if (fld)
            {
                if (fld.type == "object" && fld.subtype)
                {
                    var tmpobj = new CAntObject(fld.subtype);
                    return tmpobj.getFieldByName(parts[1]);
                }
            }
        }
    }
    else
    {
        for (var i = 0; i < this.fields.length; i++)
        {
            if (this.fields[i].name == name)
                return this.fields[i];
        }
    }

    return null;
}

/**************************************************************************
* Function:     getField
*
* Purpose:        Get a field by index
**************************************************************************/
CAntObject.prototype.getField = function(ind)
{
    return this.fields[ind];
}

/**************************************************************************
* Function:     getNumFields
*
* Purpose:        Get the number of fields this object has
**************************************************************************/
CAntObject.prototype.getNumFields = function()
{
    return this.fields.length;
}

/**************************************************************************
* Function:     buildAdvancedQuery
*
* Purpose:        Create an advanced query form and return a CAntObjectCond obj
*
* Arguments:    con:dom - a container that will contain this form
*                 saved_query - load a saved CAntObjectCond
**************************************************************************/
CAntObject.prototype.buildAdvancedQuery = function(con, saved_query, options)
{
    var opts = (options) ? options : new Object();
    this.dv_querygroups = alib.dom.createElement("div", con);

    var dv = alib.dom.createElement("div", this.dv_querygroups);

    this.tblQuery = new CToolTable();
    this.tblQuery.print(dv);

    // Add query row
    // --------------------------------------
    if (saved_query && saved_query.length)
        this.queryLoadSaved(saved_query, opts);
    //else
    //    this.addQueryRow(true);

    var dv_add = alib.dom.createElement("div", con);
    var a_add = alib.dom.createElement("a", dv_add);
    a_add.cls = this;
    a_add.onclick = function ()
    {
        this.cls.addQueryRow();
    }
    a_add.innerHTML = "Add Condition";
    a_add.href = "javascript:void(0);";

    return this.condition;
}

/**************************************************************************
* Function:     queryLoadSaved
*
* Purpose:        load a saved CAntObjectCond into current this.condition
**************************************************************************/
CAntObject.prototype.queryLoadSaved = function(saved_query, options)
{
    var opts = (options) ? options : new Object();
    this.condition.clearConditions();
    for (var i = 0; i < saved_query.length; i++)
    {
        var first = (i == 0) ? true : false;
        
        // We need to check if fieldname is an object and has subtype (e.g. user_id)
        var field = this.getFieldByName(saved_query[i].fieldName);
        if(field.type == "object" && field.subtype)
        {
            // We need to set the value here so when assigning the condition value later in querySetValueInput()
            // The this.getValue() can get the field value of the fieldname
            this.setValue(saved_query[i].fieldName, saved_query[i].condValue);
        }
        
        // saved_query[i].id is the id that is retrieved from the database
        this.addQueryRow(first, saved_query[i].blogic, saved_query[i].fieldName, saved_query[i].operator, saved_query[i].condValue, opts, saved_query[i].id);
    }
}

/**************************************************************************
* Function:     addQueryRow
*
* Purpose:        Add a row that will be used to build a condition
**************************************************************************/
CAntObject.prototype.addQueryRow = function(first, blogic, fieldName, operator, condValue, options, condId)
{
    var opts = (options) ? options : new Object();
    var rw = this.tblQuery.addRow();

    // First row does not need and/or
    var cbLogic = alib.dom.createElement("select");
    cbLogic[cbLogic.length] = new Option("And", "and", false, (blogic=="and")?true:false);
    cbLogic[cbLogic.length] = new Option("Or", "or", false, (blogic=="or")?true:false);
    rw.addCell(cbLogic, false, "center", "50px");

    // Create condition type drop-down
    var sel_cond = alib.dom.createElement("select");

    // Create value div
    var dv_val = alib.dom.createElement("div");

    // Create fields drop-down
    var sel_name = alib.dom.createElement("select");
    for (var i = 0; i < this.fields.length; i++)
    {
        sel_name[sel_name.length] = new Option(this.fields[i].title, this.fields[i].name, false, (fieldName==this.fields[i].name)?true:false);
        if (this.fields[i].type == "object" && this.fields[i].subtype && this.loadQuerySubObjects)
        {            
            var assoc_obj = new CAntObject(this.fields[i].subtype);
            for (var j = 0; j < assoc_obj.fields.length; j++)
            {
                sel_name[sel_name.length] = new Option(this.fields[i].title + "." + assoc_obj.fields[j].title, 
                                                        this.fields[i].name + "." + assoc_obj.fields[j].name, false, 
                                                        (fieldName==this.fields[i].name + "." + assoc_obj.fields[j].name)?true:false);
            }
        }
    }
    sel_name.m_cond_cb = sel_cond;
    sel_name.m_dv_val = dv_val;
    sel_name.m_cls = this;
    sel_name.opts = opts;
    sel_name.onchange = function()
    {
        this.m_cls.queryGetCondCombo(this.m_cond_cb, this.value);
        this.m_cls.querySetValueInput(this.m_dv_val, this.value, null, this.opts);
    }

    // Set defaults
    this.queryGetCondCombo(sel_cond, sel_name.value);
    // Add condition watch
    var cid = this.condition.addWatchCondition(cbLogic, sel_name, sel_cond, condId);
    dv_val.cid = cid;
    this.querySetValueInput(dv_val, sel_name.value, null, opts);
    
    rw.addCell(sel_name);
    rw.addCell(sel_cond);
    rw.addCell(dv_val);

    var del_dv = alib.dom.createElement("div");
    rw.addCell(del_dv, true, "center");
    var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
    del_dv.innerHTML = "<img border='0' src='"+icon+"' />";
    alib.dom.styleSet(del_dv, "cursor", "pointer");
    del_dv.m_rw = rw;
    del_dv.m_condition = this.condition;
    del_dv.m_cid = cid;
    //del_dv.m_id = id;
    del_dv.onclick = function()
    {
        this.m_condition.delCondition(this.m_cid);
        this.m_rw.deleteRow();
    }

    // Set values
    if (fieldName)
    {
        for (var i = 0; i < sel_name.options.length; i++)
        {
            if (sel_name.options[i].value == fieldName)
            {
                sel_name.selectedIndex = i;
                this.queryGetCondCombo(sel_cond, fieldName);
                this.querySetValueInput(dv_val, fieldName, condValue, opts);
            }
        }
    }

    if (operator)
    {
        sel_cond.m_cond.operator = operator;
        for (var i = 0; i < sel_cond.options.length; i++)
        {
            if (sel_cond.options[i].value == operator)
            {
                sel_cond.selectedIndex = i;
            }
        }
    }

    if (condValue)
    {
        if (dv_val.inptType == "select")
        {
            for (var i = 0; i < dv_val.inpRef.options.length; i++)
            {
                if (dv_val.inpRef.options[i].value == condValue)
                    dv_val.inpRef.selectedIndex = i;
            }
        }
        
        if (dv_val.inptType == "dynselect")
        {
            dv_val.dynSel.onSelect(condValue);
        }
        else if (dv_val.inptType == "rte")
        {
            dv_val.inpRef.setValue(condValue);
        }
        else if (dv_val.inpRef)
        {
            dv_val.inpRef.value = condValue;
        }
    }
}

/**************************************************************************
* Function:     queryGetCondCombo
*
* Purpose:        Set the options for a select in a query field.
*
* Arguments:    1.    sel:dom.select - the select element
*                 2.    fname:string - the name of the field select is representing
**************************************************************************/
CAntObject.prototype.queryGetCondCombo = function(sel, fname)
{
    for (var m=sel.options.length-1; m>=0; m--) 
        sel.options[m]=null;

    var field = this.getFieldByName(fname);
    
    var type_opts = this.getCondOperators(field.type);
    
    for (var i = 0; i < type_opts.length; i++)
        sel.options[sel.options.length] = new Option(type_opts[i][1], type_opts[i][0]);

    sel.selectedIndex = 0;
    if (sel.m_cond)
        sel.m_cond.operator = sel.value;
}

/*************************************************************************
*    Function:    getCondOperators
*
*     Scope:        Public
*
*    Purpose:    Get a list of operators for a field type
**************************************************************************/
CAntObject.prototype.getCondOperators = function(ftype)
{
    switch (ftype)
    {
    case 'fkey_multi':
    case 'fkey':
        var type_opts = [
                            ["is_equal", "is equal to"],
                            ["is_not_equal", "is not equal to"]
                        ];    
        break;
    case 'number':
    case 'real':
    case 'integer':
        var type_opts = [
                            ["is_equal", "is equal to"],
                            ["is_not_equal", "is not equal to"],
                            ["is_greater", "is greater than"],
                            ["is_less", "is less than"],
                            ["is_greater_or_equal", "is greater than or equal to"],
                            ["is_less_or_equal", "is less than or equal to"],
                            ["begins_with", "begins with"]
                        ];
        break;
    case 'date':
    case 'timestamp':
        var type_opts = [
                            ["is_equal", "is equal to"],
                            ["is_not_equal", "is not equal to"],
                            ["is_greater", "is greater than"],
                            ["is_less", "is less than"],
                            ["day_is_equal", "day is equal to"],
                            ["month_is_equal", "month is equal to"],
                            ["year_is_equal", "year is equal to"],
                            ["is_greater_or_equal", "is greater than or equal to"],
                            ["is_less_or_equal", "is less than or equal to"],
                            ["last_x_days", "within last (x) days"],
                            ["last_x_weeks", "within last (x) weeks"],
                            ["last_x_months", "within last (x) months"],
                            ["last_x_years", "within last (x) years"],
                            ["next_x_days", "within next (x) days"],
                            ["next_x_weeks", "within next (x) weeks"],
                            ["next_x_months", "within next (x) months"],
                            ["next_x_years", "within next (x) years"]
                        ];
        break;
    case 'bool':
        var type_opts = [
                            ["is_equal", "is equal to"],
                            ["is_not_equal", "is not equal to"]
                        ];
        break;
    default: // Text
        var type_opts = [
                            ["is_equal", "is equal to"],
                            ["is_not_equal", "is not equal to"],
                            ["begins_with", "begins with"],
                            ["contains", "contains"]
                        ];
        break;
    }

    return type_opts;
}

/*************************************************************************
*    Function:    querySetValueInput
*
*     Scope:        PRIVATE
*
*    Purpose:    Used to create input for dynamic conditions
**************************************************************************/
CAntObject.prototype.querySetValueInput = function(dv, fname, val_field, options)
{
    var opts = (options) ? options : new Object();
    dv.innerHTML = "";
    
    var field = this.getFieldByName(fname);

    var obj_type = this.name;
    if (fname.indexOf(".")!=-1)
    {
        var parts = fname.split(".");
        if (parts.length==2)
        {
            var fld = this.getFieldByName(parts[0]);
            if (fld)
                var obj_type = fld.subtype;
        }
    }

    if (field.type == "fkey" || field.type == "fkey_multi")
    {
        var sel = new AntObjectGroupingSel("None", obj_type, field.name, val_field);
        for (var f = 0; f < this.m_filters.length; f++)
            sel.setFilter(this.m_filters[f].fieldName, this.m_filters[f].value);

        sel.print(dv);
        this.condition.addWatchConditionDynSel(dv.cid, sel);
        var inp = sel.getInput();
        dv.dynSel = sel;
        dv.inptType = "dynselect";
    }
    else if (field.type == "object" && field.subtype)
    {
        var inp = alib.dom.createElement("div");
        var lbl = alib.dom.createElement("span");
        var objid = this.getValue(field.name); // see if object has already been set to an id
        
        if (objid)
        {
            lbl.innerHTML = "";
            var a = alib.dom.createElement("a", lbl);
            a.href = 'javascript:void(0);';
            a.objid = objid;
            a.obj_type = field.subtype;
            a.onclick = function() 
            {
                loadObjectForm(this.obj_type, this.objid);
            }
            
            var oname = this.getValueName(field.name); 
            if (oname) // See if foreign key value is cached
                a.innerHTML = oname;
            else // The function below will pull the name of the object and populate 'a'.innerHTML
                objectSetNameLabel(field.subtype, objid, a);

            // Add "clear" button if this is not a required field
            if (!field.required)
            {
                var sp = alib.dom.createElement("span", lbl);
                sp.innerHTML = "&nbsp;";

                var aclear = alib.dom.createElement("a", lbl);
                aclear.href = 'javascript:void(0);';
                aclear.mainObject = this;
                aclear.fname = field.name;
                aclear.lbl = lbl;
                aclear.onclick = function() { this.lbl.innerHTML = "None&nbsp;&nbsp;&nbsp;"; this.mainObject.setValue(this.fname, ""); }
                aclear.innerHTML = "<img src='/images/icons/delete_10.png' />";
            }
            
            var sp = alib.dom.createElement("span", lbl);
            sp.innerHTML = "&nbsp;&nbsp;&nbsp;";
            
            // Need to add watch browse
            this.condition.addWatchConditionBrowse(dv.cid, objid);
        }
        else
        {
            lbl.innerHTML = "None Selected&nbsp;&nbsp;&nbsp;";
        }
        
        // Inline function to select a new object
        var selobj = function(field, options, lbl, dv, cls)
        {
            var ob = new AntObjectBrowser(field.subtype);
            ob.cbData.dv = dv;
            ob.cbData.cls = cls;
            ob.cbData.lbl = lbl;
            ob.cbData.field = field;
            ob.cbData.field_name = field.name;
            ob.cbData.obj_type = field.subtype;

            ob.onSelect = function(oid)
            {
                this.cbData.lbl.innerHTML = "";
                this.cbData.cls.setValue(this.cbData.field_name, oid);
                var a = alib.dom.createElement("a", this.cbData.lbl);
                a.href = "javascript:void(0);";
                a.options = {oid:oid, obj_type:this.cbData.obj_type}
                a.onclick = function() { loadObjectForm(this.options.obj_type, this.options.oid); }
                a.innerHTML = oid;

                // Add "clear" button if this is not a required file (kind of redundant but works for now)
                if (!this.cbData.field.required)
                {
                    var sp = alib.dom.createElement("span", this.cbData.lbl);
                    sp.innerHTML = "&nbsp;";

                    var aclear = alib.dom.createElement("a", this.cbData.lbl);
                    aclear.href = 'javascript:void(0);';
                    aclear.mainObject = this.cbData.cls;
                    aclear.fname = this.cbData.field.name;
                    aclear.lbl = this.cbData.lbl;
                    aclear.onclick = function() { this.lbl.innerHTML = "None&nbsp;&nbsp;&nbsp;"; this.mainObject.setValue(this.fname, ""); }
                    aclear.innerHTML = "<img src='/images/icons/delete_10.png' />";
                }

                var sp = alib.dom.createElement("span", this.cbData.lbl);
                sp.innerHTML = "&nbsp;&nbsp;&nbsp;";

                // Get name of object from server 
                this.cbData.cls.condition.addWatchConditionBrowse(this.cbData.dv.cid, oid);
                objectSetNameLabel(this.cbData.obj_type, oid, a);
            }
            ob.displaySelect(options.parent_dlg);    // pass parent dialog
        }

        // Create button to browse for new object of 'subtype' which should be the object_type name
        var btn = new CButton("Select", selobj, [field, opts, lbl, dv, this], "b1");
        inp.appendChild(lbl);
        inp.appendChild(btn.getButton());
    }
    else if (field.type == "bool")
    {
        var inp = alib.dom.createElement("select", dv);
        inp[inp.length] = new Option("True", 't', false, (val_field=='t')?true:false);
        inp[inp.length] = new Option("False", 'f', false, (val_field!='t')?true:false);
        dv.appendChild(inp);
        inp.checked = (val_field == 't') ? true : false;
        dv.inptType = "select";
        if (val_field)
            inp.val_field = val_field;

        this.condition.addWatchConditionVal(dv.cid, inp);
    }
    else
    {
        if (field.optional_vals && field.optional_vals.length)
        {
            var inp = alib.dom.createElement("select", dv);
            if (val_field)
            {
                inp.val_field = val_field;
            }


            this.buildInputDropDown(inp, field.optional_vals, val_field);

            dv.inptType = "select";
            dv.inpRef = inp;

            this.condition.addWatchConditionVal(dv.cid, inp);
        }
        else
        {
            var inp = alib.dom.createElement("input");
            inp.type = "text";
			//alib.dom.styleSetClass(inp, "fancy");
            if (val_field)
                inp.value = val_field;

            if (field.type == "number" && field.subtype=="double precision")
                inp.maxLength = 15;

            if (val_field)
            {
                var val_fld_funct = function(evnt)
                {
                    if (alib.userAgent.ie)
                        evnt.srcElement.val_field = evnt.srcElement.value;
                    else
                        this.val_field = this.value;
                }

                inp.val_field = val_field;
                alib.dom.addEvntListener(inp, "change", val_fld_funct);
            }

            dv.inptType = "input";
        }
    }


    dv.appendChild(inp);
    dv.inpRef = inp;

    this.condition.addWatchConditionVal(dv.cid, inp);

    return inp;
}

/*************************************************************************
*    Function:    buildInputDropDown
*
*     Scope:        PRIVATE
*
*    Purpose:    Used to create a multi-val select box
**************************************************************************/
CAntObject.prototype.buildInputDropDown = function(cbMval, optional_vals, val, pnt, pre)
{
    var value = (val) ? val : null;
    var parent_id = (pnt) ? pnt : "";
    var pre_txt = (pre) ? pre : "";
    var spacer = "\u00A0\u00A0"; // Unicode \u00A0 for space
    for (var n = 0; n < optional_vals.length; n++)
    {
        if (optional_vals[n][3] != parent_id)
        {
            continue;
        }

        cbMval[cbMval.length] = new Option(pre_txt+optional_vals[n][1], optional_vals[n][0], false, (value==optional_vals[n][0])?true:false);
        // Check for heiarchy
        if (optional_vals[n][2])
            this.buildInputDropDown(cbMval, optional_vals, value, optional_vals[n][0], pre_txt+spacer);
    }
}

/*************************************************************************
*    Function:    fieldCreateValueInput
*
*     Scope:        Public
*
*    Purpose:    Same as above but condition is not updated, a simple input
*                form element is created for the field and the caller
*                is responsible for capturing and setting the data.
**************************************************************************/
CAntObject.prototype.fieldCreateValueInput = function(dv, fname, val_field, options)
{
    var opts = (options) ? options : new Object();
    dv.innerHTML = "";

    var field = this.getFieldByName(fname);
    
    if (field.type == "fkey" || field.type == "fkey_multi")
    {
        if(field.subtype == "user")
        {
            var browserCon = alib.dom.createElement("div", dv);            
            var userLabel = alib.dom.createElement("label", browserCon);
            
            userLabel.innerHTML = "None Selected";
            
            alib.dom.styleSet(userLabel, "font-size", "12px");
            alib.dom.styleSet(userLabel, "margin-right", "10px");
            
            // add select user button feature
            var selectUser = alib.dom.setElementAttr(alib.dom.createElement("input", browserCon), [["type", "button"], ["value", "Select"]]);
            selectUser.userLabel = userLabel;
            selectUser.userId = 0;
            selectUser.onclick = function()
            {
                var cbrowser = new CUserBrowser();
                cbrowser.selectCls = this;
                cbrowser.onSelect = function(cid, name) 
                {
                    this.selectCls.onSelect(cid);
                    this.selectCls.userLabel.innerHTML = name;
                }
                cbrowser.showDialog();
            }
            
            dv.inptType = "userBrowser";
            dv.inpRef = selectUser;
        }
        else
        {
            var sel = new AntObjectGroupingSel("None", this.name, field.name, val_field, this, opts);
            for (var f = 0; f < this.m_filters.length; f++)
                sel.setFilter(this.m_filters[f].fieldName, this.m_filters[f].value);

            var inp = sel.getInput();
            sel.print(dv);
            dv.inptType = "dynselect";
            dv.inpRef = sel;
        }
    }
	else if (field.type == "object" && field.subtype)
	{
	    var browserCon = alib.dom.createElement("div", dv);            
        var label = alib.dom.createElement("label", browserCon);
        
        label.innerHTML = "None Selected";
        
        alib.dom.styleSet(label, "font-size", "12px");
        alib.dom.styleSet(label, "margin-right", "10px");
        
        // add select user button feature
        var objBrowser = function(objType, label)
        {
            var antBrowser = new AntObjectBrowser(objType);
            antBrowser.onSelect = function(objId, objLabel) 
            {
                label.innerHTML = objLabel;
                objSelect(objId);
            }
            antBrowser.displaySelect();
        }
        
        var btn = new CButton("Select", objBrowser, [field.subtype, label], "b1");
        var selectBtn = btn.getButton();
        browserCon.appendChild(selectBtn);
        
        var objSelect = function(objId)
        {
            selectBtn.onSelect(objId);
        }
        
        dv.inptType = "objectBrowser";
        dv.inpRef = selectBtn;
	}
    else if (field.optional_vals && field.optional_vals.length)
    {
        var inp = alib.dom.createElement("select", dv);
        
        this.buildInputDropDown(inp, field.optional_vals, val_field);

        dv.inptType = "select";
        dv.inpRef = inp;
    }
    else if (field.type == "alias")
    {
        var inp = alib.dom.createElement("select", dv);

        for (var i = 0; i < this.fields.length; i++)
        {
            var fldinst = this.fields[i];
            if (field.subtype == fldinst.subtype && fldinst.type != "alias")
            {
                inp[inp.length] = new Option(fldinst.title, fldinst.name, false, (val_field == fldinst.name)?true:false);
            }
        }

        dv.inptType = "select";
        dv.inpRef = inp;
    }
    else
    {
        if (field.type == "bool")
        {
            var inp = alib.dom.createElement("input");
            inp.type = "checkbox";
            inp.checked = (val_field) ? true : false;

            dv.inptType = "checkbox";
        }
        else
        {
            if (opts.rich)
            {
                //var inp = new CRte();
				var inp = alib.ui.Editor();
                dv.inptType = "rte";
            }
            else if (opts.multiLine)
            {
                var inp = alib.dom.createElement("textarea");
                dv.inptType = "input";
            }
            else
            {
                var inp = alib.dom.createElement("input");
                inp.type = "text";
                dv.inptType = "input";
				alib.dom.styleSetClass(inp, "fancy");
            }

            if (opts.height)
                alib.dom.styleSet(inp, "height", opts.height);

            if (opts.width)
                alib.dom.styleSet(inp, "width", opts.width);

            if (val_field && !opts.rich)
                inp.value = val_field;

            if (field.type == "real")
                inp.maxLength = 15;

        }
        dv.inpRef = inp;
        if (opts.rich)
        {
            inp.print(dv, '100%', '250px');
            if (val_field)
                inp.setValue(val_field);
        }
        else
            dv.appendChild(inp);

        // Add date selector
        if (field.type == "date")
        {
            /*
            var a_CalStart = alib.dom.createElement("span", dv);
            a_CalStart.innerHTML = "<img src='/images/calendar.gif' border='0'>";
            var start_ac = new CAutoCompleteCal(inp, a_CalStart);
            */
            var start_ac = new CAutoCompleteCal(inp);
            alib.dom.styleSet(inp, "width", "100px");
        }
        else if (field.type == "timestamp")
        {
            if (opts.part == "time")
            {
                var start_ac = new CAutoCompleteTime(inp);
                alib.dom.styleSet(inp, "width", "75px");
            }
            else 
            {
                var start_ac = new CAutoCompleteCal(inp);
                alib.dom.styleSet(inp, "width", "100px");
            }

            if (opts.part)
            {
                inp.part = opts.part;
                inp.value = this.getInputPartValue(field.name, val_field, opts.part);
            }
        }
        else if (field.type == "bool")
        {
            alib.dom.styleSet(inp, "width", "15px");
        }
        else
        {
                alib.dom.styleSet(inp, "width", "99%");
        }

        // Must be added after appended
        if (opts.multiLine && !opts.rich)
        {
            alib.dom.textAreaAutoResizeHeight(inp, 50, 400);
        }
    }
    return dv.inpRef;
}

/*************************************************************************
*    Function:    fieldGetValueInput
*
*     Scope:        PUBLIC
*
*    Purpose:    Return an input elment for forms that updates vals for 
*                fields in this object object. No externall onchange is
*                necessary.
**************************************************************************/
CAntObject.prototype.fieldGetValueInput = function(inp_div, fname, options)
{
    var opts = (options) ? options : new Object(); // Set various input options

    inp_div.innerHTML = "";
    var val = this.getValue(fname);

    var field = this.getFieldByName(fname);
    
    this.fieldCreateValueInput(inp_div, field.name, val, opts);
    if (field.type == "fkey_multi")
    {
        var vals = this.getMultiValues(field.name);
        
        // Add dropdown
        var dv = alib.dom.createElement("div", inp_div);
        var dv_opt_con = alib.dom.createElement("div", inp_div);
        dv_opt_con.id = field.name;
        
        inp_div.inpRef.field = field;
        inp_div.inpRef.m_cls = this;
        inp_div.inpRef.dv_opt_con = dv_opt_con;
        inp_div.inpRef.onSelect = function()
        {
            if (this.value != "")
            {
                // Set in global object
                // -------------------------------------
                this.m_cls.setMultiValue(this.field.name, this.value);

                // Add to list of multi-values
                // -------------------------------------
                var label = this.valueName;

                // Look for label in optional vals
                for (var n = 0; n < this.field.optional_vals.length; n++)
                {
                    if (this.field.optional_vals[n][0] == this.value)
                        label = this.field.optional_vals[n][1];
                }

                var dv = alib.dom.createElement("div", this.dv_opt_con);
                dv.innerHTML = unescape(label+"&nbsp;");

                var alnk = alib.dom.createElement("a", dv);
                alnk.href = "javascript:void(0);";
                alnk.innerHTML = "[X]";
                alnk.m_id = this.value;
                alnk.m_label = unescape(label);
                alnk.m_div = dv;
                alnk.m_sel = this;
                alnk.m_fieldname = this.field.name;
                alnk.onclick = function()
                {
                    this.m_div.style.display='none';
                    this.m_sel[this.m_sel.length] = new Option(this.m_label, this.m_id, false, false);
                    this.m_sel.m_cls.delMultiValue(this.m_fieldname, this.m_id);
                }
            }
        }
        
		// Populate existing values
        for (var m = 0; m < vals.length; m++)
        {
            var id = vals[m];
			var label = id;
            //var label = valParts[m];
			var label = this.getValueName(field.name, id);
			if (label == "" || label==null)
				label = id;

            // Look for label in optional vals
            for (var n = 0; n < field.optional_vals.length; n++)
            {
                if (field.optional_vals[n][0] == id)
                    label = field.optional_vals[n][1];
            }

			// group div
            var dv = alib.dom.createElement("div", dv_opt_con);

			// label span
            var lblsp = alib.dom.createElement("span", dv);
            lblsp.innerHTML = label + " ";

			// Load remote if label not set
			if (id == label)
			{
				/*var ajax = new CAjax('json');
				ajax.cbData.lblsp = lblsp;
				ajax.onload = function(ret)
				{
					if(!ret)
						return;
						
					if (!ret['error'])
					{
						this.cbData.lblsp.innerHTML = ret['title'] + " ";
					}
				};

				var args = [["obj_type", this.obj_type], ["field", field.name], ["gid", id]];
				ajax.exec("/controller/Object/getGroupingById", args);*/

				var ajax = new CAjax('json');
				ajax.onload = function(ret) {
					if(!ret)
						return;

					for(var idx in ret.groups) {
						var group = ret.groups[idx];
						if(group.id == id) {
							this.cbData.lblsp.innerHTML = group.name + " ";
							break;
						}
					}
				}.bind(this);

				var args = [
					["obj_type", this.obj_type],
					["field_name", field.name]
				];
				ajax.exec("/svr/entity/getGroupings", args);
			}

            var alnk = alib.dom.createElement("a", dv);
            alnk.href = "javascript:void(0);";
            alnk.innerHTML = "[X]";
            alnk.m_id = id;
            alnk.m_label = label;
            alnk.m_div = dv;
            alnk.m_cls = this;
            alnk.m_fieldname = field.name;
            alnk.dynSelObject = inp_div.inpRef;
            alnk.onclick = function()
            {
                this.m_div.style.display='none';
                this.m_cls.delMultiValue(this.m_fieldname, this.m_id);
                
                for(mVar in this.dynSelObject.multiVars)
                {
                    var gId = this.dynSelObject.multiVars[mVar];
                    if(this.m_id == gId)
                        delete this.dynSelObject.multiVars[mVar];
                }
            }
        }
    }
    else
    {
        if (inp_div.inpRef)
        {
            inp_div.inpRef.cls = this;
            inp_div.inpRef.fieldName = fname;
            //this.setValue(fname, inp_div.inpRef.value);
            switch(inp_div.inptType)
            {
            case "checkbox":
                inp_div.inpRef.onclick = function() { this.cls.setValue(this.fieldName, this.checked); }
                break;
            case "text":
            case "input":
                //alib.dom.styleSet(inp_div.inpRef, "width", "90%");
                inp_div.inpRef.cls = this;
                inp_div.inpRef.onblur = function ()
                {
                    if(this.cls.obj_type == "file" && field.name == "name")
                        checkSpecialCharacters("file", this.value, this);
                }
            case "select":
                inp_div.inpRef.skiponchange = false; // Used to prevent endless loops in setting values
                inp_div.inpRef.onchange = function() 
                { 
                    if (this.skiponchange) return; 
                    
                    var val = this.value;

                    // If the field is a partial (like setting time for a full timestamp) then apply part to whole value
                    if (this.part)
                        val = this.cls.getInputPartFullValue(this.fieldName, val, this.part);

                    this.cls.setValue(this.fieldName, val); 
                }
                break;
            case "dynselect":
                inp_div.inpRef.onSelect = function() { this.cls.setValue(this.fieldName, this.value, this.valueName); }
                //inp_div.inpRef.setDefault(); // set value to first entry
                break;
            case "rte":
                inp_div.inpRef.onChange = function() { this.cls.setValue(this.fieldName, this.getValue()); }
                //inp_div.inpRef.setDefault(); // set value to first entry
                break;
            }
        }
    }
}

/*************************************************************************
*    Function:    save
*
*     Scope:        PUBLIC
*
*    Purpose:    Save values for this object. It does not save definition changes.
**************************************************************************/
CAntObject.prototype.save = function(opts)
{
    var options = (opts) ? opts : new Object();
    var requireFailMessage = false;
    var args = new Object();
    
    for (var i = 0; i < this.fields.length; i++)
    {
        var field = this.fields[i];

        if (field.type == "fkey_multi" || field.type == "object_multi")
        {

			var mvals = this.getMultiValues(field.name);

			if (mvals && mvals.length > 0)
			{
				// Set the multi value
				args[field.name] = mvals;
				args[field.name + "_fval"] = new Object();
				for (var m = 0; m < mvals.length; m++)
				{
					var mvalue =  mvals[m];
					args[field.name + "_fval"][mvalue] = this.getValueName(field.name, mvalue);
				}
			}
            else
            {
                // need to clear field multi, so if there's an existing value it will be completely removed
                args[field.name] = null;
            }
        }
        else if(field.name == "obj_type")
        {
            args["field:obj_type"] = this.getValue(field.name);
        }
        else
        {
            args[field.name] = this.getValue(field.name);
        }

        if (field.required && !this.getValue(field.name) && field.type != "fkey_multi" && field.type != "object_multi")
            requireFailMessage = "ERROR: " + field.title + " is a required field. Be sure to set it before saving changes.";
    }
    
    // Set recurrence
    if (this.recurrencePattern != null)
    {
        // set recur pattern variables in args array

        var obj = new Object();
    
        obj.type = this.recurrencePattern.type;
        obj.save_type = this.recurrencePattern.save_type;
        obj.object_type = this.recurrencePattern.object_type;
        obj.object_type_id = this.recurrencePattern.object_type_id;
        obj.interval = this.recurrencePattern.interval;
        obj.dateStart = this.recurrencePattern.dateStart;
        obj.dateEnd = this.recurrencePattern.dateEnd;
        obj.timeStart = this.recurrencePattern.timeStart;
        obj.timeEnd = this.recurrencePattern.timeEnd;
        obj.fAllDay = this.recurrencePattern.fAllDay;
        obj.dayOfMonth = this.recurrencePattern.dayOfMonth;
        obj.monthOfYear = this.recurrencePattern.monthOfYear;
        obj.dayOfWeekMask = this.recurrencePattern.dayOfWeekMask;
        obj.instance = this.recurrencePattern.instance;
        
        obj.object_type_id = this.recurrencePattern.object_type_id;
        obj.object_type = this.recurrencePattern.object_type;
        obj.parentId = this.recurrencePattern.parentId;
        obj.calendarId = this.recurrencePattern.calendarId;
        obj.dateProcessedTo = this.recurrencePattern.dateProcessedTo;
        obj.id = this.recurrencePattern.id;
        obj.day1 = this.recurrencePattern.day1;
        obj.day2 = this.recurrencePattern.day2;
        obj.day3 = this.recurrencePattern.day3;
        obj.day4 = this.recurrencePattern.day4;
        obj.day5 = this.recurrencePattern.day5;
        obj.day6 = this.recurrencePattern.day6;
        obj.day7 = this.recurrencePattern.day7;

        args["recurrence_pattern"] = obj;
    }

    // A required field is blank
    if (requireFailMessage)
    { 
        this.onsaveError(requireFailMessage);
        return;
    }
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.options = options;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
            ret = parseInt(ret.id);
        else
            ret = 0;

        if (ret > 0)
        {
            try
            {
                if (!this.cbData.cls.id)
                {
                    this.cbData.cls.id = ret.id;
                    this.cbData.cls.onValueChange("id", ret.id);
					alib.events.triggerEvent(this.cbData.cls, "fieldchange", {fieldName: "id", value:ret.id, valueName:ret.name || ret.id});
                }
            }
            catch(e)
            {
                alert("CAntObject::save::error - " + e);
            }
        }
        else
        {
            if (ret == -2)
                this.cbData.cls.onsaveError("ERROR: You do not have sufficient permissions!");
            else if(ret == -3 )
                this.cbData.cls.onsaveError("ERROR: Unable to update Recurrence Pattern!");
            else 
                this.cbData.cls.onsaveError();
               
            return;                
        }
            
		// Clear dirty flag
		this.cbData.cls.dirty = false;

        if (!this.cbData.options.repressOnSave)
		{
            this.cbData.cls.onsave();
			alib.events.triggerEvent(this.cbData.cls, "save");
		}
    };    
    
    // Make sure obj_type argument is set here so it will be overwritten by "obj_type" fields.
    args["obj_type"] = this.name;
    
    if (this.id)
        args["id"] = this.id;

	ajax.exec("/svr/entity/save", JSON.stringify(args));
}

CAntObject.prototype.onsave = function()
{
    // This function exists to be defined before save is called above
}

CAntObject.prototype.onsaveError = function()
{
    // This function exists to be defined before save is called above
}

/************************************************************************
*    Function:    remove
*
*     Scope:        PUBLIC
*
*    Purpose:    Delete object
**************************************************************************/
CAntObject.prototype.remove = function()
{
    if (!this.id)
    {
        this.onremoveError();
        return;
    }
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
            this.cbData.cls.onremove();
        else
            this.cbData.cls.onremoveError();
    };    
    var args = [["obj_type", this.name], ["oid", this.id]];

	// Set recurrence
    if (this.recurrencePattern != null)
        args[args.length] = ['recurrence_save_type', this.recurrencePattern.save_type];   

    ajax.exec("/controller/Object/deleteObject", args);
}

CAntObject.prototype.onremove = function()
{
    // This function exists to be defined before save is called above
}

CAntObject.prototype.onremoveError = function()
{
    // This function exists to be defined before save is called above
}

//--------------------------------------------------------------------------
//    Object Values
//--------------------------------------------------------------------------

CAntObject.prototype.getValueByIdx = function(ind)
{
    var fMulti = (typeof this.create_obj_values[ind][1] == "object_multi") ? true : false;

    return { name:this.create_obj_values[ind][0], value:this.create_obj_values[ind][1], isMulti:fMulti };
}

/*************************************************************************
*    Function:    getInputPartFullValue
*
*    Purpose:    An input can set part of a value. Merge with full value.
*
*    Arguments:    name:string - the name of the field to set
*                value:string - the actual value to set (id if fkey)
*                part:string - the part to set
*
*    Return:        The full value after applying the part
**************************************************************************/
CAntObject.prototype.getInputPartFullValue = function(name, value, part)
{
    var field = this.getFieldByName(name);
    var ret = this.getValue(name);

    // If value has not yet been set
    if (!ret)
        ret = value;

    switch (field.type)
    {
    case 'timestamp':
        var ts = new Date(ret);

        if (part == "time")
        {
            var ret = (ts.getMonth()+1)+"/"+ts.getDate()+"/"+ts.getFullYear() + " " + value;
        }
        else if (part == "date")
        {
            var ret = value + " " + calGetClockTime(ts);
        }

        break;
    }

    return ret;
}

/*************************************************************************
*    Function:    getInputPartValue
*
*    Purpose:    An input can set part of a value. Extract part from full value.
*
*    Arguments:    name:string - the name of the field to set
*                value:string - the actual value to set (id if fkey)
*                part:string - the part to set
*
*    Return:        Part of the full value. Such as the time from a timestamp
**************************************************************************/
CAntObject.prototype.getInputPartValue = function(name, value, part)
{
    var field = this.getFieldByName(name);
    var ret = value;

	if (!ret)
		return "";

    switch (field.type)
    {
    case 'timestamp':
        var ts = new Date(ret);

        if (part == "time")
        {
            ret = calGetClockTime(ts);
        }
        else if (part == "date")
        {
            ret = (ts.getMonth()+1)+"/"+ts.getDate()+"/"+ts.getFullYear();
        }

        break;
    }

    return ret;
}

/*************************************************************************
*    Function:    setValue
*
*    Purpose:    Set the value of a field
*
*    Arguments:    name:string - the name of the field to set
*                value:string - the actual value to set (id if fkey)
*                valueName:string - the label for an fkey value
**************************************************************************/
CAntObject.prototype.setValue = function(name, value, valueName)
{
    if(typeof name == "undefined")
        return;

	var valueName = valueName || null;

    var field = this.getFieldByName(name);
	if (!field)
		return;

	// Check if this is a multi-field
	if (field.type == "fkey_multi" || field.type == "object_multi")
	{
		if (value instanceof Array)
		{
			for (var j in value)
				this.setMultiValue(name, value[j]);
		}
		else
		{
			this.setMultiValue(name, value, valueName);
		}

		return true;
	}

	// Handle bool conversion
	if (field.type == "bool")
	{
		switch (value)
		{
		case 1:
		case 't':
			value = true;
			break;
		case 0:
		case 'f':
			value = false;
			break;
		}
	}
    
    // Associated object fields cannot be updated
    if (name.indexOf(".")!=-1)
    {
        return;
    }

    this.dirty = true;

    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            this.values[i][1] = value;
            if (valueName)
                this.values[i][2] = valueName; // Label for foreign keys

            this.onValueChange(name, value, valueName);
			alib.events.triggerEvent(this, "fieldchange", {fieldName: name, value:value, valueName:valueName});
            return;
        }
    }

    if (!valueName && field && field.type!='fkey' && field.type!='fkey_multi' 
			&& field.type!='object' && field.type!='object_multi' && field.optional_vals)
    {
        for (var i = 0; i < field.optional_vals.length; i++)
        {
            if (field.optional_vals[i][0] == value)
                valueName = field.optional_vals[i][1];
        }
    }

    var ind = this.values.length;
    this.values[ind] = new Array();
    this.values[ind][0] = name;
    this.values[ind][1] = value;
    if (valueName)
        this.values[ind][2] = valueName; // Label for foreign keys
    else
        this.values[ind][2] = null;

    this.onValueChange(name, value, valueName);
	alib.events.triggerEvent(this, "fieldchange", {fieldName: name, value:value, valueName:valueName});
}

/*************************************************************************
*    Function:    getValue
*
*    Purpose:    Get the actual value of an object
**************************************************************************/
CAntObject.prototype.getValue = function(name, debug)
{
    var val = "";

    if (!name)
        return val;

    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            val = this.values[i][1];
            break;
        }
    }

    var field = this.getFieldByName(name);

    // Check alias
    /*
    if (field && field.type == "alias")
    {
        val = this.getValue(val); // Get aliased value
    }
    */

    // Check optional values for first value
    try
    {
        if (val=="" && field.optional_vals)
        {
            if (field.optional_vals.length)
                val = field.optional_vals[0][0];
        }
    }
    catch(e) {  }
    
    return val;
}

/*************************************************************************
*    Function:    getValueName
*
*    Purpose:    If exists, get the value name (label) of a referenced field
*                Typically, get name from id in an fkey
**************************************************************************/
CAntObject.prototype.getValueName = function(name, val)
{
    var field = this.getFieldByName(name);
    if (field && field.type == "alias")
    {
        if (!val)
            var val = this.getValue(name);
        return this.getValue(val); // Get aliased value
    }

    if (field.type == "object" || field.type == "fkey" || field.type == "object_multi" || field.type == "fkey_multi")
    {
        for (var i = 0; i < this.values.length; i++)
        {
            if (this.values[i][0] == name)
            {
                if (val) // multival
                {
                    for (var m = 0; m < this.values[i][1].length; m++)
                    {
                        if (this.values[i][1][m] == val && this.values[i][2])
                            return this.values[i][2][m];
                    }
                }
                else
                {
                    if (this.values[i][2]!=null && this.values[i][2]!="null")
                        return this.values[i][2];
                }
            }
        }
    }
	else if (field.optional_vals.length)
	{
		for (var i = 0 ; i < field.optional_vals.length; i++)
		{
			if (field.optional_vals[i][0] == this.getValue(name))
			{
				return field.optional_vals[i][1];
			}
		}
	}
    else
    {
        return this.getValue(name);
    }

    // Still not found, query server
    /*
    if (field.type == "object" || field.subtype)
    {
        var val = this.getValue(name);
        if (val)
        {
        }
    }
    */
    
    return "";
}

/*************************************************************************
*    Function:    getValueStr
*
*    Purpose:    If a foreign reference, then return name, otherwise
*                return the value of the field.
**************************************************************************/
CAntObject.prototype.getValueStr = function(name)
{
    var val = this.getValueName(name);
    if (!val)
        val = this.getValue(name);
    
    return val;
}

/*************************************************************************
*    Function:    setMultiValue
*
*    Purpose:    Set a value in a multi-value array
*
*    Arguments:    name:string - the name of the field to set
*                value:string - the actual value to set (id if fkey)
*                valueName:string - the label for an fkey value
**************************************************************************/
CAntObject.prototype.setMultiValue = function(name, value, valueName)
{
	var valueName = valueName || null;

    this.onValueChange(name, value);
	alib.events.triggerEvent(this, "fieldchange", {fieldName: name, value:value, valueName:valueName});

    this.dirty = true;    
    
    // check if valueName has value, if it has value, it means, its an existing data and not a new entry
	/*
	 * NOTE: This was creating an odd bug, there is no reason to delete the optionial val from the actual
	 * field definition
    if(typeof valueName != "undefined")
    {
        var field = this.getFieldByName(name);    
        for (var i = 0; i < field.optional_vals.length; i++)
        {
            // if value is found in optional_vals, we need to remove it from the dropdown
            if (field.optional_vals[i][0] == value)
                field.optional_vals.splice(i, 1);
        }
    }
	*/
    
    // Update value
    for (var i = 0; i < this.values.length; i++)
    {
        // we need to break the loop if its in New Window and has posted values
        if(!this.id && this.newWindowArgs)
            break;            
            
        if (this.values[i][0] == name)
        {
            var bFound = false;
            for (var m = 0; m < this.values[i][1].length; m++)
            {
                if (this.values[i][1][m] == value)
                    bFound == true;
            }

            if (!bFound)
            {                
                var ind = this.values[i][1].length;
                this.values[i][1][ind] = value;                    
                this.values[i][2][ind] = (valueName) ? valueName : null; // Label for foreign keys
            }

            return;
        }
    }

    // New value
    var ind = this.values.length;
    this.values[ind] = new Array();
    this.values[ind][0] = name;
    this.values[ind][1] = new Array();
    // we need to use valueName if its new IC window form
    if(!this.id && this.newWindowArgs)
    {
        this.values[ind][1][0] = valueName;
    }        
    else
        this.values[ind][1][0] = value;
    this.values[ind][2] = new Array();  // Label for foreign keys
    this.values[ind][2][0] = (valueName) ? valueName : null;
}

/*************************************************************************
*    Function:    getMultiValueExists
*
*    Purpose:    Find out if a multi-value.value is alraedy in the array
**************************************************************************/
CAntObject.prototype.getMultiValueExists = function(name, value)
{
    // Check if value is already set
    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            for (var m = 0; m < this.values[i][1].length; m++)
            {
                if (this.values[i][1][m] == value)
                    return true;
            }
        }
    }

    // Does not exist
    return false;
}

/*************************************************************************
*    Function:    getMultiValues
*
*    Purpose:    Get array of multi-values
**************************************************************************/
CAntObject.prototype.getMultiValues = function(name)
{
    var ret = new Array();
    // Check if value is already set
    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            for (var m = 0; m < this.values[i][1].length; m++)
            {
                ret[ret.length] = this.values[i][1][m];
            }
        }
    }

    // Does not exist
    return ret;
}

/*************************************************************************
*    Function:    getMultiValueStr
*
*    Purpose:    Get a label for a multi-value array
**************************************************************************/
CAntObject.prototype.getMultiValueStr = function(name)
{
    var ret = "";
    // Check if value is already set
    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
			if (typeof this.values[i][2] != "undefined" && this.values[i][2] != null)
			{
				for (var m = 0; m < this.values[i][2].length; m++)
				{
					if (ret) ret += "; ";
					if (typeof this.values[i][2][m] != "undefined" && this.values[i][2][m] != null)
						ret += this.values[i][2][m];
				}
			}
        }
    }

    return ret;
}

/*************************************************************************
*    Function:    delMultiValue
*
*    Purpose:    Delete an element from a multi-value array
**************************************************************************/
CAntObject.prototype.delMultiValue = function(name, value)
{
    this.dirty = true;

    // Delete value
    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            for (var m = 0; m < this.values[i][1].length; m++)
            {
                if (this.values[i][1][m] == value)
                {
                    this.values[i][1].splice(m, 1);
                }
            }
        }
    }
}

/*************************************************************************
*    Function:    delMultiValues
*
*    Purpose:    Delete an entire multi-value array
**************************************************************************/
CAntObject.prototype.delMultiValues = function(name)
{
    // Delete all values
    for (var i = 0; i < this.values.length; i++)
    {
        if (this.values[i][0] == name)
        {
            this.values[i][1] = new Array();
        }
    }
}

// Over-ride this function to track changes
CAntObject.prototype.onValueChange = function(name, value, valueName)
{
}

/**
 * Get the object type name of this object
 *
 * @public
 * @param {int} id If set then load id, otherwise try to get this.id
 */
CAntObject.prototype.getObjType = function()
{
	return this.obj_type;
}

//--------------------------------------------------------------------------
//    Object Definition
//--------------------------------------------------------------------------

/**
 * @depriacted
 * joe: We now use Ant.EntityDefinition to manage definitions
CAntObject.prototype.addField = function(field)
{
    this.addfields[this.addfields.length] = field;

    // make sure not in remove queue
    for (var i = 0; i < this.removefields.length; i++)
    {
        if (this.removefields[i] == field.name)
            this.removefields.splice(i, 1);
    }
}

CAntObject.prototype.removeField = function(fname)
{
    this.removefields[this.removefields.length] = fname;

    // make sure not in add queue
    for (var i = 0; i < this.addfields.length; i++)
    {
        if (this.addfields[i].name == fname)
            this.addfields.splice(i, 1);
    }
}

var g_CAntObject_SaveDef = 0;
CAntObject.prototype.saveDefinition = function()
{
    var totalToProcess = this.addfields.length + this.removefields.length + 1; // add 1 for general
    g_CAntObject_SaveDef = 0;
    
	if (this.addfields.length > 0)
    {
        var field = this.addfields[0];

		var ajax = new CAjax("xml");
		ajax.cbData.cls = this;
		ajax.onload = function(ret)
		{
			console.log("added field");
			// Recurrsively call until finished
			this.cbData.cls.saveDefinition();
		};
        
        var args = [["obj_type", this.name], ["name", field.name], ["title", field.title], ["type", field.type], ["subtype", field.subtype],
                    ["fkey_table_key", field.fkey_table_key], ["fkey_multi_tbl", field.fkey_multi_tbl], ["fkey_multi_this", field.fkey_multi_this], 
                    ["fkey_multi_ref", field.fkey_multi_ref], ["fkey_table_title", field.fkey_table_title], ["notes", field.notes],
                    ["required", (field.required)?'t':'f']];

        args[args.length] = ["function", "save_field"];
        ajax.exec("/admin/xml_objectdef_actions.php", args, false);

		// Remove from the addfields queue
		this.addfields.splice(0, 1);
		return; // onload continues processing
    }
	
    if (this.removefields.length > 0)
    {
		var ajax = new CAjax("xml");
		ajax.cbData.cls = this;
		ajax.onload = function(ret)
		{
			console.log("deleted field");
			// Recurrsively call until finished
			this.cbData.cls.saveDefinition();
		};

        var args = [["obj_type", this.name], ["name", this.removefields[0]]];

        args[args.length] = ["function", "delete_field"];
        ajax.exec("/admin/xml_objectdef_actions.php", args, false);

		this.removefields.splice(0, 1);
		return; // onload continues processing
    }

    // Save general
	var ajax = new CAjax("xml");
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
		if (ret)
			this.cbData.cls.onsavedefinition();
		else
			this.cbData.onsavedefinitionError();
	
    };
    var args = [["obj_type", this.name], ["title", this.title], ["form_layout_xml", this.xmlFormLayoutText]];
    var strOrder = "";
    for (var i = 0; i < this.propertyFormOrder.length; i++)
    {
        if (strOrder!="") 
            strOrder += ":";

        strOrder += this.propertyFormOrder[i];
    }

    for (var i = 0; i < this.teamFormLayouts.length; i++)
    {
        args[args.length] = ["xml_team_form_layouts[]", this.teamFormLayouts[i].team_id];
        args[args.length] = ["xml_team_form_layouts_"+this.teamFormLayouts[i].team_id, this.teamFormLayouts[i].xml];
    }
    //ALib.m_debug = true;
    //AJAX_TRACE_RESPONSE = true;
    args[args.length] = ["field_form_order", strOrder];
    args[args.length] = ["function", "save_general"];    
	ajax.debug = true;
    ajax.exec("/admin/xml_objectdef_actions.php", args, false);
	alert(args);
}

// Over ride the below function
CAntObject.prototype.onsavedefinition = function()
{
}

// Over ride the below function
CAntObject.prototype.onsavedefinitionError = function()
{
}
*/

//--------------------------------------------------------------------------
//    Object Views
//--------------------------------------------------------------------------
CAntObject.prototype.getDefaultView = function(filter_key)
{
    var filterKey = (filter_key) ? filter_key : "";

    for (var i = 0; i < this.views.length; i++)
    {
        if (this.views[i].fDefault && filterKey==this.views[i].filterKey)
            return this.views[i];
    }

    // No default found
    if (this.views.length)
        return this.views[0];
}

CAntObject.prototype.defaultViewExists = function(filter_key)
{
    var filterKey = (filter_key) ? filter_key : "";

    for (var i = 0; i < this.views.length; i++)
    {
        if (this.views[i].fDefault && filterKey==this.views[i].filterKey)
            return true;
    }

    return false;
}

CAntObject.prototype.getViewById = function(id)
{
    for (var i = 0; i < this.views.length; i++)
    {
        if (this.views[i].id == id)
            return this.views[i];
    }

    return null;
}

/**
 * Set whether an object has been viewed
 *
 * @public
 */
CAntObject.prototype.setViewed = function()
{
	if (!this.id)
		return;

    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
    };    
    var args = [["obj_type", this.name], ["oid", this.id]];
    ajax.exec("/controller/Object/setViewed", args);
}

/**
 * Get icon for this object
 *
 * @param int width
 * @param int height
 */
CAntObject.prototype.getIcon = function(width, height)
{
	if (this.getValue("image_id"))
	{
		var path = "/antfs/images/" + this.getValue("image_id");
		if (width || height)
		{
			path += "/";
			path += (width) ? width : "0"; // null value if we are setting only height
		}
		if (height)
			path += "/" + height;
		return path;
	}
	else if (this.iconName)
		return "/images/icons/objects/" + this.iconName+ "_" + width + ".png";
}

/**
 * Find out if the object was edited
 *
 * @return {bool} True if the object has been edited since last save
 */
CAntObject.prototype.isDirty = function()
{
	return this.dirty;
}

/*************************************************************************************
*    Description:    setFilter    
*
*    Purpose:        Add a filter for querying data
**************************************************************************************/
CAntObject.prototype.setFilter = function(field, val)
{
    var ind = this.m_filters.length;
    this.m_filters[ind] = new Object();
    this.m_filters[ind].fieldName = field;
    this.m_filters[ind].value = val;
}

CAntObject.prototype.clearConditions = function() 
{
    return this.condition.clearConditions();
}

// This function will be called by form.js to trigger the edit mode type
CAntObject.prototype.toggleEdit = function(setmode)
{
    this.onToggleEdit(setmode);
}

// Over-ride this function to change the display for edit mode
CAntObject.prototype.onToggleEdit = function(setmode)
{
}

/**
 * Load recurrence pattern for this object
 */
CAntObject.prototype.loadRecurrencePattern = function(id)
{
	this.getRecurrencePattern(true, id);
}

/**
 * get recurrence object
 */
CAntObject.prototype.getRecurrencePattern = function(create, rpid)
{
	if (this.recurRules==null) // recurrence is not supported for this object type
		return null;

	if(!create) // get pattern object if exists
	{
		if(null == this.recurrencePattern)
			return null;
		this.recurrencePattern.object_type = this.name;
		this.recurrencePattern.object_type_id = this.object_type_id;
		this.recurrencePattern.parentId = this.id;
	}
	else if (this.recurrencePattern)  // return existing pattern
	{
		return this.recurrencePattern;
	}
	else  // create pattern object
	{
		if (typeof rpid == 'undefined')
			var rpid = null;
		this.recurrencePattern = new CRecurrencePattern();
		this.recurrencePattern.object_type = this.name;
		this.recurrencePattern.object_type_id = this.object_type_id;
		this.recurrencePattern.parentId = this.id;
		this.recurrencePattern.fieldDateStart = this.recurRules.fieldDateStart;	
		this.recurrencePattern.fieldTimeStart = this.recurRules.fieldTimeStart; 	
		this.recurrencePattern.fieldDateEnd = this.recurRules.fieldDateEnd;		
		this.recurrencePattern.fieldTimeEnd = this.recurRules.fieldTimeEnd;	
		this.recurrencePattern.fieldRecurId = this.recurRules.fieldRecurId;	
		if (rpid)
			this.recurrencePattern.load(rpid);
	}
	
	return this.recurrencePattern;
}

/**
* @fileoverview This is a Object used to display Ant Objects
*
* @author    Marl Tumulak, marl.aereus@aereus.com
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
* Creates an instance of AntObjectLoader_Dashboard.
*
* @constructor
*/
function CAntObjects()
{
    this.objCls = null;
    this.tblObject = null;
    this.appName = null;
    this.fObjectReference = false;
}

/**
 * Call back function after listing the ant objects
 *
 * @public
 * @this {class}
 */
CAntObjects.prototype.onLoadObjects = function()
{
}

/**
 * Opens a dialog form to save a new object
 *
 * @public
 * @this {class}
 */
CAntObjects.prototype.addNewObject = function()
{
    var dlg = new CDialog("Create New Object");
    var objectCon = alib.dom.createElement("div");
    var nameCon = alib.dom.createElement("div", objectCon);
    var buttonCon = alib.dom.createElement("div", objectCon);
    alib.dom.styleSet(buttonCon, "margin-top", "20px");
    buttonCon.align = "right";
    
    alib.dom.setElementAttr(alib.dom.createElement("label", nameCon), [["innerHTML", "Object Name: "]]);
    var objectName = alib.dom.setElementAttr(alib.dom.createElement("input", nameCon));    
    alib.dom.styleSet(objectName, "width", "200px");
    
    var btn = new CButton("Save Object", 
    function(cls, objectName, dlg)
    {
        cls.saveNewObject(objectName.value);
        dlg.hide();
    },
    [this, objectName, dlg], "b2");
    buttonCon.appendChild(btn.getButton());
    
    // refresh button
    var btn = new CButton("Cancel", 
    function(cls, dlg)
    {
		dlg.hide();
    },
    [this, dlg], "b1");
    buttonCon.appendChild(btn.getButton());
    
    dlg.customDialog(objectCon, 280);
}

/**
 * Saves a new object
 *
 * @public
 * @this {class}
 */
CAntObjects.prototype.saveNewObject = function(objectName)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.dlg = showDialog("Saving, please wait...");
    ajax.cbData.objectName = objectName;
    ajax.onload = function(ret)
    {
        this.cbData.dlg.hide();
        if(!ret)
            return;
            
        if(ret['error'])
            ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
        else
        {
            var newAntObj = new Object();
            newAntObj.fullTitle = this.cbData.objectName;
            newAntObj.id = ret.id;
            newAntObj.name = ret.name;
            this.cbData.cls.listObject(newAntObj);
            ALib.statusShowAlert("Object " + this.cbData.objectName + " successfully saved", 3000, "bottom", "right");
        }
    };
    
    var args = new Array();
    args[args.length] = ["obj_name", objectName];
    args[args.length] = ["app", this.appName];
    ajax.exec("/controller/Application/createObject", args);
}

/**
 * Display the Ant Objects
 *
 * @public
 * @this {class}
 * @param {DOMElement} con      Container of CTooltable List
 */
CAntObjects.prototype.loadObjects = function(con)
{
    this.tblObject.clear();
    loadingCon = alib.dom.createElement("element", con);
    loadingCon.innerHTML = "<div class='loading'></div>";
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;    
    ajax.cbData.loadingCon = loadingCon;
    ajax.onload = function(ret)
    {
        this.cbData.loadingCon.parentNode.removeChild(this.cbData.loadingCon);
        this.cbData.cls.mapObject(ret);
        this.cbData.cls.onLoadObjects();
    };
    
    if(this.fObjectReference)
    {
        var args = new Array();
        args[args.length] = ['app', this.appName];
        ajax.exec("/controller/Application/getObjectReference", args);
    }
    else
        ajax.exec("/controller/Object/getObjects");
}

/**
 * Display the Ant Objects
 *
 * @public
 * @this {class}
 * @param {Object} objectData       Contains the data of Ant Objects
 */
CAntObjects.prototype.mapObject = function(objectData)
{
    for(object in objectData)
    {            
        this.listObject(objectData[object]);
        
    }
}
    
/**
 * Display the Ant Objects
 *
 * @public
 * @this {class}
 * @param {Object} currentObject        Contains the data of the current object
 */
CAntObjects.prototype.listObject = function(currentObject)
{
    var rw = this.tblObject.addRow();    
    var objName = currentObject.fullTitle;
    
    if(typeof objName == "undefined")
        objName = currentObject.name;
    
    // Edit object
    var lnk = alib.dom.createElement("a");
    lnk.innerHTML = objName;
    lnk.href = "javascript:void(0);";
    lnk.obj_type = currentObject.name;
    lnk.onclick = function() 
    {
        var objedt_dlg = new Ant.EntityDefinitionEdit(this.obj_type);
        objedt_dlg.showDialog();            
    }        
    rw.addCell(lnk, false, "left");
    
    // Browse Objects
    if(!this.fObjectReference)
    {
		/*
        var lnk = alib.dom.createElement("a");
        lnk.innerHTML = "[browse/view]";
        lnk.href = "javascript:void(0);";
        lnk.obj_type = currentObject.name;
        lnk.onclick = function() 
        {
            window.open("/objb/" + this.obj_type);
        }
        rw.addCell(lnk, false, "center");
		*/
    }        

    // Import data
    var lnk = alib.dom.createElement("a");
    lnk.innerHTML = "[import data]";
    lnk.href = "javascript:void(0);";
    lnk.obj_type = currentObject.name;
    lnk.onclick = function() 
    {
		var wiz = new AntWizard("EntityImport", {obj_type:this.obj_type});
		wiz.show();
    }
    rw.addCell(lnk, false, "center");

	/*(
    // Edit permissions
    var lnk = alib.dom.createElement("a");
    lnk.innerHTML = "[edit permissions]";
    lnk.href = "javascript:void(0);";
    lnk.obj_type = currentObject.name;
    lnk.onclick = function() { loadDacl(null, '/objects/' + this.obj_type); }
    rw.addCell(lnk, false, "center");
	*/
    
    // Delete custom objects
    if (currentObject.fSystem)
        rw.addCell("&nbsp;", false, "center");
    else
    {
        var lnk = alib.dom.createElement("a");
        lnk.innerHTML = "[delete]";
        lnk.href = "javascript:void(0);";
        lnk.objectName = currentObject.name;
        lnk.cls = this;
        lnk.row = rw;
        lnk.onclick = function() { this.cls.deleteObject(this.objectName, this.row); }
        rw.addCell(lnk, false, "center");
    }
}

/**
 * Display the Ant Objects
 *
 * @public
 * @this {class} 
 * @param {String} objectName              Current Object Name
 * @param {DOMElement} row              Current row to be deleted
 */
CAntObjects.prototype.deleteObject = function(objectName, row)
{
    if(confirm("Are you sure you want to delete this " + objectName + " object?", "Delete Referenced Object"))
    {
        ajax = new CAjax('json');
        ajax.cbData.cls = this;
        ajax.cbData.dlg = showDialog("Deleting, please wait...");
        ajax.cbData.row = row;
        ajax.cbData.objectName = objectName;
        ajax.onload = function(ret)
        {
            this.cbData.dlg.hide();
            if(!ret)
                return;
                
            if(ret['error'])
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
            else
            {
                this.cbData.row.deleteRow();
                ALib.statusShowAlert("Object " + this.cbData.objectName + " successfully saved", 3000, "bottom", "right");
            }
        };
        
        var args = new Array();
        args[args.length] = ["obj_type", objectName];
        args[args.length] = ["app", this.appName];
        args[args.length] = ["f_obj_reference", this.fObjectReference];
        ajax.exec("/controller/Application/deleteObjectReference", args);
    }
}

//--------------------------------------------------------------------------
//	CAntObjectView
//--------------------------------------------------------------------------
function CAntObjectView(type)
{
	this.id 			= null;
	this.name			= "";
	this.obj_type 		= type;
	this.description	= "";
	this.fSystem		= false; // if a system wide view then no edit
	this.conditions		= new Array();
	this.sort_order		= new Array();
	this.view_fields	= new Array();
	this.filterKey		= "";
	this.reportId		= ""; // Each report has a unique view
}

CAntObjectView.prototype.loadFromXml = function(xml_node) 
{
	if (xml_node.m_name == "view")
	{
		this.id = unescape(xml_node.getChildNodeValByName("id"));
		this.name = unescape(xml_node.getChildNodeValByName("name"));
		this.description = unescape(xml_node.getChildNodeValByName("description"));
		this.fSystem = (xml_node.getChildNodeValByName("f_system")=='t')?true:false;
		this.fDefault = (xml_node.getChildNodeValByName("f_default")=='t')?true:false;
		var fk = xml_node.getChildNodeValByName("filter_key");
		this.filterKey = (fk)?unescape(fk):"";

		var view_fields = xml_node.getChildNodeByName("view_fields");
		if (view_fields)
		{
			for (var j = 0; j < view_fields.getNumChildren(); j++)
			{
				var fld = view_fields.getChildNode(j);
				var ind = this.view_fields.length;
				this.view_fields[ind] = new Object();
				this.view_fields[ind].id = null;
				this.view_fields[ind].fieldName = fld.m_text;
			}
		}

		var conditions = xml_node.getChildNodeByName("conditions");
		if (conditions)
		{
			for (var j = 0; j < conditions.getNumChildren(); j++)
			{
				var cnd = conditions.getChildNode(j);
				var ind = this.conditions.length;
				this.conditions[ind] = new Object();
				this.conditions[ind].blogic = unescape(cnd.getChildNodeValByName("blogic"));
				this.conditions[ind].fieldName = unescape(cnd.getChildNodeValByName("field_name"));
				this.conditions[ind].operator = unescape(cnd.getChildNodeValByName("operator"));
				this.conditions[ind].condValue = unescape(cnd.getChildNodeValByName("value"));
			}
		}

		var sort_order = xml_node.getChildNodeByName("sort_order");
		if (sort_order)
		{
			for (var j = 0; j < sort_order.getNumChildren(); j++)
			{
				var order = sort_order.getChildNode(j);
				var ind = this.sort_order.length;
				this.sort_order[ind] = new Object();
				this.sort_order[ind].fieldName = unescape(order.getChildNodeValByName("field_name"));
				this.sort_order[ind].order = unescape(order.getChildNodeValByName("order"));
			}
		}

	}
}

CAntObjectView.prototype.fromData = function(data) 
{
	this.id = data.id;
	this.name = data.name;
	this.description = data.description;
	this.fSystem = data.f_system;
	this.fDefault = data.f_default;
	this.filterKey = data.filter_key;

	for (var i in data.view_fields)
	{
		this.view_fields[this.view_fields.length] = {
			id : null, // legacy
			fieldName: data.view_fields[i]
		};
	}

	for (var i in data.conditions)
	{
		this.conditions[this.conditions.length] = {
			blogic : data.conditions[i].blogic,
			fieldName : data.conditions[i].field_name,
			operator : data.conditions[i].operator,
			condValue : data.conditions[i].value
		};
	}

	for (var i in data.sort_order)
	{
		this.sort_order[this.sort_order.length] = {
			fieldName : data.sort_order[i].field_name,
			order : data.sort_order[i].order
		};
	}
}

CAntObjectView.prototype.save = function() 
{
	var args = [["obj_type", this.obj_type], ["name", this.name], ["description", this.description], ["filter_key", this.filterKey], ["report_id", this.reportId]];

	if (this.id)
		args[args.length] = ["vid", this.id];

	for (var i = 0; i < this.conditions.length; i++)
	{
		var cond = this.conditions[i];
		args[args.length] = ["conditions[]", i];
		args[args.length] = ["condition_blogic_"+i, cond.blogic];
		args[args.length] = ["condition_fieldname_"+i, cond.fieldName];
		args[args.length] = ["condition_operator_"+i, cond.operator];
		args[args.length] = ["condition_condvalue_"+i, cond.condValue];
	}

	for (var i = 0; i < this.sort_order.length; i++)
	{
		var sort_fld = this.sort_order[i];
		args[args.length] = ["sort_order[]", i];
		args[args.length] = ["sort_order_fieldname_"+i, sort_fld.fieldName];
		args[args.length] = ["sort_order_order_"+i, sort_fld.order];
	}

	for (var i = 0; i < this.view_fields.length; i++)
	{
		var fields = this.view_fields[i];
		args[args.length] = ["view_fields[]", i];
		args[args.length] = ["view_field_fieldname_"+i, fields.fieldName];
	}
    
    /*function cbdone(ret, cls)
    {
        if (!ret['error'])
        {
            if (!cls.id)
            {
                cls.id = ret;
            }

            if (!cls.repressOnSave)
                cls.onsave(ret);
        }
        else
            cls.onsaveError();
    }
    var rpc = new CAjaxRpc("/controller/Object/saveView", "saveView", args, cbdone, [this], AJAX_POST, true, "json");*/
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {
            if (!this.cbData.cls.id)
                this.cbData.cls.id = ret;

            if (!this.cbData.cls.repressOnSave)
                this.cbData.cls.onsave(ret);
        }
        else
            cls.onsaveError();
    };
    ajax.exec("/controller/Object/saveView", args);
}

CAntObjectView.prototype.reset = function() 
{
	this.conditions		= new Array();
	this.sort_order		= new Array();
	this.view_fields	= new Array();
}

CAntObjectView.prototype.addCondition = function(blogic, fieldName, operator, condValue) 
{
	var ind = this.conditions.length;
	this.conditions[ind] = new Object();
	this.conditions[ind].blogic = blogic;
	this.conditions[ind].fieldName =fieldName;
	this.conditions[ind].operator = operator;
	this.conditions[ind].condValue = condValue;
}

CAntObjectView.prototype.onsave = function(id) 
{
}

CAntObjectView.prototype.onsaveError = function(id) 
{
}


/**
 * @fileoverview Infobox popup used to display mini-loader on object highlight
 */


/**
 * Constructor
 */
var AntObjectInfobox = {};

/**
 * Cache the last AntObjectInfobox.maxCached loaders for quicker load
 *
 * @private
 * @type {{objType, id, loader, divCon}[]}
 */
AntObjectInfobox.loaders = new Array();

/**
 * Variable to determine the maximum number of dialogs to cache
 *
 * @type {int}
 */
AntObjectInfobox.maxCached = 25;

/**
 * Width of the popup dialog in px
 *
 * @type {int}
 */
AntObjectInfobox.dialogWidth = 450;

/**
 * Show infobox
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @param {DOMElement} e The element to attach to and display when over
 */
AntObjectInfobox.attach = function(objType, oid, e)
{
	// Add hover
	var data = {
		type:objType, 
		id:oid, 
		div:e
	};
	alib.events.listen(e, "mouseover", function(evnt) { 
			this.active = true;
			AntObjectInfobox.delayShow(evnt.data.type, evnt.data.id, evnt.data.div)
		}, data);

	// Register mouse out
	alib.events.listen(e, "mouseout", function(evnt) { this.active = false; });
}

/**
 * Delayed show to imporve user experience
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @param {DOMElement} e The element to attach to and display when over
 */
AntObjectInfobox.delayShow = function(objType, oid, div)
{
	if (!div.showTimer)
	{
		div.showTimer = window.setTimeout(function() {
			div.showTimer = null;
			if (div.active)
				AntObjectInfobox.show(objType, oid, div);
		}, 500); // Wait .5 second
	}
}

/**
 * Show infobox
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @param {DOMElement} e The element to attach to and display when over
 */
AntObjectInfobox.show = function(objType, oid, e)
{
	var pos = alib.dom.getElementPosition(e);

	var x = pos.x;
	var y = pos.b;

	// make sure we don't run off the right
	if ((x + 22 + this.dialogWidth) > alib.dom.getClientWidth())
		x = alib.dom.getClientWidth() - (this.dialogWidth + 25);

	var div = this.getBoxDiv(objType, oid);

	alib.dom.styleSet(div, "top", y + "px");
	alib.dom.styleSet(div, "left", x + "px");
	alib.dom.styleSet(div, "display", "block");

	if (!div.rendered)
		this.renderLoader(objType, oid, div);

	alib.events.listen(e, "mouseout", function(evnt) { 
			AntObjectInfobox.delayHide(evnt.data.objType, evnt.data.oid)
		}, { objType:objType, oid:oid });

	// Cancel hide if set started
	if (div.hidetimer) 
	{
		window.clearTimeout(div.hidetimer);
		div.hidetimer = null;
	}
}

/**
 * Delayed hide
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @param {int} time Number of ms to delay the hide
 */
AntObjectInfobox.delayHide = function(objType, oid, time)
{
	var div = this.getBoxDiv(objType, oid);
	var time = time || 1000;

	if (!div.hidetimer)
	{
		div.hidetimer = window.setTimeout(function() {
			div.hidetimer = null;
			alib.dom.styleSet(div, "display", "none");
		}, time); // Wait one second
	}
}

/**
 * Stop delayed hide
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 */
AntObjectInfobox.stopHide = function(objType, oid)
{
	var div = this.getBoxDiv(objType, oid);

	if (div.hidetimer)
	{
		window.clearTimeout(div.hidetimer);
		div.hidetimer=null;
	}
}

/**
 * Get infobox dom if already created
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @return {DOMElement} The container
 */
AntObjectInfobox.getBoxDiv = function(objType, oid)
{
	// First check to see if this box is cached
	for (var i in this.loaders)
	{
		if (this.loaders[i].objType == objType && this.loaders[i].id == oid)
		{
			return this.loaders[i].divCon;
		}
	}
	
	var div = alib.dom.createElement("div", document.body);
	alib.dom.styleSet(div, "position", "absolute");
	alib.dom.styleSet(div, "top", "0");
	alib.dom.styleSet(div, "left", "0");
	alib.dom.styleSet(div, "width", this.dialogWidth + "px");
	alib.dom.styleSet(div, "display", "none");
	alib.dom.styleSetClass(div, "objectInfobox");
	div.rendered = false;

	this.loaders.push({
		objType : objType,
		id : oid,
		divCon : div,
		loader : null
	});

	alib.events.listen(div, "mouseover", function(evnt) { 
			AntObjectInfobox.stopHide(evnt.data.objType, evnt.data.oid); 
		}, { objType:objType, oid:oid });
	alib.events.listen(div, "mouseout", function(evnt) { 
			AntObjectInfobox.delayHide(evnt.data.objType, evnt.data.oid); 
		}, { objType:objType, oid:oid });

	// Maintain size to make sure we only this.maxCached loaded
	while (this.loaders.length > 25)
	{
		document.body.removeChild(this.loaders[0].divCon);
		this.loaders.splice(0, 1);
	}

	return div;
}

/**
 * Render loader into a box div
 *
 * @param {string} objType The unique name of the object type to load
 * @param {string} oid The unique id of the object to load
 * @param {DOMElement} div The container
 */
AntObjectInfobox.renderLoader = function(objType, oid, div)
{
	div.rendered = true;

	// Set the loader reference
	var ocon = alib.dom.createElement("div", div);
	var ol = new AntObjectLoader(objType, oid);
	ol.hideToolbar = true;
	ol.printInline(ocon, false, "infobox");

	// Add buttons
	var bcon = alib.dom.createElement("div", div);
	alib.dom.styleSet(bcon, "text-align", "right");

	var btn = alib.ui.Button("View More Details", {
		className:"b1 medium", tooltip:"Click to open full details", objType:objType, oid:oid,
		onclick:function() {
			loadObjectForm(this.objType, this.oid);
		}
	});
	btn.print(bcon);

	var btn = alib.ui.Button("Close", {
		className:"b1 medium", tooltip:"Dismiss this dialog", objType:objType, oid:oid,
		onclick:function() {
			AntObjectInfobox.delayHide(this.objType, this.oid, 1); // Close in 1 ms
		}
	});
	btn.print(bcon);
}

/**
 * @fileOverview AntObjectGroupingSel:  Advanced dynamic combo-box/
 */


/**
 * Class constructor
 *
 * @constructor
 */
function AntObjectGroupingSel(label, obj_type, field, value, objref, options)
{
	if (obj_type && field)
	{
		this.mainObjectType = obj_type;
		this.mainObjectField = field;
	}
	else if (obj_type)
	{
		this.mainObjectType = obj_type;
		this.mainObjectField = "";
	}
	else
	{
		return null;
	}
    
    this.mainObject = (objref) ? objref : null;
    this.m_lbl = alib.dom.createElement("span");
    this.m_input = alib.dom.createElement("input");
    this.m_input.type = "hidden";
    this.m_filters = new Array();
    this.value = (value) ? value : "";
    this.opts = (options) ? options : new Object(); 
    this.fieldType = null;
    this.multiVars = new Array();
	this.cbData = new Object();
    
    if(this.mainObject)
    {
        var fieldObj = this.mainObject.getFieldByName(field);
        
        this.fieldType = fieldObj.type;
        if(this.fieldType == "fkey_multi" && obj_type !== "email_thread")
        {
            this.multiVars = this.mainObject.getMultiValues(field);
            label = "Select";
        }
    }
	
    this.m_lbl.innerHTML = (label) ? label : "Select"; //  &#9660;
	if (value && this.fieldType !== "fkey_multi")
	{
		if (field)
			this.getForeignValueLabel(value);
		else
			this.getObjectName(value);
	}
}

/**
* print
*
* @param {object} con The container that will contain the browser
* @param {string} className Optional class to pass to the button
*/
AntObjectGroupingSel.prototype.print = function(con, className)
{
	var clsName = (className) ? className : null;

	if (this.mainObjectType && this.mainObjectField)
	{
		this.printGrouping(con, clsName);
	}
	else
	{
		this.printObject(con);
	}
}

/**
* Set the label text (button) of the selector
*
* @public
* @param {string} txt The text to set the label to
*/
AntObjectGroupingSel.prototype.setLabel = function(txt)
{
	this.m_lbl.innerHTML = txt + " &#9660;";
}

/**
* print
*
* @param {object} con The container that will contain the browser
*/
AntObjectGroupingSel.prototype.printObject = function(con)
{
	switch(this.mainObjectType)
	{
	case 'user':
		var selusr = function(cls)
		{
			var cbrowser = new CUserBrowser();
			cbrowser.dynselcls = cls;
			cbrowser.onSelect = function(cid, name) 
			{
				this.dynselcls.onSelect(cid, name);
				this.dynselcls.setLabel(name);
			}
			cbrowser.showDialog();
		}
		var btn = new CButton(this.m_lbl, selusr, [this]);
		btn.print(con);
		break;
	}

}

/**
* @depricated
*
* @param {object} con The container that will contain the browser
* @param {string} className Optional class to pass to the button
*/
AntObjectGroupingSel.prototype.printTable = function(con, className)
{
	var clsName = (className) ? className : null;

	var dmcon = new CDropdownMenu();
	var dcon = dmcon.addCon();
	dcon.onclick = function() 
    {
        //this.menuref.unloadMe();
    }
	var in_con = alib.dom.createElement("div", dcon);
	alib.dom.styleSet(in_con, "padding-left", "5px");
	alib.dom.styleSet(in_con, "width", "180px");
	alib.dom.styleSet(in_con, "max-height", "300px");
	alib.dom.styleSet(in_con, "overflow", "auto");
	var funct = function(in_con, cls, dropdownCon)
	{
		cls.loadTable(in_con, null, dropdownCon);
	}
	con.appendChild(dmcon.createButtonMenu(this.m_lbl, funct, [in_con, this, dcon], clsName));
}

/**
 * Print filtered menu dropdown
 *
 * @param {object} con The container that will contain the browser
 * @param {string} className Optional class to pass to the button
 */
AntObjectGroupingSel.prototype.printGrouping = function(con, className)
{
	var clsName = (className) ? className : "b1";

	var menu = new alib.ui.FilteredMenu();
	alib.events.listen(menu, "onShow", function(evt) {
		evt.data.cls.loadGroupingItems(evt.data.menu);
	}, {cls:this, menu:menu});
	var btn = new alib.ui.MenuButton(this.m_lbl, menu, {className:clsName});
	btn.print(con);
}

/**
* To be overloaded 
*/
AntObjectGroupingSel.prototype.onSelect = function(id, title)
{
}

/**
* To be overloaded 
*/
AntObjectGroupingSel.prototype.onchange = function()
{
}

/**
 * @depricated No just use select
* Select function used when a table is dynamically loaded
*/
AntObjectGroupingSel.prototype.tableSelect = function(id, title)
{
	if (!this.opts.staticLabel && this.fieldType !== "fkey_multi")
		this.m_lbl.innerHTML = title;
        
	this.value = id;
	this.valueName = title;
	this.m_input.value = id;
	this.onSelect(id, title);
	this.onchange();
}

/**
 * Select a grouping id
 *
 * @param {int} id The id of selected grouping
 * @param {string} title The title or label of the grouping
 */
AntObjectGroupingSel.prototype.select = function(id, title)
{
	if (!this.opts.staticLabel && this.fieldType !== "fkey_multi")
		this.m_lbl.innerHTML = title;
        
	this.value = id;
	this.valueName = title;
	this.m_input.value = id;
	this.onSelect(id, title);
	this.onchange();
}

/**
 * Load grouping entries into the menu
 *
 * @param {alib.ui.Menu} menu
 */
AntObjectGroupingSel.prototype.loadGroupingItems = function(menu)
{	

    var args = new Array();

    for (var i = 0; i < this.m_filters.length; i++)
    {
        var cond = this.m_filters[i];
        args[args.length] = [cond.fieldName, cond.value];
    }
    
    if (this.opts.filter)
    {
        var cond_cnt = 1;
        args[args.length] = ["conditions[]", cond_cnt];
        args[args.length] = ["condition_blogic_"+cond_cnt, "and"];
        args[args.length] = ["condition_fieldname_"+cond_cnt, this.opts.filter[0]];
        args[args.length] = ["condition_operator_"+cond_cnt, "is_equal"];
        args[args.length] = ["condition_condvalue_"+cond_cnt, this.opts.filter[1]];
    }
    
    if (this.mainObject)
    {
        var fields = this.mainObject.getFields();
        for (var i = 0; i < fields.length; i++)
            args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name)];
    }

    if (this.mainObjectType)
        args[args.length] = ["obj_type", this.mainObjectType];
    if (this.mainObjectField)
        args[args.length] = ["field", this.mainObjectField];
	/*
    if (offset)
        args[args.length] = ["offset", offset];
		*/
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;	
    ajax.cbData.menu = menu;
	ajax.onload = function(ret)
	{
        if(!ret)
        {
            return;
        }

        
        if(ret.error)
        {
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
            return;
        }

		//this.cbData.menu.clear();
        
        // Null Entry
        var nullEntry = new Array();            
        nullEntry[0] = new Object();
        nullEntry[0].id = "";
        nullEntry[0].title = "None / Null";
        nullEntry[0].viewname = "None / Null";
        
		if (!this.cbData.cls.opts.noNull && this.cbData.cls.fieldType !== "fkey_multi")
            this.cbData.cls.populateItems(nullEntry, this.cbData.menu);
        
        this.cbData.cls.populateItems(ret, this.cbData.menu);
	};

	ajax.exec("/controller/Object/getGroupings", args);
}

/**
 * @depricated Using load menu items now
* Load foriegn table values
*/
AntObjectGroupingSel.prototype.loadTable = function(con, offset, dropdownCon)
{	
	con.innerHTML = " <div class='loading'></div>";
    
    var args = new Array();

    for (var i = 0; i < this.m_filters.length; i++)
    {
        var cond = this.m_filters[i];
        args[args.length] = [cond.fieldName, cond.value];
    }
    
    if (this.opts.filter)
    {
        var cond_cnt = 1;
        args[args.length] = ["conditions[]", cond_cnt];
        args[args.length] = ["condition_blogic_"+cond_cnt, "and"];
        args[args.length] = ["condition_fieldname_"+cond_cnt, this.opts.filter[0]];
        args[args.length] = ["condition_operator_"+cond_cnt, "is_equal"];
        args[args.length] = ["condition_condvalue_"+cond_cnt, this.opts.filter[1]];
    }
    
    if (this.mainObject)
    {
        var fields = this.mainObject.getFields();
        for (var i = 0; i < fields.length; i++)
            args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name)];
    }

    if (this.mainObjectType)
        args[args.length] = ["obj_type", this.mainObjectType];
    if (this.mainObjectField)
        args[args.length] = ["field", this.mainObjectField];
    if (offset)
        args[args.length] = ["offset", offset];
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;	
    ajax.cbData.con = con;
	ajax.cbData.dropdownCon = dropdownCon;
	ajax.onload = function(ret)
	{
        if(!ret)
        {
            this.cbData.con.innerHTML = " <div style='padding:3px;'>None</div>";
            return;
        }
        
        if(ret.error)
        {
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
            return;
        }
        
		this.cbData.con.fLoaded = true;
		this.cbData.con.innerHTML = "";
        
        // Null Entry
        var nullEntry = new Array();            
        nullEntry[0] = new Object();
        nullEntry[0].id = "";
        nullEntry[0].title = "None / Null";
        nullEntry[0].viewname = "None / Null";
        
        // Containers
        var divSearchCon = alib.dom.createElement("div", this.cbData.con);
        var divValueCon = alib.dom.createElement("div", this.cbData.con);
        
        // count how many childs
        var childCount = 0;
        for(group in ret)
        {
            if(ret[group].children && ret[group].children.length)
                childCount += ret[group].children.length;
        }
        
        // Remove text search here if data is less then 10
        if((ret.length + childCount) > 10)
        {
            var spanContainer = alib.dom.createElement("span", divSearchCon);
            var textSearch = alib.dom.setElementAttr(alib.dom.createElement("input", spanContainer), [["type", "text"]]);
        
            // Style Set
            alib.dom.styleSet(textSearch, "width", "150px");
            alib.dom.styleSet(textSearch, "margin", "5px 0");
            alib.dom.styleSet(textSearch, "paddingRight", "25px");
            spanContainer.className = "clearIcon";
            
            // span icon
            var spanIcon = alib.dom.createElement("span", spanContainer);
            spanIcon.className = "deleteicon";
            alib.dom.styleSet(spanIcon, "visibility", "hidden");
            
            // span icon onclick
            spanIcon.cls = this;
            spanIcon.textSearch = textSearch;
            spanIcon.onclick = function()
            {
                this.textSearch.value = "";
                this.textSearch.focus();
                alib.dom.styleSet(this, "visibility", "hidden");
                this.textSearch.onkeyup();
            }
            
            textSearch.focus();
            textSearch.cls = this.cbData.cls;
            textSearch.data = ret;
            textSearch.con = divValueCon;
            textSearch.nullEntry = nullEntry;
            textSearch.spanIcon = spanIcon;        
            textSearch.onkeyup = function()
            {
                this.con.innerHTML = "";
                
                if (!this.cls.opts.noNull && this.cls.fieldType !== "fkey_multi")
                    this.cls.populateSelect(this.nullEntry, this.con);
                
                this.cls.populateSelect(this.data, this.con, this.value.toLowerCase());
                
                if(this.value.length > 0)
                    alib.dom.styleSet(this.spanIcon, "visibility", "visible");
                else
                    alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
            }
        }
        
        alib.dom.styleSet(divValueCon, "cursor", "pointer");
        divValueCon.dropdownCon = this.cbData.dropdownCon;
        divValueCon.spanIcon = spanIcon;
        divValueCon.onclick = function()
        {
            alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
            this.dropdownCon.menuref.unloadMe();
        }
        
		if (!this.cbData.cls.opts.noNull && this.cbData.cls.fieldType !== "fkey_multi")
            this.cbData.cls.populateSelect(nullEntry, divValueCon);
        
        this.cbData.cls.populateSelect(ret, divValueCon);
	};

	ajax.exec("/controller/Object/getGroupings", args);
}

/**
 * @depricted Now use populateItems
* Display object form/viewer
*/
AntObjectGroupingSel.prototype.populateSelect = function(data, con, filter, spacer)
{
    if(typeof spacer == "undefined")
        spacer = "";
        
    if(data.length)
    {
        for(value in data)
        {
            var currentValue = data[value];
            
            // Filter the Ids that already saved
            var vFound = false;
            for(mVar in this.multiVars)
            {
                var gId = this.multiVars[mVar];
                if(gId == currentValue.id)
                {
                    vFound = true;
                    break;
                }
            }
            
            if(vFound)
                continue;
            
            if(filter)
            {
                if(currentValue.title.toLowerCase().indexOf(filter) !== -1)
                    this.addEntry(con, currentValue, spacer + currentValue.title)
            }
            else
            {
                this.addEntry(con, currentValue, spacer + currentValue.title)
            }
            
            if(currentValue.children && currentValue.children.length)
                this.populateSelect(currentValue.children, con, filter, spacer + "\u00A0\u00A0\u00A0\u00A0");
        }
    }
    else
        con.innerHTML = " <div style='padding: 3px;'>None</div>";
}

/**
 * Add items to menu from the data received from server
 *
 * @param {Array} data Data received from server (JSON objects)
 * @param {alib.ui.Menu} menu The current menu we are working with
 * @param {string} prefix For printing heirarchy / children
 */
AntObjectGroupingSel.prototype.populateItems = function(data, menu, prefix)
{
    if(typeof prefix == "undefined")
        prefix = "";
        
    if(!data.length)
		return;

	for(value in data)
	{
		var currentValue = data[value];
		
		// Filter the Ids that already saved if used for editing a field
		var vFound = false;
		for(mVar in this.multiVars)
		{
			var gId = this.multiVars[mVar];
			if(gId == currentValue.id)
			{
				vFound = true;
				break;
			}
		}

		if(vFound)
			continue;

		// Add menu item if it does not already exist
		var item = menu.getItemById(currentValue.id);
		if (!item)
		{
			var item = new alib.ui.MenuItem(prefix + currentValue.title, {}, currentValue.id);
			item.cbData.id = currentValue.id;
			item.cbData.title = currentValue.title;
			item.cbData.cls = this;
			item.onclick = function() {
				this.cbData.cls.select(this.cbData.id, this.cbData.title);
			};
			menu.addItem(item);
		}
		
		// Traverse children if they exist
		if(currentValue.children && currentValue.children.length)
			this.populateItems(currentValue.children, menu, prefix + currentValue.title + "/");
	}
}

/**
* @depricted Now use populateItems
* Adds the group entry in the dropdown
* 
* @param {DOMElement} con       Container of the dropdown groups
* @param {Object} currentValue  Contains the data of groups
* @param {String} entryValue    The title of groups (may contain spacer for child groups)
*/
AntObjectGroupingSel.prototype.addEntry = function(con, currentValue, entryValue)
{
    var dv = alib.dom.createElement("div", con);            
    dv.cls = this;
    dv.id = currentValue.id;
    dv.title = currentValue.title;
    dv.onclick = function()
    {
        this.cls.tableSelect(this.id, this.title);
    }
    dv.innerHTML = entryValue;
}

/**
* Display object form/viewer
*/
AntObjectGroupingSel.prototype.loadObjectForm = function(id)
{
	var oid = (id) ? id : null;
	switch (this.mainObject.name)
	{
	case "customer":
		custOpen(id);
		break;
	case "lead":
		custLeadOpen(oid);
		break;
	case "opportunity":
		custOppOpen(oid);
		break;
	case "task":
		projTaskOpen(oid);
		break;
	case "case":
		projTicketOpen(oid);
		break;
	default:
		var url = '/obj/'+this.mainObject.name;
		if (oid)
			url += '/'+oid;
		var strWindName = (this.mainObject.name.replace(".", "_"))+'_'+((oid)?oid:'new')
		
		window.open(url, strWindName, 'width=750,height=550,toolbar=no,scrollbars=yes');
		break;
	}
}

/**
* Add a filter for querying data
*/
AntObjectGroupingSel.prototype.setFilter = function(field, val)
{
	var ind = this.m_filters.length;
	this.m_filters[ind] = new Object();
	this.m_filters[ind].fieldName = field;
	this.m_filters[ind].value = val;
}

/**
* get input
*/
AntObjectGroupingSel.prototype.getInput = function()
{
	return this.m_input;
}

/**
* Get the label for a fkey value (used mostly for drop-downs)
*/
AntObjectGroupingSel.prototype.getObjectName = function(id)
{
	if (this.mainObjectType)
	{
        ajax = new CAjax('json');
        ajax.cbData.cls = this;
        ajax.onload = function(ret)
        {
            if(!ret)
                return;
                
            if (ret['error'])
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
            else
                this.cbData.cls.m_lbl.innerHTML = unescape(ret) +  "&#9660;";
        };
        var args = [["obj_type", this.mainObjectType], ["id", id]];
        ajax.exec("/controller/Object/getObjName", args);
	}
}

/**
* Get the label for a fkey value (used mostly for drop-downs)
*/
AntObjectGroupingSel.prototype.getForeignValueLabel = function(id)
{
	if (this.mainObjectType)
	{
        ajax = new CAjax('json');
        ajax.cbData.cls = this;
        ajax.onload = function(ret)
        {
            if(!ret)
                return;
                
            if (ret['error'])
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
            else
                this.cbData.cls.m_lbl.innerHTML = unescape(ret) + "&#9660;";
        };
        var args = [["obj_type", this.mainObjectType], ["field", this.mainObjectField], ["id", id]];
        ajax.exec("/controller/Object/getFkeyValName", args);
	}
}

/**
 * @depricated This function is not longer used
 * Get the first value
AntObjectGroupingSel.prototype.setDefault = function()
{
	if (this.value)
		return;

	var ajax = new CAjax();
	ajax.m_browseclass = this;
	ajax.onload = function(root)
	{
		var num = root.getNumChildren();
		if (num)
		{
			for (i = 0; i < num; i++)
			{
				var child = root.getChildNode(i);

				if (child.m_name == "value")
				{
					var key = child.getAttribute("key");
					var title = unescape(child.getAttribute("title"));
					this.m_browseclass.tableSelect(key, title);
				}
			}
		}
	};

	var url = "/objects/xml_dynsel.php?fval=0";
	if (this.mainObjectType)
		url += "&obj_type=" + this.mainObjectType;
	if (this.mainObjectField)
		url += "&field=" + this.mainObjectField;
	url += "&limit=1";

	var args = new Array();

	for (var i = 0; i < this.m_filters.length; i++)
	{
		var cond = this.m_filters[i];
		args[args.length] = [cond.fieldName, cond.value];
	}

	if (this.mainObject)
	{
		var fields = this.mainObject.getFields();
		for (var i = 0; i < fields.length; i++)
		{
			args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name)];
		}
	}

	//ALib.m_debug = true;
	//AJAX_TRACE_RESPONSE = true;
	ajax.m_method = AJAX_POST;
	ajax.exec(url, args);
}
*/

/**
* @fileOverview This is a select input used for selecting an object type
*/

/**
 * Class constructor
 */
function AntObjectTypeSel(value)
{
	/**
	 * Current value
	 *
	 * @var {string}
	 */
	this.value = value || "";

	/**
	 * Data object used for callback
	 *
	 * @var {Object}
	 */
	this.cbData = new Object();
}

/**
 * Callback fired when the user selects an object type
 *
 * @public
 * @param {string} objType Name of the object type selected
 */
AntObjectTypeSel.prototype.onchange = function(objType)
{
}

/**
 * Get value method
 *
 * @public
 */
AntObjectTypeSel.prototype.getValue = function()
{
	return this.value;
}


/**
 * Render the select button in the dom tree
 *
 * @public
 * @param {DOMElement} con The container where the select dropdown will be printed
 */
AntObjectTypeSel.prototype.render = function(con)
{
	var dmcon = new CDropdownMenu();
	var dcon = dmcon.addCon();
	dcon.onclick = function() { };
	var in_con = alib.dom.createElement("div", dcon);
	alib.dom.styleSet(in_con, "padding-left", "5px");
	alib.dom.styleSet(in_con, "width", "180px");
	alib.dom.styleSet(in_con, "max-height", "300px");
	alib.dom.styleSet(in_con, "overflow", "auto");

	var funct = function(in_con, dropDown, cls)
	{
		cls.loadTypes(in_con, dropDown);
	}
	con.appendChild(dmcon.createButtonMenu("Select", funct, [in_con, dmcon, this], "b1"));
}

/**
 * Load object types
 *
 * @private
 */
AntObjectTypeSel.prototype.loadTypes = function(con, dropDown)
{
	con.innerHTML = "<div class='loading'></div>";

	var ajax = new CAjax('json');
    ajax.cbData.cls = this;    
    ajax.cbData.con = con;
    ajax.cbData.dropDown = dropDown;
    ajax.onload = function(ret)
    {
		this.cbData.con.innerHTML = "";

		for (var i in ret)
		{
			var row = alib.dom.createElement("div", this.cbData.con);
			alib.dom.styleSet(row, "padding", "5px 0 5px 0");
			alib.dom.styleSet(row, "cursor", "pointer");

			row.innerHTML = ret[i].title;
			row.otype = ret[i].name;
			row.cbData = this.cbData;
			row.onclick = function() {
				this.cbData.cls.onchange(this.otype);
				this.cbData.dropDown.unloadMe();
			}
		}
    };
    
	ajax.exec("/controller/Object/getObjects");
}

/*======================================================================================
	
	Class:		CAntObjectCond

	Purpose:	CAntObjectCond is an object that stores an array of conditions 
				relating to a specific object type.

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Usage:		// Display advanced condition form for user
				var obj = new CAntObject("customer"); // get object definition
				var conditions = obj.buildAdvancedQuery(document.body);

				// Form will be printed, user can modify values, to get values simply do the following
				for (var i = 0; i < conditions.getNumConditions(); i++)
				{
					var cond = conditions.getCondition(i);
					// Do something with: cond.blogic, cond.fieldName, cond.operator, cond.condValue
				}

				// To load a conditions object into a form for user
				var conditions = new CAntObjectCond();
				conditions.addCondition("and", "first_name", "is_equal", "myfirstname");
				var newConditions = obj.buildAdvancedQuery(document.body, conditions);
				// The form will be built using the values from the second param passed
				

======================================================================================*/


/*************************************************************************************
*	Description:	CAntObjectCond	
*
*	Purpose:		CAntObjectCond is an object that stores an array of conditions 
*					with the following properties:
*					blogic
*					fieldName
*					operator
*					condValue
**************************************************************************************/

function CAntObjectCond()
{
	this.conditions = new Array();
	this.last_id = 1;
}

CAntObjectCond.prototype.addWatchCondition = function(cbLogic, cbFieldName, cbOperator, cbId)
{    
    var id = this.last_id++;
	
	var cond = new Object();
	cond.id = id;
	this.id;

	// and/or
	var bl_funct = function(evnt)
	{
		if (alib.userAgent.ie)
			evnt.srcElement.m_cond.blogic = evnt.srcElement.value
		else
			this.m_cond.blogic = this.value;
	}
	cond.blogic = cbLogic.value;
	cbLogic.m_cond = cond;
	alib.dom.addEvntListener(cbLogic, "change", bl_funct);

	// Field name
	var fn_funct = function(evnt)
	{
		if (alib.userAgent.ie)
			evnt.srcElement.m_cond.fieldName = evnt.srcElement.value
		else
			this.m_cond.fieldName = this.value;
	}
	cond.fieldName = cbFieldName.value;
	cbFieldName.m_cond = cond;
	alib.dom.addEvntListener(cbFieldName, "change", fn_funct);

	// Operator
	var op_funct = function(evnt)
	{
		if (alib.userAgent.ie)
			evnt.srcElement.m_cond.operator = evnt.srcElement.value
		else
			this.m_cond.operator = this.value;
	}
	cond.operator = cbOperator.value;
	cbOperator.m_cond = cond;
	alib.dom.addEvntListener(cbOperator, "change", op_funct);

    cond.condId = cbId; // the id that is retrieved from the database
	this.conditions[this.conditions.length] = cond;

	return id;
}

CAntObjectCond.prototype.addWatchConditionVal = function(cid, valueField)
{
	var cond = this.getConditionById(cid);

	// Value
	if (cond)
	{
        // We need to check if value field is undefined before setting condition value
        if(typeof valueField.value !== "undefined")
            cond.condValue = valueField.value;
            
		valueField.cond = cond;
		var cond_funct = function(evnt)
		{
			if (alib.userAgent.ie)
				evnt.srcElement.cond.condValue = evnt.srcElement.value
			else
				this.cond.condValue = this.value;
		}
		alib.dom.addEvntListener(valueField, "change", cond_funct);
	}
}

CAntObjectCond.prototype.addWatchConditionDynSel = function(cid, sel)
{
	var cond = this.getConditionById(cid);

	// Value
	if (cond)
	{
		cond.condValue = sel.value;
		sel.cond = cond;
		sel.onSelect = function(id, name)
		{
			this.cond.condValue = this.value;
		}
	}
}

CAntObjectCond.prototype.addWatchConditionObSel = function(cid, ob)
{
	var cond = this.getConditionById(cid);

	// Value
	if (cond)
	{
		cond.condValue = sel.value;
		sel.cond = cond;
		sel.onSelect = function(id, name)
		{
			this.cond.condValue = this.value;
		}

		ob.cond = cond;
		ob.onSelect = function(oid) 
		{ 
			this.cond.condValue = oid;
		}
	}
}

CAntObjectCond.prototype.addWatchConditionBrowse = function(cid, condVal)
{
	var cond = this.getConditionById(cid);
	
	if (cond)
		cond.condValue = condVal;
}

CAntObjectCond.prototype.delCondition = function(id) 
{
	for (var i = 0; i < this.conditions.length; i++)
	{
		if (this.conditions[i].id == id)
			this.conditions.splice(i, 1);
	}
}

CAntObjectCond.prototype.getNumConditions = function() 
{
	return this.conditions.length;
}

CAntObjectCond.prototype.getConditionById = function(id) 
{
	for (var i = 0; i < this.conditions.length; i++)
	{
		if (this.conditions[i].id == id)
			return this.conditions[i];
	}

	return null;
}

CAntObjectCond.prototype.getCondition = function(index) 
{
	return this.conditions[index];
}

CAntObjectCond.prototype.clearConditions = function() 
{
	return this.conditions = new Array();
}

CAntObjectCond.prototype.getCondDesc = function(obj_type)
{
	var obj = (obj_type) ? new CAntObject(obj_type) : null
	var buf = "";
	var con = alib.dom.createElement("span");

	for (var i = 0; i < this.conditions.length; i++)
	{
		if (i > 0)
		{
			var tmp_con = alib.dom.createElement("span", con);
			tmp_con.innerHTML = ", " + this.conditions[i].blogic + " ";
		}

		var ftitle = this.conditions[i].fieldName;
		var opname = this.conditions[i].operator;
		var cndval = this.conditions[i].condValue;
		if (obj)
		{
			var field = obj.getFieldByName(this.conditions[i].fieldName);
			ftitle = field.title;

			var type_opts = obj.getCondOperators(field.type);
			for (var j = 0; j < type_opts.length; j++)
			{
				if (type_opts[j][0] == this.conditions[i].operator)
				{
					opname = type_opts[j][1];
				}
			}

			// replace last/next (x) with value
			if (opname.search(/last \(x\)/i)!=-1 || opname.search(/next \(x\)/i)!=-1)
			{
				opname = opname.replace("(x)", cndval);
				cndval = "";
			}

			var tmp_con = alib.dom.createElement("span", con);
			tmp_con.innerHTML = ftitle + " " + opname + " ";

			if (field.type == "fkey" || field.type == "fkey_multi")
			{
				var valname_con = alib.dom.createElement("span", con);
				this.setForeignValueLabel(obj_type, field.name, cndval, valname_con);
			}
			else
			{
				tmp_con.innerHTML += cndval;
			}
		}
		else
		{
			var tmp_con = alib.dom.createElement("span", con);
			tmp_con.innerHTML = ftitle + " " + opname + " " + cndval;
		}

		//buf += ftitle + " " + opname + " " + cndval;
	}

	return con;
}

/*************************************************************************************
*	Description:	getForeignValueLabel	
*
*	Purpose:		Get the label for a fkey value (used mostly for drop-downs) when
*					object is not loaded. The con will be set with the appropriate value
**************************************************************************************/
CAntObjectCond.prototype.setForeignValueLabel = function(obj_type, field_name, id, con)
{
	if (obj_type)
	{
        ajax = new CAjax('json');
        ajax.cbData.con = con;
        ajax.onload = function(ret)
        {
            if (!ret['error'])
                this.cbData.con.innerHTML = unescape(ret);
        };
        var args = [["obj_type", obj_type], ["field", field_name], ["id", id]];
        ajax.exec("/controller/Object/getFkeyValName", args);
        //var rpc = new CAjaxRpc("/controller/Object/getFkeyValName", "getFkeyValName", args, cbdone, [con], AJAX_POST, true, "json");
	}
}

/**
* @fileOverview Ant.EntityDefinitionEdit: Dialog to edit properties of an object
*
* @author: joe, sky.stebnicki@aereus.com; 
* Copyright (c) 2011-13 Aereus Corporation. All rights reserved.
*/
Ant.EntityDefinitionEdit = function(object_type)
{
	this.obj_type = object_type;
	this.g_antObject = new CAntObject(object_type, null);
	this.form_tbl = new CToolTable("100%");
    this.g_tbl = new CToolTable("100%");
	this.viewTbl = new CToolTable("100%");
	this.frmObj = new Object();
	this.default_mobile_form = false;
	this.default_form = false;
	this.g_references = [];
	this.g_theme = Ant.m_theme;
	this.getObjects();
}


/**
* Display dialog
*
* @param {object} parentDlg Dialog of parent
*/
Ant.EntityDefinitionEdit.prototype.showDialog = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.m_dlg = new CDialog("Object Editor", this.parentDlg);
	this.m_dlg.f_close = true;
	var dlg = this.m_dlg;

	this.body_dv = alib.dom.createElement("div");
	
	dlg.customDialog(this.body_dv, 800);
	this.buildInterface();
	dlg.reposition();
}

/**
* Build object edit interface
*/
Ant.EntityDefinitionEdit.prototype.buildInterface = function()
{	
	var main_con = alib.dom.createElement("div", this.body_dv);
	//alib.dom.styleSetClass(main_con, "wizardBody"); // removed to clear the dual scrollbars
	main_con.innerHTML = "";
	
	// Create add table frame
	var frm_gen = new CWindowFrame("General Properties", null, "3px");
	var frmcon = frm_gen.getCon();
	this.buildGeneralForm(frmcon);
	frm_gen.print(main_con);

	// Add tabs
	// --------------------------------------
	var tabs = new CTabs();
	var tabcon1 = tabs.addTab("Properties");	// Properties Details
	this.tabProperties(tabcon1);
	var tabcon2 = tabs.addTab("Forms");			// Forms
	tabcon2.id = "form_tab";
	this.tabForm(tabcon2);
	
    var viewsTab = tabs.addTab("Views");     // Views            
    viewsTab.id = "tabView";
    this.tabView(viewsTab);

    var browseTab = tabs.addTab("Browse");     // Views            
    browseTab.id = "tabBrose";
    this.tabBrowse(browseTab);
    
    // Print all tabs
    tabs.print(main_con);
	
	// Buttons
	var dv_btn = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSetClass(dv_btn, "wizardFooter");

	/*
	var btn = new CButton("Save &amp; Close", function(cls){ cls.saveObject(true); }, [this], "b1");
	btn.print(dv_btn);
	var btn = new CButton("Save Changes", function(cls){ cls.saveObject(); }, [this], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(cls){ cls.m_dlg.hide(); }, [this], "b3");
	btn.print(dv_btn);
	*/

	var btn = new CButton("Close", function(cls){ cls.refreshLocalObject(); cls.m_dlg.hide(); }, [this], "b1");
	btn.print(dv_btn);
}


/**
* Build main form
*
* @param {object} con Main container element
*/
Ant.EntityDefinitionEdit.prototype.buildGeneralForm = function(con)
{
	var tbl = alib.dom.createElement("table");
	con.appendChild(tbl);
	var tbody = alib.dom.createElement("tbody", tbl);

	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "label");
	td.innerHTML = "Title: ";
	var txtTitle = alib.dom.createElement("input");
	txtTitle.type = "text";
	txtTitle.setAttribute('maxlength', 256);
	txtTitle.value = this.g_antObject.title;
	txtTitle.onchange = function() { this.g_antObject.title = this.value; }
	td.appendChild(txtTitle);

	// Permissions
	var td = alib.dom.createElement("td", row);
    var btn = alib.ui.Button("Edit Permissions", {
		className:"b2", editCls:this,
		onclick:function() {
			loadDacl(null, '/objects/' + this.editCls.obj_type);
		}
	});                            
	btn.print(td);
}

/**
* Build properties tab
*
* @param {object} con Container of properties tab
*/
Ant.EntityDefinitionEdit.prototype.tabProperties = function(con)
{
	// Create add table frame
	var frm1 = new CWindowFrame("Add New Property", null, "3px");
	var frmcon = frm1.getCon();
	this.buildNewColForm(frmcon);
	frm1.print(con);

	// Create cols table
	var frm2 = new CWindowFrame("Properties");
	var frmcon2 = frm2.getCon();
	alib.dom.styleSet(frmcon2, "height", "258px");
	alib.dom.styleSet(frmcon2, "overflow", "auto");
	this.loadColumns(frmcon2);
	frm2.print(con);	
}

/**
* Create container to add a new field
*
* @param {object} con CWindowFrame container
*/
Ant.EntityDefinitionEdit.prototype.buildNewColForm = function(con)
{
	var tbl = ALib.m_document.createElement("table");
	tbl.cls = this;
	con.appendChild(tbl);
	var tbl_bdy = ALib.m_document.createElement("tbody");
	tbl.appendChild(tbl_bdy);
	var row = null;
	var td = null;

	// Add column name
	row = ALib.m_document.createElement("tr");
	tbl_bdy.appendChild(row);
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "Title";
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	this.frmObj.m_colname = ALib.m_document.createElement("input");
	td.appendChild(this.frmObj.m_colname);
	
	// Add column type
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "Type";
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	this.frmObj.m_coltype = ALib.m_document.createElement("select");
	this.frmObj.m_coltype.cls = this;
	this.frmObj.m_coltype.onchange = function() { this.cls.viewSubtype(this.value); }
	td.appendChild(this.frmObj.m_coltype);
	var opt = null;
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("select type", "");	
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("text", "text");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("number", "numeric");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("date", "date");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("date & time", "timestamp");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("auto incremented number", "serial");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("boolean: yes/no", "bool");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("category", "fkey");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("categories: multiple", "fkey_multi");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("File", "file");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("Folder", "folder");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("object reference: single", "object");
	this.frmObj.m_coltype[this.frmObj.m_coltype.length] = new Option("object reference: multiple", "object_multi");

	var td = alib.dom.createElement("td", row);
	td.id = "subtype_lbl";
	var td = alib.dom.createElement("td", row);
	td.id = "subtype_inp";

	// Add button
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "&nbsp;";
	td = ALib.m_document.createElement("td");
	row.appendChild(td);
	var btn = new CButton("Add", function(cls){ cls.createProperty(); }, [this], "b1");
	td.appendChild(btn.getButton());
}

/**
* Create subtype dropdown option based on type
*
* @param {string} type type selected
*/
Ant.EntityDefinitionEdit.prototype.viewSubtype = function(type)
{
	var subtconlbl = document.getElementById("subtype_lbl");
	var subtcon = document.getElementById("subtype_inp");
	subtconlbl.innerHTML = "";
	subtcon.innerHTML = "";
	this.frmObj.subtype = "";
	this.frmObj.fkey_table_key = "";
	this.frmObj.fkey_table_title = "";

	switch (type)
	{
	case 'text':
		subtconlbl.innerHTML = "Length: ";
		var sel = alib.dom.createElement("select", subtcon);
		sel.cls = this;
		sel.onchange = function() { this.cls.frmObj.subtype = this.value; }
		sel[sel.length] = new Option("Unlimited", "");
		sel[sel.length] = new Option("Up To 512 Chars", "512");
		sel[sel.length] = new Option("Up To 256 Chars", "256");
		sel[sel.length] = new Option("Up To 128 Chars", "128");
		sel[sel.length] = new Option("Up To 64 Chars", "64");
		sel[sel.length] = new Option("Up To 32 Chars", "32");
		sel[sel.length] = new Option("Up To 16 Chars", "16");
		sel[sel.length] = new Option("Up To 8 Chars", "8");
		break;
	case 'fkey':
	case 'fkey_multi':
		this.frmObj.subtype = "object_groupings";
		break;
	/*
	case 'fkey':
	case 'fkey_multi':
		subtconlbl.innerHTML = "References: ";
		var sel = alib.dom.createElement("select", subtcon);
		sel.cls = this;
		sel.onchange = function() 
		{ 
			this.cls.frmObj.subtype = this.value; 
			for(var i = 0; i < this.cls.g_references.length; i++)
			{
				if(this.cls.g_references[i][1] == this.value)
				{
					this.cls.frmObj.fkey_table_key = this.cls.g_references[i][3];
					this.cls.frmObj.fkey_table_title = this.cls.g_references[i][4];
				}
			}
		}

		for (var i = 0; i < this.cls.g_references.length; i++)
		{
			sel[sel.length] = new Option(this.cls.g_references[i][0], this.cls.g_references[i][2]);
		}

		this.cls.frmObj.fkey_table_key = this.cls.g_references[0][3];
		this.cls.frmObj.fkey_table_title = this.cls.g_references[0][4];
		break;
		*/
	case 'object':
	case 'object_multi':
		subtconlbl.innerHTML = "References: ";
		var sel = alib.dom.createElement("select", subtcon);
		sel.cls = this;
		sel.onchange = function() 
		{ 
			this.cls.frmObj.subtype = this.value; 
		}

		for (var i = 0; i < this.g_references.length; i++)
		{
			sel[sel.length] = new Option(this.g_references[i][0], this.g_references[i][1]);
		}
		break;
	case '':
		subtconlbl.innerHTML = "";
		break;
	}
}

/**
 * Create Property
 */
Ant.EntityDefinitionEdit.prototype.createProperty = function()
{
	var xhr = new alib.net.Xhr();

	// Setup callback
	alib.events.listen(xhr, "load", function(evt) { 
		var data = this.getResponse();

		if (data.error)
		{
			alert(data.error);
		}
		else
		{
			// Clear col title for next property
			evt.data.editClass.frmObj.m_colname.value = "";

			// Add field to the table
			evt.data.editClass.addProperty(data);

			// Refresh the object definition
			evt.data.editClass.refreshLocalObject();
		}

	}, {editClass:this});

	// There was some error like a timeout
	alib.events.listen(xhr, "error", function(evt) { 
	}, {editClass:this});

	// Send field to controller
	var fieldData = {
		obj_type : this.obj_type,
		name : this.escapePropertyTitle(this.frmObj.m_colname.value),
		title : this.frmObj.m_colname.value,
		notes : "",
		type : this.frmObj.m_coltype.value,
		subtype : this.frmObj.subtype,
		readonly : false,
		system : false,
		required : false
	};
	/*
	field.fkey_table_key 	= this.frmObj.fkey_table_key;
	field.fkey_table_title	= this.frmObj.fkey_table_title;
	*/

	var ret = xhr.send("/controller/Object/addField", "POST", fieldData);

	/* This was the old code
	this.g_antObject.addField(field);
	this.addProperty(field);
	*/
}

/**
 * Make field.name lowercase alphanumeric
 * @param {string} title Field.title
 */
Ant.EntityDefinitionEdit.prototype.escapePropertyTitle = function(title)
{
	var name = title.toLowerCase();
	name = name.replace(" ", "_");
	//name = namestr.replace("'", "");
	name = name.replace(/[^a-zA-Z0-9_]+/g,'');
	return name;
}

/**
* Add new field to Properties table
* @param {string} field Field to add
*/
Ant.EntityDefinitionEdit.prototype.addProperty = function(field)
{
	if (field.name && field.type)
	{
		var rw = this.g_tbl.addRow();
		// Add name
		rw.addCell(field.title);
		rw.addCell(field.name);
		// Add type
		rw.addCell(field.type);
		// Add required
		var cb = alib.dom.createElement("input");
		cb.type = "checkbox";
		cb.checked = field.required;
		cb.fname = field.name;
		cb.cls = this;
		if (field.readonly)
			cb.disabled = true;
		else
			cb.onclick = function() { this.cls.setFieldRequired(this.fname, this.checked); }
		rw.addCell(cb, false, "center");
		// Add dropdown
		var dd_div = alib.dom.createElement("div");
		if (!field.readonly && (field.type == "text" || field.type == "number"))
		{
			var ddlnk = alib.dom.createElement("a", dd_div);
			ddlnk.href = 'javascript:void(0);'
			ddlnk.innerHTML = "edit drop-down values";
			ddlnk.fname = field.name;
			ddlnk.cls = this;
			ddlnk.onclick = function() { this.cls.fieldEditOptionalValues(this.fname); }
		}
		else if (!field.readonly && (field.type == "fkey" || field.type == "fkey_multi"))
		{
			var ddlnk = alib.dom.createElement("a", dd_div);
			ddlnk.href = 'javascript:void(0);'
			ddlnk.innerHTML = "edit values";
			ddlnk.fname = field.name;
			ddlnk.cls = this;
			ddlnk.onclick = function() { this.cls.fieldEditGroupingValues(this.fname); }
		}
		rw.addCell(dd_div, false, "center");
		// Add default 
		var def_div = alib.dom.createElement("div");
		if (!field.readonly && field.type != "fkey_multi" && field.type != "object_multi")
		{
			var ddlnk = alib.dom.createElement("a", def_div);
			ddlnk.href = 'javascript:void(0);'
			ddlnk.innerHTML = "set default";
			ddlnk.fname = field.name;
			ddlnk.cls = this;
			ddlnk.onclick = function() { this.cls.fieldLoadDefault(this.fname); }
		}
		rw.addCell(def_div, false, "center");
		// Add delete
		if (field.system)
		{
			rw.addCell("&nbsp;", true, "center");
		}
		else
		{
			var del_dv = ALib.m_document.createElement("div");
			rw.addCell(del_dv, true, "center");
			del_dv.innerHTML = "<img border='0' src='/images/icons/delete_16.png' />";
			alib.dom.styleSet(del_dv, "cursor", "pointer");
			del_dv.m_rw = rw;
			del_dv.m_name = field.name;
			del_dv.cls = this;
			del_dv.onclick = function()
			{
				if (confirm("Are you sure you want to delete "+this.m_name+"?"))
				{
					this.cls.deleteCol(this.m_name, this.m_rw);
				}
			}
		}
	}
}

/**
* Set field required
* @param {string} fname = field name
* @param {boolean} required
*/
Ant.EntityDefinitionEdit.prototype.setFieldRequired = function(fname, required)
{
	// Check for existing field
	var field = this.g_antObject.getFieldByName(fname);
	if(field) // Update existing field
	{
        ajax = new CAjax('json');        
        var args = [["obj_type", this.g_antObject.name], ["name", fname], ["required", (required)?'t':'f']];
        ajax.exec("/controller/Object/fieldSetRequired", args);
	}
	else
	{
		for(var i = 0; i < this.g_antObject.addFields.length; i++)
		{
			if(this.g_antObject.addFields[i].name == fname)
				this.g_antObject.addFields[i].required = required;
		}
	}
}

/**
* Edit optional values of field
* @param {string} fname Field name
*/
Ant.EntityDefinitionEdit.prototype.fieldEditOptionalValues = function(fname)
{
	var field = this.g_antObject.getFieldByName(fname);
	if (!field)
	{
		ALib.Dlg.messageBox("Please save changes before editing optional values for this field", this.m_dlg);
		return;
	}

	var dlg = new CDialog("Optional Values for " + field.title, this.m_dlg);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 300);

	var cbValues = alib.dom.createElement("select");

	// new value
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Add New Value";
	var inp_dv = alib.dom.createElement("div", dv);
	var txtVal = alib.dom.createElement("input", inp_dv);
	alib.dom.styleSet(txtVal, "width", "220px");
	alib.dom.styleSet(txtVal, "margin-right", "3px");
	var btn = new CButton("Add", 
	function(cls, txtVal, cbValues, fname) 
	{ 
		cls.fieldEditOptionalValuesAdd(txtVal, cbValues, fname);
	}, [this, txtVal, cbValues, field.name], "b2");
	btn.print(inp_dv);

	// optional values
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Drop-Down Values";
	var inp_dv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(cbValues, "width", "98%");
	cbValues.size = 10;
	inp_dv.appendChild(cbValues);

	if (field.optional_vals && field.optional_vals.length)
	{
		for (var i = 0; i < field.optional_vals.length; i++)
			cbValues[cbValues.length] = new Option(field.optional_vals[i][1], field.optional_vals[i][0]);
	}

	var del = alib.dom.createElement("a", inp_dv);
	del.innerHTML = "Delete Selected";
	del.href = "javascript:void(0);";
	del.options = {cls:this, cbv:cbValues, fname:field.name}
	del.onclick = function()
	{
		this.options.cls.fieldEditOptionalValuesDeleteSel(this.options.cbv, this.options.fname);
	}

	// Action Buttons
	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");
	var btn = new CButton("Done", function(dlg) { dlg.hide(); }, [dlg], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg], "b3");
	btn.print(dv_btn);

	// make sure we are centered
	dlg.reposition();
}

/**
* Add optional values of field
* @param {string} txt Text Value
* @param {string} cb cb values
* @param {string} fname Field Names
*/
Ant.EntityDefinitionEdit.prototype.fieldEditOptionalValuesAdd = function(txt, cb, fname)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.txt = txt;
    ajax.cbData.cb = cb;    
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if (!ret.error)
        {
            this.cbData.cb[this.cbData.cb.length] = new Option(this.cbData.txt.value, this.cbData.txt.value); 

            var field = this.cbData.cls.g_antObject.getFieldByName(fname);
            if (field && field.optional_vals)
                field.optional_vals[field.optional_vals.length] = [this.cbData.txt.value, this.cbData.txt.value, false, ""];

            this.cbData.txt.value='';
        }
    };
    var args = [["obj_type", this.g_antObject.name], ["name", fname], ["value", txt.value]];
    ajax.exec("/controller/Object/fieldAddOption", args);
}

/**
* Delete optional values of field
* @param {string} cb cb values
* @param {string} fname Field Names
*/
Ant.EntityDefinitionEdit.prototype.fieldEditOptionalValuesDeleteSel = function(cb, fname)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.cb = cb;
    ajax.cbData.fname = fname;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if (!ret.error)
        {
            var field = this.cbData.cls.g_antObject.getFieldByName(this.cbData.fname);
            if (field && field.optional_vals && field.optional_vals.length)
            {
                for (var i = 0; i < field.optional_vals.length; i++)
                {
                    if (field.optional_vals[i][0] == this.cbData.cb.value)
                        field.optional_vals.splice(i, 1);
                }
            }

            for (var i = 0; i < this.cbData.cb.options.length; i++)
            {
                if (this.cbData.cb.options[i].selected)
                    this.cbData.cb.options[i] = null;
            }
        }
    };
    var args = [["obj_type", this.g_antObject.name], ["name", fname], ["value", cb.value]];
    ajax.exec("/controller/Object/fieldDeleteOption", args);
}

/**
* Edit optional values of field
* @param {string} fname Field name
*/
Ant.EntityDefinitionEdit.prototype.fieldEditGroupingValues = function(fname)
{
	var field = this.g_antObject.getFieldByName(fname);
	if (!field)
	{
		ALib.Dlg.messageBox("Please save changes before editing optional values for this field", this.m_dlg);
		return;
	}

	var dlg = new CDialog("Values for " + field.title, this.m_dlg);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 500);

	// Pre-create for the add link below
	var inp_dv = alib.dom.createElement("div");

	// Add new grouping
	var addcon = alib.dom.createElement("div", dv);
	alib.dom.styleSet(addcon, "padding", "5px");
	var add = alib.dom.createElement("a", addcon);
	add.innerHTML = "Add Value";
	add.href = "javascript:void(0);";
	add.con = inp_dv;
	add.fname = fname;
	add.cls = this;
	add.onclick = function()
	{
		this.cls.addGrouping(this.con, this.fname);
	}

	// optional values
	dv.appendChild(inp_dv);
	alib.dom.styleSet(inp_dv, "height", "200px");
	alib.dom.styleSet(inp_dv, "overflow", "auto");

	this.fieldGroupingsLoadValues(fname, inp_dv)

	// Action Buttons
	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");
	var btn = new CButton("Done", function(dlg) { dlg.hide(); }, [dlg], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg], "b3");
	btn.print(dv_btn);

	// make sure we are centered
	dlg.reposition();
}

/**
* Get grouping values
*
* @param {string} fname Field Names
*/
Ant.EntityDefinitionEdit.prototype.fieldGroupingsLoadValues = function(fname, con)
{
	con.innerHTML = "";

	var tbl = new CToolTable("100%");

	tbl.addHeader("Id", "center", "15px");
	tbl.addHeader("Name (click to rename)");
	//tbl.addHeader("Sort Order", "center", "70px");
	//tbl.addHeader("Closed", "center", "60px");
	tbl.addHeader("Color", "center", "50px");
	tbl.addHeader("Delete", "center", "20px");

	tbl.print(con);

	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.tbl = tbl;
	ajax.cbData.fname = fname;
	ajax.onload = function(groupings)
	{
		if (groupings.length)
		{
			this.cbData.cls.populateGroupings(this.cbData.tbl, groupings, this.cbData.fname);
		}
	};
	ajax.exec("/controller/Object/getGroupings", 
			  [["obj_type", this.obj_type], ["field", fname]]);
}

/**
* Populate groupings into a row
*
* @this {Ant.EntityDefinitionEdit}
* @param {CToolTable} tbl The table we are printing all the groups to
* @param {Array} groupings Array of groupings objects
* @param {string} fname The name of the field we are updating
*/
Ant.EntityDefinitionEdit.prototype.populateGroupings = function(tbl, groupings, fname)
{
	for (var i = 0; i < groupings.length; i++)
	{
		var row = tbl.addRow();

		// Rename
		var rena = alib.dom.createElement("a");
		rena.href = "javascript:void(0)";
		rena.innerHTML = groupings[i].title;
		rena.cls = this;
		rena.curname = groupings[i].title;
		rena.gid = groupings[i].id;
		rena.fname = fname;
		rena.onclick = function()
		{
			this.cls.renameGrouping(this.fname, this.gid, this.curname, this);
		}
		if (groupings[i].system)
			rena = groupings[i].title;

		// Sort order
		var sorder = alib.dom.createElement("select");
		sorder.onchange = function() { };
		for (var j = 0; j < groupings.length; j++)
		{
			sorder[sorder.length] = new Option(j+1, j+1, false, (j==i)?true:false);
		}
		if (groupings[i].system)
			sorder = "&nbsp;";

		// Closed
		var cb = alib.dom.createElement("input");
		cb.type = "checkbox";
		cb.checked = groupings[i].f_closed;
		cb.onclick = function()
		{
		}
		if (groupings[i].system)
			cb = "&nbsp;";

		// Color
		var clr_con = alib.dom.createElement("div");
		if (groupings[i].color)
			clr_con.style.backgroundColor = "#"+groupings[i].color;
		var dm = new CDropdownMenu();
		for (var j = 0; j < G_GROUP_COLORS.length; j++)
		{
			dm.addEntry(G_GROUP_COLORS[j][0], function(cls, fname, lnkcon, id, color) { cls.changeGroupingColor(fname, lnkcon, color, id) }, null, 
							  "<div style='width:9px;height:9px;background-color:#" + G_GROUP_COLORS[j][1] + "'></div>",
							  [this, fname, clr_con, groupings[i].id, G_GROUP_COLORS[j][1]]);
		}
		clr_con.appendChild(dm.createLinkMenu("set color"));

		// Delete
		var dela = alib.dom.createElement("a");
		dela.innerHTML = "<img src='/images/icons/deleteTask.gif' border='0'>";
		dela.href = "javascript:void(0)";
		dela.cls = this;
		dela.fname = fname;
		dela.gid = groupings[i].id;
		dela.gname = groupings[i].title;
		dela.row = row;
		dela.onclick = function()
		{
			if (confirm("Are you sure you want to delete " + this.gname + "?"))
			{
				this.cls.deleteGrouping(this.fname, this.gid, this.row);
			}
		}
		if (groupings[i].system)
			dela = "&nbsp;";

		row.addCell(groupings[i].id, false, "center");
		row.addCell(rena);
		//row.addCell(sorder, false, "center");
		//row.addCell(cb, false, "center");
		row.addCell(clr_con, false, "center");
		row.addCell(dela, true, "center");
	}
}


/**
* Change the color of a grouping field like category or status
*/
Ant.EntityDefinitionEdit.prototype.changeGroupingColor = function(field_name, clrdv, clr, gid)
{
	ajax = new CAjax('json');
	ajax.cbData.clrdv = clrdv;
	ajax.cbData.clr = clr;
	ajax.onload = function(ret)
	{
		if (ret)
		{
			alib.dom.styleSet(this.cbData.clrdv, "background-color", "#"+this.cbData.clr);
		}
	};
	ajax.exec("/controller/Object/setGroupingColor", 
			  [["obj_type", this.obj_type], ["field", field_name], ["color", clr], ["gid", gid]]);
}

/**
* Add a grouping field value
*/
Ant.EntityDefinitionEdit.prototype.addGrouping = function(con, field_name)
{
    var name = prompt('Enter a name for new subgroup', "New Group");

    if (!name)
        return;

	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.field_name = field_name;
	ajax.cbData.con = con;
	ajax.onload = function(ret)
	{
		if (ret && ret.id)
		{
			this.cbData.cls.fieldGroupingsLoadValues(this.cbData.field_name, this.cbData.con);
			// Update AntObject cached definition
			Ant.EntityDefinitionLoader.get(this.cbData.cls.obj_type).load();
		}
	};
	ajax.exec("/controller/Object/createGrouping", 
			  [["obj_type", this.obj_type], ["field", field_name], ["parent_id", ""], ["title", name]]);
}

/**
* Rename a grouping field value
*/
Ant.EntityDefinitionEdit.prototype.renameGrouping = function(field_name, gid, gname, lbldv)
{
    var ldiv = (typeof(lbldv) != "undefined") ? lbldv : null;

    var name = prompt('Enter a name', gname);

    if (!name)
        return;

	ajax = new CAjax('json');
	ajax.cbData.lbldv = ldiv;
	ajax.cbData.title = name;
	ajax.onload = function(ret)
	{
		if (ret && this.cbData.lbldv)
		{
			this.cbData.lbldv.innerHTML = this.cbData.title;
		}
	};
	ajax.exec("/controller/Object/renameGrouping", 
			  [["obj_type", this.obj_type], ["field", field_name], ["title", name], ["gid", gid]]);
}

/**
* Delete a grouping field value
**/
Ant.EntityDefinitionEdit.prototype.deleteGrouping = function(field_name, gid, row)
{
	ajax = new CAjax('json');
	ajax.cbData.row = row;
	ajax.onload = function(ret)
	{
		if (ret)
			this.cbData.row.deleteRow();
	};
	ajax.exec("/controller/Object/deleteGrouping", 
			  [["obj_type", this.obj_type], ["field", field_name], ["gid", gid]]);
}

/**
* Load default field
* @param {string} fname Field Names
*/
Ant.EntityDefinitionEdit.prototype.fieldLoadDefault = function(fname)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.fname = fname;
    ajax.onload = function(ret)
    {
        if(ret)
            this.cbData.cls.fieldEditDefault(this.cbData.fname, ret);
    };
    var args = [["obj_type", this.g_antObject.name], ["name", fname]];
    ajax.exec("/controller/Object/fieldGetDefault", args);
}

/**
* Edit defaults for a field
* @param {string} fname Field Names
* @param {string} currdef  Default value
*/
Ant.EntityDefinitionEdit.prototype.fieldEditDefault = function(fname, currdef)
{
	var field = this.g_antObject.getFieldByName(fname);
	if (!field)
	{
		ALib.Dlg.messageBox("Please save changes before editing defaults for this field", this.m_dlg);		
		return;
	}
		
	var frmData = {on:currdef.on, value:currdef.value, fname:fname}; // Store from values

	var dlg = new CDialog("Default values for " + field.title, this.m_dlg);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 300);

	// new value
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Use default when field value is:";
	var inp_dv = alib.dom.createElement("div", dv);
	var cbOn = alib.dom.createElement("select");
	cbOn[cbOn.length] = new Option("none - no default value", "", false, (currdef.on=="")?true:false);
	cbOn[cbOn.length] = new Option("null - value is not set", "null", false, (currdef.on=="null")?true:false);
	cbOn[cbOn.length] = new Option("update - object is updated", "update", false, (currdef.on=="update")?true:false);
	cbOn[cbOn.length] = new Option("create - object is created", "create", false, (currdef.on=="create")?true:false);
	cbOn.frmData = frmData;
	cbOn.onchange = function() { this.frmData.on = this.value; }
	inp_dv.appendChild(cbOn);

	// optional values
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Set value to:";
	var inp_div = alib.dom.createElement("div", dv);
	this.g_antObject.fieldCreateValueInput(inp_div, field.name, currdef.value);
	if (inp_div.inpRef)
	{
		inp_div.inpRef.frmData = frmData;
		frmData.value = inp_div.inpRef.value;
		switch(inp_div.inptType)
		{
		case "checkbox":
			inp_div.inpRef.onclick = function() { this.frmData.value = (this.checked) ? 't' : 'f'; }
			break;
		case "text":
		case "input":
			alib.dom.styleSet(inp_div.inpRef, "width", "90%");
		case "select":
			inp_div.inpRef.onchange = function() { this.frmData.value = this.value; }
			break;
		case "dynselect":
			inp_div.inpRef.onSelect = function() { this.frmData.value = this.value; }
			break;
		}
	}

	// Action Buttons
	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");
	var btn = new CButton("Done", 
	function(cls, dlg, frmData) 
	{  
		cls.fieldEditDefaultSet(frmData);
		dlg.hide(); 
	}, [this, dlg, frmData], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg]);
	btn.print(dv_btn);

	dlg.reposition();
}

/**
* Edit default set of field
* @param {string} frmData Form data
*/
Ant.EntityDefinitionEdit.prototype.fieldEditDefaultSet = function(frmData)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret.status)
            ALib.statusShowAlert(ret.status, 3000, "bottom", "right");
    };
    var args = [["obj_type", this.g_antObject.name], ["name", frmData.fname], ["on", frmData.on], ["value", frmData.value]];
    ajax.exec("/controller/Object/fieldSetDefault", args);
}

/**
* Build form tab
* @param {object} con Container of form tab
*/
Ant.EntityDefinitionEdit.prototype.tabForm = function(con)
{
	con.innerHTML = "";

	var p = alib.dom.createElement("p", con);
	alib.dom.styleSetClass(p, "notice");
	p.innerHTML = "Forms define how objects are viewed and edited. Each object type will always have two "+
					"required form views: a default view for everyone and then a mobile view for mobile/smartphone "+
					"users. Both of these forms can be fully customized. In addition to the defaults, new forms can be "+
					"created for individual users and teams.";
	
	this.form_tbl.print(con);
	//this.form_tbl.addHeader("Type Id");
	this.form_tbl.addHeader("Scope");
	this.form_tbl.addHeader("Team");
	this.form_tbl.addHeader("User");
	this.form_tbl.addHeader("Edit");
	this.form_tbl.addHeader("Delete");
	
	// Add forms to form_tbl
	this.addFrmTbl();
	
	var op_con = alib.dom.createElement("div", con);
	
	var sel = alib.dom.createElement("select", op_con);
	alib.dom.styleSet(sel, "float", "left");
	sel.cls = this;
	sel.onchange = function() { this.cls.newForm(this.value); }
	sel[sel.length] = new Option("Create New Form", "");
	sel[sel.length] = new Option("Team Form", "team");
	sel[sel.length] = new Option("User Form", "user");
	
	var btn_con = alib.dom.createElement("div", op_con);
	var btn = new CButton("Refresh", function(cls){ cls.addFrmTbl(); }, [this], "b1");
	btn_con.appendChild(btn.getButton());
	
}

/**
* Open default form in form_editor
* @param {string} type Rype of form (team/user)
*/
Ant.EntityDefinitionEdit.prototype.newForm = function(type)
{
	if(type == "team")
	{
		var url = "/objects/form_editor.php?obj_type="+this.obj_type+"&scope=Team";
		window.open(url, "", "fullscreen=yes");
	}
	if(type == "user")
	{
		var url = "/objects/form_editor.php?obj_type="+this.obj_type+"&scope=User";
		window.open(url, "", "fullscreen=yes");
	}
}

/**
* Get forms to add to form_tbl
*/
Ant.EntityDefinitionEdit.prototype.addFrmTbl = function()
{
	// Purge any existing rows in form_tbl
	this.form_tbl.clear();

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(ret)
	{
		if(ret)
		{						
			if(ret.length > 0)
			{
				this.cbData.cls.createFrmTbl(ret);
			}
			this.cbData.cls.addDefaultForms();
		}
	};
	ajax.exec("/controller/Object/getForms", [["obj_type", this.obj_type]]);
}

/**
* Populate form table
* @param {object} forms array of forms to add to table
*/
Ant.EntityDefinitionEdit.prototype.createFrmTbl = function(forms)
{
	for(form in forms)
	{
        var currentForm = forms[form];
		var row = this.form_tbl.addRow();
		var frm_obj = new Object();
		
		// type_id
		var type_id = currentForm.type_id;
		//row.addCell(type_id);

		// scope
		var scope = currentForm.scope;
		if(scope == "default")
			this.default_form = true;				// default form overridden
		if(scope == "mobile")
			this.default_mobile_form = true;		// default mobile form overridden
		row.addCell(scope);
		
		// team
		var team_id = currentForm.team_id;
		var team_name = currentForm.team_name;
		row.addCell(team_name);
		
		// user
		var user = alib.dom.createElement("div");
		var user_id = "";
		user_id = currentForm.user_id;
		objectSetNameLabel("user", user_id, user);
		row.addCell(user);
		
		frm_obj.obj_type = this.obj_type;
		frm_obj.type_id = type_id;
		frm_obj.scope = scope;
		frm_obj.user_id = user_id;
		frm_obj.team_id = team_id;
		
		// edit
		var edit_frm = alib.dom.createElement("div");
		var form_lnk = alib.dom.createElement("a", edit_frm);
		form_lnk.href = 'javascript:void(0);'
		form_lnk.innerHTML = "edit form";
		form_lnk.cls = this;
		form_lnk.form = frm_obj;
		form_lnk.onclick = function() 
		{
			var form_url = "/objects/form_editor.php?obj_type="+this.cls.obj_type;
			if(this.form.scope == "default")
				form_url += "&scope=Default";
			if(this.form.scope == "mobile")
				form_url += "&scope=Mobile";
			if(this.form.team_id != "" && this.form.team_id != null)
				form_url += "&scope=Team&team_id="+this.form.team_id;
			if(this.form.user_id != "" && this.form.user_id != null)
				form_url += "&scope=User&user_id="+this.form.user_id;
			window.open(form_url, "", "fullscreen=yes");
		}
		row.addCell(edit_frm);
		
		// delete
		var btn = new CButton("X", function(cls, form) { cls.deleteForm(form); }, [this, frm_obj], "b3");
		row.addCell(btn.getButton());
	}
}

/**
* Add default forms to table
* @param {object} forms array of forms to add to table
*/
Ant.EntityDefinitionEdit.prototype.addDefaultForms = function()
{
	// Only add static default form if not present in app_object_type_frm_layouts
	if(!this.default_form)
	{
		var row = this.form_tbl.addRow();
		row.addCell("default");
		row.addCell("");
		row.addCell("");
		var edit_frm = alib.dom.createElement("div");
		var form_lnk = alib.dom.createElement("a", edit_frm);
		form_lnk.href = 'javascript:void(0);'
		form_lnk.innerHTML = "edit form";
		form_lnk.cls = this;
		form_lnk.onclick = function()
		{
			var form_url = "/objects/form_editor.php?obj_type="+this.cls.obj_type+"&scope=Default";
			window.open(form_url, "", "fullscreen=yes");
		}
		row.addCell(edit_frm);
		row.addCell("");
	}
	
	// Only add static default mobile form if not present in app_object_type_frm_layouts
	if(!this.default_mobile_form)
	{
		var row = this.form_tbl.addRow();
		row.addCell("mobile");
		row.addCell("");
		row.addCell("");
		var edit_frm = alib.dom.createElement("div");
		var form_lnk = alib.dom.createElement("a", edit_frm);
		form_lnk.href = 'javascript:void(0);'
		form_lnk.innerHTML = "edit form";
		form_lnk.cls = this;
		form_lnk.onclick = function() 
		{
			var form_url = "/objects/form_editor.php?obj_type="+this.cls.obj_type+"&scope=Mobile&mobile=0";
			window.open(form_url, "", "fullscreen=yes");
		}
		row.addCell(edit_frm);
		row.addCell("");
	}
}

/**
* Delete Form
* @param {object} form Form to delete
*/
Ant.EntityDefinitionEdit.prototype.deleteForm = function(form)
{
	var dlg = new CDialog("Delete Form", this.m_dlg);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 240, 40);

	var lbl = alib.dom.createElement("div", dv);
	lbl.innerHTML = "Are you sure you want to delete this form?";
	dv.appendChild(lbl);
	
	var btn_dv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(btn_dv, "text-align", "right");
	var btn = new CButton("Ok", 
	function(cls, dlg, form) 
	{
		var deflt = "";
		var mobile = "";
		var scope = form.scope;
		if(form.scope == "default")
			deflt = form.scope;
		if(form.scope == "mobile")
			mobile = form.scope
			
		/*function cbdone(ret, cls, dlg)
		{
			if(ret != "-1")
			{
				// if overriden default or mobile form was deleted, default form will be used
				if("default" == scope)
					cls.default_form = false;
				if("mobile" == scope)
					cls.default_mobile_form = false;
			
				dlg.hide();
				cls.addFrmTbl();
				ALib.statusShowAlert("Form Deleted!", 3000, "bottom", "right");
			}
			else
			{
				dlg.hide();
				ALib.statusShowAlert("ERROR DELETING FORM!", 3000, "bottom", "right");
			}
		}
		var args = [["obj_type", form.obj_type], ["default", deflt], ["mobile", mobile], ["team_id", form.team_id], ["user_id", form.user_id]];
        var rpc = new CAjaxRpc("/controller/Object/deleteForm", "deleteForm", args, cbdone, [cls, dlg, scope], AJAX_POST, true, "json");*/
        
        ajax = new CAjax('json');
        ajax.cbData.cls = cls;
        ajax.cbData.dlg = dlg;
        ajax.cbData.scope = scope;
        ajax.onload = function(ret)
        {
            this.cbData.dlg.hide();
            if(ret != "-1")
            {
                // if overriden default or mobile form was deleted, default form will be used
                if("default" == this.cbData.scope)
                    this.cbData.cls.default_form = false;
                if("mobile" == this.cbData.scope)
                    this.cbData.cls.default_mobile_form = false;
                    
                this.cbData.cls.addFrmTbl();
                ALib.statusShowAlert("Form Deleted!", 3000, "bottom", "right");
            }
            else
                ALib.statusShowAlert("ERROR DELETING FORM!", 3000, "bottom", "right");
        };
        var args = [["obj_type", form.obj_type], ["default", deflt], ["mobile", mobile], ["team_id", form.team_id], ["user_id", form.user_id]];
        ajax.exec("/controller/Object/deleteForm", args);
        
	}, [this, dlg, form], "b1");
	btn.print(btn_dv);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg], "b1");
	btn.print(btn_dv);
}

/**
* Delete Column
* @param {string} cname column name
* @param {object} row Row
*/
Ant.EntityDefinitionEdit.prototype.deleteCol = function(cname, row)
{
	var field = Ant.EntityDefinitionLoader.get(this.obj_type).getField(cname);

	if (cname && row)
	{
		if (!field)
			row.deleteRow();
		else
		{
			var xhr = new alib.net.Xhr();

			// Setup callback
			alib.events.listen(xhr, "load", function(evt) { 
				var data = this.getResponse();

				if (data.error)
				{
					alert(data.error);
				}
				else
				{
					// Remove from table
					evt.data.row.deleteRow();

					// Refresh the object definition
					evt.data.editClass.refreshLocalObject();
				}

			}, {editClass:this, row:row});

			// There was some error like a timeout
			alib.events.listen(xhr, "error", function(evt) { 
			}, {editClass:this});

			var ret = xhr.send("/controller/Object/removeField", "POST", {obj_type:this.obj_type, fname:cname});
		}
	}
}

/**
* Create main properties table for objects
* @param {string} cname column name
* @param {object} con = CWindowFrame container
*/
Ant.EntityDefinitionEdit.prototype.loadColumns = function(con)
{
	this.g_tbl.print(con);
	
	// Add headers
	this.g_tbl.addHeader("Name");
	this.g_tbl.addHeader("System Name");
	this.g_tbl.addHeader("Type");
	this.g_tbl.addHeader("Required");
	this.g_tbl.addHeader("&nbsp;");
	this.g_tbl.addHeader("&nbsp;");
	//this.g_tbl.addHeader("Description");
	this.g_tbl.addHeader("Delete", "center", "50px");

	for (var i = 0; i < this.g_antObject.fields.length; i++)
	{
		var field = this.g_antObject.fields[i];

		if (field.name == "account_id") // hidden
			continue;

		this.addProperty(field);
	}
}


/**
* Reload properties table for objects
*/
Ant.EntityDefinitionEdit.prototype.reloadFieldTable = function()
{
	this.g_tbl.clear();
	this.g_antObject = new CAntObject(this.obj_type, null);
	
	for (var i = 0; i < this.g_antObject.fields.length; i++)
	{
		var field = this.g_antObject.fields[i];

		if (field.name == "account_id") // hidden
			continue;

		this.addProperty(field);
	}
}
 
/**
 * Build view tab
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 * @param {object} con Container of form tab
 */
Ant.EntityDefinitionEdit.prototype.tabView = function(con)
{
    con.innerHTML = "";

    var p = alib.dom.createElement("p", con);
    alib.dom.styleSetClass(p, "notice");
    p.innerHTML = "Views define how users see lists of this object. A view has three scopes: (1) 'Eveyone' views are applied to everyone. (2) 'team' views are only available to users who are part of a selected team. (3) 'user' views are unique to individual users. Each of these scopes can have a default view meaning the first time a user loads the object list they will see the 'default' view. 'user' defaults override 'team' defaults and 'team' defaults will override 'everyone' defaults if set.";
    
    this.viewTbl.print(con);
    this.viewTbl.addHeader("Name");
    this.viewTbl.addHeader("Scope");
    this.viewTbl.addHeader("User");
    this.viewTbl.addHeader("Team");    
    this.viewTbl.addHeader("Default", "left", "50px");
    this.viewTbl.addHeader("Edit", "left", "50px");
    this.viewTbl.addHeader("Delete", "left", "50px");
    
    // Add forms to form_tbl
    this.getViews();
    
    var btnCon = alib.dom.createElement("div", con);
    
    var btn = new CButton("Create New View", function(cls){ cls.dialogView(null, true); }, [this], "b1");    
    btnCon.appendChild(btn.getButton());
    
    var btn = new CButton("Refresh Views", function(cls){ cls.getViews(); }, [this], "b1");    
    btnCon.appendChild(btn.getButton());
}

/**
 * Get forms to add to form_tbl
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 */
Ant.EntityDefinitionEdit.prototype.getViews = function()
{
    // Purge any existing rows in form_tbl
    this.viewTbl.clear();

    // Create loading div
    var row = this.viewTbl.addRow();
    row.addCell("<div class='loading'></div>");
    
    var ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        
        if(ret)
        {
            if(ret.length > 0)
            {
                this.cbData.cls.displayViews(ret);
            }
        }
    };
    ajax.exec("/controller/Object/getViews", [["objectType", this.obj_type], ["fromViewManager", true]]);
}

/**
 * Display the object view
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 * @param {Object} viewsObj   View Object info
 */
Ant.EntityDefinitionEdit.prototype.displayViews = function(viewsObj)
{
    this.viewTbl.clear();
    for(view in viewsObj)
    {
        var currentView = viewsObj[view];
        var row = this.viewTbl.addRow();    
        row.addCell(currentView['name']);
        row.addCell(currentView['scope']);
        row.addCell(currentView['userName']);
        row.addCell(currentView['teamName']);
        
        var fDefault = "no";
        if(currentView['fDefault'] || currentView['fDefault']=='t')
            fDefault = "yes";
        
        currentView.fSystem = currentView.f_system;
        row.addCell(fDefault);
        
        var editLink = "";
        var deleteLink = "";
        if(currentView['f_system'])
        {
            // Edit Link
            var attrData = [["href", "javascript:void(0);"], ["innerHTML", "[view]"]];
            editLink = alib.dom.setElementAttr(alib.dom.createElement("a"), attrData);            
            
            // Edit Event
            editLink.cls = this;
            editLink.view = currentView;
            editLink.onclick = function()
            {
                this.cls.dialogView(this.view);
            }            
        }
        else
        {
            // Edit Link
            var attrData = [["href", "javascript:void(0);"], ["innerHTML", "[edit]"]];
            editLink = alib.dom.setElementAttr(alib.dom.createElement("a"), attrData);            
            
            // Edit Event
            editLink.cls = this;
            editLink.view = currentView;
            editLink.onclick = function()
            {
                this.cls.dialogView(this.view);
            }
            
            // Delete Link
            var attrData = [["src", "/images/icons/delete_10.png"]];
            deleteLink = alib.dom.setElementAttr(alib.dom.createElement("img"), attrData);
            alib.dom.styleSet(deleteLink, "cursor", "pointer");
            
            // Delete Event
            deleteLink.cls = this;
            deleteLink.row = row;
            deleteLink.view = currentView;
            deleteLink.onclick = function()
            {
                if(confirm("Are you sure you want to delete " + this.view['name'] + "?"))
                    this.cls.deleteView(this.view, this.row);
            }
        }
        
        row.addCell(editLink);
        row.addCell(deleteLink);
    }
}

/**
 * Displays the view dialog
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 * @param {Object} view   View info
 */
Ant.EntityDefinitionEdit.prototype.dialogView = function(view, parentDlg)
{
    var viewEditor = new AntObjectViewEditor(this.obj_type, view);
    
    viewEditor.fEditor = true;
    viewEditor.showDialog(parentDlg);
    
    // Callback Events
    viewEditor.cbData.cls = this;
    viewEditor.onSave = function(result)
    {
        this.cbData.cls.getViews();
    }
}

/**
 * Deletes the view object
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 * @param {Object} view   View info
 * @param {Element} row   View table row Element
 */
Ant.EntityDefinitionEdit.prototype.deleteView = function(view, row)
{
    ajax = new CAjax('json');
    ajax.row = row;
    ajax.onload = function(ret)
    {
        this.row.deleteRow();
    };
    
    var args = new Array();
    args[args.length] = ["dvid", view['id']];
    ajax.exec("/controller/Object/deleteView", args);
}

/**
* Populates g_references array
*/
Ant.EntityDefinitionEdit.prototype.getObjects = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(ret)
        {
            var obj_array = [];
            for(object in ret)
            {
                var currentObject = ret[object];
                obj_array[obj_array.length] = [currentObject.fullTitle, currentObject.name, currentObject.ObjectTable, "id", currentObject.listTitle];
            }
        }
        this.cbData.cls.g_references = obj_array;
    };
    ajax.exec("/controller/Object/getObjects");
}

/**
 * @deprecated We no longer use this because updates are real-time
 * Save Object
 * @param {boolean} close close dialog after saving 
Ant.EntityDefinitionEdit.prototype.saveObject = function(close)
{
	var close = (typeof close != "undefined") ? close : false;

	// Create loading div
	var dlg = new CDialog();
	dlg.parentDlg = this.m_dlg;
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";

	dlg.statusDialog(dv_load, 150, 100);

	this.g_antObject.cls = this;
	this.g_antObject.dlg = dlg;
	this.g_antObject.m_close = close;
	this.g_antObject.onsavedefinition = function()
	{
		Ant.EntityDefinitionLoader.get(this.cls.obj_type).load();
		this.cls.saveDone(this.dlg, this.m_close);
		this.cls.refreshLocalObject();
	}
	this.g_antObject.onsavedefinitionError = function()
	{
		this.dlg.hide();
		ALib.statusShowAlert("ERROR SAVING CHANGES!", 3000, "bottom", "right");
	}
	this.g_antObject.saveDefinition();
}
*/

/**
* Save Object
* @param {boolean} close close dialog after saving 
*/
Ant.EntityDefinitionEdit.prototype.refreshLocalObject = function()
{
	this.mainObject = new CAntObject(this.obj_type);

	var def = Ant.EntityDefinitionLoader.get(this.obj_type);
	def.load(); // Async reload
}

/**
* Save Object
* @param {object} dlg Save Dialog
* @param {boolean} close close dialog after saving 
*/
Ant.EntityDefinitionEdit.prototype.saveDone = function(dlg, close)
{
	var close = (typeof close != "undefined") ? close : false;
	dlg.hide();

	ALib.statusShowAlert(this.g_antObject.title + " Saved!", 3000, "bottom", "right");
	
	if (close)
		this.m_dlg.hide();				// close object edit dialog
	else
		this.reloadFieldTable();		// reload properties table
}

/**
 * Browse objects
 *
 * @public
 * @this {Ant.EntityDefinitionEdit}
 * @param {object} con Container of form tab
 */
Ant.EntityDefinitionEdit.prototype.tabBrowse = function(con)
{
    con.innerHTML = "";

	var innerCon = alib.dom.createElement("div", con);
	alib.dom.styleSet(innerCon, "height", "300px");
	alib.dom.styleSet(innerCon, "overflow", "auto");

    var objb = new AntObjectBrowser(this.obj_type);
	objb.printInline(innerCon);
}

/****************************************************************************
*	
*	Class:		CAntObjectMergeWizard
*
*	Purpose:	Wizard for merging objects
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2010 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/
function CAntObjectMergeWizard(obj_type)
{
	this.objects			= new Array();
	this.fields				= new Array(); // list which object id to pull each field name [name, object_id] 
	this.obj_type			= obj_type;
	this.mainObject			= new CAntObject(this.obj_type);

	this.steps = new Array();
	this.steps[0] = "Getting Started";
	this.steps[1] = "Define Fields";
	this.steps[2] = "Finished";
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Display wizard
**************************************************************************/
CAntObjectMergeWizard.prototype.showDialog = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.m_dlg = new CDialog("Merge "+this.mainObject.titlePl, this.parentDlg);
	this.m_dlg.f_close = true;
	var dlg = this.m_dlg;

	this.body_dv = alib.dom.createElement("div");

	dlg.customDialog(this.body_dv, 650, 510);

	this.showStep(0);
}

/*************************************************************************
*	Function:	showStep
*
*	Purpose:	Used to display the contents of a given step
**************************************************************************/
CAntObjectMergeWizard.prototype.showStep = function(step)
{
	this.body_dv.innerHTML = ""; 
	this.cbTemplates = null;
	this.verify_step_data = new Object();
	this.nextStep = step+1;

	// Path
	// ---------------------------------------------------------
	this.pathDiv = alib.dom.createElement("div", this.body_dv);
	this.pathDiv.innerHTML = "Step " + (step + 1) + " of " + this.steps.length + " - " + this.steps[step];
	alib.dom.styleSetClass(this.pathDiv, "wizardTitle");

	// Main content
	// ---------------------------------------------------------
	var div_main = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSetClass(div_main, "wizardBody");

	switch (step)
	{
	case 0:
		var p = alib.dom.createElement("h2", div_main);
		p.innerHTML = "Data Merge Wizard";

		var p = alib.dom.createElement("h3", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 3px 0");
		p.innerHTML = "This wizard will guide you through merging multiple "+this.mainObject.titlePl+" without losing data.";

		this.veriftyStep = function()
		{
			return true;
		}
		break;
	case 1:
		var p = alib.dom.createElement("h2", div_main);
		p.innerHTML = "Select Data To Merge";

		var p = alib.dom.createElement("p", div_main);
		alib.dom.styleSet(p, "margin", "0 0 10px 0");
		p.innerHTML = "Select which record you would like to use for each value.";

		this.buildFrmData(div_main);

		this.veriftyStep = function()
		{
			return true;
		}
		break;

	case 2:
		div_main.innerHTML = "<h2>Data is ready to be merged!</h2><h3>WARNING: This cannot be undone so use caution to assure you intended to "
						   + "permanantly merge all the data.</h3>"
						   + "Click 'Finish' below to merge "+this.mainObject.titlePl+" and exit this wizard.";
		break;
	}

	// Buttons
	// ---------------------------------------------------------
	var dv_btn = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSet(dv_btn, "margin-top", "8px");
	alib.dom.styleSet(dv_btn, "text-align", "right");

	var btn = new CButton("Back", function(cls, step) { cls.showStep(step-1); }, [this, step]);
	btn.print(dv_btn);
	if (step == 0)
		btn.disable();

	if (step == (this.steps.length - 1))
	{
		var btn = new CButton("Finish", function(cls) { cls.merge(); }, [this], "b2");
		btn.print(dv_btn);
	}
	else
	{
		var next_funct = function(cls, step)
		{
			if (cls.veriftyStep())
			{
				cls.showStep(step+1);
			}
			else
			{
				ALib.Dlg.messageBox(cls.verify_step_data.message, cls.m_dlg);
			}
		}

		var btn = new CButton("Next", next_funct, [this, step], "b2");
		btn.print(dv_btn);
	}

	var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [this.m_dlg], "b3");
	btn.print(dv_btn);
}

/*************************************************************************
*	Function:	veriftyStep
*
*	Purpose:	This function should be over-rideen with each step
**************************************************************************/
CAntObjectMergeWizard.prototype.veriftyStep = function()
{
	return true;
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CAntObjectMergeWizard.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	onFinished
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CAntObjectMergeWizard.prototype.onFinished = function()
{
}


/*************************************************************************
*	Function:	save
*
*	Purpose:	Save settings
**************************************************************************/
CAntObjectMergeWizard.prototype.merge = function()
{
	var args = [["obj_type", this.obj_type]];

	for (var i = 0; i < this.objects.length; i++)
	{
		args[args.length] = ["objects[]", this.objects[i].id];
	}

	// Send list of fields and which object id they will be pulled from
	for (var i = 0; i < this.fields.length; i++)
	{
		args[args.length] = ["fld_use_"+this.fields[i].name, this.fields[i].object_id];
	}

	this.m_dlg.hide();

	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Merging data, please wait...";
	dlg.statusDialog(dv_load, 250, 100);
    
    /*function cbdone(ret, cls, dlg)
    {
        dlg.hide();

        if (!ret['error'])
        {
            cls.onFinished(ret, cls.message);
        }
    }
    var rpc = new CAjaxRpc("/controller/Object/mergeObjects", "mergeObjects", args, cbdone, [this, dlg], AJAX_POST, true, "json");*/
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.dlg = dlg;
    ajax.onload = function(ret)
    {
        this.cbData.dlg.hide();

        if (!ret['error'])
            this.cbData.cls.onFinished(ret, this.cbData.cls.message);
    };
    ajax.exec("/controller/Object/mergeObjects", args);
}

/*************************************************************************
*	Function:	addObject
*
*	Purpose:	Add an object to the list to merge
**************************************************************************/
CAntObjectMergeWizard.prototype.addObject = function(oid)
{
	var obj = new CAntObject(this.obj_type, oid);
	obj.mergeCls = this;
	obj.onload = function()
	{
		if (this.mergeCls.nextStep == 3) // on step 2 which is the merge data screen = reload to show vals
			this.mergeCls.showStep(2);
	}
	obj.load();
	this.objects[this.objects.length] = obj;
}

/*************************************************************************
*	Function:	buildFrmData
*
*	Purpose:	Create form for selecting data
**************************************************************************/
CAntObjectMergeWizard.prototype.buildFrmData = function(con)
{
	var tbl = new CToolTable("100%");
	tbl.print(con);

	tbl.addHeader("&nbsp;");
	for (var i = 0; i < this.objects.length; i++)
	{
		tbl.addHeader("&nbsp;", "12px");
		tbl.addHeader(this.mainObject.title + " " + this.objects[i].id);
	}

	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		if (fields[i].name != "id" && fields[i].name != "ts_created" && fields[i].name != "ts_updated" && fields[i].name != "account_id")
		{
			var rw = tbl.addRow();
			rw.addCell(fields[i].title, true);

			// Populate record data
			for (var j = 0; j < this.objects.length; j++)
			{
				var useopt = alib.dom.createElement("input");
				useopt.type = "radio";
				useopt.name = "use_opt_"+fields[i].name;
				useopt.field_name = fields[i].name;
				useopt.value = this.objects[j].id;
				useopt.cls = this;
				useopt.checked = (this.getFieldUse(fields[i].name) == this.objects[j].id) ? true : false;
				useopt.onclick = function() 
				{ 
					this.cls.setFieldUse(this.field_name, this.value);
				} 

				rw.addCell(useopt, false, "center");
				 
				if (fields[i].type == "fkey_multi")
				{
					rw.addCell(this.objects[j].getMultiValueStr(fields[i].name), false);
				}
				else if (fields[i].type == "fkey")
				{
					rw.addCell(this.objects[j].getValueName(fields[i].name), false);
				}
				else
				{
					rw.addCell(this.objects[j].getValue(fields[i].name), false);
				}
			}
		}
	}
}

/*************************************************************************
*	Function:	setFieldUse
*
*	Purpose:	Set which object_id to use
**************************************************************************/
CAntObjectMergeWizard.prototype.setFieldUse = function(field_name, oid)
{
	for (var i = 0; i < this.fields.length; i++)
	{
		if (this.fields[i].name == field_name)
		{
			this.fields[i].object_id = oid;
			return;
		}
	}

	// Not yet set, put the the first object
	this.fields[this.fields.length] = {name:field_name, object_id:oid};
	return;
}

/*************************************************************************
*	Function:	getFieldUse
*
*	Purpose:	Find out what object is to be used for field_name
**************************************************************************/
CAntObjectMergeWizard.prototype.getFieldUse = function(field_name)
{
	for (var i = 0; i < this.fields.length; i++)
	{
		if (this.fields[i].name == field_name)
			return this.fields[i].object_id;
	}

	// Not yet set
	var useobj = 0;
	for (var i = 0; i < this.objects.length; i++) // get object with value
	{
		if (this.objects[i].getValue(field_name))
		{
			useobj = i;
			break;
		}
	}
	this.setFieldUse(field_name, this.objects[useobj].id);
	return this.objects[useobj].id;
}

/**
 * @fileoverview This class handles editing ant object
 *
 * Example:
 * <code>
 *     var objEditor = new AntObjectViewEditor("customer"); 
 *    objEditor.print(con);
 * </code>
 *
 * @author     Marl Tumulak, marl.tumulak@aereus.com.
 *             Copyright (c) 2011-2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectViewEditor
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
function AntObjectFormEditor(obj_type)
{
    /**
     * Instance of CAntObject of type obj_type - loads object data if oid is defined
     *
     * @type {CAntObject}
     * @public
     */
    this.mainObject = new CAntObject(obj_type);
    
    /**
     * Container object used by outside classes to store callback properties
     *
     * @public
     * @var {Object}
     */
    this.cbData = new Object();
    
    /**
     * The main container
     *
     * @public
     * @var {DOMElement}
     */
    this.mainCon = null;
    
    /**
     * The div container for the editor
     *
     * @public
     * @var {DOMElement}
     */
    this.editorCon = null;
    
    /**
     * The div container for the toolbars
     *
     * @public
     * @var {DOMElement}
     */
    this.toolbarCon = null;
    
    /**
     * The div container of canvas
     *
     * @public
     * @var {DOMElement}
     */
    this.canvasCon = null;
    
    /**
     * Name of the dropzone
     *
     * @public
     * @var {String}
     */
    this.dropZoneName = "dropZone";
    
    /**
     * Object form scope
     *
     * @public
     * @var {String}
     */
    this.scope = "default";
    
    /**
     * Set the current type of scope
     *
     * @public
     * @var {String}
     */
    this.scopeType = null;
    
    /**
     * Current user Id
     *
     * @public
     * @var {Integer}
     */
    this.userId = null;
    
    /**
     * Current team Id
     *
     * @public
     * @var {Integer}
     */
    this.teamId = null;
    
    /**
     * Count of the containers
     *
     * @public
     * @var {Integer, incremental}
     */
    this.containerIndex = 0;
    
    /**
     * Group number of dropzone
     *
     * @public
     * @var {Integer, incremental}
     */
    this.dropZoneGroup = 0;
    
    /**
     * Current number of tabs in editor form
     *
     * @public
     * @var {Integer, incremental}
     */
    this.numTabs = 0;
    
    /**
     * Currently available tabs
     *
     * @public
     * @var {Integer, incremental}
     */
    this.availableTabs = new Array();
    
    /**
     * This will be used to create new tabs
     *
     * @public
     * @var {Object Class}
     */
    this.formViewTabs = new CTabs();
    
    /**
     * Form UIML Structure
     *
     * @public
     * @var {Object Class}
     */
     this.uiml = new Object();
     
     /**
     * Determines whether the xml code view was changed
     *
     * @public
     * @var {Boolean}
     */
     this.codeViewChanged = false;
}

/**
 * Prints the object editor
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con A dom container where the editor will be printed
 */
AntObjectFormEditor.prototype.print = function(con)
{
    this.mainCon = con;
    this.checkDefaultForm();
}

/**
 * Builds form editor interface
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.buildInterface = function()
{
    // Reset the class variables
    this.containerIndex = 0;
    this.dropZoneGroup = 0;
    this.numTabs = 0;
    this.availableTabs = new Array();
    this.formViewTabs = new CTabs();
    
    this.mainCon.innerHTML = "";
    this.toolbarCon = alib.dom.createElement("div", this.mainCon);
    this.editorCon = alib.dom.createElement("div", this.mainCon);
    
    this.buildToolbar();
    this.buildEditor();
}

/**
 * Builds toolbar buttons
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.buildToolbar = function()
{
    var toolbar = new CToolbar();
    
    // Close Button
    var buttonClose = alib.ui.Button("Close", 
                        {
                            className:"b1", callback:this,
                            onclick:function() 
                            {
                                window.close();
                            }
                        });
    toolbar.AddItem(buttonClose.getButton());
    
    // Save & Close Button
    var buttonSaveClose = alib.ui.Button("Save & Close", 
                            {
                                className:"b2", callback:this,
                                onclick:function() 
                                {
                                    this.callback.saveObjectForm(true);
                                }
                            });
    toolbar.AddItem(buttonSaveClose.getButton());
    
    // Save Button
    var buttonSave = alib.ui.Button("Save", 
                            {
                                className:"b2", callback:this,
                                onclick:function() 
                                {
                                    this.callback.saveObjectForm(false);
                                }
                            });
    toolbar.AddItem(buttonSave.getButton());
    
    // Print Toolbar
    toolbar.print(this.toolbarCon);
}

/**
 * Builds toolbar buttons
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.buildEditor = function()
{
    // Form View and Code View tabs
    this.tabsEditor = new CTabs();
    var tabForm = this.tabsEditor.addTab("Form View");
    var tabCode = this.tabsEditor.addTab("Code View", 
                    function (cls)
                    {
                        cls.setupCodeView();
                    }, [this]);
                    
    this.tabsEditor.cbData.cls = this;
    this.tabsEditor.onSelectTab = function(index)
    {
        if(index == 0)
        {
            var callack = this.cbData.cls;
            if(callack.codeViewChanged)
            {
                ALib.Dlg.confirmBox("Swtiching to Form View needs to save the changes made. Do you want to proceed?", "Confirm Changes");
                ALib.Dlg.onConfirmOk = function()
                {
                    callack.saveObjectForm(false);
                    callack.codeViewChanged = false;
                    return true;
                }
                return false;
            }
        }
        
        return true;
    }
    
    tabForm.id = "formView";
    tabCode.id = "codeView";
    this.tabsEditor.print(this.editorCon);
    
    // Form View Tab
    var containerEditor = new CSplitContainer();
    containerEditor.resizable = true;
    
    this.formCanvas = containerEditor.addPanel("*");
    this.formFields = containerEditor.addPanel("230px");
    containerEditor.print(tabForm);
    
    
    this.buildFormView();
    this.buildCodeView(tabCode);
}

/**
 * Builds toolbar buttons
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.buildFormViewToolbar = function()
{
    var toolbarCon = alib.dom.createElement("div", this.formCanvas);
    
    // Toolbar for form view
    var toolbar = new CToolbar();
    
    // Delete Button
    var buttonDelete = alib.ui.Button("Delete Tab", 
                        {
                            className:"b3", callback:this,
                            onclick:function() 
                            {
                                var cls = this.callback;
                                ALib.Dlg.confirmBox("Are you sure you want to delete this tab?", "Delete Tab");
                                ALib.Dlg.onConfirmOk = function()
                                {
                                    cls.deleteTab();
                                }
                            }
                        });
    toolbar.AddItem(buttonDelete.getButton(), "right");
    
    // Rename Button
    var buttonRename = alib.ui.Button("Rename Tab", 
                        {
                            className:"b1", callback:this,
                            onclick:function() 
                            {
                                this.callback.setOptions({id:"tab"});
                            }
                        });
    toolbar.AddItem(buttonRename.getButton(), "right");
    
    // Add Button
    var buttonAdd = alib.ui.Button("Add Tab", 
                        {
                            className:"b2", callback:this,
                            onclick:function() 
                            {
                                this.callback.addTab(this.callback.canvasCon, "New Tab", true);
                            }
                        });
    toolbar.AddItem(buttonAdd.getButton(), "right");
    
    // Print Toolbar Buttons
    toolbar.print(toolbarCon);
}

/**
 * Builds the form view canvas
 *
 */
AntObjectFormEditor.prototype.buildFormView = function()
{
    this.buildFormViewToolbar();
    
    this.canvasCon = alib.dom.createElement("div", this.formCanvas);    
    alib.dom.setElementAttr(alib.dom.createElement("h2", this.canvasCon), [["innerHTML", this.mainObject.title]]);
    
    var canvasHeight = (getWorkspaceHeight() - this.toolbarCon.offsetHeight - 100) + "px";
    alib.dom.styleSet(this.canvasCon, "max-height", canvasHeight);
    alib.dom.styleSet(this.canvasCon, "overflow", "auto");
    
    if("*" == this.xmlFormLayoutText)
    {
        //if("default" == this.scope || "team" == this.scope || "user" == this.scope)
            //newTab(con);        // Add tab with dropzone for default, team, user scope
        //else
            //buildTab(con);        // Just add dropzone for mobile scope
    }
    else    // Build form based on xmlFormLayout
        this.buildEditorForm(this.canvasCon, this.xmlFormLayout);
    
    this.buildFields();
}

/**
 * Builds the display for code view
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con      Container for code view
 */
AntObjectFormEditor.prototype.buildCodeView = function(con)
{
    var mainCon = alib.dom.createElement("div", con);
    this.codeViewInput = alib.dom.createElement("textarea", mainCon);
    
    // Setup onchange event
    this.codeViewInput.cls = this;
    this.codeViewInput.onchange = function()
    {
        this.cls.codeViewChanged = true;
    }
    
    alib.dom.styleSet(this.codeViewInput, "width", "99%");    
    alib.dom.styleSet(this.codeViewInput, "height", (alib.dom.getDocumentHeight()-80) + "px");
}

/**
 * Builds the editor form with drag and drop zone
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con  A dom container where the drag and drop fields will be displayed
 * @param {xml} node   Data that contains the form structure
 */
AntObjectFormEditor.prototype.buildEditorForm = function(con, node)
{
    var numCols = 0;
    var curCol = 0;
    var curRow = null;
    
    // First find out how many columns we are working with this at this level        
    for (var i = 0; i < node.getNumChildren(); i++)
    {
        var child = node.getChildNode(i);
        if (child.m_name == "column")
            numCols++;
    }
    if (!numCols)
        numCols = 1;
    
    // Create form elements
    for (var i = 0; i < node.getNumChildren(); i++)
    {
        var child = node.getChildNode(i);
        switch (child.m_name)
        {
            case "tab":
                // Create tab
                var tabCon = this.addTab(con, child.getAttribute("name"), false);
                this.buildEditorForm(tabCon.childNodes[1], child);
                
                
                break;

            case "plugin":
                var pluginCon = alib.dom.createElement("div");
                
                if(child.getAttribute("name") != "")
                    pluginCon.name = child.getAttribute("name");
                    
                pluginCon.id = "plugin";
                pluginCon.title = "Plugin name='" + child.getAttribute("name") + "'";
                this.appendXmlContainer(pluginCon, con);
                this.buildEditorForm(pluginCon, child);
                break;

            case "recurrence":
                var recurrence = alib.dom.createElement("div");
                recurrence.id = "recurrence";
                recurrence.title = "Recurrence";
                this.appendXmlContainer(recurrence, con);
                this.buildEditorForm(recurrence, child);
                break;

            case "report":
                var report = alib.dom.createElement("div");
                if(child.getAttribute("id") != "")
                    report.reportid = child.getAttribute("id");
                if(child.getAttribute("filterby") != "")
                    report.filterby = child.getAttribute("filterby");
                report.id = "report";
                report.title = "Report";
                this.appendXmlContainer(report, con);
                this.buildEditorForm(report, child);
                break;

            case "fieldset":
                var fieldsetCon = alib.dom.createElement("div");
                
                if(child.getAttribute("name") != "")
                {
                    var fname = child.getAttribute("name");
                    fname = fname.replace("&", "&amp;");
                    fieldsetCon.name = fname;
                }
                
                if(child.getAttribute("showif") != "")
                {
                    var showif = child.getAttribute("showif");
                    fieldsetCon.showifType = showif.substring(0, showif.indexOf("="));
                    fieldsetCon.showifValue = showif.substring(showif.indexOf("=")+1, showif.length);
                }                
                else
                {
                    fieldsetCon.showifType = null;
                    fieldsetCon.showifValue = null;
                }
                
                fieldsetCon.id = "fieldset";
                fieldsetCon.title = fieldsetCon.name = child.getAttribute("name");
                this.appendXmlDropContainer(fieldsetCon, con);
                this.buildEditorForm(fieldsetCon, child);
                break;

            case "objectsref":
                var objectsref = alib.dom.createElement("div");
                
                if(child.getAttribute("obj_type") != "")
                    objectsref.objType = child.getAttribute("obj_type");
                else
                    objectsref.objType = null;
                    
                if(child.getAttribute("ref_field") != "")
                    objectsref.refField = child.getAttribute("ref_field");
                else
                    objectsref.refField = null;
                    
                objectsref.id = "objectsref";
                objectsref.title = "Objectsref";                
                this.appendXmlContainer(objectsref, con);
                this.buildEditorForm(objectsref, child);
                break;

            case "spacer":
                var spacer = alib.dom.createElement("div");
                spacer.id = "spacer";
                spacer.title = "Spacer";
                this.appendXmlContainer(spacer, con);
                this.buildEditorForm(spacer, child);
                break;

            case "row":
                var rowCon = alib.dom.createElement("div");
                if(child.getAttribute("showif") != "")
                {
                    var showif = child.getAttribute("showif");
                    rowCon.showifType = showif.substring(0, showif.indexOf("="));
                    rowCon.showifValue = showif.substring(showif.indexOf("=")+1, showif.length);
                }
                else
                {
                    rowCon.showifType = null;
                    rowCon.showifValue = null;
                }
                
                rowCon.id = "row";
                rowCon.title = "Row";
                this.appendXmlDropContainer(rowCon, con);
                this.buildEditorForm(rowCon, child);
                break;

            case "column":
                if(!curRow)
                {
                    var tbl = alib.dom.createElement("table", con);
                    alib.dom.styleSet(tbl, "table-layout", "fixed");
                    alib.dom.styleSet(tbl, "width", "100%");
                    var tbody = alib.dom.createElement("tbody", tbl);
                    curRow = alib.dom.createElement("tr", tbody);
                    tbl.numCol = numCols;
                }
                
                curCol++;
                var td = alib.dom.createElement("td", curRow);
                alib.dom.styleSet(td, "vertical-align", "top");
                
                
                var column = alib.dom.createElement("div");
                column.showifType = null;
                column.showifValue = null;
                column.styleAttr = null;
                
                var width = child.getAttribute("width");
                if(width && typeof width != "undefined")
                {
                    if(width.slice(0, -2) < 200)
                        width = "200px";
                        
                    column.width = width;
                    td.style.width = width;
                }
                
                var showif = child.getAttribute("showif");
                if(showif != "")
                {
                    column.showifType = showif.substring(0, showif.indexOf("="));
                    column.showifValue = showif.substring(showif.indexOf("=")+1, showif.length);
                }
                
                var styleAttr = child.getAttribute("style");
                if(typeof styleAttr != "undefined")
                    column.styleAttr = styleAttr;
                
                column.id = "column";
                column.title = "Column";
                this.appendXmlDropContainer(column, td);
                this.buildEditorForm(column, child);
                break;

            case "field":
                var title = this.getFieldTitle(child.getAttribute("name"));
                var fieldCon = alib.dom.createElement("div");
                fieldCon.title = title;
                fieldCon.label = title;
                fieldCon.tooltip = null;
                fieldCon.part = null;
                fieldCon.hidelabel = false;
                
                // image_id special field type
                if(child.getAttribute("name") == "image_id")
                {
                    if(child.getAttribute("profile_image") == "t")
                    {
                        fieldCon.profile_image = true;
                        fieldCon.path = child.getAttribute("path");
                    }
                    else
                    {
                        fieldCon.profile_image = false;
                        fieldCon.path = "";
                    }
                }
                
                // fields with multiline and rich
                if(child.getAttribute("multiline"))
                {
                    if(child.getAttribute("multiline") == "t")
                        fieldCon.multiline = true;
                    else
                        fieldCon.multiline = false;
                    if(child.getAttribute("rich") == "t")
                        fieldCon.rich = true;
                    else
                        fieldCon.rich = false;
                }
                
                // all fields have hidelabel
                if(child.getAttribute("hidelabel") == "t")
                    fieldCon.hidelabel = true;
                    
                // Check for tooltips
                if(child.getAttribute("tooltip"))
                    fieldCon.tooltip = child.getAttribute("tooltip");
                    
                // Attribute for date picker
                if(child.getAttribute("part"))
                    fieldCon.part = child.getAttribute("part");
                    
                // Attribute that will override the title
                if(child.getAttribute("label"))
                    fieldCon.label = child.getAttribute("label");
                    
                fieldCon.type = "field";
                fieldCon.id = child.getAttribute("name");
                this.appendXmlContainer(fieldCon, con);
                this.buildEditorForm(fieldCon, child);
                break;

            case "all_additional":
                var all_additional = alib.dom.createElement("div");
                all_additional.id = "all_additional";
                all_additional.title = "All Additional";
                this.appendXmlContainer(all_additional, con);
                this.buildEditorForm(all_additional, child);
                break;
        }
    }
} 

/**
 * Builds form tab
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con  A dom container where the drag and drop fields will be displayed
 */
AntObjectFormEditor.prototype.buildFormTab = function(con)
{
    // Create main Dropzone div
    var attrData = [["innerHTML", "<center><h2>Drag items here</h2></center>"], ["margin", "3px 0 0 0"], ["width", "100%"]];
    var divDrop = alib.dom.setElementAttr(alib.dom.createElement("div", con), attrData);
    var mainCon = alib.dom.createElement("div", con);
    divDrop.rootdz = true;
    DragAndDrop.registerDropzone(divDrop, this.dropZoneName);
    
    divDrop.cls = this;
    divDrop.onDragEnter = function(e)
    {
        alib.dom.styleSet(this, "border", "1px solid blue");
    }
    
    divDrop.onDragExit = function(e)
    {
        alib.dom.styleSet(this, "border", "");
    }
    
    divDrop.onDragDrop = function(e)
    {
        alib.dom.styleSet(this, "border", "");
        this.cls.appendDragDrop(e, mainCon);
    }
    
    divDrop.onResort = function(e)
    {
    }

    mainCon.dropZoneName = "dz" + this.dropZoneGroup;
    DragAndDrop.registerDropzone(mainCon, mainCon.dropZoneName);
    DragAndDrop.registerSortable(mainCon);
}

/**
 * Appends object in the container
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con        A dom container where the fields will be displayed
 * @param {DOMElement} parentCon  The parent container of con
 * 
 */
AntObjectFormEditor.prototype.appendXmlContainer = function(con, parentCon)
{
    // increment container Index
    this.containerIndex++;
    
    // Specify con attributes
    con.oid = this.containerIndex;
    con.pnode = parentCon;
    con.antType = "field";
    
    var attrData = [["id", "divObjContainer"], ["margin", "5px 5px 5px 5px"], ["border", "1px solid black"], ["padding", "5px"], ["cursor", "move"]];
    var mainCon = alib.dom.setElementAttr(alib.dom.createElement("div", parentCon), attrData);
    
    // If field dropped in main dropzone, parentCon = null
    if(parentCon.id == "tab")
        DragAndDrop.registerDragableChild(null, mainCon, null, parentCon.dropZoneName);
    else
        DragAndDrop.registerDragableChild(parentCon.parentNode, mainCon, null, parentCon.dropZoneName);
        
    // Append the container to div con
    if(con.label)
        con.innerHTML = con.label; 
    else
        con.innerHTML = con.title; 
        
    alib.dom.styleSet(con, "float", "left");
    mainCon.appendChild(con);
        
    // Container for options and delete item
    var objCon = alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["float", "right"]]);
    var optionsCon = alib.dom.setElementAttr(alib.dom.createElement("div", objCon), [["float", "right"]]);
    
    // all_additional and spacer will not have options
    if(con.id != "all_additional" && con.id != "recurrence" && con.id != "spacer")
    {
        var buttonOptions = alib.ui.Button("Options", 
                            {
                                className:"b1 small", callback:this, con:con,
                                onclick:function() 
                                {
                                    this.callback.setOptions(this.con);
                                }
                            }, "link");
        optionsCon.appendChild(buttonOptions.getButton());
    }
    
    // Delete Item
    var buttonDelete = alib.ui.Button("X", 
                            {
                                className:"b3 small", callback:this, mainCon:mainCon, con:con,
                                onclick:function()
                                {
                                    this.callback.deleteItem(this.mainCon, this.con);
                                }
                            }, "link");
    optionsCon.appendChild(buttonDelete.getButton());
    
    // Set clear both for mainCon and optionsCon
    alib.dom.setElementAttr(alib.dom.createElement("div", optionsCon), [["clear", "both"]]);
    alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["clear", "both"]]);
}  

/**
 * Appends the drag and drop container
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con        A dom container where the fields will be displayed
 * @param {DOMElement} parentCon  The parent container of con
 */
AntObjectFormEditor.prototype.appendXmlDropContainer = function(con, parentCon, conAttr)
{
    // increment container Index
    this.containerIndex++;

    // Specify con attributes
    con.oid = this.containerIndex;
    con.pnode = parentCon;
    con.antType = "con";
    
    var attrData = [["id", "divDropContainer"], ["margin", "5px 5px 5px 5px"], ["border", "1px solid black"], ["padding", "5px"], ["cursor", "move"]];
    var mainCon = alib.dom.setElementAttr(alib.dom.createElement("div", parentCon), attrData);
    
    if(conAttr)
    {
        for(attr in conAttr)
            alib.dom.styleSet(mainCon, attr, conAttr[attr]);
    }
        
    // Container for columns dropdown, options, and delete item
    var objCon = alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["float", "right"]]);
    var optionsCon = alib.dom.setElementAttr(alib.dom.createElement("div", objCon), [["float", "right"]]);
    
    // Columns Dropdown
    var dm = new CDropdownMenu();
    var dmSub1 = dm.addEntry("1", function(cls) { cls.addColumn(con, 1); }, null, null, [this]);
    var dmSub2 = dm.addEntry("2", function(cls) { cls.addColumn(con, 2); }, null, null, [this]);
    var dmSub3 = dm.addEntry("3", function(cls) { cls.addColumn(con, 3); }, null, null, [this]);
    var dmSub4 = dm.addEntry("4", function(cls) { cls.addColumn(con, 4); }, null, null, [this]);
    optionsCon.appendChild(dm.createLinkMenu("Columns"));
    
    // Options Button
    var buttonOptions = alib.ui.Button("Options", 
                        {
                            className:"b1 small", callback:this, con:con,
                            onclick:function() 
                            {
                                this.callback.setOptions(this.con);
                            }
                        }, "link");
    
    var btn = buttonOptions.getButton();    
    alib.dom.styleSet(btn, "margin-left", "3px");
    optionsCon.appendChild(btn);

    // Delete Button
    var buttonDelete = alib.ui.Button("X", 
                        {
                            className:"b3 small", callback:this, mainCon:mainCon, con:con,
                            onclick:function()
                            {
                                this.callback.deleteItem(this.mainCon, this.con);
                            }
                        }, "link");
    optionsCon.appendChild(buttonDelete.getButton());
    
    // Name Container
    var nameCon = alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["innerHTML", con.title], ["margin", "0 145px 0 0"]]);
    
    // Separator
    var separatorDiv = alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["height", "5px"]]);
    
    // Setup Drag and Drop
    if(con.id == "column")
        con.dropZoneName = "col" + this.dropZoneGroup;
    else
    {
        this.dropZoneGroup++;
        con.dropZoneName = "dz" + this.dropZoneGroup;
    }
    DragAndDrop.registerDropzone(con, con.dropZoneName);
    DragAndDrop.registerSortable(con);
    
    // If container dropped in main dropzone, parentCon = null
    if(parentCon.id == "tab")
        DragAndDrop.registerDragableChild(null, mainCon, null, parentCon.dropZoneName);    
    else
    {
        if(con.id == "column")
        {
            if(conAttr)
                DragAndDrop.registerDragableChild(parentCon.parentNode, mainCon, null, parentCon.parentNode.dropZoneName);
            else
                DragAndDrop.registerDragableChild(parentCon.parentNode.parentNode.parentNode.parentNode.parentNode, mainCon, null, parentCon.parentNode.dropZoneName);
        }
        else
            DragAndDrop.registerDragableChild(parentCon.parentNode, mainCon, null, parentCon.dropZoneName);
    }
    
    // Dropzone
    var attrData = [["innerHTML", "<center><strong>Drag items here</strong></center>"], ["margin", "5px"], ["padding", "5px"], ["height", "15px"]];
    var dragDropCon = alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), attrData);
    dragDropCon.cls = this;
    
    DragAndDrop.registerDropzone(dragDropCon, this.dropZoneName);
    dragDropCon.onDragEnter = function(e)
    {
        alib.dom.styleSet(this, "border", "1px solid blue");
    }
    
    dragDropCon.onDragExit = function(e)
    {
        alib.dom.styleSet(this, "border", "");
    }
    
    dragDropCon.onDragDrop = function(e)
    {
        alib.dom.styleSet(this, "border", "");
        this.cls.appendDragDrop(e, con);
    }
    
    dragDropCon.onResort = function(e)
    {
    }
    
    // Set clear both for mainCon and optionsCon
    alib.dom.setElementAttr(alib.dom.createElement("div", objCon), [["clear", "both"]]);
    alib.dom.setElementAttr(alib.dom.createElement("div", mainCon), [["clear", "both"]]);
    
    mainCon.appendChild(con);
} 

/**
 * Appends the drag and drop object
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con        A dom container where the container will be displayed
 * @param {DOMElement} parentCon  The parent container of con
 */
AntObjectFormEditor.prototype.appendDragDrop = function(con, parentCon)
{
    var newCon = alib.dom.createElement("div");
    newCon.id = con.id;
    newCon.title = con.title;
    
    switch(con.id)
    {
        case "row":
        case "fieldset":
            newCon.showifType = null;
            newCon.showifValue = null;
            this.appendXmlDropContainer(newCon, parentCon);        
            break;
            
        default:
            this.appendXmlContainer(newCon, parentCon);
            break;
    }
}

/**
 * Builds Fields List
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.buildFields = function()
{
    // Fields
    alib.dom.setElementAttr(alib.dom.createElement("label", this.formFields), [["innerHTML", "Available Fields"], ["font-weight", "bold"]]);
    
    var attrData = [["border", "1px solid"], ["height", "300px"], ["overflow", "auto"], ["margin-bottom", "15px"]];
    var fieldsCon = alib.dom.setElementAttr(alib.dom.createElement("div", this.formFields), attrData);    
    
    // Create Drag and Drop fields
    var fieldsDropCon = alib.dom.setElementAttr(alib.dom.createElement("div", fieldsCon), [["width", "99%"], ["height", "99%"]]);
    this.createDragDrop(fieldsDropCon, "all_additional", "All Additional");
    this.createDragDrop(fieldsDropCon, "objectsref", "All Objectsref");
    this.createDragDrop(fieldsDropCon, "plugin", "Plugin");
    this.createDragDrop(fieldsDropCon, "recurrence", "Recurrence");
    this.createDragDrop(fieldsDropCon, "report", "Report");
    this.createDragDrop(fieldsDropCon, "spacer", "Spacer");
    
    // Loop thru available object fields
    for(field in this.mainObject.fields)
    {
        var currentField = this.mainObject.fields[field];
        
        var fieldDragDiv = this.createDragDrop(fieldsDropCon, currentField.name, currentField.title);
        fieldDragDiv.type = currentField.type;
        fieldDragDiv.subtype = currentField.subtype;
    }
    
    // Containers
    alib.dom.setElementAttr(alib.dom.createElement("label", this.formFields), [["innerHTML", "Containers"], ["font-weight", "bold"]]);
    
    var attrData = [["border", "1px solid"], ["overflow", "auto"]];
    var containersCon = alib.dom.setElementAttr(alib.dom.createElement("div", this.formFields), attrData);
    
    // Create Drag and Drop containers
    var containersDropCon = alib.dom.setElementAttr(alib.dom.createElement("div", fieldsCon), [["width", "99%"], ["height", "99%"]]);
    this.createDragDrop(containersCon, "row", "Row");
    this.createDragDrop(containersCon, "row", "Fieldset");
}

/**
 * Builds Fields List
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con  A dom container where the drag and drop fields will be displayed
 * @param {Integer} id      Id of the field
 * @param {String} title    Title of the field
 */
AntObjectFormEditor.prototype.createDragDrop = function(con, id, title)
{
    var attrData = [["innerHTML", title], ["border", "1px solid"], ["margin", "3px"], ["padding", "3px"], ["cursor", "move"]];
    var fieldCon = alib.dom.setElementAttr(alib.dom.createElement("div", con), attrData);
    fieldCon.id = id;
    fieldCon.title = title;
    DragAndDrop.registerDragable(fieldCon, null, this.dropZoneName);
    
    return fieldCon;
}

/**
 * Saves the object form
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {Boolean} close       Determines whether to close the window or not
 */
AntObjectFormEditor.prototype.saveObjectForm = function(close)
{
    if(this.tabsEditor.curr_index==0) // No need to regenerate code if already in code view
        this.setupCodeView(); // Regenerate the xml for possible changes in editor view    
        
    if(!this.testXmlString()) // Test the xml for errors
        return;
    
    ajax = new CAjax('json');
    ajax.cbData.dlg = showDialog("Saving, please wait...");
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(ret)
        {
            this.cbData.dlg.hide();
            
            if(close)
                window.close();
            else
                this.cbData.cls.checkDefaultForm();
        }
        else
        {
            this.cbData.dlg.hide();
            ALib.statusShowAlert("Error occurred while saving changes.!", 3000, "bottom", "right");
        }
    };
    
    var args = [["obj_type", this.mainObject.obj_type], ["form_layout_xml", this.codeViewInput.value], ["default", this.scope], ["team_id", this.teamId], ["user_id", this.userId]];
    //args[args.length] = ["mobile", this.scopeType];
    ajax.exec("/controller/Object/saveForm", args);
}

/**
 * Check for default form
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.checkDefaultForm = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret['error'])
            ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
        else
        {
            for(form in ret)
            {
                var currentForm = ret[form];
                
                // Check if default form is overridden
                if(currentForm.scope == "default" && this.cbData.cls.scope == "default")
                    this.cbData.cls.scopeType = "default";                
                else if(currentForm.scope == "mobile" && this.cbData.cls.scope == "mobile")
                    this.cbData.cls.scopeType = "mobile";
            }
            
            // Get the object form
            this.cbData.cls.getXmlForm();
        }
    };
    
    var args = [["obj_type", this.mainObject.obj_type]];
    ajax.exec("/controller/Object/getForms", args);
}

/**
 * Get the object form
 * 
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.getXmlForm = function()
{
    var ajax = new CAjax();
    ajax.cbData.cls = this;
    ajax.onload = function(root)
    {
        this.cbData.cls.xmlFormLayout = root.getChildNodeByName("form");
        this.cbData.cls.xmlFormLayoutText = unescape(root.getChildNodeValByName("form_layout_text"));
        this.cbData.cls.buildInterface();
    };
    
    var url = "/controller/Object/loadForm?obj_type=" + this.mainObject.obj_type;
    
    if(this.scopeType)
        url += "&" + this.scopeType + "=1";
    if(this.teamId)
        url += "&team_id=" + this.teamId;
    if(this.userId)
        url += "&user_id=" + this.teamId;
    
    ajax.exec(url);
}

/**
 * Get the object form
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {String} fieldName        A field name of main object
 */
AntObjectFormEditor.prototype.getFieldTitle = function(fieldName)
{
    var field = this.mainObject.getFieldByName(fieldName);
    return field.title;
}

/**
 * Adds column to fieldset
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con      A dom container where the columns will be printed
 * @param {Integer} num         Number of columns
 */
AntObjectFormEditor.prototype.addColumn = function(con, num)
{
    var conAttr = new Array;
    conAttr["width"] = (100/num) - 5 + "%";
    conAttr["float"] = "left";
        
    for(var i = 0; i < num; i++)
    {
        var columnCon = alib.dom.createElement("div");
        
        columnCon.id = "column";
        columnCon.title = "Column";
        columnCon.showifType = "";
        columnCon.showifValue = "";
        this.appendXmlDropContainer(columnCon, con, conAttr);
    }
    
    alib.dom.setElementAttr(alib.dom.createElement("div", con), [["clear", "both"]]);
    
    // Restore all parent containers to dragable
    var parentCon = con.parentNode.parent;
    while(parentCon)
    {
        parentCon.dragable = true;
        parentCon = parentCon.parentNode;
    }
}

/**
 * Display the options availble
 * 
 * @public
 * @this {AntObjectFormEditor} * 
 * @param {DOMElement} con      Main container of the object to be deleted
 */
AntObjectFormEditor.prototype.setOptions = function(con)
{
    // Restore all parent containers to dragable
    if(con.id != "tab")
    {
        var parentCon = con.parentNode.parent;
        while(parentCon)
        {
            parentCon.dragable = true;
            parentCon = parentCon.parentNode;
        }
    }
    
    var dlg = new CDialog();
    var dlgCon = alib.dom.createElement("div");
    var dlgHeight = 90;
    var dlgWidth = 260;
    
    dlg.m_title = con.id.capitalize() + " Options";
    
    // Button Ok Options
    var buttonOptions = {className:"b2", dlg:dlg, con:con, formViewTabs:this.formViewTabs,
                                onclick:function() 
                                {
                                    // Tab Set Option
                                    if(this.tabName)
                                    {
                                        this.formViewTabs.setTabTitle(this.tabIdx, this.tabName.value);
                                        this.formViewTabs.getPageCon(this.tabIdx).name = this.tabName.value;
                                    }
                                    
                                    // Fieldset, Column, Row Set Options
                                    if(this.name && this.name.value != "")
                                    {
                                        this.con.name = this.name.value;
                                        
                                        if(this.con.id == "plugin")
                                            this.con.parentNode.childNodes[0].innerHTML = "Plugin name='" + this.name.value + "'";
                                        else
                                            this.con.parentNode.childNodes[1].innerHTML = this.name.value;
                                    }
                                    
                                    if(this.styleAttr && this.styleAttr.value != "")
                                    {
                                        this.con.styleAttr = this.styleAttr.value;
                                    }
                                    
                                    if(this.width && this.width.value != "")
                                    {
                                        if(this.con.parentNode.parentNode.parentNode.parentNode.parentNode.numCol != 1)
                                        {
                                            this.con.parentNode.parentNode.style.width = this.width.value;
                                            this.con.width = this.width.value;
                                                            
                                            for(var i = 0; i < this.con.parentNode.parentNode.parentNode.childNodes.length; i++)
                                            {
                                                // Set the width field of the columns that were scaled
                                                if(this.con.parentNode.parentNode.parentNode.childNodes[i].width != this.width.value)
                                                {
                                                    this.con.parentNode.parentNode.parentNode.childNodes[i].childNodes[0].childNodes[4].width = alib.dom.styleGet(this.con.parentNode.parentNode.parentNode.childNodes[i], "width");
                                                }
                                            }
                                        }
                                    }
                                    
                                    if(this.showifType && this.showifType.value != "" && this.showifValue.value != "")
                                    {
                                        this.con.showifType = this.showifType.value;
                                        this.con.showifValue = this.showifValue.value;
                                    }
                                    
                                    // ObjectsRef Set Options
                                    if(this.objType)
                                        this.con.objType = this.objType.value
                                        
                                    if(this.refField)
                                        this.con.refField = this.refField.value
                                    
                                    // Default Set Options
                                    if(this.hideLabel)
                                        this.con.hidelabel = this.hideLabel.checked;
                                        
                                    if(this.tooltip)
                                        this.con.tooltip = this.tooltip.value;
                                    
                                    if(this.multiline)
                                        this.con.multiline = this.multiline.checked;
                                        
                                    if(this.rich)
                                        this.con.rich = this.rich.checked;
                                        
                                    if(this.part)
                                        this.con.part = this.part.value;
                                        
                                    if(this.label)
                                    {
                                        this.con.label = this.label.value;
                                        this.con.parentNode.childNodes[0].innerHTML = this.label.value;
                                    }
                                        
                                    this.dlg.hide();
                                }};
    
    switch(con.id)
    {
        case "plugin":
        case "fieldset":
            // Name Input
            var nameCon = alib.dom.createElement("div", dlgCon);
            var nameLabel = alib.dom.setElementAttr(alib.dom.createElement("label", nameCon), [["innerHTML", "Name:"]]);
            var nameInput = alib.dom.setElementAttr(alib.dom.createElement("input", nameCon), [["value", con.name], ["width", "190px"]]);
            
            alib.dom.styleSet(nameInput, "margin-left", "15px");
            buttonOptions.name = nameInput;
            break;
        case "column":
            dlgHeight = 110;
            // Width Input
            var widthCon = alib.dom.createElement("div", dlgCon);
            var widthLabel = alib.dom.setElementAttr(alib.dom.createElement("label", widthCon), [["innerHTML", "Width:"]]);
            var widthInput = alib.dom.setElementAttr(alib.dom.createElement("input", widthCon), [["value", alib.dom.styleGet(con.parentNode.parentNode, "width")], ["width", "85px"]]);
            
            // Style Input
            var styleCon = alib.dom.createElement("div", dlgCon);
            var styleLabel = alib.dom.setElementAttr(alib.dom.createElement("label", styleCon), [["innerHTML", "Style:"]]);
            var styleInput = alib.dom.setElementAttr(alib.dom.createElement("input", styleCon), [["value", con.styleAttr], ["width", "190px"]]);
            
            alib.dom.styleSet(widthInput, "margin-left", "14px");
            alib.dom.styleSet(styleInput, "margin", "5px 0 0 18px");
            
            buttonOptions.width = widthInput;
            buttonOptions.styleAttr = styleInput;
            break;
    }
    
    switch(con.id)
    {
        case "tab":
            var tabIdx = this.formViewTabs.getIndex();
            var nameCon = alib.dom.createElement("div", dlgCon);
            var nameLabel = alib.dom.setElementAttr(alib.dom.createElement("label", nameCon), [["innerHTML", "Name:"]]);
            var nameInput = alib.dom.setElementAttr(alib.dom.createElement("input", nameCon), [["value", this.formViewTabs.getPageCon(tabIdx).name], ["width", "200px"]]);
            
            // Set button options
            buttonOptions.tabName = nameInput;
            buttonOptions.tabIdx = tabIdx;
            
            alib.dom.styleSet(nameInput, "margin-left", "5px");
            dlgHeight = 60;
            break;
            
        case "fieldset":
        case "column":
        case "row":
            // Showif Input
            var showifCon = alib.dom.createElement("div", dlgCon);
            var showifLabel = alib.dom.setElementAttr(alib.dom.createElement("label", showifCon), [["innerHTML", "Show If:"]]);
            var showifType = alib.dom.setElementAttr(alib.dom.createElement("input", showifCon), [["value", con.showifType], ["width", "85px"]]);
            alib.dom.setElementAttr(alib.dom.createElement("label", showifCon), [["innerHTML", " = "]]);
            var showifValue = alib.dom.setElementAttr(alib.dom.createElement("input", showifCon), [["value", con.showifValue], ["width", "85px"]]);
            
            // Setup button options                    
            buttonOptions.showifType = showifType;
            buttonOptions.showifValue = showifValue;
                
            // Set Style
            alib.dom.styleSet(showifCon, "margin-top", "5px");
            alib.dom.styleSet(showifType, "margin-left", "5px");
            break;
        
        case "objectsref":
            // Object Type
            var typeCon = alib.dom.createElement("div", dlgCon);
            var typeLabel = alib.dom.setElementAttr(alib.dom.createElement("label", typeCon), [["innerHTML", "Object Type:"]]);
            var typeInput = alib.dom.setElementAttr(alib.dom.createElement("input", typeCon), [["value", con.objType], ["width", "165px"]]);
            
            // Reference Field
            var refCon = alib.dom.createElement("div", dlgCon);
            var refLabel = alib.dom.setElementAttr(alib.dom.createElement("label", refCon), [["innerHTML", "Ref Field:"]]);
            var refInput = alib.dom.setElementAttr(alib.dom.createElement("input", refCon), [["value", con.refField], ["width", "166px"]]);
            
            alib.dom.styleSet(typeInput, "margin-left", "14px");
            alib.dom.styleSet(refInput, "margin-left", "30px");
            alib.dom.styleSet(refInput, "margin-top", "5px");
            
            // Setup button options
            buttonOptions.objType = typeInput;
            buttonOptions.refField = refInput;
            break;
        
        case "plugin":
        case "all_additional":
        case "recurrence":
        case "spacer":
            break;
        
        default:
            dlgHeight += 30;
            dlg.m_title = con.title + " Options"
            
            // Label for overriding title value
            var labelCon = alib.dom.createElement("div", dlgCon);
            var labelLabel = alib.dom.setElementAttr(alib.dom.createElement("label", labelCon), [["innerHTML", "Label: "]]);
            var labelInput = alib.dom.setElementAttr(alib.dom.createElement("input", labelCon), [["value", con.label], ["width", "190px"]]);
            
            alib.dom.styleSet(labelInput, "margin-left", "7px");
            alib.dom.styleSet(labelInput, "margin-bottom", "5px");
            
            // Tooltip
            var tooltipCon = alib.dom.createElement("div", dlgCon);
            var tooltipLabel = alib.dom.setElementAttr(alib.dom.createElement("label", tooltipCon), [["innerHTML", "Tooltip: "]]);
            var tooltipInput = alib.dom.setElementAttr(alib.dom.createElement("input", tooltipCon), [["value", con.tooltip], ["width", "190px"]]);
            alib.dom.styleSet(tooltipCon, "margin-bottom", "5px");
            
            // part for datepicker
            if(con.part)
            {
                dlgHeight += 20;
                
                var partCon = alib.dom.createElement("div", dlgCon);
                var partLabel = alib.dom.setElementAttr(alib.dom.createElement("label", partCon), [["innerHTML", "Part: "]]);
                var partInput = alib.dom.setElementAttr(alib.dom.createElement("input", partCon), [["value", con.part], ["width", "190px"]]);
                
                alib.dom.styleSet(partInput, "margin-left", "12px");
                alib.dom.styleSet(partCon, "margin-bottom", "5px");
                
                buttonOptions.part = partInput;
            }
            
            // Multiline Textbox
            if(con.multiline != null && con.rich != null)
            {
                dlgHeight += 30;
                
                var multilineCon = alib.dom.createElement("div", dlgCon);
                var multilineCheck = alib.dom.setElementAttr(alib.dom.createElement("input", multilineCon), [["type", "checkbox"], ["checked", con.multiline]]);
                var multilineLabel = alib.dom.setElementAttr(alib.dom.createElement("label", multilineCon), [["innerHTML", " Multiline"]]);
                
                var richCon = alib.dom.createElement("div", dlgCon);
                var richCheck = alib.dom.setElementAttr(alib.dom.createElement("input", richCon), [["type", "checkbox"], ["checked", con.rich]]);
                var richLabel = alib.dom.setElementAttr(alib.dom.createElement("label", richCon), [["innerHTML", " Rich"]]);
                
                buttonOptions.multiline = multilineCheck;
                buttonOptions.rich = richCheck;
            }
            
            // Hide Label
            var hideCon = alib.dom.createElement("div", dlgCon);
            var hideCheck = alib.dom.setElementAttr(alib.dom.createElement("input", hideCon), [["type", "checkbox"], ["checked", con.hidelabel]]);
            var hideLabel = alib.dom.setElementAttr(alib.dom.createElement("label", hideCon), [["innerHTML", " Hide Label"]]);

            // setup button options
            buttonOptions.label = labelInput;
            buttonOptions.tooltip = tooltipInput;
            buttonOptions.hideLabel = hideCheck;
            break;
    }
    
    // Buttons
    var buttonCon = alib.dom.createElement("div", dlgCon);
    var btn = alib.ui.Button("Ok", buttonOptions);
    buttonCon.appendChild(btn.getButton());
    
    var btn = alib.ui.Button("Cancel", 
                        {
                            className:"b1", dlg:dlg,
                            onclick:function() 
                            {
                                this.dlg.hide();
                            }
                        });
    buttonCon.appendChild(btn.getButton());
    
    alib.dom.styleSet(buttonCon, "float", "right");
    alib.dom.styleSet(buttonCon, "margin-top", "5px");
    alib.dom.divClear(dlgCon);
    
    // Show Dialog
    dlg.customDialog(dlgCon, dlgWidth, dlgHeight);
}

/**
 * Deletes the item selected
 * 
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} objCon   Container of the object to be deleted
 * @param {DOMElement} con      Main container of the object to be deleted
 */
AntObjectFormEditor.prototype.deleteItem = function(objCon, con)
{
    // Remove column from table
    if(con.id == "column")
    {
        con.parentNode.conState = false;    
        alib.dom.styleSet(con.parentNode, "display", "none");
    }
    // Remove item
    else
    {
        con.conState = false;
        alib.dom.styleSet(objCon, "display", "none");
    }
    
    // Restore all parent containers to dragable
    var parentCon = objCon.parent;
    while(parentCon)
    {
        parentCon.dragable = true;
        parentCon = parentCon.parentNode;
    }
}

/**
 * Adds a new tab
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con      Main container
 * @param {String} tabNam       Name of the tab
 * @param {Boolean} isNew       Determine if tab is created from button "Add Tab"
 */
AntObjectFormEditor.prototype.addTab = function(con, tabName, isNew)
{
    // Add tab to available tabs
    this.availableTabs[this.availableTabs.length] = {available:true};
    this.containerIndex++;
    this.numTabs++;
    
    // Get tab name
    tabName = tabName.replace("&", "&amp;");
    
    // Create tab
    var tabCon = this.formViewTabs.addTab(tabName);
    tabCon.oid = this.containerIndex;
    tabCon.id = "tab";
    tabCon.antType = "con";
    tabCon.name = tabName;
    
    // Select the new tab
    if(isNew)
        this.formViewTabs.selectTab(this.numTabs-1);
    else
        this.formViewTabs.print(con);
    
    this.buildFormTab(tabCon);
    return tabCon;
}

/**
 * Deletes a tab
 *
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.deleteTab = function()
{
    var tabIdx = this.formViewTabs.getIndex();
    
    this.availableTabs[tabIdx].available = false;
    this.formViewTabs.getPageCon(tabIdx).conState = false;
    this.formViewTabs.deleteTab(tabIdx);

    // Create a new tab if last tab left was deleted
    if(this.formViewTabs.getNumTabs() == 0)
        this.addTab(this.canvasCon, "New Tab", true);
    else
    {
        for(tab in this.availableTabs)
        {
            var currentTab = this.availableTabs[tab];
            
            if(currentTab.available == true)
            {
                this.formViewTabs.selectTab(tab);
                break;
            }
        }
    }
}

/**
 * Builds the display for code view
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {xml} childNodes   Data that contains the form structure
 * @param {Integer} num     number of spaces
 */
AntObjectFormEditor.prototype.generateUIML = function(childNodes, space)
{
    var tabSpaceStr = tabSpace(space); // Creats a tabbed spaces string
        
        // Loop through array and generate UIML code
    if(childNodes.children && childNodes.children.length)
    {
        for(node in childNodes.children)
        {
            var currentNode = childNodes.children[node];
            
            switch(currentNode.type)
            {
                case "tab":
                    var name = currentNode.name.replace("&", "&amp;");
                    
                    this.xmlFormLayoutText += "<tab name='" + name + "'>\n";
                    if(currentNode.children != null)
                        this.generateUIML(currentNode, space + 1);
                        
                    this.xmlFormLayoutText += "</tab>\n";
                    break;
                    
                case "column":
                    this.xmlFormLayoutText += tabSpaceStr + "<column";
                    
                    if(currentNode.width != null)
                        this.xmlFormLayoutText += " width='" + currentNode.width + "'";    
                    
                    if(currentNode.styleAttr != null)
                        this.xmlFormLayoutText += " style='" + currentNode.styleAttr + "'";    
                    
                    if(currentNode.showif != null)
                        this.xmlFormLayoutText += " showif='" + currentNode.showif + "'";
                    
                    this.xmlFormLayoutText += ">\n";
                    if(currentNode.children != null)
                        this.generateUIML(currentNode, space+1);
                        
                    this.xmlFormLayoutText += tabSpaceStr + "</column>\n";
                    break;
                    
                case "row":
                    if(currentNode.showif != null)
                        this.xmlFormLayoutText += tabSpaceStr + "<row showif='" + currentNode.showif + "'>\n";
                    else
                        this.xmlFormLayoutText += tabSpaceStr + "<row>\n";
                    
                    if(currentNode.children != null)
                            this.generateUIML(currentNode, space+1);
                    
                    this.xmlFormLayoutText += tabSpaceStr + "</row>\n";
                    break;
                    
                case "fieldset":
                    var name = currentNode.name.replace("&", "&amp;");
                    
                    if(currentNode.showif != null)
                        this.xmlFormLayoutText += tabSpaceStr + "<fieldset name='" + name + "' showif='" + currentNode.showif + "'>\n";
                    else
                        this.xmlFormLayoutText += tabSpaceStr + "<fieldset name='" + name + "'>\n";
                    
                    if(currentNode.children != null)
                            this.generateUIML(currentNode, space+1);
                    
                    this.xmlFormLayoutText += tabSpaceStr + "</fieldset>\n";            
                    break;
                    
                case "objectsref":
                    this.xmlFormLayoutText += tabSpaceStr + "<objectsref obj_type='" + currentNode.objType + "'";
                    
                    if(currentNode.refField != null)
                        this.xmlFormLayoutText += " ref_field='" + currentNode.refField +"'";
                    
                    this.xmlFormLayoutText += "></objectsref>\n";
                    break;
                
                case "report":
                    this.xmlFormLayoutText += tabSpaceStr + "<report id='" + currentNode.reportid + "' filterby='" + currentNode.filterby + "'></report>\n";
                    break;
                    
                case "all_additional":
                case "recurrence":
                case "spacer":
                    this.xmlFormLayoutText += tabSpaceStr + "<" + currentNode.type + "></" + currentNode.type + ">\n";
                    break;
                    
                case "plugin":
                    this.xmlFormLayoutText += tabSpaceStr + "<plugin name='" + currentNode.name + "'></plugin>\n";
                    break;
                
                default:
                    this.xmlFormLayoutText += tabSpaceStr + "<field name='" + currentNode.type + "' ";
                    
                    if(typeof currentNode.multiline !== "undefined")
                    {
                        if(currentNode.multiline == true)
                            this.xmlFormLayoutText += "multiline='t' ";
                        else
                            this.xmlFormLayoutText += "multiline='f' ";
                    }
                    
                    if(typeof currentNode.rich !== "undefined")
                    {
                        if(currentNode.rich == true)
                            this.xmlFormLayoutText += "rich='t' ";
                        else
                            this.xmlFormLayoutText += "rich='f' ";
                    }                
                    
                    if(currentNode.tooltip)
                        this.xmlFormLayoutText += "tooltip='" + currentNode.tooltip + "' ";
                        
                    if(currentNode.part)
                        this.xmlFormLayoutText += "part='" + currentNode.part + "' ";
                        
                    if(currentNode.label && currentNode.label != currentNode.title)
                        this.xmlFormLayoutText += "label='" + currentNode.label + "' ";
                    
                    if(currentNode.hidelabel)
                        this.xmlFormLayoutText += "hidelabel='t'";
                    else
                        this.xmlFormLayoutText += "hidelabel='f'";
                        
                    // For image field
                    if(currentNode.profileimage)
                        this.xmlFormLayoutText += " profile_image='t' path='" + currentNode.path;
                        
                    this.xmlFormLayoutText += "></field>\n";
                    break;
            }
        }
    }
}

/**
 * Maps the HTML Structure of the code editor
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con      Current container on where to look the fields/structures
 */
AntObjectFormEditor.prototype.mapNodes = function(con)
{
    for(node in con.childNodes)
    {
        var currentNode = con.childNodes[node];
        
        // If no antType but children, get children
        if(currentNode.antType == null && currentNode.childNodes != null)
            this.mapNodes(currentNode);
        else
        {
            // Only check containers with antType
            switch(currentNode.antType)
            {
                case "con":
                    // Check if container was deleted
                    if(currentNode.conState == false)
                        break;
                        
                    this.buildFormArray(currentNode);
                    this.mapNodes(currentNode);
                    break;
                    
                case "field":
                    // Check if field was deleted
                    if(currentNode.conState == false)
                        break;
                        
                    this.buildFormArray(currentNode);
                    break;
                default:
            }
        }
    }
}

/**
 * Builds the form view to code view in array format
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {DOMElement} con      Current container on where to look the fields/structures
 */
AntObjectFormEditor.prototype.buildFormArray = function(con)
{
    // Create default object values for current UIML index
    var nodeObject = {conId:con.oid, type:con.id, children:[]};
    
    if(con.name)
        nodeObject.name = con.name;
    
    // Tabs are children of root
    if(con.id == "tab")
        this.uiml.children[this.uiml.children.length] = nodeObject;
    else
    {
        // Columns have different parents than other containers
        if(con.id == "column")
        {
            if(con.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.oid)
                this.mapChildNodes(this.uiml, con, con.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.oid);
            else
                this.mapChildNodes(this.uiml, con, con.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.oid);
        }
        else
        {
            // If child of dropzone container, else child of tab
            if(con.pnode.oid)
                this.mapChildNodes(this.uiml, con, con.parentNode.parentNode.oid);
            else
            {
                // If child of tab, else root element (outside of tabs)
                if(con.parentNode.parentNode.parentNode.oid)
                    this.mapChildNodes(this.uiml, con, con.parentNode.parentNode.parentNode.oid);
                else
                {
                    switch(con.id)
                    {
                        case "plugin":
                            nodeObject.children = null;
                            break;
                            
                        case "column":
                            nodeObject.width = con.width;
                            nodeObject.styleAttr = con.styleAttr;
                        default:
                            nodeObject.showif = null;                            
                            if(con.showifType != null && con.showifValue != null)
                                nodeObject.showif = con.showifType + "=" + con.showifValue;
                                
                            if(con.part)
                                nodeObject.part = con.part;
                            break;
                    }
                    
                    this.uiml.children[this.uiml.children.length] = nodeObject;
                }
            }
        }
    }
}

/**
 * Maps the child structures/fields
 *
 * @public
 * @this {AntObjectFormEditor}
 * @param {Array} childNodes    Current instance of the parent structure
 * @param {DOMElement} con      Current container on where to look the fields/structures
 * @param {Integer} id          Field/Structure Id
 */
AntObjectFormEditor.prototype.mapChildNodes = function(childNodes, con, id)
{
    if(childNodes.children && childNodes.children.length)
    {
        for(node in childNodes.children)
        {
            var currentNode = childNodes.children[node];
            // Check if this node is the parent
            if(currentNode.conId == id)
            {
                // Create default object values for current UIML index
                var childObject = {conId:con.oid, type:con.id, children:[]};
                currentNode.children[currentNode.children.length] = childObject;
                
                if(con.name)
                    childObject.name = con.name;
                
                // Attach container
                if(con.antType == "con")
                {
                    switch(con.id)
                    {
                        case "column":
                            childObject.width = con.width;
                            childObject.styleAttr = con.styleAttr;
                        default:
                            childObject.showif = null;
                            if(con.showifType != null && con.showifValue != null)
                                childObject.showif = con.showifType + "=" + con.showifValue
                            
                            break;
                    }
                }
                // Attach field
                else
                {
                    childObject.children = null; // set all attached field children as null;
                    switch(con.id)
                    {
                        case "all_additional":
                        case "recurrence":
                        case "spacer":
                        case "plugin":
                            break;
                            
                        case "objectsref":
                            if(con.refField != null)
                                childObject.refField = con.refField;
                            break;
                        
                        case "report":
                            childObject.reportid = con.reportid;
                            childObject.filterby = con.filterby;
                            break;
                            
                        case "image_id":
                            childObject.profileimage = con.profile_image;
                            childObject.path = con.path;
                            childObject.hidelabel = con.hidelabel;
                            break;
                        
                        default:
                            childObject.label = con.label;
                            childObject.title = con.title;
                            childObject.tooltip = con.tooltip;
                            childObject.hidelabel = con.hidelabel;
                            
                            if(con.multiline != null && con.rich != null)
                            {
                                childObject.multiline = con.multiline;
                                childObject.rich = con.rich;
                            }
                            
                            if(con.part)
                                childObject.part = con.part;
                            break;
                    }
                }
            }
            else
            {
                // Keep searching for parent node
                if(currentNode.children != null)
                {
                    this.mapChildNodes(currentNode, con, id);
                }
            }
        }
    }
}

/**
 * Sets up the code view
 *
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.setupCodeView = function()
{
    this.xmlFormLayoutText = "";
    this.uiml = {'type':'root', children:[]};
    this.mapNodes(this.canvasCon);
    this.generateUIML(this.uiml, 0);
    
    this.codeViewInput.value = this.xmlFormLayoutText;
}

/**
 * Sets up the code view
 *
 * @public
 * @this {AntObjectFormEditor}
 */
AntObjectFormEditor.prototype.testXmlString = function()
{
    if (this.codeViewInput.value == "")
            return true;
            
    var xmlString = "<doc>" + this.codeViewInput.value + "</doc>";

    try
    {
        if (window.DOMParser)
        {
            var parser = new DOMParser();
            var xmlDoc = parser.parseFromString(xmlString, "text/xml");
            
        }
        else // Internet Explorer
        {
            var xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = "false";
            xmlDoc.loadXML(xmlString);
        } 

        var errorMsg = null;
        if (xmlDoc.parseError && xmlDoc.parseError.errorCode != 0) 
        {
            errorMsg = xmlDoc.parseError.reason
                      + " at line " + xmlDoc.parseError.line
                      + " at position " + xmlDoc.parseError.linepos;
        }
        else 
        {
            if (xmlDoc.documentElement) 
            {
                if (xmlDoc.documentElement.nodeName == "parsererror") 
                    errorMsg = xmlDoc.documentElement.childNodes[0].nodeValue;
            }
            else 
                errorMsg = "XML Parsing Error!";
        }

        if (errorMsg) 
            throw errorMsg;
        else
            return true;
    }
    catch (e)
    {
        alert("Error detected in XML. Please correct before saving: " + e);
        return false;
    }
}

/**
 * @fileOverview Handle defintion of entities.
 *
 * This class is a client side mirror of /lib/EntityDefinition
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of EntityDefinition
 *
 * @constructor
 * @param {string} objType The object type to load
 */
Ant.EntityDefinition = function(objType)
{
	/**
	 * The object type for this definition
	 *
	 * @public
	 * @type {string}
	 */
	this.objType = objType;

	/**
	 * The object type title
	 *
	 * @public
	 * @type {string}
	 */
	this.title = "";

	/**
	 * Recurrence rules
	 *
	 * @public
	 * @type {string}
	 */
	this.recurRules = "";

	/**
	 * Unique id of this object type
	 *
	 * @public
	 * @type {string}
	 */
	this.id = "";

	/**
	 * The current schema revision
	 *
	 * @public
	 * @type {int}
	 */
	this.revision = 0;

	/**
	 * Determine if this object type is private
	 *
	 * @public
	 * @type {bool}
	 */
	this.isPrivate = false;

	/**
	 * If object is heirarchial then this is the field that will store a reference to the parent
	 *
	 * @public
	 * @type {string}
	 */
	this.parentField = "";

	/**
	 * Default field used for printing the name/title of objects of this type
	 *
	 * @public
	 * @type {string}
	 */
	this.listTitle = "";

	/**
	 * The base icon name used for this object.
	 *
	 * This may be over-ridden by individual objects for more dynamic icons, but this serves
	 * as the base in case the individual object did not yet define an icon.
	 *
	 * @public
	 * @type {string}
	 */
	this.icon = "";

	/**
	 * Browser mode for the current user
	 *
	 * @public
	 * @type {string}
	 */
	this.browserMode = "";

	/**
	 * Is this a system level object
	 *
	 * @public
	 * @type {bool}
	 */
	this.system = true;

	/**
	 * Fields associated with this object type
	 *
	 * For definition see EntityDefinition_Field::toArray on backend
	 *
	 * @private
	 * @type {Object{}}
	 */
	this.fields = new Array();

	/**
	 * Array of object views
	 *
	 * @private
	 * @type {AntObjectBrowserView[]}
	 */
	this.views = new Array();

	/**
	 * Browser list blank state content
	 *
	 * This is used when there are no objects
	 *
	 * @private
	 * @type {string}
	 */
	this.browserBlankContent = "";
}

/**
 * Load the definition from controller
 *
 * @param {bool} forceNoAsync If true the do not use async which will suspend execution until retrieved
 */
Ant.EntityDefinition.prototype.load = function(forceNoAsync)
{
	var xhr = new alib.net.Xhr();

	// Force return of data immediately
	if (forceNoAsync)
	{
		xhr.setAsync(false);
	}
	else
	{
		// Setup callback
		alib.events.listen(xhr, "load", function(evt) { 
			var data = this.getResponse();
			evt.data.defCls.fromData(data);
		}, {defCls:this});
	}

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
	}, {defCls:this});

	var ret = xhr.send("/controller/Object/getDefinition", "POST", {obj_type:this.objType});

	if (forceNoAsync)
		this.fromData(xhr.getResponse());
}

/**
 * Initialize this object from data
 *
 * @public
 * @param {Object} data Initialize values of this defintion based on data
 */
Ant.EntityDefinition.prototype.fromData = function(data)
{
	this.id = data.id;
	this.title = data.title;
	this.revision = data.revision;
	this.isPrivate = data.is_private;
	this.recurRules = data.recur_rules;
	this.parentField = data.parent_field;
	this.listTitle = data.list_title;
	this.icon = data.icon;
	this.browserMode = data.browser_mode;
	this.browserBlankContent = data.browser_blank_content;
	this.system = data.system;
	this.fields = new Array();

	for (var fname in data.fields)
	{
		var field = new Ant.EntityDefinition.Field();
		field.fromArray(data.fields[fname]);
		this.fields.push(field);
	}

	// Load views
	this.views = new Array();
	for (var i in data.views)
	{
		var view = new AntObjectBrowserView();
		view.fromData(data.views[i]);
		this.views.push(view);
	}

	// Let any listeners know that we are finished loading
	alib.events.triggerEvent(this, "load");
}

/**
 * Get a field by name
 *
 * @public
 * @param {Object} data Initialize values of this defintion based on data
 */
Ant.EntityDefinition.prototype.getField = function(fname)
{
	for (var i in this.fields)
	{
		if (this.fields[i].name == fname)
			return this.fields[i];
	}
	return false;
}

/**
 * Get fields
 *
 * @public
 * @return {Ant.EntityDefinition.Field[]}
 */
Ant.EntityDefinition.prototype.getFields = function()
{
	return this.fields;
}

/**
 * Get views
 *
 * @public
 * @return {AntObjectBrowserView[]}
 */
Ant.EntityDefinition.prototype.getViews = function()
{
	return this.views;
}

/**
 * Get browser blank state content
 *
 * @public
 * @return {string}
 */
Ant.EntityDefinition.prototype.getBrowserBlankContent = function()
{
	return this.browserBlankContent;
}

/**
 * @fileOverview Define entity definition fields
 *
 * This class is a client side mirror of /lib/EntityDefinition/Field on the server side
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of Ant.EntityDefinition.Field
 *
 * @constructor
 */
Ant.EntityDefinition.Field = function()
{
	/**
	 * Unique id if the field was loaded from a database
	 *
	 * @public
	 * @type {string}
	 */
	this.id = "";

	/**
	 * Field name (REQUIRED)
	 *
	 * No spaces or special characters allowed. Only alphanum up to 32 characters in length.
	 *
	 * @public
	 * @type {string}
	 */
	this.name = "";

	/**
	 * Human readable title
	 *
	 * If not set then $this->name will be used:
	 *
	 * @public
	 * @type {string}
	 */
	this.title = "";

	/**
	 * The type of field (REQUIRED)
	 *
	 * @public
	 * @type {string}
	 */
	this.type = "";

	/**
	 * The subtype
	 *
	 * @public
	 * @type {string}
	 */
	this.subtype = "";

	/**
	 * Optional mask for formatting value
	 *
	 * @public
	 * @type {string}
	 */
	this.mask = "";

	/**
	 * Is this a required field?
	 *
	 * @public
	 * @var bool
	 */
	this.required = false;

	/**
	 * Is this a system defined field
	 *
	 * Only user fields can be deleted or edited
	 *
	 * @public
	 * @var bool
	 */
	this.system = false;

	/**
	 * If read only the user cannot set this value
	 *
	 * @public
	 * @var bool
	 */
	this.readonly = false;

	/**
	 * This field value must be unique across all objects
	 *
	 * @public
	 * @var bool
	 */
	this.unique = false;

	/**
	 * Optional use_when condition will only display field when condition is met
	 *
	 * This is used for things like custom fields for posts where each feed will have special
	 * custom fields on a global object - posts.
	 *
	 * @public
	 * @type {string}
	 */
	this.useWhen = "";

	/**
	 * Default value to use with this field
	 *
	 * @public
	 * @var array('on', 'value')
	 */
	this.defaultVal = null;

	/**
	 * Optional values
	 *
	 * If an associative array then the id is the key, otherwise the value is used
	 *
	 * @public
	 * @var array
	 */
	this.optionalValues = null;

	/**
	 * Sometimes we need to automatically create foreign reference
	 *
	 * @public
	 * @type {bool}
	 */
	this.autocreate = false;

	/**
	 * If autocreate then the base is used to define where to put the new referenced object
	 *
	 * @public
	 * @type {string}
	 */
	this.autocreatebase = "";

	/**
	 * If autocreate then which field should we use for the name of the new object
	 *
	 * @public
	 * @type {string}
	 */
	this.autocreatename = "";
}

/**
 * Initialize this field from an array
 *
 * The array is typically from a JSON request returning a field in array form
 * which basicallly takes each property in camelCase and converts it to under_score
 * format to keep the data formats clear.
 *
 * @param {Array|Object}
 */
Ant.EntityDefinition.Field.prototype.fromArray = function(data)
{
	this.id = data.id;
	this.name = data.name;
	this.title = data.title;
	this.type = data.type;
	this.subtype = data.subtype;
	this.defaultVal = data["default"];
	this.mask = data.mask;
	this.required = data.required;
	this.system = data.system;
	this.readonly = data.readonly;
	this.unique = data.unique;
	this.useWhen = data.use_when;
	this.optionalValues = data.optional_values;
}

/**
 * Get array object from this field for sending
 *
 * The array is typically from a JSON request returning a field in array form
 * which basicallly takes each property in camelCase and converts it to under_score
 * format to keep the data formats clear.
 *
 * @return {Object}
 */
Ant.EntityDefinition.Field.prototype.toArray = function()
{
	
}

/**
 * Get the default value for this vield
 *
 * @param {string} on The event to set default value on - default to null
 * @return {string}
 */
Ant.EntityDefinition.Field.prototype.getDefault = function(on)
{
	if (!this.defaultVal)
		return "";

	if (this.defaultVal.on == on)
	{
		if (this.defaultVal.value)
			return this.defaultVal.value;
	}

	return "";
}

/**
 * @fileOverview Handle loading and caching EntityDefinitions
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 *			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Static namespace
 */
Ant.EntityDefinitionLoader = {};

/**
 * Array of loaded definitions so we only load once
 *
 * @private
 * @type {EntityDefinition[]}
 */
Ant.EntityDefinitionLoader.definitions_ = new Array();

/**
 * Get a definition for an object type
 *
 * @param {string} objType The object type name to get
 * @param {function} callback If set use async to pull the definition (recommended)
 */
Ant.EntityDefinitionLoader.get = function(objType, callback) {
	// If already cached return
	if (this.definitions_[objType])
		return this.definitions_[objType];

	// Load the definition
	var forceNoAsync = (callback) ? false : true;
	var def = new Ant.EntityDefinition(objType);
	if (callback)
		alib.events.listen(def, "load", callback);
	def.load(forceNoAsync);
	this.definitions_[objType] = def;

	return def;
}
/**
 * @fileoverview This class handles setting and getting values for an object template
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Object template class
 *
 * @param {string} obj_type The type of object this template affects
 * @param {string} tid The optional id of the template we are editing
 */
function AntObjectTemp(obj_type, tid)
{
	/**
	 * Unique object id
	 *
	 * This will be set to a number when saving a new object.
	 *
	 * @public
	 * @type {number}
	 */
    this.tid = tid;
    
	/**
	 * Textual name of the objet type we are working with
	 *
	 * @protected
	 * @type {string}
	 */
    this.objType = obj_type;

	/**
	 * Values
	 *
	 * @type {Array}
	 */
	this.values = new Array();
}

/**
 * Set a value of a field by name
 *
 * @param {string} fname The name of the field
 * @param {string} fval The value to set
 */
AntObjectTemp.prototype.setValue = function(fname, fval)
{
	this.values[fname] = fval;
}

/**
 * Get the value of a field
 *
 * @param {string} fname The name of the field
 */
AntObjectTemp.prototype.getValue = function(fname)
{
	return this.values[fname];
}

/**
 * Append a value to a multi value field
 *
 * @param {string} fname The name of the field
 * @param {string} fval The value to add
 * @param {string} fvalLabel If we are working with fkey_ or objec_ then this is the label of the key to be cached
 */
AntObjectTemp.prototype.addMValue = function(fname, fval, fvalLabel)
{
	if (typeof this.values[fname] != "Array")
		this.values[fname] = new Array();

	this.values[fname].push({
		key: fval,
		value: fvalLabel || ""
	});
}

/**
 * Save this template
 */
AntObjectTemp.prototype.save = function()
{
	alib.events.trigger(this, "saved");
}

/**
 * @fileoverview This class is responsible for loading all object templates for editing
 *
 * AntObjectTempLoader is used to load all types of objets in ANT. This class should not be responsible
 * for printing any ui elements, but rather loading the appropriate forms for each object type.
 *
 * Below is an example:
 * <code>
 * 	var objLoader = new AntObjectTempLoader("customer");
 * 	objLoader.onclose = function() { // do something when the object is closed  }
 * 	objLoader.print(document.getElementById("body"));
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectTempLoader.
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 * @param {number} oid The optional unique id of an object instance to load
 * @param {CAntObject} objInst Optional existing of the object
 * @param {AntObjectTemp} parentTemplate If set this is a child of a parent template
 */
function AntObjectTempLoader(obj_type, tid, parentTemplate)
{
	/**
	 * Instance of CAntObject of type obj_type - loads object data if oid is defined
	 *
	 * @public
	 * @type {CAntObject}
	 */
	this.mainObject = new CAntObject(obj_type);

	/**
	 * Load the template
	 *
	 * @public
	 * @type {AntObjectTemp}
	 */
	this.template = new AntObjectTemp(obj_type, tid);

	/**
	 * Optional parent templaet
	 *
	 * @public
	 * @type {AntObjectTemp}
	 */
	this.parentTemplate = parentTemplate || null;

	/**
	 * Unique object id
	 *
	 * This will be set to a number when saving a new object.
	 *
	 * @public
	 * @type {number}
	 */
    this.tid = tid;
    
	/**
	 * Textual name of the objet type we are working with
	 *
	 * @protected
	 * @type {string}
	 */
    this.objType = obj_type;

	/**
	 * Dialog if in dialog mode
	 *
	 * @type {CDialog}
	 */
	this.dialog = null;
}

/**
 * Display a dialog with this project template
 *
 * @public
 */
AntObjectTempLoader.prototype.showDialog = function()
{
	this.dialog = new CDialog("Template Editor");
	this.dialog.f_close = true;

	var dlgCon = alib.dom.createElement("div");
	
	this.dialog.customDialog(dlgCon, 800);
	this.renderForm(dlgCon);

	// TODO: add action buttons
	
	// Make sure the dialog is positioned correctly
	this.dialog.reposition();
}

/**
 * Render the form
 *
 * @public
 * @param {DOMElement} con The container that will hold the form
 */
AntObjectTempLoader.prototype.renderForm = function(con)
{
	var fldCon = alib.dom.createElement("div", con);
	
	var tbl = alib.dom.createElement("table", fldCon);
	var tbody = alib.dom.createElement("tbody", tbl);

	var fields = this.mainObject.getFields();
	for (var i in fields)
	{
		if (fields[i].type == 'object_multi' || fields[i].readonly)
			continue;

		var row = alib.dom.createElement("tr", tbody);

		var lbl = alib.dom.createElement("td", row);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = fields[i].title;

		var valCon = alib.dom.createElement("td", row);
		alib.dom.styleSetClass(valCon, "formValue");

		// TODO: render input here
	}

	// TODO: Below is a teamporary manual hack
	if (this.objType == "project")
	{
		var frm = new CWindowFrame("Tasks");
		var frmcon = frm.getCon();
		frm.print(con);
		
		// Add task con
		var actCon = alib.dom.createElement("div", frmcon);
		var lnk = alib.dom.createElement("a", actCon, "Add Task");
		lnk.href = "javascript:void(0);";
		lnk.parentTemplate = this.template;
		lnk.onclick = function() {
			var subldr = new AntObjectTempLoader("task", null, this.parentTemplate);
			subldr.showDialog();
		}
	}
}

/**
 * @fileoverview Javascript side implementation of the AntObjectList php class
 *
 * This class will load page of 100 objects at once. This means that we have to
 * keep a current offset and dynamically query the server as new pages are needed.
 * 
 * Example:
 * <code>
 * 	var olist = new AntObjectList("customer");
 * 	olist.addCondition("and", "first_name", "is_equal", "Sky");
 * 	olist.addSortOrder("first_name", "desc");
 * 	var num = olist.getObjects();
 * 	for (var i = 0; i < num; i++)
 * 	{
 *		// Get instance of CAntObject
 * 		var obj = olist.getObject(i);
 * 		
 * 		// Get data of object
 * 		var objData = olist.getObjectData(i);
 * 	}
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectList
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
function AntObjectList(obj_type)
{
	/**
	 * Object type for this list
	 *
	 * @type {string}
	 * @private
	 */
	this.objType = obj_type;

	/**
	 * Array of condition objects {blogic, fieldName, operator, condValue}
	 *
	 * @type {array}
	 * @private
	 */
	this.conditions = new Array();

	/**
	 * Array of sort order objects
	 *
	 * @type {array}
	 * @private
	 */
	this.sortOrder = new Array();

	/**
	 * Array of objects with the following properties: id, revision
	 *
	 * @type {array}
	 * @private
	 */
	this.objects = new Array();

	/**
	 * The current offset of the total number of items
	 *
	 * @type {number}
	 * @private
	 */
	this.offset = 0;

	/**
	 * Number of items to pull each query
	 *
	 * @type {number}
	 * @private
	 */
	this.limit = 100;

	/**
	 * Total number of objects in this query set
	 *
	 * @type {number}
	 * @private
	 */
	this.totalNum = 0;

	/**
	 * Get object asynchronously
	 *
	 * @type {bool}
	 * @public
	 */
	this.async = true;

	/**
	 * Object for storing data for onload callback function
	 *
	 * @type {Object}
	 * @public
	 */
	this.cbData = new Object();

	/**
	 * Pagination data based on offset and limit
	 *
	 * Properties include: next (page), prev (page), desc
	 *
	 * @type {Object}
	 * @public
	 */
	this.pagination = new Object();
}

/**
 * Add a condition to query by
 *
 * @public
 * @this {AntObjectList}
 * @param {string} blogic Either "and" or "or" in relation to the past condition (if any)
 * @param {string} name The name of the field to query against
 * @param {string} operator The string operator
 * @param {string} value The value of the query condition.
 */
AntObjectList.prototype.addCondition = function(blogic, fieldName, operator, condValue)
{
	var cond = new Object();
	cond.blogic = blogic;
	cond.fieldName = fieldName;
	cond.operator = operator;
	cond.condValue = condValue;
	this.conditions[this.conditions.length] = cond;
}

/**
 * Clear conditions
 *
 * @public
 * @this {AntObjectList}
 */
AntObjectList.prototype.clearConditions = function()
{
	this.conditions = new Array();
}

/**
 * Add a sort order to the list. Can add multiple.
 *
 * @public
 * @this {AntObjectList}
 * @param {string} field The field name to sort by
 * @param {string} selorder The direcion of the sort - 'asc' or 'desc'
 */
AntObjectList.prototype.addSortOrder = function(field, selorder)
{
	var sorder = (selorder) ? selorder : "asc";

	var ind = this.sortOrder.length;
	this.sortOrder[ind] = {fieldName:field, order:sorder};
}

/**
 * Clear sort order
 *
 * @public
 * @this {AntObjectList}
 */
AntObjectList.prototype.clearSorting = function()
{
	this.sortOrder = new Array();
}

/**
 * Query the server for a list of objects matching all conditions
 *
 * @public
 * @this {AntObjectList}
 * @param {int} offset Page to start loading
 * param {int} limit Maximum number of objects to return
 */
AntObjectList.prototype.getObjects = function(offset, limit)
{
	if (typeof offset != "undefined")
		this.offset = offset;
	
	if (typeof limit != "undefined")
		this.limit = limit;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(resp)
	{
		this.cbData.cls.totalNum = resp.totalNum;

		if (resp.entities.length)
		{
            this.cbData.cls.objects = resp.entities;
		}

		// With the new /svr/entity/query we do not use pagination anymore
		/*if (resp.pagination)
		{
			this.cbData.cls.pagination.next = resp.pagination.next;
			this.cbData.cls.pagination.prev = resp.pagination.prev;
			this.cbData.cls.pagination.desc = resp.pagination.decs;
		}
		else
		{
			this.cbData.cls.pagination.next = 0;
			this.cbData.cls.pagination.prev = 0;
			this.cbData.cls.pagination.desc = "";
		}*/

		this.cbData.cls.onLoad();
	};

	// Set basic query vars
	var args = [["obj_type", this.objType], ["offset", this.offset], ["limit", this.limit]];


	// Add conditions
	for (var i = 0; i < this.conditions.length; i++)
	{
		var cond = this.conditions[i];

		args[args.length] = ["where[]", [cond.blogic, cond.fieldName, cond.operator, cond.condValue]];
	}
	
	// Get order by
	for (var i = 0; i < this.sortOrder.length; i++)
	{
		args[args.length] = ["order_by[]", this.sortOrder[i].fieldName + "," + this.sortOrder[i].order];
	}

	//ajax.exec("/controller/ObjectList/query", args, this.async);
	ajax.exec("/svr/entity/query", args, this.async);
}

/**
 * Public callback function used to determine when the list has been loaded
 *
 * @public
 * @this {AntObjectList}
 */
AntObjectList.prototype.onLoad = function()
{
}

/**
 * Get number of objects in the current result set
 *
 * @public
 * @this {AntObjectList}
 * @return {number} The number of objects in the current result set
 */
AntObjectList.prototype.getNumObjects = function()
{
	return this.objects.length;
}

/**
 * Crete a new CAntObject at the current index
 *
 * @public
 * @this {AntObjectList}
 * @param {number} idx The index of the object to retrieve
 * @return {CAntObject} Object on success, false on failure
 */
AntObjectList.prototype.getObject = function(idx)
{
	// Make sure we are not outside the boundaries of the index
	if (idx >= this.objects.length)
		return false;

	var obj = new CAntObject(this.objType, this.objects[idx].id);
	obj.setData(this.objects[idx]);
	return obj;
}

/**
 * Get the json data for an object without creating a CAntObject
 *
 * @public
 * @this {AntObjectList}
 * @param {number} idx The index of the object data to retrieve
 * @return {Object} Object on success, false on failure
 */
AntObjectList.prototype.getObjectData = function(idx)
{
	// Make sure we are not outside the boundaries of the index
	if (idx >= this.objects.length)
		return false;

	return this.objects[idx];
}

/**
 * @fileoverview This class handles building object browsers in the JS created UI
 *
 * Example:
 * <code>
 * 	var ob = new AntObjectBrowser("customer");
 *	ob.print(document.body);
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectBrowser
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
function AntObjectBrowser(obj_type)
{
	/**
	 * Instance of CAntObject of type obj_type - loads object data if oid is defined
	 *
	 * @public
	 * @type {CAntObject}
	 */
	this.mainObject = new CAntObject(obj_type);

	/**
	 * Array of loaded AntObjectBrowser_Items(s)
	 *
	 * @protected
	 * @type {AntObjectBrowser_Item[])
	 */
	this.objectList = new Array();

	/**
	 * Reference to object we have loaded this browser in the context of
	 *
	 * Usually used to copy common fields to new objects
	 *
	 * @protected
	 * @type {CAntObject}
	 */
	this.objectContext = null;

	/** 
	 * The current view that is being used to display this browser
	 *
	 * @private
	 * @type {AntObjectBrowserView}
	 */
	this.currentView = null;

	/**
	 * Conditions used to narrow object query
	 *
	 * @private
	 * @type {Array}
	 */
	this.conditions = new Array();

	/**
	 * Ordering of the object list
	 *
	 * @private
	 * @type {Array}
	 */
	this.sort_order = new Array();

	this.view_fields = new Array();
	this.m_filters = new Array(); // Used for filtering data - especially fkey references

	this.conditionObj = null;
	this.obj_type = obj_type;
	this.options = new Object(); // Used for callback function options

	this.m_advancedSearchDlg = null;
	this.antView = null; // optional AntView reference

	var def_view = this.mainObject.getDefaultView();
	this.loadView(def_view);

	this.searchView = new AntObjectBrowserView(obj_type);
	this.viewsFilterKey = ""; // See nodes on AntObjectBrowser::setViewsFilter

	this.fAllSelected = false;
	this.chkBoxes = new Array();
	this.customActions = new Array();
	//this.objectRows = new Array(); // Store a reference to the div of each object row

	this.optCreateNew = true; // Show new object button in toolbar
	this.optDelete = true; // Show delete button in toolbar
	this.optActions = true; // Show actions dropdown in toobar
	this.searchTitleText = "Search " + this.mainObject.titlePl;
	
	/**
	 * Refresh will force full reload
	 *
	 * @public
	 * @type {bool}
	 */
	this.optForceFullRefresh = false;

	/**
	 * Limit the number of objects to show per page
	 *
	 * @public
	 * @type {int}
	 */
	this.limit = (this.mainObject.showper) ? this.mainObject.showper : 50; // 50 objects per page

	this.hideCheckbox = false; // Can optionall hide the checkbox column. Usually used for reports
	this.useSelect = false; // Upon selecting customer onselect function is called
	this.mainBrowserWorkspace = false; // Load objects inline if main browser workspace
	this.outerCon = null;
	this.browserCon = null;

	/**
	 * Title container at the top of the browser
	 *
	 * @var {DOMElement}
	 */
	this.titleCon = null;


	/**
	 * AntObjectLoader class reference if loading inline
	 *
	 * @var {AntObjectLoader}
	 */
	this.loaderCls = null;

	/**
	 * The id of current/last object that was opened/loaded
	 *
	 * @private
	 * @var {string}
	 */
	this.curObjLoaded = null;

	/**
	 * The object id that is currently selected (for actions)
	 *
	 * @private
	 * @var {string}
	 */
    this.selectedObjId = null;

	/**
	 * Container object used by outside classes to store callback properties
	 *
	 * @public
	 * @type {Object}
	 */
	this.cbData = new Object();

	/**
	 * Flag used to put browser in mobile version or mode
	 *
	 * The global Ant object will have a flag called isMobile if we are working in
	 * mobile mode so this variable should be set here in the constructor automatically
	 * and not need to be set anywhere else in ANT except to test.
	 *
	 * @private
	 * @type {bool}
	 */
	this.mobile = (typeof Ant != "undefined" && Ant.isMobile) ? true : false; // Show mobile version

	/**
	 * Flag used to determine if the objects were loaded for the first time or not
	 *
	 * @private
	 * @type {bool}
	 */
	this.firstLoaded = false;

	// Set browser mode params
	if (this.mobile)
		this.mainObject.browserMode = "table";

	switch (this.mainObject.browserMode)
	{
	case 'previewH':
		this.viewmode = "table";
		this.preview = true; // Show preview paine
		this.previewOrientation = "h"; // ["v"=vertical, "h"=horizontal]
	case 'previewV':
		this.viewmode = "details";
		this.preview = true; // Show preview paine
		this.previewOrientation = "v"; // ["v"=vertical, "h"=horizontal]
		break;
	case 'table':
	default:
		this.viewmode = (obj_type=='activity' || obj_type=='status_update' || obj_type=='notification') ? "details" : "table";
		this.preview = false; // Show preview paine
		this.previewOrientation = "v"; // ["v"=vertical, "h"=horizontal]
		break;
	}

	/**
	 * Flag to indicate whether or not to show deleted items in the list
	 *
	 * @var {bool}
	 */
	this.showDeleted = false;

	/**
	 * Alternate handler used for opening message
	 *
	 * This is often used to set alternate handler for objects like draft emails
	 *
	 * @private
	 * @var {string}
	 */
	this.open_handler = "";
	
	/**
	 * If set the list will automatically refresh eveny n number of seconds
	 *
	 * @var {int}
	 */
	this.refreshInterval = null;

	/**
	 * Don't bother querying the server for objects after loading
	 *
	 * @public
	 * @var {bool}
	 */
	this.skipLoad = false;

	/**
	 * Set to true if browser is inline inside an aobject form
	 *
	 * @private
	 * @var {bool}
	 */
	this.inline = false;

	/**
	 * Outer table used for holding list of objects
	 *
	 * @var {DOMTable}
	 */
	this.m_listTable = null;

	/**
	 * Table body used for holding list of objects
	 *
	 * @var {DOMTbody}
	 */
	this.m_listTableBody = null;

	/**
	 * Browse by field (optional)
	 *
	 * If this is set, then this.browseByPath must also be set.
	 *
	 * @private
	 * @var {string}
	 */
    this.browseByField = null;

	/**
	 * If browse by field is set, then a path must also be set
	 *
	 * @private
	 * @var {string}
	 */
    this.browseByPath = null;
	
	/**
	 * Optional alternate root
	 *
	 * This can be used if we want to browse relative to a subobject liek a subfolder
	 *
	 * @private
	 * @var {int}
	 */
    this.browseByRootId = null;

	/**
	 * Toolbar search containers used for resizing
	 *
	 * @var {Object}
	 */
	this.toolbarSearchCons = new Object();

	/**
	 * List of objects being deleted
	 *
	 * This is used to queue updates and allow for immediate removal from the UI while deletion is still taking place
	 *
	 * @var {Array}
	 */
	this.deletingQueue = new Array();
}

/**
 * Set the header title
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} title The title string
 */
AntObjectBrowser.prototype.setTitle = function(title)
{
	if (this.titleCon)
		this.titleCon.innerHTML = title;
}

/**
 * Print the browser inside a container
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {DOMElement} con The container that will house the browser
 */
AntObjectBrowser.prototype.print = function(con)
{
	if (this.preview)
	{
		this.viewmode = "details";
		//if (typeof Ant != "undefined")
			//Ant.setNoBodyOverflow();
	}

	if (this.mobile)
		this.viewmode = "details";

	// Draw the browser
	this.browserCon = con;
	this.mainBrowserWorkspace = true;
	this.buildInterface();
}

/**
 * Print the browser in 'inline' mode which usually means inside an object form.
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {DOMElement} con The container that will house the browser
 * @param {bool} hidetoolbar If set to true then no toolbar will be printed
 * @param {string} title Alternative view title
 */
AntObjectBrowser.prototype.printInline = function(con, hidetoolbar, title)
{
	var hide_tb = (hidetoolbar) ? hidetoolbar : false;
	if (this.currentView && title)
		this.currentView.name = title;

	// Override user settings - inline must not have preview or details (unless mobile)
	this.preview = false;
	this.inline = true;

	if (this.mobile || this.obj_type == "activity" || this.obj_type == "comment" || this.obj_type == "status_update")
		this.viewmode = "details";
	else
		this.viewmode = "table";

	// Draw the browser
	this.browserCon = con;
	this.buildInterface(true, hide_tb);
}

/**
 * Print comments, which are really just objects, but with a comments interface
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {DOMElement} con The container that will house the browser
 * @param {string} obj_reference The object type "type:string" being referenced
 * @param {CAntObject} obj A handle to an object instnace that has comments
 * @param {bool} nocomments If we know there are no comments yet, do no try loading
 */
AntObjectBrowser.prototype.printComments = function(con, obj_reference, obj, nocomments)
{    
	if (obj_reference)
		this.obj_reference = obj_reference;
	if (obj)
		this.parentObject = obj;

	if (nocomments)
		this.skipLoad = true;

	this.viewmode = "details";
	this.printInline(con, true);
}

/**
 * Display object selection dialog. This will call onSelect(oid, label).
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {CDialog} parent_dlg Optional parent dialog for module usage.
 */
AntObjectBrowser.prototype.displaySelect = function(parent_dlg)
{
	var dlg = new CDialog("Select "+this.mainObject.title, parent_dlg);
	dlg.f_close = true;
	this.m_dlg = dlg;
	this.hideCheckbox = true;
	this.useSelect = true;
	this.limit = 50;

	var dv = alib.dom.createElement("div");

	// Views drop-down container
	this.m_viewsdd_con = alib.dom.createElement("span", dv);
	var btn = this.buildViewsDropdown();
	alib.dom.styleAddClass(btn, "noshadow");

	// Search Bar
	this.m_txtSearch = alib.dom.createElement("input", dv);
	this.m_txtSearch.type = "text";
	alib.dom.styleSetClass(this.m_txtSearch, "fancy");
	alib.dom.styleAddClass(this.m_txtSearch, "grLeft");
	this.m_txtSearch.m_cls = this;
	this.m_txtSearch.onkeyup = function(e)
	{
		if (typeof e == 'undefined') 
		{
			if (ALib.m_evwnd)
				e = ALib.m_evwnd.event;
			else
				e = window.event;
		}

		if (typeof e.keyCode != "undefined")
			var code = e.keyCode;
		else
			var code = e.which;

		if (code == 13) // keycode for a return
		{
			this.m_cls.getObjects();
		}
	}

	// Search button
	var searchButton = alib.ui.Button("Search", {
		className:"b1 grRight noshadow nomargin", tooltip:"Search", cls:this, 
		onclick:function() { this.cls.getObjects(); }
	});
	searchButton.print(dv);
	
	this.browserCon = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.browserCon, "margin-top", "3px");
	alib.dom.styleSetClass(this.browserCon, "mgb1");
	if (!this.mobile)
	{
		alib.dom.styleSet(this.browserCon, "height", "350px");
		alib.dom.styleSet(this.browserCon, "border", "1px solid");
		alib.dom.styleSet(this.browserCon, "overflow", "auto");
	}

	dlg.customDialog(dv, 600);

	// Set details mode if we are in mobile
	if (this.mobile)
		this.viewmode = "details";

	this.buildInterface(true, true);

	// Show bottom row actions
	var bottomButtonCon = alib.dom.createElement("div", dv);
	alib.dom.styleSet(bottomButtonCon, "text-align", "right");

	// New object button - used to create new object then return id when closed
	var button = alib.ui.Button("New " + this.mainObject.title, {
		className:"b2", 
		tooltip:"Click to createa a new new " + this.mainObject.title.toLowerCase(), 
		dlg:dlg, 
		bcls:this,
		onclick:function() { 
			var ol = loadObjectForm(this.bcls.mainObject.obj_type);

			// Set filter values
			for (var i in this.bcls.m_filters)
				ol.setValue(this.bcls.m_filters[i].fieldName, this.bcls.m_filters[i].value);

			alib.events.listen(ol, "close", function(evt) {
				evt.data.cls.select(evt.data.ol.mainObject.id, evt.data.ol.mainObject.getName());
			}, {cls:this.bcls, ol:ol}); 
		}
	});
	button.print(bottomButtonCon);

	// Close button
	var button = alib.ui.Button("Cancel", {
		className:"b1 nomargin", tooltip:"Cancel", dlg:dlg, 
		onclick:function() { this.dlg.hide(); }
	});
	button.print(bottomButtonCon);

	// Resize search input
	alib.dom.styleSet(this.m_txtSearch, "width", (alib.dom.getElementWidth(dv) - searchButton.getWidth() - 2) + "px");

	// Reposition now that we've built the interface
	dlg.reposition();
}

/**
 * Display object selection dialog. This will call onSelect(oid, label).
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {CDialog} parent_dlg Optional parent dialog for module usage.
 */
AntObjectBrowser.prototype.displaySelectInline = function()
{
	//this.hideCheckbox = true;
	this.useSelect = true;
	this.limit = 50;
	this.buildInterface(true, true);
}

/**
 * Internal function to select a customer then fire pubic onselect
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {number} oid Selected object id
 * @param {string} label Optional label/name/title of this object
 */
AntObjectBrowser.prototype.select = function(oid, label)
{
	if (this.m_dlg)
		this.m_dlg.hide();

	this.onSelect(oid, label);
}


/**
 * Public callback function used to determine when the objects have loaded
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {number} num_objs The number of objects that exist
 */
AntObjectBrowser.prototype.onLoad = function(num_objs)
{
    // If object browser is used as select, lets remove the overflow auto and fixed height.
    if(this.useSelect)
    {
        this.m_resultsCon.removeAttribute("style");
        alib.dom.styleSet(this.browserCon, "padding-left", "5px");
    }
}

/**
 * Public callback function used to determine what object was returned
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {number} oid Selected object id
 * @param {string} label Optional label/name/title of this object
 */
AntObjectBrowser.prototype.onSelect = function(oid, label)
{
}

/**
 * Public callback function used to determine when a select is canceled
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.onCancel = function()
{
}

/**
 * Add a custom action to this browser
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} name The name of this action - is displayed in the dropdown
 * @param {string} action_url Optional url to handle this action
 * @param {string} icon Path to an icon to display
 * @param {bool} flush If set to true, then remove items from list when action is executed
 */
AntObjectBrowser.prototype.addAction = function(name, action_url, icon, flush)
{
	var act = new Object();
	act.args = [];
	act.name = name;
	act.url = action_url;
	act.funct = "";
	act.toolbar = false;
	act.refresh = true;
	act.icon = (icon) ? icon : "/images/icons/circle_blue.png";
	act.flush = (flush) ? true : false;
	act.doneMsg = "";
	this.customActions[this.customActions.length] = act;
	return act;
}

/**
 * Add a customer toolbar item
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {function} cb_funct Callback function to call when action is clicked
 * @param {array} args Array of arguments to pass to the callback function
 */
AntObjectBrowser.prototype.addToolbarAction = function(cb_funct, cb_args)
{
	var act = new Object();
	act.cb_funct = cb_funct;
	act.cb_args = cb_args;
	/*
	act.funct = (funct) ? funct : "";
	*/
	act.toolbar = true;
	this.customActions[this.customActions.length] = act;

	return act;
}

/**
 * Set browse-by option for this browser
 *
 * Browsers can created heiarchial browse by entries like folders
 * by passing a field name of either type=object or type=fkey/grouping
 *
 * @public
 * @param {string} fieldname The name of the field containing browse by id for this object
 * @param {string} path The initial path of the browse by field
 * @param {int} browseByRootId Optional current working object, like a subfolder to browse relative to root
 * @return {bool} true on success, false on failure
 */
AntObjectBrowser.prototype.setBrowseBy = function(fieldname, path, browseByRootId)
{
	if (!fieldname || !path)
		return false;

	this.browseByField = fieldname;
	this.browseByPath = path;

	if (browseByRootId)
		this.browseByRootId = browseByRootId;
}

/**
 * Create path breadcrumbs for browse by path
 */
AntObjectBrowser.prototype.buildBrowseByPath = function()
{
	// Hide title div
	alib.dom.styleSet(this.listTitleDiv, "display", "none");
	alib.dom.styleSet(this.fsBreadcrumbCon, "display", "block");
	this.fsBreadcrumbCon.innerHTML = "";

	var parts = this.browseByPath.split("/");
	var fullPath = "";
    var fullPathCheck = 0;
	for (var i = 0; i < parts.length; i++)
	{
		var part = parts[i];
		var title = part;

		if (i == 0 && part == "") // root
		{
			title = "Global Files";
			part = "/";
            fullPathCheck = 1;
		}
		else if (i == 0 && part == "%userdir%")
		{
			title = "My Files";
            fullPathCheck = 0;
		}
        
		if (i > fullPathCheck)
			fullPath += "/";
		
		fullPath += part;

		if (i > 0)
			var sp = alib.dom.createElement("span", this.fsBreadcrumbCon, "&nbsp;/&nbsp;");

		var a = alib.dom.createElement("a", this.fsBreadcrumbCon);
		a.innerHTML = title;
		a.href = "javascript:void(0);";
		a.fullPath = fullPath;
		a.bcls = this;
		a.onclick = function()
		{
			this.bcls.changeBrowseByPath(this.fullPath);
		}
	}
}

/**
 * Load view settings to current view
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {AntObjectBrowserView} view The view to apply to this browser
 */
AntObjectBrowser.prototype.loadView = function(view)
{
	if (view==null)
		return;

	// Make a copy with slice
	this.conditions = view.conditions.slice(0);
	this.sort_order = view.sort_order.slice(0);
	this.view_fields = view.view_fields.slice(0); 
	this.currentView = view;
    
	if (this.listTitleDiv && this.listTitleDiv.lbl)
	{
		if (view.name)
			this.listTitleDiv.lbl.innerHTML = view.name;
		else if (!this.preview)
			this.listTitleDiv.lbl.innerHTML = "Search Results";
	}
}

/**
 * Clear (default) view settings except for columns
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.clearView = function()
{
	// Clear conditions and sort order but leave view fields
	this.conditions = new Array();
	//this.sort_order = new Array();  - Leave default sort order
	this.currentView = null;

	if (this.listTitleDiv)
	{
		if (view.name)
			this.listTitleDiv.lbl.innerHTML = this.mainObject.titlePl;
	}
}

/**
 * Add conditions to the query
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} blogic Either "and" or "or" in relation to the past condition (if any)
 * @param {string} name The name of the field to query against
 * @param {string} operator The string operator
 * @param {string} value The value of the query condition.
 * @param {bool} nooverwrite If set to true, do not overwite conditions for a specific field name
 */
AntObjectBrowser.prototype.addCondition = function(blogic, fieldName, operator, condValue, nooverwrite)
{
	var set = true;

	if (nooverwrite)
	{
		for (var i = 0; this.conditions.length; i++)
		{
			if (this.conditions[i].fieldName == fieldName)
				set = false;
		}
	}

	if (set)
	{
		var cond = new Object();
		cond.blogic = blogic;
		cond.fieldName = fieldName;
		cond.operator = operator;
		cond.condValue = condValue;
		this.conditions[this.conditions.length] = cond;
	}
}

/**
 * Add a sort order to the query
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} field The field to sort by
 * @param {string} selorder Either "asc" or "desc" for ascending or descending
 */
AntObjectBrowser.prototype.addSortOrder = function(field, selorder)
{
	var sorder = (selorder) ? selorder : "asc";

	var ind = this.sort_order.length;
	this.sort_order[ind] = {fieldName:field, order:sorder};
}

/**
 * Create interface after data is loaded
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {bool} inline Set to true of we are printing this browser inline - usually in a form
 * @param {bool} hidetoolbar If true the toolbar will not be printed for this browser
 */
AntObjectBrowser.prototype.buildInterface = function(inline, hidetoolbar)
{
	// Creat the browser
	if (!inline)
	{
		// If we are in preview mode then hide the title
		if (!this.preview)
		{
			this.titleCon = alib.dom.createElement("div", this.browserCon);
			alib.dom.styleSetClass(this.titleCon, "aobListHeader");

			if (this.antView)
				this.antView.getTitle(this.titleCon);
			else
				this.setTitle("Browse " + this.mainObject.titlePl);
		}

        this.innerCon = alib.dom.createElement("div", this.browserCon);
        this.innerCon.className = "aobBody";

		if (this.preview)
		{
			this.spCon = new CSplitContainer("verticle", "100%", "100%");
			this.spCon.resizable = true;
			
			var ctbl_con = this.spCon.addPanel("300px");;
			this.previewCon = this.spCon.addPanel("*");
			this.spCon.print(this.innerCon);            
		}
		else
		{            
			var ctbl_con = this.innerCon;
		}
	}
	else
	{
		var ctbl_con = this.browserCon;
	}
	this.m_browserCon = ctbl_con; // Inner container for toobar + results

	if (!hidetoolbar)
	{
		this.buildToobar(ctbl_con);
	}

	// Add window frame
	// ----------------------------------------------------------
	switch (this.obj_type)
	{
	case "comment":
		this.listTitleDiv = alib.dom.createElement("div"); // This is never displayed
		this.m_contextCon = alib.dom.createElement("div", ctbl_con);
        this.m_resultsCon = alib.dom.createElement("div", ctbl_con);        
		var addcon =  alib.dom.createElement("div", ctbl_con);
		this.printInlineAddComment(addcon);
		break;

	default:
		this.m_contextCon = alib.dom.createElement("div", ctbl_con);
		alib.dom.styleSet(this.m_contextCon, "float", "right");
		alib.dom.styleSetClass(this.m_contextCon, "aobListRight");
        
        this.fsBreadcrumbCon = alib.dom.createElement("div", ctbl_con);
		alib.dom.styleSetClass(this.fsBreadcrumbCon, "aobListBreadCrumbs");
		alib.dom.styleSet(this.fsBreadcrumbCon, "display", "none"); // Hide unless breadcrumbs are needed
        
        this.listTitleDiv = alib.dom.createElement("div", ctbl_con);
		alib.dom.styleSetClass(this.listTitleDiv, "aobListTitle");

		if (this.preview)
		{
			alib.dom.styleSet(this.listTitleDiv, "padding-left", "6px");
			var sel_all = alib.dom.createElement("input");
			sel_all.type = "checkbox";
			sel_all.cls = this;
			sel_all.onclick = function() { this.cls.fAllSelected = this.checked; this.cls.toggleSelectAll(); }
			this.listTitleDiv.appendChild(sel_all);
		}
		else if (this.browseByField)
		{
			this.buildBrowseByPath();
		}
		else
		{
			/*
			var viewsDm = this.getViewsDropdown();
			var btn = viewsDm.createLinkMenu((this.currentView && this.currentView.name) ? this.currentView.name : this.mainObject.titlePl);

			this.listTitleDiv.appendChild(btn);
			this.listTitleDiv.lbl = viewsDm.m_button;
			*/

			var lblText = (this.currentView && this.currentView.name) ? this.currentView.name : this.mainObject.titlePl;
			var link = alib.dom.createElement("a", this.listTitleDiv, lblText + " &#9660;");
			link.href = "javascript:void(0);";
			var menu = this.getViewsMenu();
			menu.attach(link);

			// Just use the link for the label
			this.listTitleDiv.lbl = link;

		}
		this.m_resultsCon = alib.dom.createElement("div", ctbl_con);

		break;
	}

    this.blankMessageCon = alib.dom.createElement("div", this.m_resultsCon);
    this.listObjectsCon = alib.dom.createElement("div", this.m_resultsCon);
    
	this.getObjects();
    this.resize();
}

/**
 * Build toolbar
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {DOMElement} con The container to print the toolbar on
 */
AntObjectBrowser.prototype.buildToobar = function(con)
{
	this.m_toolbarCon = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(this.m_toolbarCon, "aobToolbar");

	// TODO: use AntObjectBrowser.Toolbar class
	//var toolb = new AntObjectBrowser.Toolbar(this);
	//toolb.renderFull(this.m_toolbarCon);
	//toolb.renderPreview(this.m_toolbarCon);
	//toolb.renderMobile(this.m_toolbarCon);
	
	this.m_toolbarCon = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(this.m_toolbarCon, "aobToolbar");
	var tb = new CToolbar();
	// Clear seach funct
	var fclear = function(cls) { cls.m_txtSearch.value = ''; cls.getObjects(); }

	// Handle cusom toolbars
	switch (this.obj_type)
	{
	case 'file':
	case 'folder':
		return this.buildToolbarFiles(tb);
		break;
	}

	// Build Actions Menu
	// --------------------------------
	var menuAct = new alib.ui.PopupMenu();
	
	this.addAdditionalActions();
	for (var i = 0; i < this.customActions.length; i++)
	{
		if (!this.customActions[i].toolbar)
		{
			var iconHtm = (this.customActions[i].icon) ? "<img src='" + this.customActions[i].icon + "' />" : null;
			var item = new alib.ui.MenuItem(this.customActions[i].name, {icon:iconHtm});
			item.cbData.cls = this;
			item.cbData.act = this.customActions[i];
			item.onclick = function() {
				this.cbData.cls.actionCustom(this.cbData.act);
			}
			menuAct.addItem(item);
		}
	}

	// Add Print
	var item = new alib.ui.MenuItem("Print", {icon:"<img src='/images/icons/print_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.actionPrint(); }
	if (!this.mobile)
		menuAct.addItem(item);

	// Add Export
	var item = new alib.ui.MenuItem("Export", {icon:"<img src='/images/icons/excel_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.actionExport(); }
	menuAct.addItem(item);

	// Add Import
	var item = new alib.ui.MenuItem("Import", {icon:"<img src='/images/icons/excel_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.actionImport(); }
	menuAct.addItem(item);

	// Add Email
	if (this.objectHasEmail())
	{
		var item = new alib.ui.MenuItem("Email", {icon:"<img src='/images/icons/email-b_10.png' />"});
		item.cbData.cls = this;
		item.onclick = function() { this.cbData.cls.actionEmail(); }
		menuAct.addItem(item);
	}

	// Add Edit
	var item = new alib.ui.MenuItem("Edit", {icon:"<img src='/images/icons/edit_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.actionEdit(); }
	menuAct.addItem(item);

	// Add Merge Records
	var item = new alib.ui.MenuItem("Merge Records", {icon:"<img src='/images/icons/merge_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.actionMerge(); }
	menuAct.addItem(item);


	// Add custom actions to the toolbar
	for (var i = 0; i < this.customActions.length; i++)
	{
		if (this.customActions[i].toolbar)
		{
			this.customActions[i].cb_funct(tb, this, this.customActions[i].cb_args[0]);
		}
	}

	// Render toolbar
	// --------------------------------
	if (this.preview || this.mobile)
	{
		tb.styleSet("margin-bottom", "0");

		// Delete button
		var btn = new CButton("Delete", function(cls) {cls.deleteObjects(); }, [this], "b1");
		tb.AddItem(btn.getButton(), "right");
		tb.print(this.m_toolbarCon);

		if (this.optCreateNew && this.mobile)
		{
			var btn = new CButton("New", function(cls) {cls.loadObjectForm(); }, [this], (this.inline) ? "b2 medium" : "b2");
			tb.AddItem(btn.getButton(), "left");
		}

		// View or move container
		this.m_viewsdd_con = alib.dom.createElement("span");
		tb.AddItem(this.m_viewsdd_con);

		// If we are working with email print the move button
		if (this.obj_type == "email_thread" || this.obj_type == "email_message")
		{
			var dynsel = new AntObjectGroupingSel("Move", "email_thread", 'mailbox_id', null, this.mainObject, {noNull:true, staticLabel:true});
			dynsel.print(this.m_viewsdd_con, "b1");
			dynsel.brwsercls = this;
			dynsel.onSelect = function(id, name)
			{
				if (this.brwsercls.cbData.groupingId == id)
					return;

				var sendArgs = [["obj_type", this.brwsercls.obj_type], ["field_name", 'mailbox_id'], 
								["move_from", 19], ["move_to", id]];
				var act = {url:"/controller/Object/moveByGrouping", args:sendArgs, 
							refresh:true, doneMsg:"Moved to "+name, flush:true};
				this.brwsercls.actionCustom(act);
			}
		}
		else
		{
			// Views drop-down container
			this.buildViewsDropdown();
		}


		// Add Actions dropdown
		var btn = new alib.ui.MenuButton("Actions", menuAct, {className:"b1"});
		tb.AddItem(btn.getButton());

		var button = alib.ui.Button("<img src='/images/icons/refresh_12.png' />", {
			className:"b1", tooltip:"Refresh", cls:this, 
			onclick:function() {this.cls.refresh(); }
		});

		//var btn = new CButton("<img src='/images/icons/refresh_12.png' />", function(cls) {cls.refresh();}, [this], "b1");
		tb.AddItem(button.getButton(), "left");
		
		// need to clear the div of the buttons
		var divBtnClear = alib.dom.createElement("div", tb.getContainer());
		alib.dom.styleSet(divBtnClear, "clear", "both");
		alib.dom.styleSet(divBtnClear, "visibility", "hidden");
		
		var divCon = alib.dom.createElement("div", this.m_toolbarCon);
		alib.dom.styleSetClass(divCon, "aobSearch");
		
		// div search container
		var divSearch = alib.dom.createElement("div", divCon);

		this.buildToolbarSearch(divSearch);

	}
	else
	{
		// div search container
		var divSearch = ALib.m_document.createElement("div");
		alib.dom.styleSet(divSearch, "width", "270px");
		tb.AddItem(divSearch, "right");
		this.buildToolbarSearch(divSearch);

		if (this.optCreateNew)
		{
			var btn = new CButton("New "+this.mainObject.title, function(cls) {cls.loadObjectForm(); }, [this], (this.inline) ? "b2 medium" : "b2");
			tb.AddItem(btn.getButton(), "left");
		}

		// Views drop-down container
		this.m_viewsdd_con = alib.dom.createElement("span");
		tb.AddItem(this.m_viewsdd_con);
		this.buildViewsDropdown();

		// Add Actions dropdown
		var classes = (this.inline) ? "b1 medium" : "b1";
		var btn = new alib.ui.MenuButton("Actions", menuAct, {className:classes});
		tb.AddItem(btn.getButton());

		var button = alib.ui.Button("<img src='/images/icons/refresh_" + ((this.inline) ? "10" : "12") + ".png' />", {
			className:(this.inline) ? "b1 medium" : "b1", tooltip:"Refresh", cls:this, 
			onclick:function() {this.cls.refresh(); }
		});
		tb.AddItem(button.getButton(), "left");

		if (this.optDelete)
		{
			var btn = new CButton("Delete", function(cls) {cls.deleteObjects(); }, [this], (this.inline) ? "b1 grRight medium" : "b1 grRight");
			tb.AddItem(btn.getButton(), "left");
		}

		tb.print(this.m_toolbarCon);
	}
}

/**
 * Build toolbar search form
 *
 * @param {DOMElement} con The container where we will be printint the search form
 * @param bool preview If we are in preview mode then span fill width of contianer
 */
AntObjectBrowser.prototype.buildToolbarSearch = function(divSearch, preview)
{
	// Add the containers and float
	var divFilter = alib.dom.createElement("div", divSearch);
	alib.dom.styleSet(divFilter, "float", "left");

    var divNewWin = alib.dom.createElement("div", divSearch);
    alib.dom.styleSet(divNewWin, "float", "right");
    
	var divGo = alib.dom.createElement("div", divSearch);
	alib.dom.styleSet(divGo, "float", "right");

	var divInput = alib.dom.createElement("div", divSearch);
	alib.dom.styleSet(divInput, "overflow", "hidden");


	// Advanced search options
	var btn = alib.ui.Button("&#9660;", {
		className:(this.inline || this.preview) ? "b1 grLeft medium noshadow" : "b1  grLeft noshadow", tooltip:"Click to view advanced search options", cls:this, 
		onclick:function() {this.cls.showAdvancedSearch(); }
	});
	btn.print(divFilter);
	
	// span container
	divInput.className = "clearIcon";
	
	// text search
	this.m_txtSearch = createInputAttribute(alib.dom.createElement("input", divInput), "text");
	alib.dom.styleSet(this.m_txtSearch, "width", "100%");
	//alib.dom.styleSet(this.m_txtSearch, "paddingRight", "25px");
	alib.dom.setInputBlurText(this.m_txtSearch, this.searchTitleText, "inputBlurText", "", "");
	alib.dom.styleAddClass(this.m_txtSearch, "fancy");
	alib.dom.styleAddClass(this.m_txtSearch, "grLeft");
	alib.dom.styleAddClass(this.m_txtSearch, "grRight");
	if (this.inline || this.preview)
		alib.dom.styleAddClass(this.m_txtSearch, "medium");
	
	// span icon
	var spanIcon = alib.dom.createElement("span", divInput);
	spanIcon.className = "deleteicon";
	alib.dom.styleSet(spanIcon, "visibility", "hidden");
	
	// span icon onclick
	spanIcon.cls = this;            
	spanIcon.divWidth = 195;
	spanIcon.m_txtSearch = this.m_txtSearch;
	spanIcon.onclick = function()
	{
		this.m_txtSearch.value = "";
		this.m_txtSearch.focus();
		alib.dom.styleSet(this, "visibility", "hidden");
		this.cls.getObjects();
	}
	
	// text search onkeyup
	this.m_txtSearch.m_cls = this;
	this.m_txtSearch.spanIcon = spanIcon;            
	this.m_txtSearch.onkeyup = function(e)
	{
		if (typeof e == 'undefined') 
		{
			if (ALib.m_evwnd)
				e = ALib.m_evwnd.event;
			else
				e = window.event;
		}

		if (typeof e.keyCode != "undefined")
			var code = e.keyCode;
		else
			var code = e.which;

		if (code == 13) // keycode for a return
			this.m_cls.getObjects();
			
		// display the span icon
		if(this.m_cls.m_txtSearch.value.length > 0)                        
			alib.dom.styleSet(this.spanIcon, "visibility", "visible");
		else
			alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
	}
	
	// clear the div search
	//divClear(divSearch);
	var btn = alib.ui.Button("Go", {
		className:(this.inline || this.preview) ? "b1 grRight medium noshadow" : "b1 grRight noshadow", tooltip:"Click to search", cls:this, 
		onclick:function() {this.cls.getObjects(); }
	});
	btn.print(divGo);

	// Resize
	//alib.dom.styleSet(divInput, "margin-left", divFilter.offsetWidth + "px");
	//alib.dom.styleSet(divInput, "margin-right", divGo.offsetWidth + "px");

	// Set properties of class variable for dynamic resizing later
	this.toolbarSearchCons.divFilter = divFilter;
	this.toolbarSearchCons.divInput = divInput;
	this.toolbarSearchCons.divGo = divGo;
}

/**
 * Build toolbar
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {CToolbar} tb The toolbar to populate
 */
AntObjectBrowser.prototype.buildToolbarFiles = function(tb)
{
	if (this.preview || this.mobile)
	{
		tb.styleSet("margin-bottom", "0");

		// Delete button
		var btn = new CButton("Delete", function(cls) {cls.deleteObjects(); }, [this], "b1");
		tb.AddItem(btn.getButton(), "right");
		tb.print(this.m_toolbarCon);

		// View or move container
		this.m_viewsdd_con = alib.dom.createElement("span");
		tb.AddItem(this.m_viewsdd_con);

		// If we are working with email print the move button
		if (this.obj_type == "email_thread" || this.obj_type == "email_message")
		{
			var dynsel = new AntObjectGroupingSel("Move", "email_thread", 'mailbox_id', null, this.mainObject, {noNull:true, staticLabel:true});
			dynsel.print(this.m_viewsdd_con, "b1 grLeft");
			dynsel.brwsercls = this;
			dynsel.onSelect = function(id, name)
			{
				if (this.brwsercls.cbData.groupingId == id)
					return;

				var sendArgs = [["obj_type", this.brwsercls.obj_type], ["field_name", 'mailbox_id'], 
								["move_from", 19], ["move_to", id]];

				var act = {url:"/controller/Object/moveByGrouping", args:sendArgs, 
							refresh:true, doneMsg:"Moved to "+name, flush:true};
				this.brwsercls.actionCustom(act);
			}
		}
		else
		{
			// Views drop-down container
			this.buildViewsDropdown();
		}

		// Actions
		var dm_act = new CDropdownMenu();
		this.addAdditionalActions();

		for (var i = 0; i < this.customActions.length; i++)
		{
			if (!this.customActions[i].toolbar)
			{
				var dm_sub = dm_act.addEntry(this.customActions[i].name, 
											 function(cls, act){ cls.actionCustom(act); }, 
											 this.customActions[i].icon, null, [this, this.customActions[i]]);
			}
		}

		var dm_sub = dm_act.addEntry("Print", function(cls){ cls.actionPrint(); }, "/images/icons/print_10.png", null, [this]);
		var dm_sub = dm_act.addEntry("Export", function(cls){ cls.actionExport(); }, "/images/icons/excel_10.png", null, [this]);
		var dm_sub = dm_act.addEntry("Import", function(cls){ cls.actionImport(); }, "/images/icons/excel_10.png", null, [this]);
		if (this.objectHasEmail())
			var dm_sub = dm_act.addEntry("Email", function(cls){ cls.actionEmail(); }, "/images/icons/email-b_10.png", null, [this]);
		tb.AddItem(dm_act.createButtonMenu("Actions", null, null, "b1 grRight"));
		var dm_sub = dm_act.addEntry("Edit", function(cls){ cls.actionEdit(); }, "/images/icons/edit_10.png", null, [this]);
		var dm_sub = dm_act.addEntry("Merge Records", function(cls){ cls.actionMerge(); }, "/images/icons/merge_10.png", null, [this]);
		/* TODO: we need to revisit this
		var dm_sub = dm_act.addSubmenu("Create New", null, null, null);
		dm_sub.addEntry("Calendar Event", function(cls){ cls.actionCreateAssoc("calendar_event"); }, "/images/icons/calendar_event_10.png", null, [this]);
		*/

		// Add custom actions to the toolbar
		for (var i = 0; i < this.customActions.length; i++)
		{
			if (this.customActions[i].toolbar)
			{
				this.customActions[i].cb_funct(tb, this, this.customActions[i].cb_args[0]);
			}
		}
		
		var button = alib.ui.Button("<img src='/images/icons/refresh_12.png' />", {
			className:"b1", tooltip:"Refresh", cls:this, 
			onclick:function() {this.cls.refresh(); }
		});

		//var btn = new CButton("<img src='/images/icons/refresh_12.png' />", function(cls) {cls.refresh();}, [this], "b1");
		tb.AddItem(button.getButton(), "left");
		
		// need to clear the div of the buttons
		var divBtnClear = alib.dom.createElement("div", tb.getContainer());
		alib.dom.styleSet(divBtnClear, "clear", "both");
		alib.dom.styleSet(divBtnClear, "visibility", "hidden");
		
		var divWidth = 195;            
		
		var divCon = alib.dom.createElement("div", this.m_toolbarCon);
		alib.dom.styleSet(divCon, "marginTop", "5px");
		
		// div search container
		var divSearch = alib.dom.createElement("div", divCon);
		alib.dom.styleSet(divSearch, "float", "left");
		
		// span container
		var spanContainer = alib.dom.createElement("span", divSearch);
		spanContainer.className = "clearIcon";
		
		// text search
		this.m_txtSearch = createInputAttribute(alib.dom.createElement("input", spanContainer), "text");
		alib.dom.styleSet(this.m_txtSearch, "width", divWidth + "px");
		alib.dom.styleSet(this.m_txtSearch, "paddingRight", "25px");
		alib.dom.setInputBlurText(this.m_txtSearch, this.searchTitleText, "inputBlurText", "", "");
		alib.dom.styleAddClass(this.m_txtSearch, "fancy");
		alib.dom.styleAddClass(this.m_txtSearch, "grRight");
		
		// span icon
		var spanIcon = alib.dom.createElement("span", spanContainer);
		spanIcon.className = "deleteicon";
		alib.dom.styleSet(spanIcon, "visibility", "hidden");
		
		// span icon onclick
		spanIcon.cls = this;            
		spanIcon.divWidth = divWidth;
		spanIcon.m_txtSearch = this.m_txtSearch;
		spanIcon.onclick = function()
		{
			this.m_txtSearch.value = "";
			this.m_txtSearch.focus();
			alib.dom.styleSet(this, "visibility", "hidden");
			this.cls.getObjects();
		}
		
		// text search onkeyup
		this.m_txtSearch.m_tb = tb;
		this.m_txtSearch.m_cls = this;
		this.m_txtSearch.spanIcon = spanIcon;            
		this.m_txtSearch.onkeyup = function(e)
		{
			if (typeof e == 'undefined') 
			{
				if (ALib.m_evwnd)
					e = ALib.m_evwnd.event;
				else
					e = window.event;
			}

			if (typeof e.keyCode != "undefined")
				var code = e.keyCode;
			else
				var code = e.which;

			if (code == 13) // keycode for a return
				this.m_cls.getObjects();
				
			// display the span icon
			if(this.m_cls.m_txtSearch.value.length > 0)                        
				alib.dom.styleSet(this.spanIcon, "visibility", "visible");
			else
				alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
		}
		
		// clear the div search
		divClear(divSearch);
		
		var divFilter = alib.dom.createElement("div", divCon);
		alib.dom.styleSet(divFilter, "float", "left");
		
		var btn = alib.ui.Button("<img src='/images/icons/arrow_down_12.png'>", {
			className:(this.inline) ? "b1 grRight medium" : "b1 grRight", tooltip:"Click to view advanced search options", cls:this, 
			onclick:function() {this.cls.showAdvancedSearch(); }
		});
		btn.print(divFilter);
		
		// clear the div search
		divClear(divCon);            
	}
	else
	{
		// Add Toolbar
		var btn = alib.ui.Button("<img src='/images/icons/arrow_down_12.png'>", {
			className:(this.inline) ? "b1 grRight medium" : "b1 grRight", tooltip:"Click to view advanced search options", cls:this, 
			onclick:function() {this.cls.showAdvancedSearch(); }
		});
		tb.AddItem(btn.getButton(), "right");
		
		// div search container
		var divSearch = ALib.m_document.createElement("div");
		
		// span container
		var spanContainer = alib.dom.createElement("span", divSearch);
		spanContainer.className = "clearIcon";
		
		// text search
		this.m_txtSearch = createInputAttribute(alib.dom.createElement("input", spanContainer), "text");
		if (this.inline)
			alib.dom.styleAddClass(this.m_txtSearch, "medium");
		alib.dom.styleSet(this.m_txtSearch, "width", 150 + "px");
		alib.dom.styleSet(this.m_txtSearch, "paddingRight", "25px");
		alib.dom.setInputBlurText(this.m_txtSearch, this.searchTitleText, "inputBlurText", "", "");
		alib.dom.styleAddClass(this.m_txtSearch, "fancy");
		alib.dom.styleAddClass(this.m_txtSearch, "grRight");
		
		// span icon
		var spanIcon = alib.dom.createElement("span", spanContainer);
		spanIcon.className = "deleteicon";
		alib.dom.styleSet(spanIcon, "visibility", "hidden");
		
		// span icon onclick
		spanIcon.cls = this;            
		spanIcon.divWidth = 150;
		spanIcon.m_txtSearch = this.m_txtSearch;
		spanIcon.onclick = function()
		{
			this.m_txtSearch.value = "";
			this.m_txtSearch.focus();
			alib.dom.styleSet(this, "visibility", "hidden");
			this.cls.getObjects();
		}
		
		// text search onkeyup
		this.m_txtSearch.m_tb = tb;
		this.m_txtSearch.m_cls = this;
		this.m_txtSearch.spanIcon = spanIcon;
		this.m_txtSearch.onkeyup = function(e)
		{
			if (typeof e == 'undefined') 
			{
				if (ALib.m_evwnd)
					e = ALib.m_evwnd.event;
				else
					e = window.event;
			}

			if (typeof e.keyCode != "undefined")
				var code = e.keyCode;
			else
				var code = e.which;

			if (code == 13) // keycode for a return
				this.m_cls.getObjects();
				
			// display the span icon
			if(this.m_cls.m_txtSearch.value.length > 0)                        
				alib.dom.styleSet(this.spanIcon, "visibility", "visible");
			else
				alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
		}
		
		divClear(divSearch);
		
		// add div search container
		tb.AddItem(divSearch, "right");

		if (this.optCreateNew)
		{
			var button = alib.ui.Button("Upload File(s)", {
				className:(this.inline) ? "b1 medium" : "b2", tooltip:"Upload files from your computer", cls:this, 
				onclick:function() {this.cls.antFsUpload(); }
			});
		
			tb.AddItem(button.getButton(), "left");

			var button = alib.ui.Button("New Folder", {
				className:(this.inline) ? "b1 medium" : "b1", tooltip:"Crate a new folder", cls:this, 
				onclick:function() {this.cls.antFsCreateFolder(); }
			});
		
			tb.AddItem(button.getButton(), "left");
		}


		var button = alib.ui.Button("Move", {
			className:(this.inline) ? "b1 grLeft medium" : "b1 grLeft", tooltip:"Move selected files and folders", cls:this, 
			onclick:function() {this.cls.antFsMove(); }
		});
		tb.AddItem(button.getButton(), "left");

		var button = alib.ui.Button("<img src='/images/icons/refresh_" + ((this.inline) ? "10" : "12") + ".png' />", {
			className:(this.inline) ? "b1 grCenter medium" : "b1 grCenter", tooltip:"Refresh", cls:this, 
			onclick:function() {this.cls.refresh(); }
		});
		tb.AddItem(button.getButton(), "left");

		if (this.optDelete)
		{
			var btn = new CButton("Delete", function(cls) {cls.deleteObjects(); }, [this], (this.inline) ? "b1 grRight medium" : "b1 grRight");
			tb.AddItem(btn.getButton(), "left");
		}

		tb.print(this.m_toolbarCon);
	}
}

/**
 * Resize the browser. This is mostly important in preview mode where 100% height is set.
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.resize = function()
{
	if (this.mobile)
		return;

	if (this.preview)
	{		
        alib.dom.styleSet(this.innerCon, "height", "200px");

        if (this.spCon && this.spCon.setHeight)
			this.spCon.setHeight("300px");

		// Resize the outer con
		var height = getWorkspaceHeight();

		if (this.titleCon)
			height -= alib.dom.getElementHeight(this.titleCon);

        alib.dom.styleSet(this.innerCon, "height", (height-3)+"px");

		// Resize the split container
		height = alib.dom.getContentHeight(this.innerCon);

		//if (height <= 0)
			//height = 300;

		if (height > 0 && this.spCon && this.spCon.setHeight)
			this.spCon.setHeight(height+"px");

		// Resize the objects contianer minus the toolbar
		var height = alib.dom.getElementHeight(this.m_browserCon);
		
		if (this.m_toolbarCon)
			height -= alib.dom.getElementHeight(this.m_toolbarCon);

		if (this.listTitleDiv)
			height -= alib.dom.getElementHeight(this.listTitleDiv);

		if (this.fsBreadcrumbCon)
			height -= alib.dom.getElementHeight(this.fsBreadcrumbCon);

		if (height > 0)
		{
			alib.dom.styleSet(this.m_resultsCon, "height", (height) + "px");
			alib.dom.styleSet(this.m_resultsCon, "overflow", "auto");
		}
	}
	else if (!this.inline)
	{
		var height = getWorkspaceHeight();

		if (this.titleCon)
			height -= alib.dom.getElementHeight(this.titleCon);

		if (this.m_toolbarCon)
			height -= alib.dom.getElementHeight(this.m_toolbarCon);

		if (this.listTitleDiv)
			height -= alib.dom.getElementHeight(this.listTitleDiv);

		if (this.fsBreadcrumbCon)
			height -= alib.dom.getElementHeight(this.fsBreadcrumbCon);

		if (height > 0)
		{
			alib.dom.styleSet(this.m_resultsCon, "height", (height) + "px");
			alib.dom.styleSet(this.m_resultsCon, "overflow", "auto");
		}
	}

	// Resize search inputs
	if (this.toolbarSearchCons.divInput && this.toolbarSearchCons.divFilter && this.toolbarSearchCons.divGo)
	{
		var filterWidth = this.toolbarSearchCons.divFilter.offsetWidth;
		var goWidth = this.toolbarSearchCons.divGo.offsetWidth;
		if (!filterWidth)
			filterWidth = 30; // default margin
		if (alib.userAgent.ie)
			goWidth += 3; // IE needs a little more room for the border
		//alib.dom.styleSet(this.toolbarSearchCons.divInput, "margin-left", (filterWidth) + "px");
		//alib.dom.styleSet(this.toolbarSearchCons.divInput, "margin-right", (goWidth) + "px");
		if (goWidth)
			alib.dom.styleSet(this.m_txtSearch, "width", "100%");
	}
}

/**
 * Create views dropdown
 *
 * @private
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.buildViewsDropdown = function()
{
	this.m_viewsdd_con.innerHTML = "";

	var viewMenu = this.getViewsMenu();
    
	var classes = (this.inline) ? "b1 grLeft medium" : "b1 grLeft";
	var btn = new alib.ui.MenuButton("Views", viewMenu, {className:classes});
	//var btn = dm_view.createButtonMenu("Views", null, null, );
	//this.m_viewsdd_con.appendChild(btn.getButton());
	//btn.print(this.m_viewsdd_con);

	return btn;
}

/**
 * Get views drop-down
 */
AntObjectBrowser.prototype.getViewsDropdown = function() {

	var dm_view = new CDropdownMenu();
	for (var i = 0; i < this.mainObject.views.length; i++)
	{
		var view = this.mainObject.views[i];		
		var dm_sub = dm_view.addEntry(view.name, function(cls, view){ cls.loadView(view); cls.getObjects(); }, 
										"/images/icons/magnify_10.png", null, [this, view]);
		
	}
	dm_view.addEntry("Manage Views", function(cls, view){ cls.toggleViewsForm(); }, "/images/icons/settings_10.png", null, [this, view]);

	//addSubmenu = function (title, icon, funct, fargs)
	var dm_sub = dm_view.addSubmenu("Show Num Records", null, null, null);
	dm_sub.addEntry("25 Records", function(cls){ cls.setShowPer(25); }, "/images/icons/circle_blue.png", null, [this]);
	dm_sub.addEntry("50 Records", function(cls){ cls.setShowPer(50); }, "/images/icons/circle_blue.png", null, [this]);
	dm_sub.addEntry("100 Records", function(cls){ cls.setShowPer(100); }, "/images/icons/circle_blue.png", null, [this]);
	dm_sub.addEntry("200 Records", function(cls){ cls.setShowPer(200); }, "/images/icons/circle_blue.png", null, [this]);
	dm_sub.addEntry("500 Records", function(cls){ cls.setShowPer(500); }, "/images/icons/circle_blue.png", null, [this]);
	dm_sub.addEntry("1000 Records", function(cls){ cls.setShowPer(1000); }, "/images/icons/circle_blue.png", null, [this]);

    var dm_sub = dm_view.addSubmenu("Layout", null, null, null);
    dm_sub.addEntry("List Mode", function(cls){ cls.setBrowserMode("table"); }, "/images/icons/circle_blue.png", null, [this]);
    dm_sub.addEntry("Preview Mode", function(cls){ cls.setBrowserMode("previewV"); }, "/images/icons/circle_blue.png", null, [this]);

	return dm_view;
}

/**
 * Get views menu
 */
AntObjectBrowser.prototype.getViewsMenu = function() 
{
	var menu = new alib.ui.PopupMenu();

	for (var i = 0; i < this.mainObject.views.length; i++)
	{
		var view = this.mainObject.views[i];		

		var item = new alib.ui.MenuItem(view.name, {icon:"<img src='/images/icons/magnify_10.png' />"});
		item.cbData.cls = this;
		item.cbData.view = view;
		item.onclick = function() {
			this.cbData.cls.loadView(this.cbData.view);
			this.cbData.cls.getObjects();
		};
		menu.addItem(item);
	}
	
	var item = new alib.ui.MenuItem("Manage Views", {icon:"<img src='/images/icons/settings_10.png' />"});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.toggleViewsForm(); };
	menu.addItem(item);

	// Add show number recirds submenu
	var subMenu = new alib.ui.SubMenu("Show Num Records");
	for (var i =  25; i < 500; i = i + 25)
	{
		var item = new alib.ui.MenuItem(i + " Records");
		item.cbData.cnt = i;
		item.cbData.cls = this;
		item.onclick = function() { this.cbData.cls.setShowPer(this.cbData.cnt); }
		subMenu.addItem(item);
	}
	menu.addItem(subMenu);

	// Add Layout submenu
	var subMenu = new alib.ui.SubMenu("Layout");

	var item = new alib.ui.MenuItem("List Mode", {});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.setBrowserMode("table"); };
	subMenu.addItem(item);

	var item = new alib.ui.MenuItem("Preview Mode", {});
	item.cbData.cls = this;
	item.onclick = function() { this.cbData.cls.setBrowserMode("previewV"); };
	subMenu.addItem(item);

	menu.addItem(subMenu);

	return menu;
}

/**
 * Set how many items/objects to display per page
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {number} num The number of items to display per page
 */
AntObjectBrowser.prototype.setShowPer = function(num)
{
	this.limit=num; 
	this.getObjects();
    
    ajax = new CAjax('json');
    ajax.exec("/controller/User/setSettingUser", 
                [["set", "/objects/browse/showper/"+this.mainObject.name], ["val", num]]);
}

/**
 * Create views dropdown
 *
 * @private
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.addAdditionalActions = function()
{
	switch (this.obj_type)
	{
	case 'email_thread':

		// Add to standard actions
		var act = this.addAction("Mark as Read", "/controller/Email/markRead", "/images/icons/read_10.png");
		var act = this.addAction("Mark as Unread", "/controller/Email/markUnread", "/images/icons/unread_10.png");
		var act = this.addAction("Mark as Junk Mail", "/controller/Email/markJunk", "/images/icons/spam_10.png");
		var act = this.addAction("Not Junk Mail", "/controller/Email/markNotjunk", "/images/icons/notspam_10.png");
		var act = this.addAction("Flag Message(s)", "/controller/Email/markFlag", "/images/icons/flag_on_10.png");

		break;
	}
}

/**
 * Set the view mode of this browser window and save the settings
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} mode Should be 'previewH', 'previewV', or 'table'
 */
AntObjectBrowser.prototype.setBrowserMode = function(mode)
{
	switch (mode)
	{
	case 'table':
		this.preview = false;
		this.viewmode = "table";
		this.browserCon.innerHTML = ""; 
		this.print(this.browserCon);
		break;
	case 'previewV':
		this.preview = true;
		this.viewmode = "details";
		this.browserCon.innerHTML = "";
		this.print(this.browserCon);
		break;
	}
    ajax = new CAjax('json');
    ajax.exec("/controller/User/setSettingUser", 
                [["set", "/objects/browse/mode/"+this.mainObject.name], ["val", mode]]);
}

/**
 * Toggle select/unselect all
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.toggleSelectAll = function()
{
	for (var i = 0; i < this.objectList.length; i++)
	{
		this.objectList[i].select(this.fAllSelected);
	}
}

/**
 * Load objects into browser
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {number} offset The offset to start displaying. If null, then start at 0
 * @param {bool} update If set to true, then only load id and revision, not the rest of the data
 */
AntObjectBrowser.prototype.getObjects = function(offset, update)
{    
	if (this.skipLoad) // skip first time
	{
		this.skipLoad = false;
		return;
	}

	if (typeof offset != "undefined" && offset != null)
	{
		if (offset != this.m_lastOffset)
		{
			var update = false;
			this.firstLoaded = false;
		}

		this.m_lastOffset = offset;
	}
	else
	{
		this.m_lastOffset = 0;
		offset = 0;
	}

	if (!update)
    {
        this.blankMessageCon.innerHTML = "<div class='loading'></div>";
        alib.dom.styleSet(this.listObjectsCon, "display", "none");
    }		

	// Make sure only one request is processed at the same time
	if (this.m_ajax)
	{
		this.m_ajax.abort();

		if (!this.firstLoaded && update)
			var update = false;
	}

	// If an automatic refresh timeout is running then clear it first
	if (this.refreshTimer)
		clearTimeout(this.refreshTimer);

	this.m_ajax = new CAjax('json');

	this.m_ajax.m_browseclass = this;
	this.m_ajax.updateMode = (update) ? true : false;
	this.m_ajax.onload = function(result)
	{

		if (!this.updateMode)
			this.m_browseclass.objectList = new Array();

		this.m_browseclass.firstLoaded = true;

		var objListArr = new Array(); // used if in update mode
		var num_objects = 0;

		if (!this.updateMode)
		{                
			this.m_browseclass.listObjectsCon.innerHTML = "";
			this.m_browseclass.m_listTable = null;
		}

		// Update browse by absolute path if set
		// -------------------------------------------
		if(result && result.browseByCurPath)
		{
			if (result.browseByCurPath != this.m_browseclass.browseByPath)
				this.m_browseclass.browseByPath = result.browseByCurPath;
		}

		// Populate browseby(folders) if set
		// -------------------------------------------
		if(result && result.browseByObjects && result.browseByObjects.length)
		{
            this.m_browseclass.blankMessageCon.innerHTML = "";            
            alib.dom.styleSet(this.m_browseclass.listTitleDiv, "display", "block");
            alib.dom.styleSet(this.m_browseclass.listObjectsCon, "display", "block");
            
			var num_folders = parseInt(result.browseByObjects.length);
			for (var i = 0; i < result.browseByObjects.length; i++)
			{
				var objData = result.browseByObjects[i];
				objData.isBrowse = true;
				var pre = "";
				if (this.m_browseclass.browseByPath != "/") // leave root out because it is implied in the / path
					pre = this.m_browseclass.browseByPath;
				objData.browseByPath = pre + "/" + objData.name;

				if (this.updateMode)
				{
					objListArr[objListArr.length] = objData;
				}
				else
				{
					this.m_browseclass.addObjectItem(objData);
				}
			}
		}

		// The result will be held in a variable called 'retval'
		if(result && result.objects.length)
		{
            // Display back the view name and hide the blankMessageCon
            this.m_browseclass.blankMessageCon.innerHTML = "";            
            alib.dom.styleSet(this.m_browseclass.listTitleDiv, "display", "block");
            alib.dom.styleSet(this.m_browseclass.listObjectsCon, "display", "block");
            
			// Clear contents of list container 
			this.m_browseclass.m_contextCon.innerHTML = "";

			// Set number of objects string
			// -------------------------------------------
			if (this.m_browseclass.m_contextCon && result.totalNum != "undefined")
			{
				var lbl = alib.dom.createElement("span", this.m_browseclass.m_contextCon);
				if (this.m_browseclass.preview)
					lbl.innerHTML = result.totalNum + " Items";
				else
					lbl.innerHTML = result.totalNum + " " + this.m_browseclass.mainObject.titlePl;
			}

			// Handle pagination
			// -------------------------------------------
			if (result.paginate)
			{
				var prev = result.paginate.prevPage;
				var next = result.paginate.nextPage;
				var pag_str = result.paginate.desc;					
				
				var lbl = alib.dom.createElement("span", this.m_browseclass.m_contextCon);
				lbl.innerHTML = " | " + pag_str;
                
				if (prev >= 0 || next >=0)
				{
					var lbl = alib.dom.createElement("span", this.m_browseclass.m_contextCon);
					lbl.innerHTML = " | ";
					if (prev!=-1)
					{
						var lnk = alib.dom.createElement("span", this.m_browseclass.m_contextCon);
						lnk.innerHTML = "&laquo; previous";
						alib.dom.styleSet(lnk, "cursor", "pointer");
						lnk.start = prev;
						lnk.m_browseclass = this.m_browseclass;
						lnk.onclick = function()
						{
							this.m_browseclass.getObjects(this.start);
						}
					}

					if (next)
					{
						var lnk2 = alib.dom.createElement("span", this.m_browseclass.m_contextCon);
						lnk2.innerHTML = " next &raquo;";
						alib.dom.styleSet(lnk2, "cursor", "pointer");
						lnk2.start = next;
						lnk2.m_browseclass = this.m_browseclass;
						lnk2.onclick = function()
						{
							this.m_browseclass.getObjects(this.start);
						}
					}
				}
			}

			// Populate objects
			// -------------------------------------------
			num_objects = parseInt(result.objects.length);
			for (var i = 0; i < result.objects.length; i++)
			{
				var objData = result.objects[i];

				if (this.updateMode && alib.indexOf(this.m_browseclass.deletingQueue, objData.id) == -1)
				{
					objListArr[objListArr.length] = objData;
				}
				else
				{
					this.m_browseclass.addObjectItem(objData);
				}
			}

			if (this.updateMode)
				this.m_browseclass.refreshUpdate(objListArr);
		}
		else if (!result && !result.browseByObjects || (result.browseByObjects && !result.browseByObjects.length))
		{
			// TODO: display the below if we did a plain text search
			//this.m_browseclass.listObjectsCon.innerHTML = " <div style='padding:5px;'>No " +this.m_browseclass.mainObject.titlePl+ " were found</div>";            

			var objType = this.m_browseclass.mainObject.getObjType();
			this.m_browseclass.blankMessageCon.innerHTML = Ant.EntityDefinitionLoader.get(objType).getBrowserBlankContent();

            // Hide the title and result con
            alib.dom.styleSet(this.m_browseclass.listObjectsCon, "display", "none");
            //if(!this.m_browseclass.browseByField)
                //alib.dom.styleSet(this.m_browseclass.listTitleDiv, "display", "none");
		}
        
		// Select first row if this is the first load and we are in preview mode
		if (this.m_browseclass.preview && num_objects && !this.updateMode)
			this.m_browseclass.selectObjectRow();

		// If we are refreshing then set timeout for next refresh
		if (this.m_browseclass.refreshInterval)
		{
			var cls = this.m_browseclass;
			this.m_browseclass.refreshTimer = setTimeout(function() { cls.refresh(); }, cls.refreshInterval);
		}

		// Cleanup & resize now that data is loaded
		this.m_browseclass.m_ajax = null;        
        this.m_browseclass.resize();
        
        // Call onload callback
        this.m_browseclass.onLoad(num_objects);
	};

	var url = "/controller/ObjectList/query";

	var args = new Array();
	args[args.length] = ["obj_type", this.obj_type];
	args[args.length] = ["offset", offset];
	args[args.length] = ["limit", this.limit];
	if (this.showDeleted)
		args[args.length] = ["showdeleted", "1"];
	if (update)
		args[args.length] = ["updatemode", "1"];

	if (this.browseByField)
		args[args.length] = ["browsebyfield", this.browseByField];

	if (this.browseByPath)
		args[args.length] = ["browsebypath", this.browseByPath];
	
	if (this.browseByRootId) // realtive root
	{
		args[args.length] = ["browsebyroot", this.browseByRootId];
	}
	
	this.getFormConditions(null, args);

	this.m_ajax.exec(url, args);
}


/**
 * Set this browser to refresh automatically
 *
 * @public
 * @param {number} interval The interval to refresh, if < 1 (0 or null) then disable
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.setAutoRefresh = function(interval)
{	
	if (!interval)
	{
		this.refreshInterval = null;
		clearTimeout(this.refreshTimer);
		this.refreshTimer = null;
	}

	this.refreshInterval = interval;

	if (!this.refreshTimer && interval)
	{
		var cls = this;
		this.refreshTimer = setTimeout(function() { cls.refresh(); }, this.refreshInterval);
	}
}

/**
 * Reload or refresh object list
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntObjectBrowser.prototype.refresh = function()
{	
	var offset = (typeof this.m_lastOffset != 'undefined') ? this.m_lastOffset : 0;

	// Make sure we are not already loading for the first time. 
	// If it is there is no need to refresh.
	if (this.m_ajax && !this.firstLoaded)
	{
		if (this.m_ajax.loading)
			return;
	}
	
	// Do not refresh if we are performing a text search
	if (this.m_txtSearch && this.m_txtSearch.value && this.m_txtSearch.value!=this.searchTitleText)
		return;

	// Do not refresh if we are in the process of deleting objects
	// When deletion has been returned, then refresh will be called again
	if (this.deletingQueue.length > 0)
	{
		console.log("Skipping refresh because there are " + this.deletingQueue.length + " items in the deleting queue");
		return;
	}

	var updateRefresh = (this.optForceFullRefresh) ? false : true;
	this.getObjects(offset, updateRefresh);
}


/**
 * Reload or refresh object list but only get data for changed items - added, deleted, updated
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {array} newlist New list of objects created from the query to the server
 */
AntObjectBrowser.prototype.refreshUpdate = function(newlist)
{
	var objcon = this.listObjectsCon;
	//ALib.m_debug = true;

	// 1. Purge any items that are in the browser list but are not in the newlist
	// ------------------------------------------------------------------------------------
	var removalQueue = new Array();
	for (var j = 0; j < this.objectList.length; j++)
	{
		if (this.refreshUpdateItemInList(this.objectList[j].id, newlist)==-1)
		{
			removalQueue[removalQueue.length] = this.objectList[j];
		}
	}

	// remove items in the queue
	for (var i = 0; i < removalQueue.length; i++)
	{
		removalQueue[i].remove();
	}
	removalQueue = null; // cleanup

	// 2. Update and insert new nodes where necessary
	// ------------------------------------------------------------------------------------
	var moveQueue = new Array();
	for (var i = 0; i < newlist.length; i++)
	{
		var expos = this.refreshUpdateItemInList(newlist[i].id, this.objectList, true)

		if (expos != -1)
		{
			// Update existing item if revision has been incremented
			if (newlist[i].revision > this.objectList[expos].revision || 
				(newlist[i].num_comments != this.objectList[expos].objData.num_comments))
			{
				var obj = new CAntObject(this.mainObject.name, newlist[i].id);
				obj.objListItem = this.objectList[expos];
				obj.onload = function()
				{
					this.objListItem.update(this.getData());
				}
				obj.load();
			}

			// If position in current list is different from new list then queue for moving later
			if (expos != i)
				moveQueue[moveQueue.length] = {obj:this.objectList[expos], toidx:i};
		}
		else
		{

			// This is a brand new item that does not yet exist in the list, load and add it
			var obj = new CAntObject(this.mainObject.name, newlist[i].id);
			obj.appBrowserClass = this;
			obj.appObjectCon = objcon;
			obj.appObjectConInsBefore = ((i+1) > this.objectList.length) ? null : this.objectList[i];
			obj.onload = function()
			{
				this.appBrowserClass.addObjectItem(this.getData(), this.appObjectConInsBefore);
			}

			// Put placeholder in objectList array for reconciling - keep the lists synchronzed while object data is loading
			// This must be after the appObjectConInsBefore is set above
			var item = new AntObjectBrowser_Item({id:newlist[i].id, security:{view:true}, revision:newlist[i].revision}, this);
			if ((i+1) > this.objectList.length)
			{
				this.objectList.push(item);
			}
			else
			{
				this.objectList.splice(i, 0, item);
			}

			// Load data - this has to be done after the new item is created
			obj.load();
		}
	}

	// move items in the queue
	for (var i = 0; i < moveQueue.length; i++)
	{
		moveQueue[i].obj.move(moveQueue[i].toidx);
	}
	moveQueue = null; // cleanup
}

/**
 * Check if an object item is in a list
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {number} objid The id of the object to look for
 * @param {array} list The list to search for objid
 * @return {number} the index of the object found in the list or -1 if not found.
 */
AntObjectBrowser.prototype.refreshUpdateItemInList = function(objid, list)
{
	for (var j = 0; j < list.length; j++)
	{
		if (list[j].id == objid)
		{
			return j;
		}
	}

	return -1;
}

/**
 * Add an object to the list
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {DOMElement} rowscon The container that is holding the items
 * @param {Object} objData The object data that this row represents
 * @param {AntObjectBrowser_Item} insertBeforeItem The item to insert before
 * @param {bool} update If set to true, redraw the item
 */
AntObjectBrowser.prototype.addObjectItem = function(objData, insertBeforeItem, update)
{
	if (update)
	{
		for (var i = 0; i < this.objectList.length; i++)
		{
			if (this.objectList[i].id == update)
				this.objectList[i].update(objData);
		}
	}
	else
	{
		// Create containing table for this list if it does not already exist
		if (!this.m_listTable)
			this.createListTable();

		var objListItem = new AntObjectBrowser_Item(objData, this);
        objListItem.selectedObjId = this.selectedObjId;

		// Check for browseBy
		if (objData.isBrowse && objData.browseByPath)
		{
			objListItem.isBrowse = objData.isBrowse;
			objListItem.browseByPath = objData.browseByPath;
		}

		if (insertBeforeItem)
			objListItem.print(this.m_listTableBody, insertBeforeItem);
		else
			objListItem.print(this.m_listTableBody);

		// find position of this item, it was added to the objectList array alraedy before the load
		var ind = -1;
		for (var i = 0; i < this.objectList.length; i++)
		{
			if (this.objectList[i].id == objListItem.id)
				ind = i;
		}
		
		if (ind >= 0) // If called with insertBeforeItem the item should already be set in the list
			this.objectList[ind] = objListItem;
		else
			this.objectList[this.objectList.length] = objListItem;
	}
}

/**
 * Create table for object list
 *
 * @private
 */
AntObjectBrowser.prototype.createListTable = function()
{
	// Setup the containing table
	this.m_listTable = alib.dom.createElement("table", this.listObjectsCon);
	alib.dom.styleSetClass(this.m_listTable, "aobListTable");
	this.m_listTable.cellPadding = 0;
	this.m_listTable.cellSpacing = 0;
	this.m_listTableBody = alib.dom.createElement("tbody", this.m_listTable);

	// Print headers
	if (this.viewmode == "table")
	{
		var rw = alib.dom.createElement("tr", this.m_listTableBody);

		var sel_all = alib.dom.createElement("input");
		sel_all.type = "checkbox";
		sel_all.cls = this;
		sel_all.onclick = function() { this.cls.fAllSelected = this.checked; this.cls.toggleSelectAll(); }
		if (!this.hideCheckbox)
		{
			var th = alib.dom.createElement("th", rw);
			alib.dom.styleSet(th, "text-align", "center");
			alib.dom.styleSet(th, "padding-left", "0px");
			alib.dom.styleSet(th, "padding-right", "5px");
			th.appendChild(sel_all);
		}

		// Now add the rest of the fields
		for (var j = 0; j < this.view_fields.length; j++)
		{
			var fld_def = this.mainObject.getFieldByName(this.view_fields[j].fieldName);
            if(fld_def)
			    var th = alib.dom.createElement("th", rw, fld_def.title);
		}
	}
}

/**
 * Select a row. If no id is provided, then select the first item in the list.
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {number} id The object id of the item to select
 * @param {event} event DOM window even used to check if shift or ctrl keys are pressed
 */
AntObjectBrowser.prototype.selectObjectRow = function(id, event)
{
	var shiftPressed = false;
	var ctrlPressed = false;

	// used for folder browsing
	var isBrowse = false;
	var browseByPath = "";

	if (window.event)
	{
		shiftPressed = window.event.shiftKey;
		ctrlPressed = window.event.ctrlKey;
	}
	else
	{
		if (event)
		{
			shiftPressed = event.shiftKey;
			ctrlPressed = event.ctrlKey;
		}
	}

	if (!id)
		var id = (this.objectList.length) ? this.objectList[0].id : "";

	// Name / label of this item
	var name = id;

	if (shiftPressed)
		return this.selectDetRowShift(this.curObjLoaded, id);

	// Set list item selected
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].id == id)
		{
			if (ctrlPressed)
			{
				if (this.objectList[i].selected())
				{
					this.objectList[i].select(false);
					this.objectList[i].seen = true;
				}
				else
				{
					this.objectList[i].select(true);
					this.objectList[i].seen = true;
				}
			}
			else
			{
				name = this.objectList[i].getName();
				this.objectList[i].select(true);
			}

			if (this.objectList[i].isBrowse)
			{
				isBrowse = this.objectList[i].isBrowse;
				browseByPath = this.objectList[i].browseByPath
			}
		}
		else if (!ctrlPressed)
		{
			this.objectList[i].select(false);
		}
	}

	if (!ctrlPressed && id)
	{
		if (isBrowse && browseByPath)
			this.changeBrowseByPath(browseByPath);
		else
			this.loadObjectForm(id, null, name);
	}
	else if (!ctrlPressed && id=="")
	{
		this.previewCon.innerHTML = "";
	}
}

/**
 * If we are navigating in folder/browseby view then this function changes the path
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} path The full path to load
 */
AntObjectBrowser.prototype.changeBrowseByPath = function(path)
{
	this.browseByPath  = path;
	this.getObjects(0, false); // Clear results and start at 0
	this.buildBrowseByPath();
}

/**
 * Implment shift+select rows. Select everything between currsel and newsel
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {number} currsel Starting id already selected
 * @param {number} newsel New id selected
 */
AntObjectBrowser.prototype.selectDetRowShift = function(currsel, newsel)
{
	var currpos = null;
	var newpos = null;

	// Get currpos
	for (i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].id == currsel)
			currpos = i;
	}
	
	// Get newpos
	for (i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].id == newsel)
			newpos = i;
	}
	
	var start = (currpos < newpos) ? currpos : newpos;
	var end = (currpos > newpos) ? currpos : newpos;

	// Get newpos
	for (i = 0; i < this.objectList.length; i++)
	{
		if (i >= start && i <= end)
		{
			this.objectList[i].select(true);
		}
		else
		{
			this.objectList[i].select(false);
		}
	}
}

/**
 * Set user image
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {DOMElement} con Container where the image will be printed
 * @param {number} user_id The unique id of the user
 * @param {sting} user_name Optional name of the user
 */
AntObjectBrowser.prototype.setUserImage = function(con, user_id, user_name)
{
	var path = "/files/userimages/";
	path += (user_id) ? user_id : user_name;
	path += "/48/48";

	var img = alib.dom.createElement("img", con);
	alib.dom.styleSet(img, "width", "48px");
	img.src = path;

	if (user_id)
		AntObjectInfobox.attach("user", user_id, img);
}


/**
 * Set AntView for loading objects
 *
 * @private
 * @this {AntObjectBrowser}
 * @param {AntView} parentView The parent view of this view
 */
AntObjectBrowser.prototype.setAntView = function(parentView)
{
	this.antView = parentView;
	this.antView.setViewsSingle(true);
	this.antView.options.bcls = this;
	this.antView.onresize = function()
	{
		this.options.bcls.resize();
	}

	// Set refresh interval time
	var refreshInterval = 60000;
	switch (this.obj_type)
	{
	case 'comment':
		refreshInterval = 10000;
		break;
	}

	// Add auto-refresh when displayed and clear when hidden - every 10 seconds
	this.antView.on("show", function(opts) { opts.cls.setAutoRefresh(refreshInterval); }, { cls:this });
	this.antView.on("hide", function(opts) { opts.cls.setAutoRefresh(null); }, { cls:this });
	this.setAutoRefresh(refreshInterval); // Assume this browser is visible on initialization

	this.getObjectView(this.obj_type);
}

/**
 * Dynamically get or create an object loader view
 *
 * @param {string} objType The object type we are loading
 */
AntObjectBrowser.prototype.getObjectView = function(objType)
{
	if (!this.antView)
		return null;

	// Check if we already created this view
	if (this.antView.getView(objType + ":[id]"))
		return this.antView.getView(objType + ":[id]")

	var viewItem = this.antView.addView(objType+":[id]", {});
	viewItem.options.obj_type = objType;
	viewItem.options.bwserCls = this;
    viewItem.options.loadLoaded = null;
	viewItem.options.parentPath = this.antView.getPath();

	viewItem.render = function() { }

	viewItem.onshow = function()  // draws in onshow so that it redraws every time
	{ 
		// Do not reload if this object id is already loaded
		//if (this.variable && this.options.lastLoaded == this.variable)
        //alert(this.options.lastLoaded + "==" + this.variable)
		if (this.options.lastLoaded == this.variable && !this.fromClone)
			return true;
            
		this.con.innerHTML = "";
		this.title = ""; // because objects are loaded in the same view, clear last title
		var ol = new AntObjectLoader(this.options.obj_type, this.variable);
		ol.setAntView(this);
        
		// Set associations and values for new objects
		if (!this.variable)
		{
			for (var i = 0; i < this.options.bwserCls.m_filters.length; i++)
			{
				var cond = this.options.bwserCls.m_filters[i];
				if (this.options.bwserCls.m_filters[i].fieldName == "associations")
					ol.mainObject.setMultiValue('associations', cond.value);
				else
					ol.setValue(cond.fieldName, cond.value);
			}
			if (this.options.bwserCls.obj_reference)
				ol.setValue("obj_reference", this.options.bwserCls.obj_reference);

			// Set common fields if objectContext is set and this is a new object (no id)
			if (this.options.bwserCls.objectContext != null)
			{
				var contextFields = this.options.bwserCls.objectContext.getFields();
				var objFields = this.options.bwserCls.mainObject.getFields();

				for (var i in contextFields)
				{
					var conField = contextFields[i];

					for (var j in objFields)
					{
						var objField = objFields[j];

						if ((objField.type == "object" || objField.type == "fkey") && objField.name == conField.name 
							&& objField.type == conField.type && objField.subtype == conField.subtype)
						{
							// Make sure value has not been set by filters which should override
							if (!ol.getValue(objField.name))
							{
								ol.setValue(objField.name, this.options.bwserCls.objectContext.getValue(objField.name));
							}
						}
					}
				}
			}
		}
		ol.print(this.con);
		ol.cbData.antView = this;
        ol.cbData.bwserCls = this.options.bwserCls;
		ol.cbData.parentPath = this.options.parentPath;
		ol.onClose = function() 
		{ 
			this.cbData.antView.options.lastLoaded = this.mainObject.id; // Set so this form reloads to new form if newly saved id

			// Added this to give the list 1 second to refresh because we are 
			// working with almost real-time indexes (elasticsearch) now
			var bcls = this.cbData.bwserCls;
			setTimeout(function(){ bcls.refresh(); }, 1000);
			//this.cbData.bwserCls.refresh(); 
			
			// Move up to previous view
			this.cbData.antView.goup(); 
		}
		ol.onRemove = function() { this.cbData.bwserCls.refresh(); }

        if(ol.cloneObject) // If current object is cloned, reset the lastLoaded variable
        {
            this.options.lastLoaded = null;
        }
        else
		    this.options.lastLoaded = this.variable;
	};

	return viewItem;
}

/**
 * Upload files to the current working directory
 */
AntObjectBrowser.prototype.antFsUpload = function()
{
	var cfupload = new AntFsUpload(this.browseByPath, this.m_dlg);
	cfupload.cbData.cls = this;
	cfupload.onUploadFinished = function()
	{
		this.cbData.cls.getObjects();
	}
	cfupload.showDialog();
}


/**
 * Create new browseby (folder) in the current directory
 */
AntObjectBrowser.prototype.antFsCreateFolder = function()
{
	var dlg_p = new CDialog();
	dlg_p.promptBox("Name:", "New Folder Name", "New Folder");
	dlg_p.m_cls = this;
	dlg_p.onPromptOk = function(val)
	{
		var args = [["path", this.m_cls.browseByPath], ["name", val]];
        
        ajax = new CAjax('json');
        ajax.cbData.cls = this.m_cls;
        ajax.onload = function(ret)
        {
            if(!ret['error'])
                this.cbData.cls.getObjects();
			else 
				alert(ret['error']);
        };
        ajax.exec("/controller/AntFs/newFolder", args);
	}
    
    dlg_p.m_input.onblur = function ()
    {
        checkSpecialCharacters("folder", this.value, this);
    }
}

/**
 * Move files and folders to a new folder
 *
 * @param int toFid If set then call controller, otherwise show browse dialog
 */
AntObjectBrowser.prototype.antFsMove = function(toFid)
{
	var toFolder = (typeof toFid != "undefined") ? toFid : null;

	if (toFolder == null)
	{
		var cbrowser = new AntFsOpen();
		cbrowser.filterType = "folder";
		cbrowser.setTitle("Move Files &amp; Folders To:");
		cbrowser.cls = this;
		/*
		cbrowser.file_id = (file_id) ? file_id : null;
		cbrowser.folder_id = (folder_id) ? folder_id : null;
		*/
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.cls.antFsMove(fid);
		}
		cbrowser.showDialog(); 

		return;
	}

	// Create loading div
	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Moving items, please wait...";
	dlg.statusDialog(dv_load, 150, 100);
	
	var args = [["obj_type", this.mainObject.name], ["move_to_id", toFolder]];

	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			args[args.length] = ["objects[]", this.objectList[i].id];
			fIsSelected = true;
		}
	}

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		if (!confirm("This will move all "+this.mainObject.titlePl+" in the current view. Are you sure you want to continue?"))
		{
			dlg.hide();
			return;
		}

		args[args.length] = ["all_selected", "1"];
	}

	this.getFormConditions(null, args);
	
	ajax = new CAjax('json');
	ajax.cls = this;
	ajax.dlg = dlg;
	ajax.onload = function(ret)
	{
		this.dlg.hide();

		if (!ret['error'])
		{
			var waserror = false;
							
			for (moved in ret)
			{
				var currentDeleted = ret[moved];
				if (currentDeleted != "-1")
				{
					for (var j = 0; j < this.cls.objectList.length; j++)
					{
						if (this.cls.objectList[j].id == currentDeleted)
						{
							this.cls.objectList[j].remove();
						}
					}
				}
				else
				{
					waserror = true;
				}
			}

			if (waserror)
				ALib.statusShowAlert("ERROR: Not all objects were moved!", 3000, "bottom", "right");
			else
				ALib.statusShowAlert(ret.length + " Items Moved!", 3000, "bottom", "right");

			if (this.cls.viewmode == "details")
				this.cls.refresh();
		}
		else
		{
			ALib.statusShowAlert("ERROR: Could not contact server!", 3000, "bottom", "right");
		}    
	};

	ajax.exec("/controller/AntFs/move", args);
}
 
/**
 * Open an object form by id
 *
 * If view is avaiable then a view will be used to load the form
 *
 * @param {int} id The id of the object to load
 * @param {Array} param_fwd Array of array of params [['pname', 'pvalue']]
 * @param {string} label Used if we are in "select" mode to pass name to callback.
 * @param {string} obj_type Optional manual object type to load. By default this.obj_type is used.
 */
AntObjectBrowser.prototype.loadObjectForm = function(id, param_fwd, label, obj_type)
{
	var params = (param_fwd) ? param_fwd : new Array();
	if (!param_fwd)
		var param_fwd = null;

	var obj_type = obj_type || this.obj_type;

	// Set filters as params to foward to object
	for (var i = 0; i < this.m_filters.length; i++)
	{
		var cond = this.m_filters[i];
		if (this.m_filters[i].fieldName == "associations")
			params[params.length] = ["associations[]", cond.value];
		else
			params[params.length] = [cond.fieldName, cond.value];
	}
	if (this.obj_reference)
	{
		params[params.length] = ["obj_reference", this.obj_reference];
	}

	var oid = (id) ? id : "";
	if (oid)
		this.curObjLoaded = oid;

	// Set common fields if objectContext is set and this is a new object (no id)
	if (!oid && this.objectContext != null)
	{
		var contextFields = this.objectContext.getFields();
		var objFields = this.mainObject.getFields();

		for (var i in contextFields)
		{
			var conField = contextFields[i];

			for (var j in objFields)
			{
				var objField = objFields[j];

				if ((objField.type == "object" || objField.type == "fkey") && objField.name == conField.name 
					&& objField.type == conField.type && objField.subtype == conField.subtype)
				{
					// Make sure params are not yet set
					var notSet = true;
					for (var m in params)
					{
						if (params[m][0] == objField.name)
							notSet = false;
					}

					if (notSet)
					{
						params[params.length] = [objField.name, this.objectContext.getValue(objField.name)];
					}
				}
			}
		}
	}	

	// Find out if browser is functioning as a select popup
	if (this.useSelect)
	{
		this.select(oid, label);
	}
	else if (this.open_handler)
	{
		switch (this.open_handler)
		{
		case 'email_message_draft':
			loadObjectForm("email_message", oid);
			break;
		}
	}
	else if (this.antView && !this.preview && this.getObjectView(obj_type))
	{
		this.antView.navigate(obj_type + ":" + oid);
	}
	else
	{
		var url = '/obj/' + obj_type;
		if (oid)
			url += '/' + oid;

		// If views are being used, allow divs and viewable areas to be managed externally
		if (this.mainBrowserWorkspace && this.browserCon) // load in a new div in the browser container
		{
			var oldScrollTop = alib.dom.getScrollPosTop(); // this.browserCon.scrollTop;
			
			if (this.preview && this.previewCon)
			{
				this.previewCon.innerHTML = "";
				var objfrmCon = this.previewCon;
				objfrmCon.cls = this;
				objfrmCon.oldScrollTop = oldScrollTop;
				objfrmCon.close = function()
				{
					// TODO: perform close
					//ALib.m_debug = true;
					//ALib.trace("Perform Close");
				}
			}
			else
			{
				alib.dom.styleSet(this.titleCon, "display", "none");
				alib.dom.styleSet(this.innerCon, "display", "none");
				var objfrmCon = alib.dom.createElement("div", this.browserCon);
				objfrmCon.cls = this;
				objfrmCon.oldScrollTop = oldScrollTop;
				objfrmCon.close = function()
				{                        
					this.style.display = "none";
					alib.dom.styleSet(this.cls.titleCon, "display", "block");
					alib.dom.styleSet(this.cls.innerCon, "display", "block");
					objfrmCon.cls.browserCon.removeChild(this);
					alib.dom.setScrollPosTop(this.oldScrollTop);
				}
			}

			// Print object loader 
			var ol = new AntObjectLoader(obj_type, oid);
				
			if (this.preview)
			{
				ol.fEnableClose = false;
				ol.inline = true;
			}

			if (!id)
			{
				// Set associations and values
				for (var i = 0; i < this.m_filters.length; i++)
				{
					var cond = this.m_filters[i];
					if (this.m_filters[i].fieldName == "associations")
						ol.mainObject.setMultiValue('associations', cond.value);
					else
						ol.setValue(cond.fieldName, cond.value);
				}
				if (this.obj_reference)
					ol.setValue("obj_reference", this.obj_reference);
			}
				
			// Use ol.print only for default               
			ol.print(objfrmCon);
			
			ol.objfrmCon = objfrmCon;
			ol.objBrwsrCls = this;
			ol.onClose = function()
			{                    
				this.objfrmCon.close();
			}
			if (!this.preview)
			{
				ol.onSave = function()
				{
					this.objBrwsrCls.getObjects();
				}
			}
			ol.onRemove = function()
			{
				this.objBrwsrCls.getObjects();
			}
		}
		else if (this.loaderCls) // Browser is nested in an object loader (form)
		{
			var oldScrollTop = alib.dom.getScrollPosTop();
			this.loaderCls.hide();

			var objfrmCon = alib.dom.createElement("div", this.loaderCls.outerCon);
			objfrmCon.cls = this;
			objfrmCon.oldScrollTop = oldScrollTop;
			objfrmCon.close = function()
			{                    
				this.style.display = "none";
				objfrmCon.cls.loaderCls.show();
				objfrmCon.cls.loaderCls.outerCon.removeChild(this);
				alib.dom.setScrollPosTop(this.oldScrollTop);
			}

			// Print object loader 
			var ol = new AntObjectLoader(obj_type, oid);

			// Set associations and values
			for (var i = 0; i < this.m_filters.length; i++)
			{
				var cond = this.m_filters[i];
				if (this.m_filters[i].fieldName == "associations")
					ol.mainObject.setMultiValue('associations', cond.value);
				else
					ol.setValue(cond.fieldName, cond.value);
			}
			if (this.obj_reference)
				ol.setValue("obj_reference", this.obj_reference);
			
			ol.print(objfrmCon, this.loaderCls.isPopup);
				
			ol.objfrmCon = objfrmCon;
			ol.objBrwsrCls = this;
			ol.onClose = function()
			{
				this.objfrmCon.close();
			}
			ol.onSave = function()
			{
				this.objBrwsrCls.getObjects();
			}
			ol.onRemove = function()
			{
				this.objBrwsrCls.getObjects();
			}
		}
		else
		{
			loadObjectForm(obj_type, oid, null, null, params);
		}
	}
}

/**
 * Show advanced search dialog
 *
 * @param {AntObjectBrowserView} view Optional view to be edited other than the current view
 */
AntObjectBrowser.prototype.showAdvancedSearch = function(view)
{
	var ed = new AntObjectViewEditor(this.obj_type, this.currentView);
	ed.cbData.cls = this;
	ed.showDialog();
	ed.onApply = function(view)
	{
		this.cbData.cls.loadView(view);
		this.cbData.cls.getObjects();
	}
}


/**
 * Display views form
 */
AntObjectBrowser.prototype.toggleViewsForm = function()
{
	if (this.m_viewsDlg)
	{
		try
		{
			this.m_viewsDlg.hide();
			this.m_viewsDlg = null;
		}
		catch(e) { }
	}
	else
	{
		this.m_viewsDlg = new CDialog("Manage " + this.mainObject.title + " Views");
		this.m_viewsDiv = alib.dom.createElement("div");
		this.m_viewsDlg.customDialog(this.m_viewsDiv, 600, 400);
		this.showViewsDialog();
	}

}

/**
 * Render  "Manage Views" dialog
 */
AntObjectBrowser.prototype.showViewsDialog = function()
{
	// Display information
	var info = alib.dom.createElement("p", this.m_viewsDiv);
	alib.dom.styleSetClass(info, "info");
	info.innerHTML = "Views are a simple way to save advanced queries and quickly reload them. You can select your default view by checking the 'Default' column which means the first time you load this form, the selected view will be used to filter your results. To create a new view, click 'Create New View' below.";

	var wfViews = new CWindowFrame("Views", null, "0px");
	wfViews.print(this.m_viewsDiv);
	var wfcon = wfViews.getCon();
	alib.dom.styleSet(wfcon, "height", "250px");
	alib.dom.styleSet(wfcon, "overflow", "auto");

	var tbl = new CToolTable("100%");
	tbl.print(wfcon);
	tbl.addHeader("Name (click to edit)");
	tbl.addHeader("Description");
	tbl.addHeader("Default", "center", "30px");
	tbl.addHeader("&nbsp;", "center", "20px");

	var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";

	for (var i = 0; i < this.mainObject.views.length; i++)
	{
		var view = this.mainObject.views[i];

		if (view.filterKey != this.viewsFilterKey)
			continue;

		var rw = tbl.addRow();
		
		var lnk = alib.dom.createElement("a");
		lnk.innerHTML = view.name;
		lnk.href = "javascript:void(0)";
		lnk.cls = this;
		lnk.view = view;
		lnk.onclick = function() 
		{ 
			this.cls.toggleViewsForm();
			this.cls.showAdvancedSearch(this.view);
		} 
		rw.addCell(lnk);

		rw.addCell(view.description);

		var def = alib.dom.createElement("input");
		def.type = "radio";
		def.name = "default_view";
		def.cls = this;
		def.checked = view.fDefault;
		def.view = view;
		def.onclick = function() 
		{ 
			this.cls.setDefaultView(this.view);
		} 
		rw.addCell(def);

		if (!view.fSystem)
		{
			var del = alib.dom.createElement("a");
			del.innerHTML = "<img src='"+icon+"' border='0' />";
			del.href = "javascript:void(0)";
			del.cls = this;
			del.row = rw;
			del.view = view;
			del.onclick = function() 
			{ 
				this.cls.deleteView(this.view, this.row);
			} 
		}
		else
		{
			var del = alib.dom.createElement("span");
		}
		rw.addCell(del, false, "center");
	}

	var btn_dv = alib.dom.createElement("div", this.m_viewsDiv);
	alib.dom.styleSet(btn_dv, "margin", "3px");
	var btn = new CButton("Close", function(cls) {cls.toggleViewsForm(); }, [this], "b1");
	btn.print(btn_dv);

	var btn = new CButton("Create New View", function(cls) { cls.toggleViewsForm(); cls.showAdvancedSearch(); }, [this], "b1");
	btn.print(btn_dv);
}

/**
 * Set a view as the default to load the next time the browser is loaded
 *
 * @param {Object} view The view to set as the default
 */
AntObjectBrowser.prototype.setDefaultView = function(view)
{	
	for (var i = 0; i < this.mainObject.views.length; i++)
	{
		this.mainObject.views[i].fDefault = (this.mainObject.views[i] == view) ? true : false;
	}

	var args = [["obj_type", this.mainObject.name], ["view_id", view.id], ["filter_key", this.viewsFilterKey]];

	ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {
            // Update cache to reflect new default view
			Ant.EntityDefinitionLoader.get(this.cls.obj_type).load();

            ALib.statusShowAlert("Default View Changed!", 3000, "bottom", "right");
        }
        else
        {
            ALib.statusShowAlert("ERROR: Could not contact server!", 3000, "bottom", "right");
        }   
    };
    ajax.exec("/controller/Object/setViewDefault", args);
}

/*************************************************************************
*	Function:	saveViewDialog
*
*	Purpose:	Save changes to a view
**************************************************************************/
AntObjectBrowser.prototype.saveViewDialog = function(view, saveas)
{
	var dlg = new CDialog("Save View", this.m_advancedSearchDlg);
	var dv = alib.dom.createElement("div");

	// Name
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Name This View";
	var inp_dv = alib.dom.createElement("div", dv);
	var txtName = alib.dom.createElement("input", inp_dv);
	alib.dom.styleSet(txtName, "width", "98%");

	// Description
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Description";
	var inp_dv = alib.dom.createElement("div", dv);
	var txtDescription = alib.dom.createElement("textarea", inp_dv);
	alib.dom.styleSet(txtDescription, "width", "98%");

	var save_view_id = "";

	if (view)
	{
		txtName.value = view.name;
		txtDescription.value = view.description;

		if (saveas)
		{
			txtName.value += " (copy)";
		}
		else
		{
			save_view_id = view.id;
		}
	}
	else
	{
		txtName.value = "My Custom View";
		txtDescription.value = "Describe this view here";
	}

	var dv_btn = alib.dom.createElement("div", dv);
	var btn = new CButton("Save", function(cls, dlg, name, description, save_view_id) {  dlg.hide(); cls.saveView(name.value, description.value, save_view_id);  }, 
							[this, dlg, txtName, txtDescription, save_view_id], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [dlg], "b1");
	btn.print(dv_btn);

	dlg.customDialog(dv, 300, 130);
}

/*************************************************************************
*	Function:	saveView
*
*	Purpose:	Save changes to a view (or enter a new one)
**************************************************************************/
AntObjectBrowser.prototype.saveView = function(name, description, save_view_id)
{
	// Create loading div
	var dlg = new CDialog(null, this.m_advancedSearchDlg);
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);

	var view = null;

	this.searchView.conditions = new Array();
	for (var i = 0; i < this.conditionObj.getNumConditions(); i++)
	{
		var cond = this.conditionObj.getCondition(i);

		this.searchView.conditions[i] = new Object();
		this.searchView.conditions[i].blogic = cond.blogic;
		this.searchView.conditions[i].fieldName = cond.fieldName;
		this.searchView.conditions[i].operator = cond.operator;
		this.searchView.conditions[i].condValue = cond.condValue;
	}

	if (save_view_id)
	{
		view = this.mainObject.getViewById(save_view_id);
	}
	else
	{
		view = new AntObjectBrowserView(this.mainObject.name);
	}

	if (view)
	{
		view.conditions = this.searchView.conditions.slice(0);
		view.sort_order = this.searchView.sort_order.slice(0);
		view.view_fields = this.searchView.view_fields.slice(0); 
		view.name = name;
		view.filterKey = this.viewsFilterKey;
		view.description = description;
		view.cls = this;
		view.save_view_id = (save_view_id) ? save_view_id : null;
		view.dlg = dlg;
		view.onsave = function()
		{
			dlg.hide();
			if (!this.save_view_id)
				this.cls.mainObject.views[this.cls.mainObject.views.length] = this;

			ALib.statusShowAlert("View Saved!", 3000, "bottom", "right");

			this.cls.buildViewsDropdown();
			this.cls.showAdvancedSearch();
			this.cls.runSearch(this);

			// Update global object def cache
			if (typeof objectPreloadDef != "undefined")
				objectPreloadDef(this.cls.mainObject.name, true);
		}
		view.onsaveError = function()
		{
			dlg.hide();
			ALib.statusShowAlert("ERROR: Unable to connect to server!", 3000, "bottom", "right");
		}
		view.save();
	}
}

/*************************************************************************
*	Function:	runSearch
*
*	Purpose:	Apply and perform advanced query
**************************************************************************/
AntObjectBrowser.prototype.runSearch = function(view)
{
	// TODO: move to temp view
	/*
	this.currentViewFields = new Array();

	for (var i = 0; i < this.view_fields.length; i++)
	{
		this.currentViewFields[i] = this.view_fields[i].fieldName;
	}
	*/

	this.searchView.conditions = new Array();
	for (var i = 0; i < this.conditionObj.getNumConditions(); i++)
	{
		var cond = this.conditionObj.getCondition(i);

		this.searchView.conditions[i] = new Object();
		this.searchView.conditions[i].blogic = cond.blogic;
		this.searchView.conditions[i].fieldName = cond.fieldName;
		this.searchView.conditions[i].operator = cond.operator;
		this.searchView.conditions[i].condValue = cond.condValue;

		//ALib.m_debug = true;
		//ALib.trace(cond.fieldName + " : " + cond.condValue);
	}

	this.loadView((view) ? view : this.searchView);

	this.getObjects();
}

/*************************************************************************
*	Function:	addOrderBy
*
*	Purpose:	Add a sort order entry
**************************************************************************/
AntObjectBrowser.prototype.addOrderBy = function(con, fieldName, order)
{
	var sel_field = (fieldName) ? fieldName : "";
	var sel_order = (order) ? order : "asc";

	if (typeof this.orderBySerial == "undefined")
		this.orderBySerial = 1;
	else
		this.orderBySerial++;

	var dv = alib.dom.createElement("div", con);

	if (this.searchView.sort_order.length)
	{
		var lbl = alib.dom.createElement("span", dv);
		lbl.innerHTML = "Then By: ";
	}

	var ind = this.searchView.sort_order.length;
	this.searchView.sort_order[ind] = new Object();
	this.searchView.sort_order[ind].id = this.orderBySerial;
	this.searchView.sort_order[ind].fieldName = sel_field;
	this.searchView.sort_order[ind].order = sel_order;

	// Add field name
	var field_sel = alib.dom.createElement("select", dv);
	field_sel.orderobj = this.searchView.sort_order[ind];
	field_sel.onchange = function() { this.orderobj.fieldName = this.value; };
	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		if (fields[i].type != "fkey_multi")
		{
			field_sel[field_sel.length] = new Option(fields[i].title, fields[i].name, false, (sel_field==fields[i].name)?true:false);
		}
	}

	if (!this.searchView.sort_order[ind].fieldName)
		this.searchView.sort_order[ind].fieldName = field_sel.value;

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";
	
	// Add order (asc/desc)
	var order_sel = alib.dom.createElement("select", dv);
	order_sel.orderobj = this.searchView.sort_order[ind];
	order_sel.onchange = function() { this.orderobj.order = this.value; };
	order_sel[order_sel.length] = new Option("Ascending", "asc", false, (sel_order == "asc")?true:false);
	order_sel[order_sel.length] = new Option("Descending", "desc", false, (sel_order == "desc")?true:false);

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";

	var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
	var del = alib.dom.createElement("a", dv);
	del.innerHTML = "<img src='"+icon+"' border='0' />";
	del.href = "javascript:void(0)";
	del.odv = dv;
	del.pdv = con;
	del.cls = this;
	del.orderid = this.orderBySerial;
	del.onclick = function() 
	{ 
		for (var i = 0; i < this.cls.searchView.sort_order.length; i++)
		{
			if (this.cls.searchView.sort_order[i].id == this.orderid)
				this.cls.searchView.sort_order.splice(i, 1);
		}

		this.pdv.removeChild(this.odv); 
	} 
}

/*************************************************************************
*	Function:	addViewColumn
*
*	Purpose:	Add a column view drop-down
**************************************************************************/
AntObjectBrowser.prototype.addViewColumn = function(con, field_name)
{
	var selected_field = (field_name) ? field_name : "";

	if (typeof this.viewCOlSerial == "undefined")
		this.viewCOlSerial = 1;
	else
		this.viewCOlSerial++;

	var dv = alib.dom.createElement("div", con);

	var ind = this.searchView.view_fields.length;
	this.searchView.view_fields[ind] = new Object();
	this.searchView.view_fields[ind].id = this.viewCOlSerial;
	this.searchView.view_fields[ind].fieldName = selected_field;

	// Add field name
	var field_sel = alib.dom.createElement("select", dv);
	field_sel.viewobj = this.searchView.view_fields[ind];
	field_sel.onchange = function() { this.viewobj.fieldName = this.value; };
	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		//if (fields[i].type != "fkey_multi")
		//{
			field_sel[field_sel.length] = new Option(fields[i].title, fields[i].name, false, (fields[i].name == selected_field)?true:false);
		//}
	}

	if (!this.searchView.view_fields[ind].fieldName)
		this.searchView.view_fields[ind].fieldName = field_sel.value;

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";

	var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
	var del = alib.dom.createElement("a", dv);
	del.innerHTML = "<img src='"+icon+"' border='0' />";
	del.href = "javascript:void(0)";
	del.odv = dv;
	del.pdv = con;
	del.cls = this;
	del.viewid = this.viewCOlSerial;
	del.onclick = function() 
	{ 
		for (var i = 0; i < this.cls.searchView.view_fields.length; i++)
		{
			if (this.cls.searchView.view_fields[i].id == this.viewid)
				this.cls.searchView.view_fields.splice(i, 1);
		}

		this.pdv.removeChild(this.odv); 
	} 

	//getFields
}

/**
 * Delete selected objects
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {number} uid If set then delete a single object by id
 */
AntObjectBrowser.prototype.deleteObjects = function(uid)
{
	var singleuid = (uid) ? uid : null;
	ALib.Dlg.confirmBox("Are you sure you want to delete the selected items?", "Delete " + this.mainObject.titlePl, [this, singleuid]);
	ALib.Dlg.onConfirmOk = function(cls, singleuid)
	{
		var args = [["obj_type", cls.mainObject.name]];

		var fIsSelected = false;
		for (var i = 0; i < cls.objectList.length; i++)
		{
			//ALib.trace(cls.objectList[i].selected());
			if (cls.objectList[i].selected())
			{
				args[args.length] = ["objects[]", cls.objectList[i].id];
				fIsSelected = true;
			}
		}

		if (singleuid)
		{
			args[args.length] = ["objects[]", singleuid];
			fIsSelected = true;
		}

		// Find out if nothing is selected (send all)
		if (!fIsSelected && !singleuid)
		{
			if (!confirm("This will delete all "+cls.mainObject.titlePl+" in the current view. Are you sure you want to continue?"))
			{
				//dlg.hide();
				return;
			}

			args[args.length] = ["all_selected", "1"];
		}

		// Get list of objects to be deleted and put in toRemove array
		// We do this because we cannot dynamically change the objectList array while
		// iterating through it.
		var toRemove = new Array();
		if (fIsSelected)
		{
			for (var i in args)
			{
				var idx = cls.refreshUpdateItemInList(args[i][1], cls.objectList);
				if (idx != -1)
					toRemove.push(cls.objectList[idx]);
			}
		}
		else
		{
			for (var i = 0; i < cls.objectList.length; i++)
			{
				if (cls.objectList[i].selected())
				{
					toRemove.push(cls.objectList[i]);
				}
			}
		}

		// And now remove from ui and queue in the deleting queue to keep refreshes from inserting
		// the deleted object before processing is finished. This gives the impression of immediate processing.
		for (var i = 0; i < toRemove.length; i++)
		{
			cls.deletingQueue.push(toRemove[i].id);
			toRemove[i].remove();
		}

		toRemove = null; // clear memory (hopefully)

		cls.getFormConditions(null, args);


		/* TODO: continue move
		var xhr = new alib.net.Xhr();

		// Setup callback
		alib.events.listen(xhr, "load", function(evt) { 
			var data = this.getResponse();
		}, {defCls:this});

		// Timed out
		alib.events.listen(xhr, "error", function(evt) { 
		}, {defCls:this});

		var ret = xhr.send("/controller/ObjectList/deleteObjects", "POST", args);
		*/
        
        var ajax = new CAjax('json');
        ajax.cls = cls;
        //ajax.dlg = dlg;
        ajax.onload = function(ret)
        {
            //this.dlg.hide();

            if (!ret['error'])
            {
                var waserror = false;
                                
                for (deleted in ret)
                {
                    var currentDeleted = ret[deleted];
                    if (currentDeleted != "-1")
                    {
						// Set deleting queue
						for (var i in this.cls.deletingQueue)
						{
							// Check for null id which usually only happens if the index and object
							// storage gets out of sync in which case, just roll over and purge all for a rest
							if (currentDeleted == null)
							{
								this.cls.deletingQueue = new Array();
								break;
							}
							else if (this.cls.deletingQueue[i] == currentDeleted)
							{
								// Remove from queue
								this.cls.deletingQueue.splice(i, 1);
							}
						}

						/*
                        for (var j = 0; j < this.cls.objectList.length; j++)
                        {
                            if (this.cls.objectList[j].id == currentDeleted)
                            {
                                this.cls.objectList[j].remove();
                            }
                        }
						*/
                    }
                    else
                    {
                        waserror = true;
						this.cls.deletingQueue = new Array(); // Clear and refresh
                    }
                }

                if (waserror)
                    ALib.statusShowAlert("ERROR: Not all objects were deleted!", 3000, "bottom", "right");
                else
                    ALib.statusShowAlert(ret.length + " Items Deleted!", 3000, "bottom", "right");

				// Refresh in 1 second to give index time to commit changes
				var bcls = this.cls;
				setTimeout(function(){ bcls.refresh(); }, 1000);
                //this.cls.refresh();
            }
            else
            {
                ALib.statusShowAlert("ERROR: Could not contact server!", 3000, "bottom", "right");
            }    
        };

        ajax.exec("/controller/ObjectList/deleteObjects", args);
	}
}

/**
 * Delete a view
 *
 * @param {Object} view The view to delete
 * @param {DOMElement} row The row where the view label is printed
 */
AntObjectBrowser.prototype.deleteView = function(view, row)
{
	var dlg = new CDialog("", this.m_viewsDlg);
	dlg.confirmBox("Are you sure you want to delete "+view.name+"?", "Delete View", [view.id, row, this]);
	dlg.onConfirmOk = function(did, row, cls)
	{   
        ajax = new CAjax('json');
        ajax.cls = cls;
        ajax.row = row;
        ajax.onload = function(ret)
        {
            this.row.deleteRow();

            for (var i = 0; i < this.cls.mainObject.views.length; i++)
            {
                if (this.cls.mainObject.views[i].id == id)
                    this.cls.mainObject.views.splice(i, 1);
            }

            ALib.statusShowAlert("View Deleted!", 3000, "bottom", "right");
            this.cls.buildViewsDropdown();   
        };
        ajax.exec("/controller/Object/deleteView", 
                    [["dvid", did]]);
	}
}

/**
 * Find out of the mainObject (CAntObject} has a field with an 'email' subtype
 */
AntObjectBrowser.prototype.objectHasEmail = function()
{
	var fHasEmail = false;

	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		if (fields[i].subtype == "email")
		{
			fHasEmail = true;
			break;
		}
	}

	return fHasEmail;
}

/*************************************************************************
*	Function:	actionEmail
*
*	Purpose:	Send bulk email
**************************************************************************/
AntObjectBrowser.prototype.actionEmail = function()
{
	var frmData = new Object();
    frmData.method = "standard";
	//frmData.method = "bulk"; 			// Standard/bulk
	frmData.useFields = new Array(); 	// Array of field names to pull from
	frmData.send = "compose"; 			// Compose/template
	frmData.template_id = ""; 			// Compose/template
	frmData.inp_field = "cmp_to"; 		// Compose/template

	var dlg = new CDialog("Send Email");
	var dv = alib.dom.createElement("div");

	// Method
	// -----------------------------------------------------
	var dv_inpfield = alib.dom.createElement("div");
	//alib.dom.styleSet(dv_inpfield, "display", "none");

	/*var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "formLabel");
	lbl.innerHTML = "Method:";
	var inp_dv = alib.dom.createElement("div", dv);

	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "method";
	radioMethod.checked = true;
	radioMethod.frmData = frmData;
	radioMethod.dv_inpfield = dv_inpfield;
	radioMethod.onclick = function() { this.dv_inpfield.style.display = "none"; this.frmData.method = "bulk"; }
	inp_dv.appendChild(radioMethod);	
    var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Bulk&nbsp;&nbsp;";
	
    var radioMethod  = alib.dom.createElement("input");    
	radioMethod.type = "radio";
	radioMethod.name = "method";
	radioMethod.checked = true;
	radioMethod.frmData = frmData;
	radioMethod.dv_inpfield = dv_inpfield;
	inp_dv.appendChild(radioMethod);
	var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Standard&nbsp;&nbsp;";*/
	
    /*var btn = new CButton("What is the difference?", function() { window.open('http://www.aereus.com/support/answers/40'); });
	btn.print(inp_dv);*/
	
	// Using
	dv.appendChild(dv_inpfield);
	var lbl = alib.dom.createElement("div", dv_inpfield);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Send Method:";
	var inp_dv = alib.dom.createElement("div", dv_inpfield);

	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "using";
	radioMethod.checked = true;
	radioMethod.frmData = frmData;
	radioMethod.onclick = function() { if (this.checked) { this.frmData.inp_field = "cmp_to";} }
	inp_dv.appendChild(radioMethod);
	var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;To&nbsp;";

	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "using";
	radioMethod.frmData = frmData;
	radioMethod.onclick = function() { if (this.checked) { this.frmData.inp_field = "cmp_cc";} }
	inp_dv.appendChild(radioMethod);
	var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Cc&nbsp;";

	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "using";
	radioMethod.frmData = frmData;
	radioMethod.onclick = function() { if (this.checked) { this.frmData.inp_field = "cmp_bcc";} }
	inp_dv.appendChild(radioMethod);
	var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Bcc&nbsp;";

	// Use Address
	// -----------------------------------------------------
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Use Address:";

	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		var field = fields[i];

		if (field.subtype == "email")
		{
			var inp_dv = alib.dom.createElement("div", dv);
			var chkUseAddress  = alib.dom.createElement("input");
			chkUseAddress.type = "checkbox";
			chkUseAddress.name = "use_field[]";
			chkUseAddress.checked = false;
			chkUseAddress.value = field.name;
			chkUseAddress.frmData = frmData;
			inp_dv.appendChild(chkUseAddress);
			var lbl = alib.dom.createElement("span", inp_dv);
			lbl.innerHTML = "&nbsp;"+field.title;

			chkUseAddress.onclick = function() 
			{ 
				if (this.checked)
				{
					this.frmData.useFields[this.frmData.useFields.length] = this.value;
				}
				else
				{
					for (var i = 0; i < this.frmData.useFields.length; i++)
					{
						if (this.frmData.useFields[i] == this.value)
							this.frmData.useFields.splice(i, 1);
					}
				}
			}
		}
	}

	// Send
	// ---------------------------------------------
	/*var dv_template = alib.dom.createElement("div");
	alib.dom.styleSet(dv_template, "display", "none");

	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "formLabel");
	lbl.innerHTML = "Send:";
	var inp_dv = alib.dom.createElement("div", dv);
	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "send";
	radioMethod.checked = true;
	radioMethod.dv_template = dv_template;
	radioMethod.frmData = frmData;
	radioMethod.onclick = function() { if (this.checked) { dv_template.style.display = "none"; this.frmData.template_id = "";} }
	inp_dv.appendChild(radioMethod);
	
    var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Compose New Message&nbsp;&nbsp;";
	var radioMethod  = alib.dom.createElement("input");
	radioMethod.type = "radio";
	radioMethod.name = "send";
	radioMethod.checked = false;
	radioMethod.dv_template = dv_template;
	radioMethod.onclick = function() { if (this.checked) dv_template.style.display = "block"; }
	inp_dv.appendChild(radioMethod);
	var radioLabel= alib.dom.createElement("span", inp_dv);
	radioLabel.innerHTML = "&nbsp;Use Email Template";

	// Template
	var emtfunct = function(lbl, dlg, frmData)
	{
		var cbrowser = new AntFsOpen();
		cbrowser.filterType = "emt";
		cbrowser.cbData.m_lbl = lbl;
		cbrowser.cbData.frmData = frmData;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.cbData.m_lbl.innerHTML = "&nbsp;&nbsp;" + name + "&nbsp;&nbsp;";
			this.cbData.frmData.template_id = fid;
			//this.m_task_obj.setObjectValue("fid", fid);
			//this.m_task_obj.setObjectValue("fname", name);
		}
		cbrowser.showDialog(dlg);
	}

	var lbl = alib.dom.createElement("span", dv_template);
	lbl.innerHTML = "&nbsp;&nbsp;No Template Selected!&nbsp;&nbsp;";
	dv.appendChild(dv_template);
	var btn = new CButton("Select Template", emtfunct, [lbl, dlg, frmData]);
	btn.print(dv_template);*/

	// Action buttons
	// ---------------------------------------------
	var dv_btn = alib.dom.createElement("div", dv);
    alib.dom.styleSet(dv_btn, "margin-top", "10px");
	var btn = new CButton("Compose Email", function(cls, dlg, frmData) { cls.actionEmailSubmit(frmData); dlg.hide(); }, 
							[this, dlg, frmData], "b2");
	btn.print(dv_btn);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg]);
	btn.print(dv_btn);

	dlg.customDialog(dv, 300, 170);
}

/*************************************************************************
*	Function:	actionEmailSubmit
*
*	Purpose:	Send bulk email
**************************************************************************/
AntObjectBrowser.prototype.actionEmailSubmit = function(frmDataObj)
{
	//ALib.m_debug = true;
	//ALib.trace("Template ID: " + frmDataObj.template_id);

	// Create holder div
	var condv = alib.dom.createElement("div", alib.dom.m_document.body);
	alib.dom.styleSet(condv, "display", "none");
	alib.dom.styleSet(condv, "position", "absolute");

	// Create form
	var form = alib.dom.createElement("form", condv);
	form.setAttribute("method", "post");
	form.setAttribute("target", "emailcmp_objbrowser");
	//form.setAttribute("action", "/email/compose.awp?new_win=1");
    form.setAttribute("action", "/obj/email_message");

	// Tempalte ID
	var hiddenField = alib.dom.createElement("input");              
	hiddenField.setAttribute("type", "hidden");
	hiddenField.setAttribute("name", "fid");
	hiddenField.setAttribute("value", frmDataObj.template_id);
	form.appendChild(hiddenField);

	// Input field (non-bulk)
	var hiddenField = alib.dom.createElement("input");              
	hiddenField.setAttribute("type", "hidden");
	hiddenField.setAttribute("name", "inp_field");
	hiddenField.setAttribute("value", frmDataObj.inp_field);
	form.appendChild(hiddenField);

	// Obj Type
	var hiddenField = alib.dom.createElement("input");              
	hiddenField.setAttribute("type", "hidden");
	hiddenField.setAttribute("name", "obj_type");
	hiddenField.setAttribute("value", this.mainObject.name);
	form.appendChild(hiddenField);

	// Method
	var hiddenField = alib.dom.createElement("input");              
	hiddenField.setAttribute("type", "hidden");
	hiddenField.setAttribute("name", "send_method");
	hiddenField.setAttribute("value", (frmDataObj.method == "bulk")?"1":"0");
	form.appendChild(hiddenField);

	// Objects
	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "objects[]");
			hiddenField.setAttribute("value", this.objectList[i].id);
			form.appendChild(hiddenField);
		}
	}

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(form);
		var hiddenField = alib.dom.createElement("input");              
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "all_selected");
		hiddenField.setAttribute("value", "1");
		form.appendChild(hiddenField);
	}

	// Fields
	for (var i = 0; i < frmDataObj.useFields.length; i++)
	{
		if (frmDataObj.useFields[i])
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "using[]");
			hiddenField.setAttribute("value", frmDataObj.useFields[i]);
			form.appendChild(hiddenField);
		}
	}

	var params = 'width=780,height=600,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	var cmp = window.open('', 'emailcmp_objbrowser', params);

	form.submit();

	alib.dom.m_document.body.removeChild(condv);
}

/*************************************************************************
*	Function:	getFormConditions
*
*	Purpose:	Get condtions for forwarding query through form
**************************************************************************/
AntObjectBrowser.prototype.getFormConditions = function(form, arr_args, objArgs)
{
	if (this.m_txtSearch && this.m_txtSearch.value && this.m_txtSearch.value!=this.searchTitleText)
	{
		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "cond_search");
			hiddenField.setAttribute("value", this.m_txtSearch.value);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["cond_search", this.m_txtSearch.value];

		if (objArgs)
			objArgs.cond_search = this.m_txtSearch.value;
	}
	
	var ccount = 0;
	for (var i = 0; i < this.conditions.length; i++, ++ccount)
	{
		var cond = this.conditions[i];

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "conditions[]");
			hiddenField.setAttribute("value", ccount);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["conditions[]", ccount];

		if (objArgs)
		{
			if (!objArgs.conditions) objArgs.conditions = new Array();
			objArgs.conditions.push(ccount);
		}

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_blogic_"+ccount);
			hiddenField.setAttribute("value", cond.blogic);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_blogic_"+ccount, cond.blogic];

		if (objArgs)
			objArgs["condition_blogic_"+ccount] = cond.blogic;

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_fieldname_"+ccount);
			hiddenField.setAttribute("value", cond.fieldName);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_fieldname_"+ccount, cond.fieldName];

		if (objArgs)
			objArgs["condition_fieldname_"+ccount] = cond.fieldName;

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_operator_"+ccount);
			hiddenField.setAttribute("value", cond.operator);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_operator_"+ccount, cond.operator];

		if (objArgs)
			objArgs["condition_operator_"+ccount] = cond.operator;

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_condvalue_"+ccount);
			hiddenField.setAttribute("value", cond.condValue);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_condvalue_"+ccount, cond.condValue];

		if (objArgs)
			objArgs["condition_condvalue_"+ccount] = cond.condValue;
	}

	for (var i = 0; i < this.m_filters.length; i++, ++ccount)
	{
		var cond = this.m_filters[i];

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "conditions[]");
			hiddenField.setAttribute("value", ccount);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["conditions[]", ccount];

		if (objArgs)
		{
			if (!objArgs.conditions) objArgs.conditions = new Array();
			objArgs.conditions.push(ccount);
		}

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_blogic_"+ccount);
			hiddenField.setAttribute("value", cond.blogic);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_blogic_"+ccount, cond.blogic];

		if (objArgs)
			objArgs["condition_blogic_"+ccount] = "and";

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_fieldname_"+ccount);
			hiddenField.setAttribute("value", cond.fieldName);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_fieldname_"+ccount, cond.fieldName];

		if (objArgs)
			objArgs["condition_fieldname_"+ccount] = cond.fieldName;

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_operator_"+ccount);
			hiddenField.setAttribute("value", "is_equal");
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_operator_"+ccount, "is_equal"];

		if (objArgs)
			objArgs["condition_operator_"+ccount] = "is_equal";

		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "condition_condvalue_"+ccount);
			hiddenField.setAttribute("value", cond.value);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["condition_condvalue_"+ccount, cond.value];

		if (objArgs)
			objArgs["condition_condvalue_"+ccount] = cond.value;
	}

	// Get order by
	for (var i = 0; i < this.sort_order.length; i++)
	{
		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "order_by[]");
			hiddenField.setAttribute("value",this.sort_order[i].fieldName+" "+this.sort_order[i].order);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["order_by[]", this.sort_order[i].fieldName+" "+this.sort_order[i].order];

		if (objArgs)
		{
			if (!objArgs.order_by) objArgs.order_by = new Array();
			objArgs.order_by.push(this.sort_order[i].fieldName+" "+this.sort_order[i].order);
		}
	}


	if (this.browseByField)
	{
		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "browsebyfield");
			hiddenField.setAttribute("value", this.browseByField);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["browsebyfield", this.browseByField];

		if (objArgs)
			objArgs.browsebyfield = this.browseByField;
	}

	if (this.browseByPath)
	{
		if (form)
		{
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "browsebypath");
			hiddenField.setAttribute("value", this.browseByPath);
			form.appendChild(hiddenField);
		}

		if (arr_args)
			arr_args[arr_args.length] = ["browsebypath", this.browseByPath];

		if (objArgs)
			objArgs.browsebypath = this.browseByPath;
	}
}

/**
 * Show mass-edit form
 */
AntObjectBrowser.prototype.actionEdit = function()
{
	var frmData = new Object();
	frmData.fieldName = "bulk";	// Field name to update
	frmData.act = "add"; 		// Used for mutli_val
	frmData.value = "";			// Value to set

	var dlg = new CDialog("Edit Multiple " + this.mainObject.titlePl);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 300);

	var val_div = alib.dom.createElement("div");

	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "label");
	lbl.innerHTML = "Select a field to update:";

	var fname_sel = alib.dom.createElement("select", dv);
	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		if (!fields[i].readonly)
			fname_sel[fname_sel.length] = new Option(fields[i].title, fields[i].name, false, false);
	}
	fname_sel.val_div = val_div;
	fname_sel.frmData = frmData;
	fname_sel.cls = this;
	fname_sel.onchange = function()
	{
		this.cls.actionEditBuildValue(this.value, this.val_div, this.frmData);
		this.frmData.fieldName = this.value;
	}

	dv.appendChild(val_div);

	this.actionEditBuildValue(fname_sel.value, val_div, frmData);

	// Action buttons
	// ---------------------------------------------
	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "margin-top", "3px");
    
    var btn = alib.ui.Button("Make Changes", 
                    {
                        className:"b2", callback:this, frmData:frmData, dlg:dlg,
                        onclick:function() 
                        {
                            this.callback.actionEditSubmit(this.frmData); 
                            this.dlg.hide();
                        }
                    });                            
	dv_btn.appendChild(btn.getButton());
	
	var btn = alib.ui.Button("Cancel Edit", 
                    {
                        className:"b1", dlg:dlg,
                        onclick:function() 
                        {
                            this.dlg.hide();
                        }
                    });
    dv_btn.appendChild(btn.getButton());

	dlg.reposition();
}

/**
 * Build value entry for a selectd field in the mass edit form
 *
 * @param {string} field_name The name of the field the user selected to edit
 * @param {DOMElement} div The container where the input component will be printed
 * @param {array} frmData Input data used in building the component such as value and action (if multi fields)
 */
AntObjectBrowser.prototype.actionEditBuildValue = function(field_name, div, frmData)
{
    alib.dom.styleSet(div, "margin-top", "5px");
	div.innerHTML = "";

	var field = this.mainObject.getFieldByName(field_name);
    switch(field.type)
    {
        case "fkey_multi":
            var lbl = alib.dom.createElement("div", div);
            alib.dom.styleSetClass(lbl, "label");
            lbl.innerHTML = "Do the following:";
            var act_sel = alib.dom.createElement("select", div);
            act_sel[act_sel.length] = new Option("Add", "add", false, true);
            act_sel[act_sel.length] = new Option("Remove", "remove", false, false);
            act_sel.frmData = frmData;
            act_sel.onchange = function() { this.frmData.act = this.value; }
        case "fkey":
            var inp_div = alib.dom.createElement("div", div);
            this.mainObject.fieldCreateValueInput(inp_div, field.name);
            inp_div.inpRef.frmData = frmData;
            frmData.value = inp_div.inpRef.value;
            
            if(inp_div.inptType == "select")
                inp_div.inpRef.onchange = function() { this.frmData.value = this.value; }
                
            else if(inp_div.inptType == "dynselect")
                inp_div.inpRef.onSelect = function() { this.frmData.value = this.value; }
            break;
        default:
            var lbl = alib.dom.createElement("div", div);
            alib.dom.styleSetClass(lbl, "label");
            lbl.innerHTML = "Set value to:";

            var inp_div = alib.dom.createElement("div", div);
            this.mainObject.fieldCreateValueInput(inp_div, field.name);
            if (inp_div.inpRef)
            {
                inp_div.inpRef.frmData = frmData;
                frmData.value = inp_div.inpRef.value;
                switch(inp_div.inptType)
                {
                case "checkbox":
                    inp_div.inpRef.onclick = function()
                    {
                        this.frmData.value = (this.checked) ? true : false;
                    }
                    break;
                case "text":
                case "input":
                    alib.dom.styleSet(inp_div.inpRef, "width", "90%");
                case "select":
                    inp_div.inpRef.onchange = function() 
                    {
                        this.frmData.value = this.value; 
                    }
                    break;
                case "userBrowser":
                case "objectBrowser":
                    inp_div.inpRef.onSelect = function(id)
                    {
                        this.frmData.value = id;
                    }
                    break;
                case "dynselect":
                    inp_div.inpRef.onSelect = function()
                    {
                        this.frmData.value = this.value;
                    }
                    break;
                }
            }
            break;
    }
}

/*************************************************************************
*	Function:	actionEditSubmit
*
*	Purpose:	Submit mass-edit
**************************************************************************/
AntObjectBrowser.prototype.actionEditSubmit = function(frmData)
{
	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving changes, please wait...";
	dlg.statusDialog(dv_load, 150, 100);
    
	var args = [["obj_type", this.mainObject.name], ["field_name", frmData.fieldName], ["action", frmData.act], ["value", frmData.value]];

	// Objects
	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			args[args.length] = ["objects[]", this.objectList[i].id];
		}
	}	

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(null, args);
		args[args.length] = ["all_selected", "1"];

		if (!confirm("This will edit all "+this.mainObject.titlePl+" in the current view. Are you sure you want to continue?"))
		{
			dlg.hide();
			return;
		}
	}
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.dlg = dlg;
    ajax.onload = function(ret)
    {
        this.dlg.hide();

        if (!ret['error'])
        {
            ALib.statusShowAlert(this.cls.mainObject.titlePl + "Saved!", 3000, "bottom", "right");
            this.cls.getObjects();
        }
        else
        {
            ALib.statusShowAlert("ERROR: Could not contact server!", 3000, "bottom", "right");
        }    
    };
    ajax.exec("/controller/Object/editObjects", args);
}

/**
 * Initilize and show import wizard for this object type
 *
 * @private
 */
AntObjectBrowser.prototype.actionImport = function()
{
	if (typeof Ant != "undefined" || g_userid) // Global app class
	{
		var uid = (Ant.user.id) ? Ant.user.id : g_userid;

		var wiz = new AntWizard("EntityImport", {obj_type:this.mainObject.name});
		//wiz.onFinished = function() { alert("The wizard is finished"); };
 		//wiz.onCancel = function() { alert("The wizard was canceled"); };
		wiz.show();
	}
}

/*************************************************************************
*	Function:	actionExport
*
*	Purpose:	Export list of objects
**************************************************************************/
AntObjectBrowser.prototype.actionExport = function()
{
	var condv = alib.dom.createElement("div", alib.dom.m_document.body);
	alib.dom.styleSet(condv, "display", "none");
	alib.dom.styleSet(condv, "position", "absolute");

	var form = alib.dom.createElement("form", condv);
	form.setAttribute("method", "post");
	form.setAttribute("target", "_blank");
	form.setAttribute("action", "/objects/export_csv.php?obj_type="+this.obj_type);

	//this.getFormConditions(form);

	// Objects
	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "objects[]");
			hiddenField.setAttribute("value", this.objectList[i].id);
			form.appendChild(hiddenField);
		}
	}


	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(form);
		var hiddenField = alib.dom.createElement("input");              
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "all_selected");
		hiddenField.setAttribute("value", "1");
		form.appendChild(hiddenField);
	}

	form.submit();
	
	alib.dom.m_document.body.removeChild(condv);
}


/*************************************************************************
*	Function:	actionPrint
*
*	Purpose:	Export list of objects
**************************************************************************/
AntObjectBrowser.prototype.actionPrint = function()
{
	var condv = alib.dom.createElement("div", alib.dom.m_document.body);
	alib.dom.styleSet(condv, "display", "none");
	alib.dom.styleSet(condv, "position", "absolute");

	var form = alib.dom.createElement("form", condv);
	form.setAttribute("method", "post");
	form.setAttribute("target", "_blank");
	form.setAttribute("action", "/print/engine.php?obj_type="+this.obj_type);

	//this.getFormConditions(form);

	// Objects
	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "objects[]");
			hiddenField.setAttribute("value", this.objectList[i].id);
			form.appendChild(hiddenField);
		}
	}

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(form);
		var hiddenField = alib.dom.createElement("input");              
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "all_selected");
		hiddenField.setAttribute("value", "1");
		form.appendChild(hiddenField);
	}


	form.submit();
	
	alib.dom.m_document.body.removeChild(condv);
}

/*************************************************************************
*	Function:	actionMerge
*
*	Purpose:	Merge records
**************************************************************************/
AntObjectBrowser.prototype.actionMerge = function()
{
	var mobjs = new Array();
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			mobjs[mobjs.length] = this.objectList[i].id;
		}
	}

	// Find out if nothing is selected (send all)
	if (mobjs.length < 2)
	{
		ALib.Dlg.messageBox("Please select at least two records to merge");
		return;
	}

	var wiz = new CAntObjectMergeWizard(this.obj_type);
	
	for (var i = 0; i < mobjs.length; i++)
		wiz.addObject(mobjs[i]);

	wiz.browserClass = this;
	wiz.onFinished = function()
	{
		this.browserClass.getObjects();
	}

	wiz.showDialog();
}

/*************************************************************************
*	Function:	actionCreateAssoc
*
*	Purpose:	Create new object and associate selected records
**************************************************************************/
AntObjectBrowser.prototype.actionCreateAssoc = function(obj_type)
{
	var assoc = new Array();
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			assoc[assoc.length] = this.obj_type + ":" + this.objectList[i].id;
		}
	}

	// Find out if nothing is selected (send all)
	if (assoc.length < 1)
	{
		ALib.Dlg.messageBox("Please select at least one record to associate with");
		return;
	}

	loadObjectForm(obj_type, "", null, assoc);
}


/*************************************************************************
*	Function:	actionCustom
*
*	Purpose:	Export list of objects
**************************************************************************/
AntObjectBrowser.prototype.actionCustom = function(act)
{
	var args = [["obj_type", this.mainObject.name]];

	// Objects
	var fIsSelected = false;
	var removalQueue = new Array();
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			args[args.length] = ["objects[]", this.objectList[i].id];

			removalQueue[removalQueue.length] = this.objectList[i];
		}
	}
	if (act.flush)
	{
		for (var i = 0; i < removalQueue.length; i++)
		{
			removalQueue[i].remove();
		}
	}
	
	// Other arguments
	if (act.args)
	{
		for (var i = 0; i < act.args.length; i++)
		{
			args[args.length] = [act.args[i][0], act.args[i][1]];
		}
	}

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(null, args);
		args[args.length] = ["all_selected", "1"];

		if (!confirm("This apply to all "+this.mainObject.titlePl+" in the current view. Are you sure you want to continue?"))
		{
			dlg.hide();
			return;
		}
	}

	if (act.options)
	{
		var dlg = new CDialog("Options");
		var dv = alib.dom.createElement("div");
		dlg.customDialog(dv, 300, 100);

		var val_div = alib.dom.createElement("div", val_div);

		for (var i = 0; i < act.options.length; i++)
		{
			var lbl = alib.dom.createElement("div", dv);
			alib.dom.styleSetClass(lbl, "label");
			lbl.innerHTML = act.options[i].caption;

			var ind = args.length;
			args[ind] = [act.options[i].name, act.options[i].values[0][0]];

			var fname_sel = alib.dom.createElement("select", dv);
			for (var m = 0; m < act.options[i].values.length; m++)
			{
				fname_sel[fname_sel.length] = new Option(act.options[i].values[m][1], act.options[i].values[m][0], false, false);
			}
			fname_sel.arg = args[ind];
			fname_sel.onchange = function()
			{
				this.arg[1] = this.value;
			}
		}

		// Action buttons
		// ---------------------------------------------
		var dv_btn = alib.dom.createElement("div", dv);
		alib.dom.styleSet(dv_btn, "margin-top", "3px");

		var subm = function(dlg, act, args)
		{
			var ajax = new CAjax('json');
			ajax.cbData.dlg = dlg;
			ajax.onload = function(ret)
			{
				this.cbData.dlg.hide();
				ALib.statusShowAlert("Action Completed!", 3000, "bottom", "right");
			};
			ajax.exec(act.url, args);
		}

		var btn = new CButton("Continue", subm, [dlg, act, args], "b2");
		btn.print(dv_btn);
		var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [dlg], AJAX_POST);
		btn.print(dv_btn);
	}
	else
	{
		var ajax = new CAjax('json');
		ajax.cbData.cls = this;
		ajax.cbData.act = act;
		ajax.onload = function(ret)
		{
			var msg = (act.doneMsg) ? act.doneMsg : "Action Completed!";
			ALib.statusShowAlert(msg, 3000, "bottom", "right");
			if (act.refresh)
			{
				// Refresh in 1 second to give index time to commit changes
				var bcls = this.cbData.cls;
				setTimeout(function(){ bcls.refresh(); }, 1000);
				//this.cbData.cls.refresh();
			}
		};
		ajax.exec(act.url, args);
	}
}

/*************************************************************************
*	Function:	actionCustomForm
*
*	Purpose:	Export list of objects
**************************************************************************/
AntObjectBrowser.prototype.actionCustomForm = function(act)
{
	var condv = alib.dom.createElement("div", alib.dom.m_document.body);
	alib.dom.styleSet(condv, "display", "none");
	alib.dom.styleSet(condv, "position", "absolute");

	var form = alib.dom.createElement("form", condv);
	form.setAttribute("method", "post");
	form.setAttribute("target", "_blank");
	form.setAttribute("action", act.url);

	// Objects
	var fIsSelected = false;
	for (var i = 0; i < this.objectList.length; i++)
	{
		if (this.objectList[i].selected())
		{
			fIsSelected = true;
			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", "objects[]");
			hiddenField.setAttribute("value", this.objectList[i].id);
			form.appendChild(hiddenField);
		}
	}

	// Find out if nothing is selected (send all)
	if (!fIsSelected)
	{
		this.getFormConditions(form);
		var hiddenField = alib.dom.createElement("input");              
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "all_selected");
		hiddenField.setAttribute("value", "1");
		form.appendChild(hiddenField);

		if (!confirm("This apply to all "+this.mainObject.titlePl+" in the current view. Are you sure you want to continue?"))
		{
			dlg.hide();
			return;
		}
	}

	if (act.options)
	{
		var dlg = new CDialog("Options");
		var dv = alib.dom.createElement("div");
		dlg.customDialog(dv, 300, 300);

		var val_div = alib.dom.createElement("div", val_div);

		for (var i = 0; i < act.options.length; i++)
		{
			var lbl = alib.dom.createElement("div", dv);
			alib.dom.styleSetClass(lbl, "label");
			lbl.innerHTML = act.options[i].caption;

			var hiddenField = alib.dom.createElement("input");              
			hiddenField.setAttribute("type", "hidden");
			hiddenField.setAttribute("name", act.options[i].name);
			hiddenField.setAttribute("value", act.options[i].values[0][0]);
			form.appendChild(hiddenField);

			var fname_sel = alib.dom.createElement("select", dv);
			for (var m = 0; m < act.options[i].values.length; m++)
			{
				fname_sel[fname_sel.length] = new Option(act.options[i].values[m][1], act.options[i].values[m][0], false, false);
			}
			fname_sel.hiddenField = hiddenField;
			fname_sel.onchange = function()
			{
				this.hiddenField.value = this.value;
			}
		}

		// Action buttons
		// ---------------------------------------------
		var dv_btn = alib.dom.createElement("div", dv);
		alib.dom.styleSet(dv_btn, "margin-top", "3px");

		var btn = new CButton("Continue", function(dlg, form, condv) { form.submit(); dlg.hide(); alib.dom.m_document.body.removeChild(condv); }, 
								[dlg, form, condv], "b2");
		btn.print(dv_btn);
		var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [dlg]);
		btn.print(dv_btn);
	}
	else
	{
		form.submit();
		alib.dom.m_document.body.removeChild(condv);
	}
}

/**
 * Add a filter condition which is like a condition but hidden
 *
 * This is usually to filter browser 'select' dialogs by various fields
 * like: only show milestones for a the selected project
 *
 * @public
 * @param {string} fieldName The name of the field to filter
 * @param {string} value The value to filter fieldName with
 */
AntObjectBrowser.prototype.setFilter = function(fieldName, value, blogic)
{
	var ind = this.m_filters.length;
	this.m_filters[ind] = new Object();
	this.m_filters[ind].fieldName = fieldName;
	this.m_filters[ind].value = value;
	this.m_filters[ind].blogic = (blogic && ind > 0) ? blogic : "and";

	this.mainObject.setFilter(fieldName, value);
}

/**
 * Remove a filter from this browser
 *
 * @public
 * @param {string} fieldName The name of the field to filter
 * @param {string} value The value to filter fieldName with
 */
AntObjectBrowser.prototype.removeFilter = function(fieldName, value)
{
	for (i = 0; i < this.m_filters.length; i++)
	{
		if (this.m_filters[i].fieldName == fieldName && this.m_filters[i].value == value)
		{
			this.m_filters.splice(i, 1);
		}
	}

	for (i = 0; i < this.m_filters.length; i++)
	{
		//ALib.trace(this.m_filters[i].fieldName);
	}

	//this.mainObject.setFilter(fieldName, value);
}

/*************************************************************************************
*	Description:	setViewsFilter
*
*	Arguments:		Views can be filtered for sub-sets of data. If defined, then only
*					views with a matching filterKey will be displayed. The default view
*					will be used for view_fields and order but nothing more.
**************************************************************************************/
AntObjectBrowser.prototype.setViewsFilter = function(filterKey)
{
    return; // Do not set filter
    
	this.viewsFilterKey = filterKey;

	// Pull default view for this key
	if (this.mainObject.defaultViewExists(filterKey))
		this.loadView(this.mainObject.getDefaultView(filterKey));
	else
		this.clearView();
}

/*************************************************************************************
*	Description:	printInlineAddComment
*
*	Arguments:		Print form to add a comment inline
**************************************************************************************/
AntObjectBrowser.prototype.printInlineAddComment = function(con, showform)
{
	con.innerHTML = "";
	con.cls = this;
	var fmrCon = alib.dom.createElement("div", con);
	alib.dom.styleSet(fmrCon, "margin-top", "5px");
	// There is a bug with the width where when the containing div is hidden (new object) the width is 0
	// so we set it to 400px by default to fix the issue. However, this creates problems with mobile browserss
	//var width = (this.mobile) ? "99%" : "400px";
	var width = "99%";
	alib.dom.styleSet(fmrCon, "width", width);

	if (showform)
	{
		if (!this.comment_users)
			this.comment_users = new Array();

		var tbl = alib.dom.createElement("table", fmrCon);
		alib.dom.styleSet(tbl, "width", "100%");
		tbl.setAttribute("cellPadding", "0");
		tbl.setAttribute("cellSpacing", "0");
		var tbody = alib.dom.createElement("tbody", tbl);
		var row = alib.dom.createElement("tr", tbody);
		row.vAlign = "top";

		// Comment box
		var td_lbl = alib.dom.createElement("td", row);
		alib.dom.styleSet(td_lbl, "width", "55px");
		//td_lbl.innerHTML = "Comment:";
		td_lbl.innerHTML = "<img src='/files/userimages/current/48/48' style='width:48px;' />";
		var td = alib.dom.createElement("td", row);
		var ta_comment = alib.dom.createElement("textarea", td);
		alib.dom.styleSet(ta_comment, "width", "100%");
		alib.dom.styleSet(ta_comment, "height", "50px");
		alib.dom.textAreaAutoResizeHeight(ta_comment, 50);
		ta_comment.focus();
		
		// Notification
		var row = alib.dom.createElement("tr", tbody);
		var td_lbl = alib.dom.createElement("td", row);
		td_lbl.innerHTML = "Notify:";
		var td_inp = alib.dom.createElement("td", row);
		alib.dom.styleSet(td_inp, "padding-top", "5px");
		var inp_notify = alib.dom.createElement("input", td_inp);
		var t = new CTextBoxList(inp_notify, { bitsOptions:{editable:{addKeys: [188, 13, 186, 59], addOnBlur:true }}, plugins: {autocomplete: { placeholder: "Start typing a name for suggestions", minLength: 2, queryRemote: true, remote: {url:"/users/json_autocomplete.php"}}}});
		//t.acLoadValues("/users/json_autocomplete.php");

		// Add attachments row
		var row = alib.dom.createElement("tr", tbody);
		var td_lbl = alib.dom.createElement("td", row);
		var divAttachment = alib.dom.createElement("td", row);

		// Action buttons
		var row = alib.dom.createElement("tr", tbody);
		var td_lbl = alib.dom.createElement("td", row);
		var dv_button = alib.dom.createElement("td", row);
		alib.dom.styleSet(dv_button, "padding-top", "7px");
		alib.dom.styleSet(dv_button, "padding-bottom", "10px");
		alib.dom.styleSet(dv_button, "text-align", "right");

		// Create add attachment button holder
		var attachments = new Array();
		var attachmentButtonCon = alib.dom.createElement("span", dv_button);
        var cfupload = new AntFsUpload('%tmp%');
        cfupload.cbData.cls = this;
        cfupload.onRemoveUpload = function (fid) {
			for (i in attachments)
			{
				if (i == fid)
					attachments.splice(i, 1);
			}
        }
        cfupload.onQueueComplete = function () { 
            for(file in this.m_uploadedFiles)
				attachments.push(this.m_uploadedFiles[file]['id']);
        }
        cfupload.showTmpUpload(attachmentButtonCon, divAttachment, 'Add Attachment');

		// If we are working with a case and there is a customer attached to the case, then add public checkbox
		var sendToCustChekBox = null;
		if (this.parentObject)
		{
			if (this.parentObject.obj_type == "case" && this.parentObject.getValue("customer_id"))
			{
				sendToCustChekBox = alib.dom.createElement("input", dv_button);
				sendToCustChekBox.type = "checkbox";
				alib.dom.styleSet(sendToCustChekBox, "vertical-align", "middle");
				sendToCustChekBox.checked = false;

				alib.dom.createElement("span", dv_button, 
										"&nbsp;Sent comment to " + 
										this.parentObject.getValueName("customer_id") + 
										"&nbsp;&nbsp;&nbsp;");
			}
		}
	
		// Add comment button
		var btn = new CButton("Add Comment", function(cls, ta_comment, t_notify, con, sendToCustChekBox, attachments) { 
				cls.saveComment(ta_comment.value, t_notify, attachments, con, (sendToCustChekBox !== null) ? sendToCustChekBox.checked : false); 
			}, [this, ta_comment, t, con, sendToCustChekBox, attachments], "b2"
		);
		btn.print(dv_button);

		// Save for parent form if needed (use on save to make sure that comments are saved)
		this.commentObj = { ta_comment: ta_comment, t:t, con:con };

		//var btn = new CButton("Cancel", function(cls, con) { cls.printInlineAddComment(con, false); }, [this, con], "b1");

		var btn = alib.ui.Button("Cancel", {
			className:"b1 nomargin", tooltip:"Cancel Comment", cls:this, con:con,
			onclick:function() { this.cls.printInlineAddComment(this.con, false); }
		});
		btn.print(dv_button);

		if (!con.fNotifyLoaded)
		{
			con.fNotifyLoaded = true;

			// Add customers or users to notify if parent object exists
			// -----------------------------------------
			if (this.parentObject)
			{
				var fields = this.parentObject.getFields();
				for (var j = 0; j < fields.length; j++)
				{
					var field = fields[j];
					var field_val = "";
					var field_lbl = "";
					var otype = "";

					//if (field.type == "object" && (field.subtype == "user" || field.subtype == "customer"))
					if (field.type == "object" && field.subtype == "user")
					{
						field_val = this.parentObject.getValue(field.name);
						field_lbl = this.parentObject.getValueName(field.name);
						otype = field.subtype;
					}
					else if (field.type == "object" && field.subtype == "")
					{
						// TODO: handle object reference and check for user
					}

					if (field_val)
					{
						var bFound = false;
						for (var i = 0; i < this.comment_users.length; i++)
						{
							if (this.comment_users[i].id == otype+":"+field_val)
								bFound = true;
						}

						if (!bFound)
							this.comment_users[this.comment_users.length] = {id:otype+":"+field_val, name:field_lbl};
					}
				}
			}

			// Loop through added users/customers to be notified
			if (this.comment_users)
			{
				for (var i = 0; i < this.comment_users.length; i++)
				{
					if ((g_userid && this.comment_users[i].id != "user:"+g_userid) || !g_userid)
						t.add(this.comment_users[i].id, this.comment_users[i].name);
				}
			}
		}
	}
	else
	{
		// No need to save comment
		this.commentObj = null;

		var con2 = alib.dom.createElement("div", fmrCon);
		alib.dom.styleSet(con2, "margin-top", "5px");
		con2.con = con;
		con2.innerHTML = "<input type='text' class='comment' placeholder='Add Comment' style='width:"+width+";'>";
		con2.onclick = function() { this.con.cls.printInlineAddComment(this.con, true); };
	}
}

/**
 * Add entry to the comment_users notification array for adding comments
 *
 * TODO: we should extend this to include email addresses
 *
 * @param {string} entry The recipient can be an object reference, email or even a text entry which will be ignored
 */
AntObjectBrowser.prototype.addCommentsMember = function(member)
{
	if (!member)
		return;

	var notifiedObj = getNotifiedParts(member);

	// Add user to notify for next comment
	// -----------------------------------------
	if (!this.comment_users)
		this.comment_users = new Array();

	// Prevent duplicate entries
	var bFound = false;
	for (var i = 0; i < this.comment_users.length; i++)
	{
		if (this.comment_users[i].id == (notifiedObj.type + ":" + notifiedObj.id) || this.comment_users[i].id == notifiedObj.email)
			bFound = true;
	}

	if (!bFound)
	{
		if (notifiedObj.type == "email" && notifiedObj.email != "")
		{
			this.comment_users[this.comment_users.length] = {id:notifiedObj.email, name:notifiedObj.name};
		}
		else if (notifiedObj.type != "text")
		{
			// Object reference
			this.comment_users[this.comment_users.length] = {id:notifiedObj.type + ":" + notifiedObj.id, name:notifiedObj.name};
		}
	}
}

/**
 * Save the comment object
 *
 * @param {string} comment The actual comment to add
 * @param {TextBoxList} t_notify The text box list with people to notify
 * @param {int[]} attachments Array of uploaded file ids
 * @param {DOMElement} con The container where the comment is printed for callback to clear the form when done
 * @param {bool} sendToCust If true, get 'customer_id' value from parent object to send notification to
 */
AntObjectBrowser.prototype.saveComment = function(comment, t_notify, attachments, con, sendToCust)
{
	// Note from Sky: Moved this to the top because IE was returning empty for getValues if 
	// called below the block immediately following... makes no sense but welcome to IE!
	var values = t_notify.getValues();

    con.innerHTML = "<div class='loading'></div>";
	var obj = new CAntObject("comment");
	obj.setValue("comment", comment);
	if (this.obj_reference)
	{
		obj.setValue("obj_reference", this.obj_reference);
		obj.setMultiValue("associations", this.obj_reference);
	}

	var notify = "";
	for (var i = 0; i < values.length; i++)
	{
		if (notify) notify += ",";
		if (values[i][0])
			 notify += values[i][0];
		else if (values[i][1]) // email, no object
			 notify += values[i][1];
	}

	// Check for adding customer reference
	// Currenlty this is only used for cases and the reference is to customer_id field
	// We may expand in the future, but this is working well for the time being - joe
	if (this.parentObject && sendToCust)
	{
		if (notify) notify += ",";
		notify += "customer:" + this.parentObject.getValue("customer_id");
	}

	if (notify)
		obj.setValue("notify", notify);

	// Attachments
	for (var i in attachments)
		obj.setMultiValue("attachments", attachments[i]);

	obj.setValue("owner_id", "-3");
	obj.brwsercls = this;
	obj.t_notify = t_notify;
	obj.brwsercon = con;
	obj.onsave = function() 
	{ 
		this.onload = function()
		{
			// Refresh in 1 second to give index time to commit changes
			var bcls = this.brwsercls;
			setTimeout(function(){ bcls.refresh(); }, 1000);
			//this.brwsercls.refresh(); 

			this.brwsercon.fNotifyLoaded = false;
			this.brwsercls.printInlineAddComment(this.brwsercon, false); 
		}

		this.load();
	}
	obj.save();
}

/**
 * Set browser in context of a referenced object
 *
 * This is useful for copying common fields to new objects
 *
 * @param {CAntObject} obj The object we are in the context of
 */
AntObjectBrowser.prototype.setObjectContext = function(obj)
{
	this.objectContext = obj;
}

/**
 * @fileoverview This class represents each item in a browser list
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */


/**
 * Creates an instance of AntObjectBrowser_Item
 *
 * @constructor
 * @param {Object} data Object with value for each CAntObject property
 * @param {AntObjectBrowser} bcls Browser class
 */
function AntObjectBrowser_Item(objData, bcls)
{
	/**
	 * Item renderer / view
	 *
	 * @type {AntObjectBrowser_Item_*}
	 */
	this.renderer = null;

    this.selectedObjId = null; // Object that is currently selected
	this.bcls = bcls;
	this.id = null;
	this.allow_open = null;
	this.revision = 1;
	this.parentCon = null;
	this.objData = null;
	this.tbody = null; // for table
	this.row = null; // for table
	this.listCon = null; // for detail
	this.objData = objData; // the data for this browser item
	this.seen = true;
	this.fIsSelected = false;
	this.checkbox = alib.dom.createElement("input");
	this.checkbox.type = "checkbox";
	this.checkbox.cls = this;
	this.checkbox.onclick = function()
	{
		this.cls.select(this.checked);
	}
    
	if (objData)
	{
		this.allow_open = objData.security.view;
		this.id = objData.id;
		this.objData = objData;

		if (objData.revision)
			this.revision = objData.revision;
            
        if (objData.f_seen=='f' || objData.f_seen==false)
            this.seen = false;
	}
}

/**
 * Add an item to the list
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMTBody} tbody The table container that is holding the list of objects
 * @param {AntObjectBrowser_Item} insertBeforeItem Optional item that should come right after this one
 */
AntObjectBrowser_Item.prototype.print = function(tbody, insertBeforeItem)
{
	if (!this.listCon)
		this.listCon = tbody;

	if (!this.row)
	{
		var itemRow = alib.dom.createElement("tr");
		this.row = itemRow;
		this.oid = this.id;
		this.row.cls = this;

		if (insertBeforeItem)
		{

			tbody.insertBefore(itemRow, insertBeforeItem.row);

		}
		else
		{
			tbody.appendChild(this.row);
		}

		// Set initial class
		if (this.selected())
			var outercls = "aobListRowAct";
		else
			var outercls = (this.seen) ? "aobListRow" : "aobListRowAlert";

		alib.dom.styleSetClass(this.row, outercls);
	}
	else
	{
		var itemRow = this.row;
	}

	try 
	{
		itemRow.innerHTML = "";
	} 
	catch(e) 
	{ 
		// Ignore error
	}
    
	itemRow.revision = this.revision;
	if (this.bcls.viewmode == "details")
	{
		var innerCon = alib.dom.createElement("td", this.row);
		
		if( this.bcls.mobile && this.bcls.obj_type!="comment" && this.bcls.obj_type!="activity" && this.bcls.obj_type!="status_update")
		{
			this.printObjectMobileRow(innerCon, this.objData);
		}
		else
		{
			switch (this.bcls.obj_type)
			{
			case 'comment':
				this.renderer = new AntObjectBrowser_Item_Comment(this, innerCon, this.objData);
				break;
	
			case 'notification':
				this.renderer = new AntObjectBrowser_Item_Notification(this, innerCon, this.objData);
				break;

			case 'activity':
				this.renderer = new AntObjectBrowser_Item_Activity(this, innerCon, this.objData);
				break;

			case 'status_update':
				this.renderer = new AntObjectBrowser_Item_StatusUpdate(this, innerCon, this.objData);
				break;
	
			case 'email_thread':

				this.printObjectEmlThreadRow(innerCon, this.objData);
				break;
	
			case 'email_message':
				this.printObjectEmlMessageRow(innerCon, this.objData);
				break;
	
			case 'contact_personal':
				this.printObjectContactRow(innerCon, this.objData);
				break;
			
			default:
				this.printObjectGenRow(innerCon, this.objData);
				break;
			}
		}
	}
	else // table
	{
		this.tbody = tbody;

		// Check if item is a browse/folder entry
		if (this.objData.isBrowse)
			this.printTableRowBrowse(itemRow, this.objData);
		else
			this.printTableRow(itemRow, this.objData);
	}

	//this.onMouseDownAct = function(event) { this.wasmouseup = false; this.openAct(event); };
	//this.onMouseUpAct = function() { ALib.m_debug = true; ALib.trace("Mouse Up Orig"); };

	if (this.objData.security.view)
	{
		this.openAct = function(event)
		{
			this.bcls.selectObjectRow(this.id, event);
			this.seen = true;
			this.onSetSeen();
		}
	}
	else
	{
		this.openAct = function(event)
		{
			ALib.Dlg.messageBox("You do not have permissions to view this object!");
		}
	}
}

/**
 * Check if this item is in a selected state
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @return {bool} true if the item is selected, false if it is not
 */
AntObjectBrowser_Item.prototype.selected = function()
{
	return this.fIsSelected;
}

/**
 * Toggle items selected state
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {bool} select True to set this to selected
 */
AntObjectBrowser_Item.prototype.select = function(select)
{
	this.checkbox.checked = select;

	if (select)
	{
		alib.dom.styleSetClass(this.row, "aobListRowAct");
		this.fIsSelected = true;
	}
	else
	{
		alib.dom.styleSetClass(this.row, (this.seen) ? "aobListRow" : "aobListRowAlert");
		this.fIsSelected = false;
	}
}

/**
 * Update this item to be seen - usually used to set icon
 *
 * @public
 * @this {AntObjectBrowser_Item}
 */
AntObjectBrowser_Item.prototype.onSetSeen = function()
{
}

/**
 * Update this item to be seen - usually used to set icon
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {Object} objData Object with properties for all the values in CAntObject
 */
AntObjectBrowser_Item.prototype.update = function(objData)
{
	this.objData = objData;
	this.revision = objData.revision;

	if (this.renderer && this.renderer.update)
		this.renderer.update(objData);
	else if (this.listCon)
		this.print(this.listCon);
	else
		throw "Item " + objData.id + " has not been printed yet";
}

/**
 * Move an item up or down in the list
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {number} toind The index in the list where we should move this item to
 */
AntObjectBrowser_Item.prototype.move = function(toind)
{
	if (this.listCon.childNodes.length > toind)
	{
		// Find the current position
		var fromind = -1; 
		for (var i = 0; i < this.bcls.objectList.length; i++)
		{
			if (this.bcls.objectList[i].id == this.id)
			{
				fromind = i;
			}
		}

		// Move in the list array
		if (fromind != -1 && toind != fromind)
		{
			this.bcls.objectList.splice(fromind, 1);
			this.bcls.objectList.splice(toind, 0, this);
		}

		// Remove in the DOM tree - should be the same fromind but just in case we get it again
		if (toind != fromind)
		{
			try
			{
				var node = this.listCon.removeChild(this.row);;
			}
			catch(e) {}

			if (node)
			{
				// Move in the listCon
				if (toind >= (this.listCon.childNodes.length-1))
				{
					this.listCon.appendChild(node);
				}
				else
				{
					// toind +1 is safe to assume because of the check above
					// if toind > list lenght then it will append
					this.listCon.insertBefore(node, this.listCon.childNodes[toind + 1]); 
				}
			}
		}

	}
}

/**
 * Remove object from the list
 *
 * @public
 * @this {AntObjectBrowser_Item}
 */
AntObjectBrowser_Item.prototype.remove = function()
{
	if (!this.listCon)
		return;

	try
	{
		//this.listCon.removeChild(this.row);
		alib.fx.fadeOut(this.row, function() { if (this.parentNode) this.parentNode.removeChild(this);}, 500);
	}
	catch(e) { alert(e); }

	var iDeletedInd = -1;

	for (var i = 0; i < this.bcls.objectList.length; i++)
	{
		if (this.bcls.objectList[i].id == this.id)
		{
			this.bcls.objectList.splice(i, 1);
			iDeletedInd = i;
		}
	}

	// Load top object of selected
	if (this.bcls.preview)
	{
		if (this.id == this.bcls.curObjLoaded)
		{
			var pullId = null;
			if (this.bcls.objectList.length > iDeletedInd)
				pullId = this.bcls.objectList[iDeletedInd].id;
			this.bcls.selectObjectRow(pullId);
		}
	}
}

/**
 * onmousedown action for opening object - over ridden
 *
 * @public
 * @this {AntObjectBrowser_Item}
 */
AntObjectBrowser_Item.prototype.onMouseDownAct = function() {}

/**
 * onmouseup action for opening object - over ridden
 *
 * @public
 * @this {AntObjectBrowser_Item}
 */
AntObjectBrowser_Item.prototype.onMouseUpAct = function() {}

/**
 * Event to fire when opening object
 *
 * @public
 * @this {AntObjectBrowser_Item}
 */
AntObjectBrowser_Item.prototype.openAct = function() {}

/**
 * Get name or label for this entry
 *
 * For now we will just look for common names for label fields. In the
 * future we might want to utilize the titleField setting for objets.
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @return {string} Name or label of this item
 */
AntObjectBrowser_Item.prototype.getName = function() 
{
	for (var ind in this.objData)
	{
		switch (ind)
		{
		case 'full_name':
		case 'name':
		case 'title':
			if (this.objData[ind])
				return this.objData[ind];
			break;
		}
	}

	return this.id;
}

/**
 * Print comment row. These look different than normal objects.
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {number} id The unique id of this comment
 * @param {number} user_id The creator of this comment
 * @param {string} user_name The textual name of user_id
 * @param {string} ts_entered Textual representation of the timestamp
 * @param {string} comment The text of this comments
 * @param {string} notified Is set to the reciepient of this comment
 * @param {string} sent_by The object reference of who sent this - can be anything like a customer or anonymous
 * @param {string} sent_by_lbl If an object, like customer, then this will contain the name/label of the object
AntObjectBrowser_Item.prototype.printObjectCommentRow = function(dv, id, user_id, user_name, ts_entered, comment, notified, sent_by, sent_by_lbl)
{
	var comment = comment;
	var re = new RegExp ("\n", 'gi') ;
	comment = comment.replace(re, "<br />");

	alib.dom.styleSetClass(dv, "aobListRowComment");
	dv.objid = id;

	var tbl = alib.dom.createElement("table", dv);
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellPadding", "0");
	tbl.setAttribute("cellSpacing", "0");
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";

	// Print image
	var img_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(img_cell, "width", "55px");
	alib.dom.styleSet(img_cell, "text-align", "center");
	img_cell.aid = id;
	img_cell.cls = this.bcls;
	if (user_id)
		this.bcls.setUserImage(img_cell, user_id, "");

	// Print name
	var name_cell = alib.dom.createElement("td", row);
	name_cell.aid = id;
	name_cell.cls = this.bcls;
	var buf = "<span class='aobjListBold'>" + ((sent_by_lbl)?sent_by_lbl:user_name) + "</span>&nbsp;&nbsp;";
	if (notified)
	{
		buf += ">&nbsp;&nbsp;";

		var recipients = notified.split(",");

		for (var i = 0; i < recipients.length; i++)
		{
			var recipient = recipients[i].trim();

			if (i > 0) buf += ",&nbsp;";
			var notrec = getNotifiedParts(recipient);
			buf += notrec.name;

			// Add to comments array for future comments
			this.bcls.addCommentsMember(recipient);
		}

		buf += "&nbsp;&nbsp;";
	}
	buf += "<span class='aobListItal'>@ " + ts_entered + "</span>";
	buf += "<div style='margin-top:3px;width:98%;'>" + comment + "</div>";
	name_cell.innerHTML =  buf;

	// Delete image
	var act_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(act_cell, "width", "20px");
	alib.dom.styleSet(act_cell, "text-align", "center");
	alib.dom.styleSet(act_cell, "cursor", "default");
	var dellink = alib.dom.createElement("span", act_cell);
	alib.dom.styleSet(dellink, "cursor", "pointer");
	alib.dom.styleSet(dellink, "display", "none");
	dellink.oid = id;
	dellink.bcls = this.bcls; // pass reference to browser class
	dellink.onclick = function() { this.bcls.deleteObjects(this.oid); }
	dellink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	alib.events.listen(row, "mouseover", function(evnt) { alib.dom.styleSet(dellink, "display", "inline"); });
	alib.events.listen(row, "mouseout", function(evnt) { alib.dom.styleSet(dellink, "display", "none"); });

	var sel_obj = alib.dom.createElement("input");
	sel_obj.type = "checkbox";
	sel_obj.cls = this.bcls;
	sel_obj.value = id;

	// Add user to notify for next comment
	if (user_id && user_name)
		this.bcls.addCommentsMember("user:" + user_id + "|" + user_name);
	else if (sent_by)
		this.bcls.addCommentsMember(sent_by);
}
 */

/**
 * Print activity row. These look different than normal objects.
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
AntObjectBrowser_Item.prototype.printObjRowActivity = function(dv, objData)
{
	var hascomments = objData.hascomments;

	var id = objData.id;
	var user_name = objData.user_id.value;
	var user_id = objData.user_id.key;

	var name = objData.name;
	var type = objData.type_id.value;
	var direction = objData.direction;
	var notes = objData.notes;
	var ts_entered = objData.ts_entered;
	var obj_reference = "";
	if (objData.obj_reference && objData.obj_reference.key)
		var obj_reference = objData.obj_reference.key;

	// Setup table
	alib.dom.styleSetClass(this.row, "aobListRowNoSelect");
	alib.dom.styleSet(dv, "cursor", "default");
	//alib.dom.styleSet(dv, "padding-bottom", "5px");
	alib.dom.styleSet(dv, "padding", "10px 0px 10px 0px");
	dv.objid = id;

	var tbl = alib.dom.createElement("table", dv);
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellPadding", "0");
	tbl.setAttribute("cellSpacing", "0");
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";

	// Print image
	var img_cell = alib.dom.createElement("td", row);
	img_cell.setAttribute("rowSpan", 2);
	alib.dom.styleSet(img_cell, "width", "60px");
	alib.dom.styleSet(img_cell, "text-align", "center");
	alib.dom.styleSet(img_cell, "cursor", "pointer");
	img_cell.aid = id;
	img_cell.cls = this.bcls;
	this.bcls.setUserImage(img_cell, user_id, "");

	// Header: print user name
	var name_cell = alib.dom.createElement("td", row);
	name_cell.aid = id;
	name_cell.cls = this.bcls;
	var userNameCon = alib.dom.createElement("a", name_cell, user_name);
	userNameCon.href = "javascript:void(0);";
	alib.dom.styleSetClass(userNameCon, "aobjListBold");
	alib.dom.createElement("span", name_cell, "&nbsp;&nbsp;");
	userNameCon.traceId = user_id;
	if (user_id)
		AntObjectInfobox.attach("user", user_id, userNameCon);

	// Header: type and object name/link
	var lbl = "";
	if (type == null) type = "";
	var typeDesc = type + "&nbsp;&nbsp;&#9654;&nbsp;&nbsp;";

	switch(type.toLowerCase())
	{
	case 'email':
		if (direction == 'i')
			lbl = "Received " + name;
		else
			lbl = "Sent " + name;
		break;
	case 'phone call':
		if (direction == 'i')
			typeDesc = "Inbound " + type + " ";
		else
			typeDesc = "Outbound " + type + " ";
		lbl = name;
	case 'note':
		// No label needed for comments or notes
		break;
	case 'comment':
		typeDesc = "Commented on ";
		lbl = name;
		break;
	case 'status update':
		typeDesc = "Status Update";
		lbl = name;
		break;
	default:
		lbl = name;
		break;
	}

	if (lbl != "")
	{
		var titleCon = alib.dom.createElement("span", name_cell);
		var parts =  obj_reference.split(":");
		var titleConLbl = null;
		if (parts.length > 1 && parts[0]!='status_update')
		{
			titleCon.innerHTML = "::&nbsp;&nbsp;" + typeDesc;

			var titleConLbl = alib.dom.createElement("a", name_cell);
			titleConLbl.href = "javascript:void(0);";
			titleConLbl.itemcls = this;
			titleConLbl.obj_type = parts[0];
			titleConLbl.oid = parts[1];
			titleConLbl.onclick = function(event) 
			{ 
				this.itemcls.bcls.loadObjectForm(this.oid, null, null, this.obj_type); 
			};
			titleConLbl.traceId = parts[1];

			// Add infobox
			AntObjectInfobox.attach(parts[0], parts[1], titleConLbl);
		}
		else
		{
			titleCon.innerHTML = "::&nbsp;&nbsp;" + typeDesc + "&nbsp;&nbsp;";
			//var titleConLbl = alib.dom.createElement("span", name_cell);
		}

		if (titleConLbl)
			titleConLbl.innerHTML = lbl;
	}

	// Notes
	var notesdv = alib.dom.createElement("div", name_cell);
	alib.dom.styleSet(notesdv, "margin", "5px 5px 5px 0px");
	if (type == "Status Update")
	{
		notes = notes.replace(/\n/g, '<br />');
	}
	else
	{
		alib.dom.styleSet(notesdv, "overflow", "hidden");
		alib.dom.styleSet(notesdv, "white-space", "nowrap");
		alib.dom.styleSet(notesdv, "max-height", "100px");
		alib.dom.styleSet(notesdv, "text-overflow", "ellipsis");
	}
	notesdv.innerHTML = notes;

	// Timestamp
	var timesp = alib.dom.createElement("div", name_cell);
	alib.dom.styleSetClass(timesp, "aobListItal");
	timesp.innerHTML = ts_entered;

	// Delete image & checkbox
	var act_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(act_cell, "width", "20px");
	alib.dom.styleSet(act_cell, "cursor", "default");
	var dellink = alib.dom.createElement("span", act_cell);
	alib.dom.styleSet(dellink, "cursor", "pointer");
	alib.dom.styleSet(dellink, "display", "none");
	dellink.oid = id;
	dellink.bcls = this.bcls; // pass reference to browser class
	dellink.onclick = function() { this.bcls.deleteObjects(this.oid); }
	dellink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	alib.events.listen(row, "mouseover", function(evnt) { alib.dom.styleSet(dellink, "display", "inline"); });
	alib.events.listen(row, "mouseout", function(evnt) { alib.dom.styleSet(dellink, "display", "none"); });

	// Comments
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";
	var comm_cell = alib.dom.createElement("td", row);
	if (type != "Comment" && obj_reference)
	{
		var parts =  obj_reference.split(":");

		var ob = new AntObjectBrowser("comment");
		ob.limit = 8; // Limit size
		ob.setFilter("obj_reference", obj_reference);
		// Add user
		if (user_id && user_name)
			ob.addCommentsMember("user:" + user_id + "|" + user_name);
		ob.printComments(comm_cell, obj_reference, null, (hascomments==1)?false:true);
	}
}
 */

/**
 * Print email thread detail row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectEmlThreadRow = function(dv, objData)
{
	var id = objData.id;
	var senders = objData.senders;
	var time_updated = objData.time_updated;
	var time_delivered = objData.ts_delivered;
	var subject = objData.subject;
	var num_messages = objData.num_messages;
	if (!num_messages) num_messages = 1;
	var num_attachments = objData.num_attachments;
	var flag_flagged = objData.f_flagged;;

	// Change email icon if viewed
	/*
	this.onSetSeen = function()
	{
		this.iconCon.innerHTML = "<img src='/images/icons/email_16_opened.png' border=''>";
	}
	*/

	this.seen = true;
	if (objData.f_seen=='f' || objData.f_seen==false)
		this.seen = false;
        
	if (objData.flag_seen=='f' || objData.flag_seen==false)
		this.seen = false;
    
	dv.oid = id;
	dv.objid = id;
	// Disabling for now - joe
	//DragAndDrop.registerDragable(dv, null, "dzNavbarDrop_" + this.bcls.obj_type);
	alib.dom.styleSet(dv, "cursor", "default");
	alib.dom.styleSet(dv, "padding", "3px");
	
	// Set drag icon
	var dv_icon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv_icon, "statusAlert");
	dv_icon.innerHTML = "Move Item(s)";
	// Disabling for now - joe
	//DragAndDrop.setDragGuiCon(dv, dv_icon, 15, 15);

	var tbl = alib.dom.createElement("table", dv);
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	var tbody = alib.dom.createElement("tbody", tbl);

	var tr_main = alib.dom.createElement("tr", tbody);
	
	// Display checkbox & icon
	this.iconCon = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(this.iconCon, "width", "23px");
	alib.dom.styleSet(this.iconCon, "text-align", "center");
	this.iconCon.vAlign = "middle";
	this.iconCon.rowSpan = 2;
	if (!this.bcls.hideCheckbox)
		this.iconCon.appendChild(this.checkbox);

	// Display Details
	// ---------------------------------------------------------
	
	// Senders
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "aobjListBold");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) { this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) { this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = senders;

	// Num messages in thread
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "width", "10px");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) {this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) {this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = "("+num_messages+")";

	// Time sent
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "DynDivTopright");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "width", "65px");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) {this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) {this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = emailListFormatTimeDel(time_delivered);
	
	// Subject
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.colSpan = 3;
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) { this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) { this.m_itemcls.onMouseUpAct(event); };
	if (num_attachments!="" && num_attachments!="0"  && num_attachments!=null)
		td.innerHTML = "<img border='0' style='float:right;' src='/images/icons/clip.gif'>"+subject;
	else
		td.innerHTML = subject;

	// Flag
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(td, "width", "12px");
	td.vAlign = "middle";
	td.rowSpan = 2;
	var img = alib.dom.createElement("img", td);
	alib.dom.styleSet(img, "cursor", "pointer");
	img.border = '0';
	img.src = '/images/icons/flag_'+((flag_flagged=='t')?'on':'off')+'_12.png';
	img.tid = id;
	img.flagged = (flag_flagged=='t')?true:false;
	img.onclick = function()
	{		
        var functName = (this.flagged)?'markUnflagged':"markFlag";
                                
        ajax = new CAjax('json');
        ajax.img = this;        
        ajax.onload = function(ret)
        {
            if (this.img.flagged)
            {
                this.img.flagged = false;
                this.img.src = '/images/icons/flag_off_12.png';
            }
            else
            {
                this.img.flagged = true;
                this.img.src = '/images/icons/flag_on_12.png';
            }
        };
        ajax.exec("/controller/Email/" + functName, 
                    [["obj_type", "email_thread"], ["objects[]", this.tid]]);
	}
}

/**
 * Print email thread detail row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectEmlMessageRow = function(dv, objData)
{
	var id = objData.id;
	var senders = objData.sent_from;
	var send_to = objData.send_to;
	var time_updated = objData.message_date;
	var subject = objData.subject;
	var num_attachments = objData.num_attachments;
	var flag_flagged =objData.flag_flagged;

	var fSeen = false;
	if (objData.flag_seen == 't' ||  objData.flag_seen == true)
		fSeen = true;
	this.seen = fSeen;

	alib.dom.styleSetClass(dv, outercls);
	dv.oid = id;
	dv.objid = id;
	// Disabling for now - joe
	//DragAndDrop.registerDragable(dv, null, "dzNavbarDrop_" + this.bcls.obj_type);
	//this.bcls.objectRows[this.bcls.objectRows.length] = dv;
	alib.dom.styleSet(dv, "cursor", "default");
	alib.dom.styleSet(dv, "padding", "3px");
	
	// Set drag icon
	var dv_icon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv_icon, "statusAlert");
	dv_icon.innerHTML = "Move Item(s)";
	// Disabling for now - joe
	//DragAndDrop.setDragGuiCon(dv, dv_icon, 15, 15);

	var tbl = alib.dom.createElement("table", dv);
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	var tbody = alib.dom.createElement("tbody", tbl);

	var tr_main = alib.dom.createElement("tr", tbody);
	
	// Display checkbox & icon
	this.iconCon = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(this.iconCon, "width", "23px");
	alib.dom.styleSet(this.iconCon, "text-align", "center");
	this.iconCon.innerHTML = "<img src='/images/icons/email_16_"+((fSeen)?"opened":"unopened")+".png' border=''>";
	this.iconCon.vAlign = "middle";
	this.iconCon.rowSpan = 2;
	//if (!this.bcls.hideCheckbox)
		//td.appendChild(this.checkbox);

	// Display Details
	// ---------------------------------------------------------
	
	// Send to 
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "aobjListBold");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) {this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) {this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = send_to;

	// Time sent
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "DynDivTopright");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "width", "55px");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) {this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) {this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = emailListFormatTimeDel(time_updated);
	
	// Subject
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.colSpan = 2;
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) { this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) { this.m_itemcls.onMouseUpAct(event); };
	if (num_attachments!="" && num_attachments!="0")
		td.innerHTML = "<img border='0' style='float:right;' src='/images/icons/clip.gif'>"+subject;
	else
		td.innerHTML = subject;

	// Flag
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(td, "width", "12px");
	td.vAlign = "middle";
	td.rowSpan = 2;
	var img = alib.dom.createElement("img", td);
	alib.dom.styleSet(img, "cursor", "pointer");
	img.border = '0';
	img.src = '/images/icons/flag_'+((flag_flagged=='t')?'on':'off')+'_12.png';
	img.tid = id;
	img.flagged = (flag_flagged=='t')?true:false;
	img.onclick = function()
	{   
        var functName = (this.flagged)?'markUnflagged':"markFlag";
                                
        ajax = new CAjax('json');
        ajax.img = this;
        ajax.onload = function(ret)
        {
            if (this.img.flagged)
            {
                this.img.flagged = false;
                this.img.src = '/images/icons/flag_off_12.png';
            }
            else
            {
                this.img.flagged = true;
                this.img.src = '/images/icons/flag_on_12.png';
            }
        };
        ajax.exec("/controller/Email/" + functName, 
                    [["obj_type", "email_message"], ["objects[]", this.tid]]);
	}
}

/**
 * Print generic object row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectGenRow = function(dv, objData)
{
	var id = objData.id;

	if (this.allow_open)
	{
		var openFunc = function(event)
		{
			this.m_browseclass.selectObjectRow(this.m_id, event);
		}
	}
	else
	{
		var openFunc = function()
		{
			ALib.Dlg.messageBox("You do not have permissions to view this object!");
		}			
	}

	dv.objid = id;
	// Disabling for now - joe
	//DragAndDrop.registerDragable(dv, null, "dzNavbarDrop_" + this.bcls.obj_type);

	// Set drag icon
	var dv_icon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv_icon, "statusAlert");
	dv_icon.innerHTML = "Move Item(s)";
	// Disabling for now - joe
	//DragAndDrop.setDragGuiCon(dv, dv_icon, 15, 15);

	//this.bcls.objectRows[this.bcls.objectRows.length] = dv;
	alib.dom.styleSet(dv, "cursor", "default");
	alib.dom.styleSet(dv, "padding", "3px");

	var tbl = alib.dom.createElement("table", dv);
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	var tbody = alib.dom.createElement("tbody", tbl);


	var tr = alib.dom.createElement("tr", tbody);
	
	// Display checkbox
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "width", "23px");
	td.vAlign = "middle";
	td.rowSpan = 2;
	var sel_obj = null;
	// See if checkbox already exists
	/*
	for (var i = 0; i < this.bcls.chkBoxes.length; i++)
	{
		if (this.bcls.chkBoxes[i].value == id)
			sel_obj = this.bcls.chkBoxes[i];
	}
	if (!sel_obj)
	{
		sel_obj = alib.dom.createElement("input");
		sel_obj.type = "checkbox";
		sel_obj.cls = this.bcls;
		sel_obj.value = id;
		this.bcls.chkBoxes[this.bcls.chkBoxes.length] = sel_obj;
	}
	dv.chkbox = sel_obj;
	if (!this.bcls.hideCheckbox)
		td.appendChild(sel_obj);
		*/

	// Display Details
	// ---------------------------------------------------------
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "aobjListBold");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onmousedown = openFunc;
	if (this.bcls.view_fields.length)
	{
		var val = objData[this.bcls.view_fields[0].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else
			{
				buf = val;
			}
		}
		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "DynDivTopright");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onclick = openFunc;
	if (this.bcls.view_fields.length > 1)
	{
		var val = objData[this.bcls.view_fields[1].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else
			{
				buf = val;
			}
		}
		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
	
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.colSpan = 2;
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onclick = openFunc;
	if (this.bcls.view_fields.length > 2)
	{
		var val = objData[this.bcls.view_fields[2].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else
			{
				buf = val;
			}
		}
		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
}

/**
 * Print mobile object row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectMobileRow = function(dv, objData)
{
	return this.printObjectGenRow(dv, objData);

	var icon = objData.icon;
	var title = "";
	var type = this.bcls.obj_type;
	var name = objData.name;

	var id = objData.id;

	if (!objData.security.view)
	{
		return false;
	}

	var fSeen = true;
	if (objData.f_seen=='f' || objData.f_seen==false)
		fSeen = false;
	if (objData.flag_seen=='f' || objData.flag_seen==false)
		fSeen = false;

	switch( type)
	{
	case "activity":
		var hascomments = (typeof objData.hascomments != "undefined") ? objData.hascomments : -1;
		var user_name = objData.user_id.value;
		var user_id = objData.user_id.key;
		var act_type = objData.type_id.value;
		var direction = objData.direction;
		var notes = objData.notes;
		var ts_entered = objData.ts_entered;
		
		var buf = user_name + "&nbsp;&nbsp;";
		if (act_type == "Email")
		{
			if (direction == 'i')
				buf += "Received ";
			else
				buf += "Sent ";
		}
	
		buf += "::&nbsp;&nbsp;";
		var parts =  obj_reference.split(":");
		buf += act_type;
		buf += "&nbsp;&nbsp;-&nbsp;&nbsp;";
		
		title =  buf + "&nbsp;&nbsp;@ " + ts_entered;
		
		break;
		
	case "email_thread":
		var senders = objData.senders;
		var time_updated = cobjData.time_updated;
		var subject = objData.subject;
		var num_messages = objData.num_messages;
		if (!num_messages) num_messages = 1;
		var num_attachments = objData.num_attachments;
		var flag_flagged = objData.f_flagged;

		icon = "/images/icons/email_16_"+((fSeen)?"opened":"unopened")+".png";
		title = "From: "+unescape(senders)+" / "+ unescape(subject)+emailListFormatTimeDel(unescape(time_updated))+"("+num_messages+")";
		
		break;
		
	case "email_message":
		var senders = objData.sent_from;
		var send_to = objData.send_to;
		var time_updated = objData.message_date;
		var subject = objData.subject;
		var num_attachments = objData.num_attachments;
		var flag_flagged = objData.flag_flagged;
		
		icon = "/images/icons/email_16_"+((fSeen)?"opened":"unopened")+".png";
		title = "To: "+unescape(send_to)+" / "+ unescape(subject)+emailListFormatTimeDel(unescape(time_updated));
		
		break;
		
	case 'contact_personal':
		var phone_cell = objData.phone_cell;
		var phone_home = objData.phone_home;
		var phone_work = objData.phone_work;
		var email_default = objData.email_default;
		var image_id = objData.image_id.key;
		var phone = (phone_cell) ? phone_cell : (phone_work) ? phone_work : phone_home;
				
		title = name + " / " + email_default;
		
		break;
	
	case "comment":
	default:
		if (this.bcls.view_fields.length)
		{
			var val = objData[this.bcls.view_fields[0].fieldName];
			var buf = "";
			if (val)
			{
				if (val instanceof Array) // mval
				{
					var buf = "";
					for (var m = 0; m < val.length; m++)
					{
						if (buf) buf += ", ";
						buf += val[m].value;
					}
				}
				else
				{
					buf = val;
				}
			}
			title = buf;
		}
		break;
	
	}


	var entry = alib.dom.createElement("article", dv);
	alib.dom.styleSetClass(entry, "listItem");
	entry.m_itemcls = this;
	entry.onclick = function(event) { this.m_itemcls.openAct(event); };
	var icnHtm = (String(icon).length>0 ) ? "<span class='icon'><img src='"+icon+"' /></span>" : "";
	entry.innerHTML = icnHtm+ "<h3>"+title+"</h3></a>";


	/*
	entry.view = this.bcls.antView;
	entry.name = type+"_"+id;
	var einnerHTML = "<a behavior='selectable' href=\"#"+this.bcls.antView.getPath()+"/"+type+":"+id+"\">";

	if( String(icon).length>0 )
	{
		einnerHTML += "<span class='icon'><img src='"+icon+"' /></span>";
	}
	einnerHTML += "<h3>"+title+"</h3></a>";
	entry.innerHTML = einnerHTML;
	*/
}

/**
 * Print contact detail row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectContactRow = function(dv, objData)
{
	var id = objData.id;
	var name = objData.name;
	var phone_cell = objData.phone_cell;
	var phone_home = objData.phone_home;
	var phone_work = objData.phone_work;
	var email_default = (objData.email) ? objData.email : objData.email2;
	var image_id = objData.image_id.key;
	var phone = (phone_cell) ? phone_cell : (phone_work) ? phone_work : phone_home;

	dv.oid = id;
	dv.objid = id;
	//DragAndDrop.registerDragable(dv, null, "dzNavbarDrop");
	alib.dom.styleSet(dv, "cursor", "default");
	alib.dom.styleSet(dv, "padding", "3px");
	
	// Set drag icon
	var dv_icon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv_icon, "statusAlert");
	dv_icon.innerHTML = "Move Item(s)";
	//DragAndDrop.setDragGuiCon(dv, dv_icon, 15, 15);

	var tbl = alib.dom.createElement("table", dv);
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	var tbody = alib.dom.createElement("tbody", tbl);

	var tr_main = alib.dom.createElement("tr", tbody);
	
	// Display checkbox & icon
	this.iconCon = alib.dom.createElement("td", tr_main);
	alib.dom.styleSet(this.iconCon, "width", "50px");
	alib.dom.styleSet(this.iconCon, "text-align", "center");
	if (image_id)
		this.iconCon.innerHTML = "<img src='/files/images/"+image_id+"/48/33' border=''>";
	this.iconCon.vAlign = "middle";
	this.iconCon.rowSpan = 2;
	//if (!this.bcls.hideCheckbox)
		//td.appendChild(this.checkbox);

	// Display Details
	// ---------------------------------------------------------
	
	// Name
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "aobjListBold");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) { this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) { this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = unescape(name);

	// Phone
	var td = alib.dom.createElement("td", tr_main);
	alib.dom.styleSetClass(td, "DynDivTopright");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	alib.dom.styleSet(td, "width", "100px");
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) {this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) {this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = unescape(phone);
	
	// Email
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.colSpan = 2;
	td.m_id = id;
	td.m_itemcls = this;
	td.onclick = function(event) { this.m_itemcls.openAct(event); };
	//td.onmousedown = function(event) { this.m_itemcls.onMouseDownAct(event); };
	//td.onmouseup = function(event) { this.m_itemcls.onMouseUpAct(event); };
	td.innerHTML = unescape(email_default);
}

/**
 * Print table row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {TR} rw The row for this object
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printTableRow = function(rw, objData)
{
	var id = objData.id;

	//var sel_obj = alib.dom.createElement("input");
	//sel_obj.type = "checkbox";
	//sel_obj.cls = this.bcls;
	//sel_obj.value = id;
	//this.chkBoxes[this.chkBoxes.length] = sel_obj;

	if (!this.bcls.hideCheckbox)
	{
		var td = alib.dom.createElement("td", rw);
		alib.dom.styleSet(td, "text-align", "center");
		alib.dom.styleSet(td, "padding-right", "5px");
        
        if(objData.id == this.selectedObjId)
            this.checkbox.checked = true;
            
		td.appendChild(this.checkbox);
		//rw.addCell(this.checkbox);
	}

	for (var j = 0; j < this.bcls.view_fields.length; j++)
	{
		var val = objData[this.bcls.view_fields[j].fieldName];
		var field = this.bcls.mainObject.getFieldByName(this.bcls.view_fields[j].fieldName);

		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else if (val instanceof Object)
			{
				if (val.value)
					buf = val.value;
				else
					buf = val.key;
			}
			else if ("bool" == field.type && (val === true || val == 't'))
			{
				buf = "Yes";
			}
			else if ("bool" == field.type && (val === false || val == 'f'))
			{
				buf = "No";
			}
			else
			{
				buf = val;
			}
		}

		if (!buf)
			buf = "&nbsp;";

		// Make the name/title field bold
		if (this.bcls.mainObject.nameField == this.bcls.view_fields[j].fieldName)
		{
			/*
			if (objData.image_id && objData.image_id.key)
				buf = "<img src='/antfs/images/" + objData.image_id.key + "/16/16'> " + buf;
			else if (objData.iconName)
				buf = "<img src='/images/icons/objects/" + objData.iconName+ "_16.png'> " + buf;
				*/

			if (objData.iconPath)
				buf = "<img src='" + objData.iconPath+ "'> " + buf;

			buf = "<span class=\"aobjListBold\">" + buf + "</span>";
		}

		var td = alib.dom.createElement("td", rw);
		td.m_itemcls = this;
		td.onclick = function(event) { this.m_itemcls.openAct(event); };
		//td.onmousedown = function(event) { this.innerHTML = "DOWN"; this.m_itemcls.onMouseDownAct(event); };
		//td.onmouseup = function(event) { this.innerHTML = "UP"; this.m_itemcls.onMouseUpAct(event); };
		td.innerHTML = buf;
	}
}

/**
 * Print generic object row
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printObjectGenRow = function(dv, objData)
{
	var id = objData.id;

	if (this.allow_open)
	{
		var openFunc = function(event)
		{
			this.m_browseclass.selectObjectRow(this.m_id, event);
		}
	}
	else
	{
		var openFunc = function()
		{
			ALib.Dlg.messageBox("You do not have permissions to view this object!");
		}			
	}

	dv.objid = id;
	DragAndDrop.registerDragable(dv, null, "dzNavbarDrop_" + this.bcls.obj_type);

	// Set drag icon
	var dv_icon = ALib.m_document.createElement("div");
	alib.dom.styleSetClass(dv_icon, "statusAlert");
	dv_icon.innerHTML = "Move Item(s)";
	DragAndDrop.setDragGuiCon(dv, dv_icon, 15, 15);

	//this.bcls.objectRows[this.bcls.objectRows.length] = dv;
	alib.dom.styleSet(dv, "cursor", "default");
	alib.dom.styleSet(dv, "padding", "3px");

	var tbl = alib.dom.createElement("table", dv);
	tbl.cellPadding = 0;
	tbl.cellSpacing = 0;
	alib.dom.styleSet(tbl, "width", "100%");
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	var tbody = alib.dom.createElement("tbody", tbl);


	var tr = alib.dom.createElement("tr", tbody);
	
	// Display checkbox
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "width", "23px");
	td.vAlign = "middle";
	td.rowSpan = 2;
	var sel_obj = null;
	// See if checkbox already exists	
	for (var i = 0; i < this.bcls.chkBoxes.length; i++)
	{
		if (this.bcls.chkBoxes[i].value == id)
			sel_obj = this.bcls.chkBoxes[i];
	}
	if (!sel_obj)
	{
		sel_obj = alib.dom.createElement("input");
		sel_obj.type = "checkbox";
		sel_obj.cls = this.bcls;
		sel_obj.value = id;
		this.bcls.chkBoxes[this.bcls.chkBoxes.length] = sel_obj;
	}
	dv.chkbox = sel_obj;
	if (!this.bcls.hideCheckbox)
		td.appendChild(sel_obj);

	// Display Details
	// ---------------------------------------------------------
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "aobjListBold");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onmousedown = openFunc;
	if (this.bcls.view_fields.length)
	{
		var val = objData[this.bcls.view_fields[0].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else
			{
				buf = val;
			}
		}
		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "DynDivTopright");
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "text-align", "right");
	alib.dom.styleSet(td, "padding", "0 3px 5px 0");
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onclick = openFunc;
	if (this.bcls.view_fields.length > 1)
	{
		var val = objData[this.bcls.view_fields[1].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else if (val instanceof Object)
			{
				if (val.value)
					buf = val.value;
				else
					buf = val.key;
			}
			else if (val === true || val == 't')
			{
				buf = "Yes";
			}
			else if (val === false || val == 'f')
			{
				buf = "No";
			}
			else
			{
				buf = val;
			}
		}

		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
	
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSet(td, "cursor", "pointer");
	alib.dom.styleSet(td, "overflow", "hidden");
	alib.dom.styleSet(td, "white-space", "nowrap");
	alib.dom.styleSet(td, "overflow", "hidden");
	td.colSpan = 2;
	td.m_id = id;
	td.m_browseclass = this.bcls;
	td.onclick = openFunc;
	if (this.bcls.view_fields.length > 2)
	{
		var val = objData[this.bcls.view_fields[2].fieldName];
		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else if (val instanceof Object)
			{
				if (val.value)
					buf = val.value;
				else
					buf = val.key;
			}
			else
			{
				buf = val;
			}
		}
		//td.innerHTML = buf;
		alib.dom.setText(td, buf);
	}
}

/**
 * Print generic row for browsing - like folders
 *
 * @public
 * @this {AntObjectBrowser_Item}
 * @param {DOMElement} dv The list container
 * @param {Object} objData The properties of the object represented with this row
 */
AntObjectBrowser_Item.prototype.printTableRowBrowse = function(rw, objData)
{
	var id = objData.id;

	if (!this.bcls.hideCheckbox)
	{
		var td = alib.dom.createElement("td", rw);
		alib.dom.styleSet(td, "text-align", "center");
		alib.dom.styleSet(td, "padding-right", "5px");
		td.appendChild(this.checkbox);
	}

	// This will utilize any common names so it closely represents the main object
	for (var j = 0; j < this.bcls.view_fields.length; j++)
	{
		var val = objData[this.bcls.view_fields[j].fieldName];
		var field = this.bcls.mainObject.getFieldByName(this.bcls.view_fields[j].fieldName);

		var buf = "";
		if (val)
		{
			if (val instanceof Array) // mval
			{
				var buf = "";
				for (var m = 0; m < val.length; m++)
				{
					if (buf) buf += ", ";
					buf += val[m].value;
				}
			}
			else
			{
				if (field.type == "fkey" || field.type == "object" || field.type == "alias")
					buf = val.value;
				else
					buf = val;
			}
		}

		if (!buf)
			buf = "&nbsp;";

		// Make the name/title field bold
		if (this.bcls.mainObject.nameField == this.bcls.view_fields[j].fieldName)
		{
			/*
			if (objData.image_id && objData.image_id.key)
				buf = "<img src='/antfs/images/" + objData.image_id.key + "/16/16'> " + buf;
			else if (objData.iconName)
				buf = "<img src='/images/icons/objects/" + objData.iconName + "_16.png'> " + buf;
				*/

			if (objData.iconPath)
				buf = "<img src='" + objData.iconPath+ "'> " + buf;

			buf = "<span class=\"aobjListBold\">" + buf + "</span>";

		}

		var td = alib.dom.createElement("td", rw);
		td.m_itemcls = this;
		td.onclick = function(event) { this.m_itemcls.openAct(event); };
		//td.onmousedown = function(event) { this.innerHTML = "DOWN"; this.m_itemcls.onMouseDownAct(event); };
		//td.onmouseup = function(event) { this.innerHTML = "UP"; this.m_itemcls.onMouseUpAct(event); };
		td.innerHTML = buf;
	
	}
}

/**
 * @fileoverview Activity view
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */


/**
 * Creates an instance of AntObjectBrowser_Item_Activity
 *
 * @constructor
 * @param {Object} data Object with value for each CAntObject property
 * @param {AntObjectBrowser_Item} item Browser class
 */
function AntObjectBrowser_Item_Activity(item, dv, objData)
{
	var hascomments = objData.hascomments;

	var id = objData.id;
	var user_name = objData.user_id.value;
	var user_id = objData.user_id.key;

	var name = objData.name;
	var verb = objData.verb;
	var type = objData.type_id.value;
	var direction = objData.direction;
	var notes = objData.notes;
	var ts_entered = objData.ts_entered;
	var obj_reference = "";
	if (objData.obj_reference && objData.obj_reference.key)
		var obj_reference = objData.obj_reference.key;

	// Setup table
	alib.dom.styleSetClass(item.row, "aobListRowNoSelect");
	alib.dom.styleSetClass(dv, "aobListRowActivity");
	dv.objid = id;

	var tbl = alib.dom.createElement("table", dv);
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellPadding", "0");
	tbl.setAttribute("cellSpacing", "0");
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";

	// Print image
	var img_cell = alib.dom.createElement("td", row);
	img_cell.setAttribute("rowSpan", 2);
	alib.dom.styleSet(img_cell, "width", "60px");
	alib.dom.styleSet(img_cell, "text-align", "center");
	alib.dom.styleSet(img_cell, "cursor", "pointer");
	img_cell.aid = id;
	img_cell.cls = item.bcls;
	item.bcls.setUserImage(img_cell, user_id, "");

	// Header
	var name_cell = alib.dom.createElement("td", row);

	// Timestamp
	var timesp = alib.dom.createElement("div", name_cell, alib.dateTime.format(new Date(ts_entered), "ddd, MMMM d, yyyy H:mm a"));
	alib.dom.styleSetClass(timesp, "aobjListBold");
	//alib.dom.createElement("span", name_cell, " &#9654; ");

	var headerRow2 = alib.dom.createElement("div", name_cell);
	alib.dom.styleSetClass(headerRow2, "aobListItal");

	// Add user
	headerRow2.aid = id;
	headerRow2.cls = item.bcls;
	var userNameCon = alib.dom.createElement("a", headerRow2, user_name);
	userNameCon.href = "javascript:void(0);";
	//alib.dom.createElement("span", headerRow2, "&nbsp;&nbsp;");
	userNameCon.traceId = user_id;
	if (user_id)
		AntObjectInfobox.attach("user", user_id, userNameCon);

	// Header: type and object name/link
	var lbl = "";
	if (type == null) type = "";
	var typeDesc = type + "&nbsp;&nbsp;:&nbsp;&nbsp;";

	switch(type.toLowerCase())
	{
	case 'email':
		if (direction == 'i')
			lbl = "received an email ";
		else
			lbl = "sent an email ";
		break;
	case 'phone call':
		if (direction == 'i')
			typeDesc = "logged an innbound call ";
		else
			typeDesc = "logged an outbound call ";
		lbl = name;
	case 'comment':
		typeDesc = "commented on ";
		lbl = name;
		break;
	case 'status update':
		typeDesc = "added a ";
		lbl = type;
		break;
	default:
		lbl = name;

		switch (verb)
		{
		case 'create':
		case 'created':
			typeDesc = "created a new " + type.toLowerCase() + " ";
			notes = ""; // TODO: may become snippet, but for now hide
			break;
		/*
		case 'read':
			break;
		case 'updated':
			break;
		case 'deleted':
			break;
		case 'sent':
			break;
		case 'processed':
			break;
		case 'completed':
			break;
			*/

		default:
			typeDesc = verb + " ";
			break;
		}
		break;
	}

	var titleCon = alib.dom.createElement("span", headerRow2);
	var parts =  obj_reference.split(":");

	// Make sure we are not referencing this object if loaded in the context of an object form
	var sameAsContext = false;
	if (item.bcls.objectContext && parts.length > 1)
	{
		if (item.bcls.objectContext.obj_type == parts[0] && item.bcls.objectContext.id == parts[1])
			sameAsContext = true;
	}

	var titleConLbl = null;
	if (parts.length > 1 && !sameAsContext)
	{
		titleCon.innerHTML = "&nbsp;" + typeDesc;

		var titleConLbl = alib.dom.createElement("a", headerRow2);
		titleConLbl.href = "javascript:void(0);";
		titleConLbl.itemcls = item;
		titleConLbl.obj_type = parts[0];
		titleConLbl.oid = parts[1];
		titleConLbl.onclick = function(event) 
		{ 
			this.itemcls.bcls.loadObjectForm(this.oid, null, null, this.obj_type); 
		};
		titleConLbl.traceId = parts[1];

		// Add infobox
		AntObjectInfobox.attach(parts[0], parts[1], titleConLbl);
	}
	else if (parts.length > 1 && sameAsContext)
	{
		titleCon.innerHTML = "&nbsp;" + typeDesc;

		var titleConLbl = alib.dom.createElement("span", headerRow2);
	}
	else
	{
		titleCon.innerHTML = "&nbsp;" + typeDesc + "&nbsp;&nbsp;";
		//var titleConLbl = alib.dom.createElement("span", headerRow2);
	}

	if (titleConLbl)
		titleConLbl.innerHTML = lbl;

	// Notes
	var notesdv = alib.dom.createElement("div", name_cell);
	alib.dom.styleSet(notesdv, "margin", "10px 5px 5px 0px");
	//if (type == "Status Update" || type=="Comment")
	//{
		notes = notes.replace(/\n/g, '<br />');
	//}
	
	// Attachments
	if (objData.attachments && objData.attachments.length>0)
	{
		var attCon = alib.dom.createElement("div", name_cell);
		alib.dom.styleSet(attCon, "margin-top", "5px");
		for (var i in objData.attachments)
		{
			if (objData.attachments[i].key)
			{
				var a = alib.dom.createElement("a", attCon, (objData.attachments[i].value)?objData.attachments[i].value:objData.attachments[i].key);
				a.href = "/antfs/" + objData.attachments[i].key;
				alib.dom.createElement("span", attCon, "<br />");
			}
		}
	}


	alib.dom.styleSet(notesdv, "overflow", "hidden");
	/*alib.dom.styleSet(notesdv, "white-space", "nowrap");*/
	alib.dom.styleSet(notesdv, "max-height", "500px");
	alib.dom.styleSet(notesdv, "text-overflow", "ellipsis");
	notesdv.innerHTML = notes;

	// Delete image & checkbox
	var act_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(act_cell, "width", "20px");
	alib.dom.styleSet(act_cell, "cursor", "default");
	var dellink = alib.dom.createElement("span", act_cell);
	alib.dom.styleSet(dellink, "cursor", "pointer");
	alib.dom.styleSet(dellink, "display", "none");
	dellink.oid = id;
	dellink.bcls = item.bcls; // pass reference to browser class
	dellink.onclick = function() { this.bcls.deleteObjects(this.oid); }
	dellink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	alib.events.listen(row, "mouseover", function(evnt) { alib.dom.styleSet(dellink, "display", "inline"); });
	alib.events.listen(row, "mouseout", function(evnt) { alib.dom.styleSet(dellink, "display", "none"); });
}

/**
 * @fileoverview Notification view
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */


/**
 * Creates an instance of AntObjectBrowser_Item_Notification
 *
 * @constructor
 * @param {Object} data Object with value for each CAntObject property
 * @param {AntObjectBrowser_Item} item Browser class
 */
function AntObjectBrowser_Item_Notification(item, dv, objData)
{
	dv.objid = objData.id;

	alib.dom.styleSetClass(item.row, "aobListRowNoSelect");
	alib.dom.styleSetClass(dv, "aobListRowActivity");
	var con = alib.dom.createElement("div", dv);

	// Add creator image
	//if (notif.getValue('owner_id') != notif.getValue('creator_id') && notif.getValue('creator_id'))
	//{
		var iconCon = alib.dom.createElement("span", con);

		var path = "/files/userimages/" + objData.creator_id.key + "/16/16";
		iconCon.innerHTML = "<img src='" + path + "' style='width:16px;' />&nbsp;";
	//}

	// User name who triggered the notification
	var whoName = (objData.owner_id.key == objData.creator_id.key) ? "You" : objData.creator_id.value;

	var nameCon = alib.dom.createElement("a", con, whoName);
	nameCon.href = "javascript:void(0);";
	AntObjectInfobox.attach("user", objData.creator_id.key, nameCon);

	// Space
	alib.dom.createElement("span", con, "&nbsp;");

	// Action name
	alib.dom.createElement("span", con, objData.name.toLowerCase() + ":");

	// Space
	alib.dom.createElement("span", con, "&nbsp;");

	// Reference link
	if (objData.obj_reference.key)
	{
		var parts =  objData.obj_reference.key.split(":");
		if (parts.length > 1)
		{
			var refLink = alib.dom.createElement("a", con);
			refLink.innerHTML = (objData.obj_reference.value == parts[1]) ? parts[0] : objData.obj_reference.value;
			refLink.href = "javascript:void(0);";
			refLink.itemcls = item;
			refLink.obj_type = parts[0];
			refLink.oid = parts[1];
			refLink.onclick = function(evt) { 
				loadObjectForm(this.obj_type, this.oid);
			};
		}
	}

	// Time
	alib.dom.createElement("span", con, "&nbsp;@ " + objData.ts_execute);
}

/**
 * @fileoverview Status updates / wall posts
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */


/**
 * Creates an instance of AntObjectBrowser_Item_StatusUpdate
 *
 * @constructor
 * @param {AntObjectBrowser_Item} item Browser class
 * @param {DOMElement} ele The parent element to render item into
 * @param {Object} data Object with value for each CAntObject property
 */
function AntObjectBrowser_Item_StatusUpdate(item, ele, objData)
{
	/**
	 * The field data for this object
	 *
	 * @private
	 * @type {Object}
	 */
	this.objData = objData;

	/**
	 * Parent DOM container
	 *
	 * @private
	 * @type {DOMElement}
	 */
	this.ele = ele;

	/**
	 * Base item class
	 *
	 * @private
	 * @type {AntObjectBrowser_Item}
	 */
	this.item = item;

	/**
	 * Comments object browser
	 *
	 * @private
	 * @type {AntObjectBrowser}
	 */
	this.commentsBr = null;

	/**
	 * The container where the comment / note is printed
	 *
	 * @private
	 * @type {DOMElement}
	 */
	this.noteCon = null;

	// Now print the status update into the dom tree
	this.render();
}

/**
 * Render the item into the DOM
 */
AntObjectBrowser_Item_StatusUpdate.prototype.render = function()
{
	var id = this.objData.id;
	var user_name = this.objData.owner_id.value;
	var user_id = this.objData.owner_id.key;

	var comment = this.objData.comment;
	var ts_entered = this.objData.ts_entered;
	var obj_reference = "";
	if (this.objData.obj_reference && this.objData.obj_reference.key)
		var obj_reference = this.objData.obj_reference.key;
	// this.objData.notified is not needed but might be useful later

	// Setup table
	alib.dom.styleSetClass(this.item.row, "aobListRowNoSelect");
	alib.dom.styleSet(this.ele, "cursor", "default");
	alib.dom.styleSet(this.ele, "padding", "10px 0px 10px 0px");
	this.ele.objid = id;

	var tbl = alib.dom.createElement("table", this.ele);
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellPadding", "0");
	tbl.setAttribute("cellSpacing", "0");
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";

	// Print image
	var img_cell = alib.dom.createElement("td", row);
	img_cell.setAttribute("rowSpan", 2);
	alib.dom.styleSet(img_cell, "width", "60px");
	alib.dom.styleSet(img_cell, "text-align", "center");
	alib.dom.styleSet(img_cell, "cursor", "pointer");
	img_cell.aid = id;
	img_cell.cls = this.item.bcls;
	this.item.bcls.setUserImage(img_cell, user_id, "");

	// Header: print user name
	var name_cell = alib.dom.createElement("td", row);
	name_cell.aid = id;
	name_cell.cls = this.item.bcls;
	var userNameCon = alib.dom.createElement("a", name_cell, user_name);
	userNameCon.href = "javascript:void(0);";
	alib.dom.styleSetClass(userNameCon, "aobjListBold");
	alib.dom.createElement("span", name_cell, "&nbsp;&nbsp;");
	userNameCon.traceId = user_id;
	if (user_id)
		AntObjectInfobox.attach("user", user_id, userNameCon);

	var parts =  obj_reference.split(":");
	if (parts.length > 1 && parts[0]!='status_update')
	{
		var spacer = alib.dom.createElement("span", name_cell, "&nbsp;&nbsp;&#9654;&nbsp;&nbsp;");

		var titleConLbl = alib.dom.createElement("a", name_cell);
		titleConLbl.innerHTML = this.objData.obj_reference.value;
		titleConLbl.href = "javascript:void(0);";
		titleConLbl.itemcls = this.item;
		titleConLbl.obj_type = parts[0];
		titleConLbl.oid = parts[1];
		titleConLbl.onclick = function(event) 
		{ 
			this.itemcls.bcls.loadObjectForm(this.oid, null, null, this.obj_type); 
		};
		titleConLbl.traceId = parts[1];

		// Add infobox
		AntObjectInfobox.attach(parts[0], parts[1], titleConLbl);
	}

	// Actual Comment
	this.noteCon = alib.dom.createElement("div", name_cell);
	alib.dom.styleSet(this.noteCon, "margin", "10px 5px 10px 0px");
	this.noteCon.innerHTML = comment.replace(/\n/g, '<br />');

	// Timestamp
	var timesp = alib.dom.createElement("div", name_cell);
	alib.dom.styleSetClass(timesp, "aobListItal");
	timesp.innerHTML = alib.dateTime.format(new Date(ts_entered), "ddd, MMMM d, yyyy H:mm a");

	// Delete image & checkbox
	var act_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(act_cell, "width", "20px");
	alib.dom.styleSet(act_cell, "cursor", "default");
	var dellink = alib.dom.createElement("span", act_cell);
	alib.dom.styleSet(dellink, "cursor", "pointer");
	alib.dom.styleSet(dellink, "display", "none");
	dellink.oid = id;
	dellink.bcls = this.item.bcls; // pass reference to browser class
	dellink.onclick = function() { this.bcls.deleteObjects(this.oid); }
	dellink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	alib.events.listen(row, "mouseover", function(evnt) { alib.dom.styleSet(dellink, "display", "inline"); });
	alib.events.listen(row, "mouseout", function(evnt) { alib.dom.styleSet(dellink, "display", "none"); });

	// Comments
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";
	var comm_cell = alib.dom.createElement("td", row);
	this.commentsBr = new AntObjectBrowser("comment");
	this.commentsBr.limit = 8; // Limit size
	this.commentsBr.setFilter("obj_reference", "status_update:" + id);
	// Add user
	if (user_id && user_name)
		this.commentsBr.addCommentsMember("user:" + user_id + "|" + user_name);
	this.commentsBr.printComments(comm_cell, "status_update:" + id, null, (this.objData.num_comments>0)?false:true);
}

/**
 * The update function is used to refresh data without rebuilding the entire UI
 *
 * @param {Object} data Object with value for each CAntObject property
 */
AntObjectBrowser_Item_StatusUpdate.prototype.update = function(objData)
{
	this.objData = objData;

	// Update comment / note
	this.noteCon.innerHTML = this.objData.comment.replace(/\n/g, '<br />');

	if (this.commentsBr)
		this.commentsBr.refresh();
}

/**
 * @fileoverview Activity view
 *
 * This is not yet implemented
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */


/**
 * Creates an instance of AntObjectBrowser_Item
 *
 * @constructor
 * @param {Object} data Object with value for each CAntObject property
 * @param {AntObjectBrowser_Item} item Browser class
 */
function AntObjectBrowser_Item_Comment(item, dv, objData)
{
	var id = objData.id;
	var user_name = objData.owner_id.value;
	var user_id = objData.owner_id.key;
	var comment = objData.comment;
	var notified = objData.notified;
	var ts_entered = objData.ts_entered;
	var sent_by = objData.sent_by.key;
	var sent_by_lbl = (objData.sent_by.value) ? objData.sent_by.value : objData.sent_by.key;
	var obj_reference = objData.sent_by.key;


	var comment = comment;
	var re = new RegExp ("\n", 'gi') ;
	comment = comment.replace(re, "<br />");

	alib.dom.styleSetClass(dv, "aobListRowComment");
	dv.objid = id;

	var tbl = alib.dom.createElement("table", dv);
	alib.dom.styleSet(tbl, "table-layout", "fixed");
	alib.dom.styleSet(tbl, "width", "100%");
	tbl.setAttribute("cellPadding", "0");
	tbl.setAttribute("cellSpacing", "0");
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);
	row.vAlign = "top";

	// Print image
	var img_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(img_cell, "width", "55px");
	alib.dom.styleSet(img_cell, "text-align", "center");
	img_cell.aid = id;
	img_cell.cls = item.bcls;
	if (user_id && (("user:" + user_id) == objData.sent_by.key || objData.sent_by.key == ""))
		item.bcls.setUserImage(img_cell, user_id, "");
	else
		img_cell.innerHTML = "<img src='/images/user_default.png' style='width:48px;' />";

	// Print name
	var name_cell = alib.dom.createElement("td", row);
	name_cell.aid = id;
	name_cell.cls = item.bcls;
	var buf = "<span class='aobjListBold'>" + ((sent_by_lbl) ? sent_by_lbl : user_name) + "</span>&nbsp;&nbsp;";
	if (notified)
	{
		buf += ">&nbsp;&nbsp;";

		var recipients = notified.split(",");

		for (var i = 0; i < recipients.length; i++)
		{
			var recipient = recipients[i].trim();

			if (i > 0) buf += ",&nbsp;";
			var notrec = getNotifiedParts(recipient);
			buf += notrec.name;

			// Add to comments array for future comments
			item.bcls.addCommentsMember(recipient);
		}

		buf += "&nbsp;&nbsp;";
	}
	buf += "<span class='aobListItal'>@ " + alib.dateTime.format(new Date(ts_entered), "ddd, MMMM d, yyyy H:mm a") + "</span>";
	buf += "<div style='margin-top:3px;width:98%;'>" + comment + "</div>";
	name_cell.innerHTML =  buf;

	// Attachments
	if (objData.attachments && objData.attachments.length>0)
	{
		var attCon = alib.dom.createElement("div", name_cell);
		alib.dom.styleSet(attCon, "margin-top", "5px");
		for (var i in objData.attachments)
		{
			if (objData.attachments[i].key)
			{
				// Check for image
				var isImg = (objData.attachments[i].value) ? objData.attachments[i].value.match(/(gif|png|jpg|jpeg)$/i) : false;

				if (isImg)
				{
					var imgcon  = alib.dom.createElement("div", attCon);
					imgcon.innerHTML = "<img src='/antfs/images/" + objData.attachments[i].key + "' style='max-width:100%;' />";
				}

				var a = alib.dom.createElement("a", attCon, (objData.attachments[i].value)?objData.attachments[i].value:objData.attachments[i].key);
				a.href = "/antfs/" + objData.attachments[i].key;
				alib.dom.createElement("span", attCon, "<br />");
			}
		}
	}

	// Delete image
	var act_cell = alib.dom.createElement("td", row);
	alib.dom.styleSet(act_cell, "width", "20px");
	alib.dom.styleSet(act_cell, "text-align", "center");
	alib.dom.styleSet(act_cell, "cursor", "default");
	var dellink = alib.dom.createElement("span", act_cell);
	alib.dom.styleSet(dellink, "cursor", "pointer");
	alib.dom.styleSet(dellink, "display", "none");
	dellink.oid = id;
	dellink.bcls = item.bcls; // pass reference to browser class
	dellink.onclick = function() { this.bcls.deleteObjects(this.oid); }
	dellink.innerHTML = "<img src='/images/icons/delete_10.png' />";
	alib.events.listen(row, "mouseover", function(evnt) { alib.dom.styleSet(dellink, "display", "inline"); });
	alib.events.listen(row, "mouseout", function(evnt) { alib.dom.styleSet(dellink, "display", "none"); });

	var sel_obj = alib.dom.createElement("input");
	sel_obj.type = "checkbox";
	sel_obj.cls = item.bcls;
	sel_obj.value = id;

	// Add user to notify for next comment
	if (user_id && user_name)
		item.bcls.addCommentsMember("user:" + user_id + "|" + user_name);
	else if (sent_by)
		item.bcls.addCommentsMember(sent_by);
}

/**
 * @fileoverview TODO: This is the base or default toolbar for browsers
 *
 * Other toolbars may extend this one by object type
 */

/**
 * Class constructor
 *
 * @param {AntObjectBrowser} browser
 */
AntObjectBrowser.Toolbar = function(browser)
{
	/**
	 * Reference to browser instance
	 *
	 * @private
	 * @type {AntObjectBrowser}
	 */
	this.browser = browser;
}

/**
 * Print full toolbar
 *
 * @public
 * @param {DOMElement} con The container to print the toolbar into
 */
AntObjectBrowser.Toolbar.prototype.renderFull = function(con)
{
}

/**
 * Print preview mode toolbar - much smaller
 *
 * @public
 * @param {DOMElement} con The container to print the toolbar into
 */
AntObjectBrowser.Toolbar.prototype.renderPreview = function(con)
{
}

/**
 * Print mobile toolbar
 *
 * @public
 * @param {DOMElement} con The container to print the toolbar into
 */
AntObjectBrowser.Toolbar.prototype.renderMobile = function(con)
{
}

/**
 * @fileoverview Email threads toolbar
 */

AntObjectBrowser.Toolbar.EmailThread = function()
{
}

/**
 * @fileoverview Represent object browser views
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectBrowserView
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
function AntObjectBrowserView(obj_type)
{
	this.id 			= null;
	this.name			= "";
	this.obj_type 		= obj_type;
	this.description	= "";
	this.fSystem		= false; // if a system wide view then no edit
	this.conditions		= new Array();
	this.sort_order		= new Array();
	this.view_fields	= new Array();
	this.filterKey		= "";
    this.reportId       = ""; // Each report has a unique view
    this.team_id        = ""; // Is used when scope is set to team
    this.scope          = ""; // The scope of view
	this.f_default		= ""; // Will set the view to default
    this.user_id        = null; // Will be set if the view is created for another user
    
    // This will fix the variable compatible issue when creating new view
    this.fDefault = null;
    this.userName = null;
    this.userid = null;
}

AntObjectBrowserView.prototype.loadFromXml = function(xml_node) 
{
	if (xml_node.m_name == "view")
	{
		this.id = unescape(xml_node.getChildNodeValByName("id"));
		this.name = unescape(xml_node.getChildNodeValByName("name"));
		this.description = unescape(xml_node.getChildNodeValByName("description"));
		this.fSystem = (xml_node.getChildNodeValByName("f_system")=='t')?true:false;
		this.fDefault = (xml_node.getChildNodeValByName("f_default")=='t')?true:false;
		var fk = xml_node.getChildNodeValByName("filter_key");
		this.filterKey = (fk)?unescape(fk):"";

		var view_fields = xml_node.getChildNodeByName("view_fields");
		if (view_fields)
		{
			for (var j = 0; j < view_fields.getNumChildren(); j++)
			{
				var fld = view_fields.getChildNode(j);
				var ind = this.view_fields.length;
				this.view_fields[ind] = new Object();
				this.view_fields[ind].id = null;
				this.view_fields[ind].fieldName = fld.m_text;
			}
		}

		var conditions = xml_node.getChildNodeByName("conditions");
		if (conditions)
		{
			for (var j = 0; j < conditions.getNumChildren(); j++)
			{
				var cnd = conditions.getChildNode(j);
				var ind = this.conditions.length;
				this.conditions[ind] = new Object();
				this.conditions[ind].blogic = unescape(cnd.getChildNodeValByName("blogic"));
				this.conditions[ind].fieldName = unescape(cnd.getChildNodeValByName("field_name"));
				this.conditions[ind].operator = unescape(cnd.getChildNodeValByName("operator"));
				this.conditions[ind].condValue = unescape(cnd.getChildNodeValByName("value"));
			}
		}

		var sort_order = xml_node.getChildNodeByName("sort_order");
		if (sort_order)
		{
			for (var j = 0; j < sort_order.getNumChildren(); j++)
			{
				var order = sort_order.getChildNode(j);
				var ind = this.sort_order.length;
				this.sort_order[ind] = new Object();
				this.sort_order[ind].fieldName = unescape(order.getChildNodeValByName("field_name"));
				this.sort_order[ind].order = unescape(order.getChildNodeValByName("order"));
			}
		}

	}
}

AntObjectBrowserView.prototype.fromData = function(data) 
{
	this.id = data.id;
	this.name = data.name;
	this.description = data.description;
	this.fSystem = data.f_system;
	this.fDefault = data.f_default;
	if (data.filter_key)
		this.filterKey = data.filter_key;

	for (var i in data.view_fields)
	{
		this.view_fields[this.view_fields.length] = {
			id : null, // legacy
			fieldName: data.view_fields[i]
		};
	}

	for (var i in data.conditions)
	{
		this.conditions[this.conditions.length] = {
			blogic : data.conditions[i].blogic,
			fieldName : data.conditions[i].field_name,
			operator : data.conditions[i].operator,
			condValue : data.conditions[i].value
		};
	}

	for (var i in data.sort_order)
	{
		this.sort_order[this.sort_order.length] = {
			fieldName : data.sort_order[i].field_name,
			order : data.sort_order[i].order
		};
	}
}

AntObjectBrowserView.prototype.save = function() 
{
    var args = new Array();
    args[args.length] = ['obj_type', this.obj_type];
    args[args.length] = ['name', this.name];
    args[args.length] = ['description', this.description];
    args[args.length] = ['filter_key', this.filterKey];
    args[args.length] = ['report_id', this.reportId];
    args[args.length] = ['team_id', this.team_id];
    args[args.length] = ['scope', this.scope];
    args[args.length] = ['f_default', this.f_default];
    args[args.length] = ['user_id', this.user_id];
    
	if (this.id)
		args[args.length] = ["vid", this.id];

	for (var i = 0; i < this.conditions.length; i++)
	{
		var cond = this.conditions[i];
		args[args.length] = ["conditions[]", i];
		args[args.length] = ["condition_blogic_"+i, cond.blogic];
		args[args.length] = ["condition_fieldname_"+i, cond.fieldName];
		args[args.length] = ["condition_operator_"+i, cond.operator];
		args[args.length] = ["condition_condvalue_"+i, cond.condValue];
	}

	for (var i = 0; i < this.sort_order.length; i++)
	{
		var sort_fld = this.sort_order[i];
		args[args.length] = ["sort_order[]", i];
		args[args.length] = ["sort_order_fieldname_"+i, sort_fld.fieldName];
		args[args.length] = ["sort_order_order_"+i, sort_fld.order];
	}

	for (var i = 0; i < this.view_fields.length; i++)
	{
		var fields = this.view_fields[i];
		args[args.length] = ["view_fields[]", i];
		args[args.length] = ["view_field_fieldname_"+i, fields.fieldName];
	}
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
        {
            this.cls.onsaveError();
            return;
        }
            
        if (!ret['error'])
        {
            if (!this.cls.id)
                this.cls.id = ret;

            if (!this.cls.repressOnSave)
                this.cls.onsave(ret);
        }
        else
            this.cls.onsaveError();
    };
    ajax.exec("/controller/Object/saveView", args);
}

AntObjectBrowserView.prototype.reset = function() 
{
	this.conditions		= new Array();
	this.sort_order		= new Array();
	this.view_fields	= new Array();
}

/**
 * Add a condition to this view
 */
AntObjectBrowserView.prototype.addCondition = function(blogic, fieldName, operator, condValue) 
{
	var ind = this.conditions.length;
	this.conditions[ind] = new Object();
	this.conditions[ind].blogic = blogic;
	this.conditions[ind].fieldName =fieldName;
	this.conditions[ind].operator = operator;
	this.conditions[ind].condValue = condValue;
}

/**
 * Add order by
 *
 * @return {Object} A handle to the order by object of this view
 */
AntObjectBrowserView.prototype.addOrderBy = function(fieldName, order) 
{
	var ind = this.sort_order.length;
	this.sort_order[ind] = new Object();
	this.sort_order[ind].fieldName = fieldName;
	this.sort_order[ind].order = order;

	return this.sort_order;
}

/**
 * Copy everything from another view except for the id
 *
 * @param {AntObjectBrowserView} view The view to copy from
 */
AntObjectBrowserView.prototype.copyView = function(view)
{
	// Clar current params
	this.reset();

	// Copy conditions
	for (var i = 0; i < view.conditions.length; i++)
	{
		this.addCondition(view.conditions[i].blogic, view.conditions[i].fieldName, view.conditions[i].operator, view.conditions[i].condValue);
	}

	// Sort order
	for (var i = 0; i < view.sort_order.length; i++)
	{
		this.addOrderBy(view.sort_order[i].fieldName, view.sort_order[i].order);
	}

	// View columns
	for (var i = 0; i < view.view_fields.length; i++)
	{
		this.view_fields[this.view_fields.length] = view.view_fields[i];
	}
}

/**
 * Clear conditions
 * 
 */
AntObjectBrowserView.prototype.clearConditions = function() 
{
    this.conditions = new Array();
}

/**
 * Callback fired when view is saved
 */
AntObjectBrowserView.prototype.onsave = function(id) 
{    
}

/**
 * Depricated
 */
AntObjectBrowserView.prototype.onsaveError = function(id) 
{    
}


/**
 * @fileoverview This class handles editing object list views
 *
 * Example:
 * <code>
 * 	var ed = new AntObjectViewEditor("customer");
 * 	ed.hideApply = true; // Can be used to omit the 'Apply' button if we are editing a view outside the context of a browser
 * 	ed.onApply = function() { }		// if view is applied then this can be used to run the query in a browser
 * 	ed.onSave = function() { }		// fired if changes to a view are saved
 * 	ed.onCancel = function() { }	// fired if nothing is changed
 *	ed.showDialog(parentDialog);
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectViewEditor
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
 
// DEFINE CONSTANT VARIABLES 
var SCOPE_EVERYONE      = 0;
var SCOPE_TEAM          = 1;
var SCOPE_ME            = 2;
var SCOPE_USER          = 3;
 
function AntObjectViewEditor(obj_type, view)
{
	/**
	 * Instance of CAntObject of type obj_type - loads object data if oid is defined
	 *
	 * @type {CAntObject}
	 * @public
	 */
	this.mainObject = new CAntObject(obj_type);

	/**
	 * If editing a view then this param will be set
	 *
	 * @public
	 * @var {AntObjectBrowserView}
	 */
	this.view = (view) ? view : new AntObjectBrowserView(obj_type);

	/**
	 * Buffer used for making edits
	 *
	 * @public
	 * @var {AntObjectBrowserView}
	 */
	this.viewBuf = new AntObjectBrowserView(obj_type);

	/**
	 * Container object used by outside classes to store callback properties
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();

	/**
	 * The dialog for this editor
	 *
	 * @public
	 * @var {CDialog}
	 */
	this.dlg  = null;

	/**
	 * The div container for the editor
	 *
	 * @public
	 * @var {DOMElement}
	 */
	this.con = null;

	/**
	 * The div container for the view form
	 *
	 * @public
	 * @var {DOMElement}
	 */
	this.formCon = null;

	/**
	 * The div container for the save form
	 *
	 * @public
	 * @var {DOMElement}
	 */
	this.saveCon = null;
    
    /**
     * Determine if Class was loaded by the editor
     *
     * @public
     * @var {Boolean}
     */
    this.fEditor = false;
    
    /**
     * Will be set if the view is created for another user
     *
     * @public
     * @var {Integer}
     */
    this.user_id = null;
    
    /**
     * Will be set if the view is created for another user
     *
     * @public
     * @var {string}
     */
    this.user_name = null;
    
    /**
     * Will be used once view is saved. This will have the new View Id.
     *
     * @public
     * @var {Integer}
     */
    this.viewId = null;
}

/**
 * Close the dialog
 */
AntObjectViewEditor.prototype.close = function() 
{
	this.dlg.hide();
}

/**
 * Callback fired when changes to a view have been saved
 */
AntObjectViewEditor.prototype.onSave = function() 
{    
}

/**
 * Callback fired when a user cancels and closes the dialog
 */
AntObjectViewEditor.prototype.onCancel = function() 
{    
}

/**
 * Callback fired when a user applies the view - usually for browsers
 *
 * @param {AntObjectBrowserView} view The edited view object
 */
AntObjectViewEditor.prototype.onApply = function(view) 
{    
}

/**
 * Display the view editor dialog
 *
 * @public
 */
AntObjectViewEditor.prototype.showDialog = function(parentDialog)
{
	this.dlg = new CDialog("Advanced Filter");
    this.dlg.parentDlg = parentDialog;
	this.con = alib.dom.createElement("div");
	this.dlg.customDialog(this.con, 650);
	this.showViewForm();
	this.dlg.reposition();
}

/**
 * Build the interface
 *
 * @private
 */
AntObjectViewEditor.prototype.showViewForm = function()
{
    var viewName = "";
    if(this.view.name)
        viewName = " - " + this.view.name;
        
    this.dlg.setTitle("Advanced Search" + viewName);

	// Check if view con has already been created and toggle
	if (this.viewCon)
	{
		if (this.saveCon)
			alib.dom.styleSet(this.saveCon, "display", "none");

		alib.dom.styleSet(this.viewCon, "display", "block");
		return;
	}

	this.viewCon = alib.dom.createElement("div", this.con);
	var title = (this.view) ? "Edit: " + this.view.name : "New View Builder";
	
    var wfcon = alib.dom.createElement("div", this.viewCon);
    var loadingCon = alib.dom.createElement("div", this.viewCon);
    loadingCon.innerHTML = "<div class='loading'></div>";
    
	alib.dom.styleSet(wfcon, "height", "330px");
    alib.dom.styleSet(wfcon, "overflow", "auto");
	alib.dom.styleSet(wfcon, "display", "none");

	// Conditions
	this.conditionObj = null;
	this.mainObject.clearConditions();
	
	var options = new Object();
	options.parent_dlg = this.dlg;
    options.parent_dlg.reposition();
    
    var lbl = alib.dom.createElement("div", wfcon);
    alib.dom.styleSetClass(lbl, "strong");
    lbl.innerHTML = "Search Conditions:";
    
    for(cond in this.view.conditions)
    {
        var currentCond = this.view.conditions[cond];
        if(typeof currentCond.condValue == "undefined")
            currentCond.condValue = currentCond.value;
        
    }
    
	this.conditionObj = this.mainObject.buildAdvancedQuery(wfcon, this.view.conditions, options);
    
    loadingCon.innerHTML = "";
    alib.dom.styleSet(wfcon, "display", "block");
    
	var order_div = alib.dom.createElement("div", wfcon);
	alib.dom.styleSet(order_div, "margin-top", "8px");
	var lbl = alib.dom.createElement("div", order_div);
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "Sort By:";
	var a_order = alib.dom.createElement("a", wfcon);
	a_order.href = "javascript:void(0);";
	a_order.innerHTML = "Add Sort Order";
	a_order.cls = this;
	a_order.order_div = order_div;
	a_order.onclick = function() { this.cls.addOrderBy(this.order_div); }
	for (var i = 0; i < this.view.sort_order.length; i++)
		this.addOrderBy(order_div, this.view.sort_order[i].fieldName, this.view.sort_order[i].order);

	var order_div = alib.dom.createElement("div", wfcon);
	alib.dom.styleSet(order_div, "margin-top", "8px");
	var lbl = alib.dom.createElement("div", order_div);
	alib.dom.styleSetClass(lbl, "strong");
	lbl.innerHTML = "View Columns:";
	var a_order = alib.dom.createElement("a", wfcon);
	a_order.href = "javascript:void(0);";
	a_order.innerHTML = "Add Field";
	a_order.cls = this;
	a_order.order_div = order_div;
	a_order.onclick = function() { this.cls.addViewColumn(this.order_div); }
	for (var i = 0; i < this.view.view_fields.length; i++)
    {
        var fieldName = this.view.view_fields[i].fieldName;
        
        if(typeof fieldName == "undefined")
            fieldName = this.view.view_fields[i];
        
        this.addViewColumn(order_div, fieldName);
    }
    
    this.buttonCon = alib.dom.createElement("div", this.viewCon);
    this.createButtons();
}

/**
 * Create dialog buttons
 *
 * @param {AntObjectBrowserView} view The edited view object
 */
AntObjectViewEditor.prototype.createButtons = function()
{
    // Add buttons
    // -------------------------------------------
    this.buttonCon.innerHTML = "";
    var button_div = alib.dom.createElement("div", this.buttonCon);
    alib.dom.styleSet(button_div, "margin-top", "8px");

    if(!this.fEditor)
    {
        // Apply button
        var btn = alib.ui.Button("Apply", {
            className:"b2", tooltip:"Close and view results", cls:this, 
            onclick:function() { this.cls.apply(); }
        });
        btn.print(button_div);
    }

    // Cancel button
    var btn = alib.ui.Button("Cancel", {
        className:"b1", tooltip:"Cancel and close form", cls:this, 
        onclick:function() { this.cls.close(); this.cls.onCancel(); }
    });
    btn.print(button_div);

    var spacer = alib.dom.createElement("span", button_div);
    spacer.innerHTML = "&nbsp;|&nbsp;&nbsp;";

    if (this.view.id)
    {
        if (!this.view.fSystem)
        {
            var btn = alib.ui.Button("Save Changes", {
                className:"b1", tooltip:"Save changes to this view", cls:this, 
                onclick:function() { this.cls.showSaveForm(); }
            });
            btn.print(button_div);
        }

        // Save new view
        var btn = alib.ui.Button("Save As New View", {
            className:"b1", tooltip:"Create a new view using these settings", cls:this, 
            onclick:function() { this.cls.showSaveForm(true); }
        });
        btn.print(button_div);
    }
    else
    {
        var btn = alib.ui.Button("Save View", {
            className:"b1", tooltip:"Create a new view using these settings", cls:this, 
            onclick:function() { this.cls.showSaveForm(); }
        });
        btn.print(button_div);
    }
}

/**
 * All the view buffer to the actual view for saving
 *
 * @param {AntObjectBrowserView} view The edited view object
 */
AntObjectViewEditor.prototype.setViewFromBuf = function(view) 
{
    this.viewBuf.clearConditions();
    for (var i = 0; i < this.conditionObj.getNumConditions(); i++)
    {
        var cond = this.conditionObj.getCondition(i);
        this.viewBuf.addCondition(cond.blogic, cond.fieldName, cond.operator, cond.condValue);
    }
        
    if(typeof view == "object")
        view.copyView(this.viewBuf);
    else if(typeof this.view.copyView == 'function')
        this.view.copyView(this.viewBuf);
    else
    {
        var newView = new AntObjectBrowserView(this.mainObject.name);
        this.newView.copyView(this.viewBuf);
        return newView;
    }
}

/**
 * Callback fired when a user applies the view - usually for browsers
 *
 * @param {AntObjectBrowserView} view The edited view object
 */
AntObjectViewEditor.prototype.apply = function() 
{
	for (var i = 0; i < this.conditionObj.getNumConditions(); i++)
	{
		var cond = this.conditionObj.getCondition(i);
		this.viewBuf.addCondition(cond.blogic, cond.fieldName, cond.operator, cond.condValue);
	}

	this.close(); 
	this.onApply(this.viewBuf);
}

/**
 * Add an order by row to the form
 *
 * @private
 * @param {DOMElement} con The container to print the row into
 * @param {string} fieldName The name of the field we are adding
 * @param {string} order Either "asc" for ascending or "desc" for descending
 */
AntObjectViewEditor.prototype.addOrderBy = function(con, fieldName, order)
{
	var sel_field = (fieldName) ? fieldName : "";
	var sel_order = (order) ? order : "asc";

	if (typeof this.orderBySerial == "undefined")
		this.orderBySerial = 1;
	else
		this.orderBySerial++;

	var dv = alib.dom.createElement("div", con);

	if (this.viewBuf.sort_order.length)
	{
		var lbl = alib.dom.createElement("span", dv);
		lbl.innerHTML = "Then By: ";
	}

	var ind = this.viewBuf.sort_order.length;
	this.viewBuf.sort_order[ind] = new Object();
	this.viewBuf.sort_order[ind].id = this.orderBySerial;
	this.viewBuf.sort_order[ind].fieldName = sel_field;
	this.viewBuf.sort_order[ind].order = sel_order;

	// Add field name
	var field_sel = alib.dom.createElement("select", dv);
	field_sel.orderobj = this.viewBuf.sort_order[ind];
	field_sel.onchange = function() { this.orderobj.fieldName = this.value; };
	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		if (fields[i].type != "fkey_multi")
			field_sel[field_sel.length] = new Option(fields[i].title, fields[i].name, false, (sel_field==fields[i].name)?true:false);
	}

	if (!this.viewBuf.sort_order[ind].fieldName)
		this.viewBuf.sort_order[ind].fieldName = field_sel.value;

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";
	
	// Add order (asc/desc)
	var order_sel = alib.dom.createElement("select", dv);
	order_sel.orderobj = this.viewBuf.sort_order[ind];
	order_sel.onchange = function() { this.orderobj.order = this.value; };
	order_sel[order_sel.length] = new Option("Ascending", "asc", false, (sel_order == "asc")?true:false);
	order_sel[order_sel.length] = new Option("Descending", "desc", false, (sel_order == "desc")?true:false);

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";

	var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
	var del = alib.dom.createElement("a", dv);
	del.innerHTML = "<img src='"+icon+"' border='0' />";
	del.href = "javascript:void(0)";
	del.odv = dv;
	del.pdv = con;
	del.cls = this;
	del.orderid = this.orderBySerial;
	del.onclick = function() 
	{ 
		for (var i = 0; i < this.cls.viewBuf.sort_order.length; i++)
		{
			if (this.cls.viewBuf.sort_order[i].id == this.orderid)
				this.cls.viewBuf.sort_order.splice(i, 1);
		}

		this.pdv.removeChild(this.odv); 
	} 
}

/**
 * Add view column entry to to the form
 *
 * @private
 * @param {DOMElement} con The container to print this row into
 * @param {string} field_name The name of the field to use for this column
 */
AntObjectViewEditor.prototype.addViewColumn = function(con, field_name)
{
	var selected_field = (field_name) ? field_name : "";

	if (typeof this.viewCOlSerial == "undefined")
		this.viewCOlSerial = 1;
	else
		this.viewCOlSerial++;

	var dv = alib.dom.createElement("div", con);

	var ind = this.viewBuf.view_fields.length;
	this.viewBuf.view_fields[ind] = new Object();
	this.viewBuf.view_fields[ind].id = this.viewCOlSerial;
	this.viewBuf.view_fields[ind].fieldName = selected_field;

	// Add field name
	var field_sel = alib.dom.createElement("select", dv);
	field_sel.viewobj = this.viewBuf.view_fields[ind];
	field_sel.onchange = function() { this.viewobj.fieldName = this.value; };
	var fields = this.mainObject.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		field_sel[field_sel.length] = new Option(fields[i].title, fields[i].name, false, (fields[i].name == selected_field)?true:false);
	}

	if (!this.viewBuf.view_fields[ind].fieldName)
		this.viewBuf.view_fields[ind].fieldName = field_sel.value;

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " ";

	var icon = (typeof(Ant)=='undefined') ? "/images/icons/deleteTask.gif" : "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
	var del = alib.dom.createElement("a", dv);
	del.innerHTML = "<img src='"+icon+"' border='0' />";
	del.href = "javascript:void(0)";
	del.odv = dv;
	del.pdv = con;
	del.cls = this;
	del.viewid = this.viewCOlSerial;
	del.onclick = function() 
	{ 
		for (var i = 0; i < this.cls.viewBuf.view_fields.length; i++)
		{
			if (this.cls.viewBuf.view_fields[i].id == this.viewid)
				this.cls.viewBuf.view_fields.splice(i, 1);
		}

		this.pdv.removeChild(this.odv); 
	} 
}

/**
 * Save changes to a view
 *
 * @private 
 * @param {Boolean} saveas  Determine whether to save as new or not
 */
AntObjectViewEditor.prototype.showSaveForm = function(saveas)
{
	this.dlg.setTitle("Save View");
    
	// Hide the view form
	alib.dom.styleSet(this.viewCon, "display", "none");

	// Create save div
	if (this.saveCon == null)
		this.saveCon = alib.dom.createElement("div", this.con);
	else
	{
		alib.dom.styleSet(this.saveCon, "display", "block");
		this.saveCon.innerHTML = "";
	}

	// Create dialog div
	var dv = alib.dom.createElement("div", this.saveCon);
    
    var inputData = new Object();

	// Name
	var lbl = alib.dom.createElement("h4", dv);
	alib.dom.styleSet(lbl, "margin", "5px 0 5px 0");
	lbl.innerHTML = "Name This View";
	var inp_dv = alib.dom.createElement("div", dv);
	inputData.txtName = alib.dom.createElement("input", inp_dv);
	alib.dom.styleSet(inputData.txtName, "width", "98%");

	// Description
	var lbl = alib.dom.createElement("h4", dv);
	alib.dom.styleSet(lbl, "margin", "5px 0 5px 0");
	lbl.innerHTML = "Description";
	var inp_dv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(inp_dv, "margin", "5px 0 5px 0");
	inputData.txtDescription = alib.dom.createElement("textarea", inp_dv);
	alib.dom.styleSet(inputData.txtDescription, "width", "98%");

	var save_view_id = "";

	if (this.view.id)
	{
		inputData.txtName.value = this.view.name;
		inputData.txtDescription.value = this.view.description;

		if (saveas)
			inputData.txtName.value += " (copy)";
		else
			save_view_id = this.view.id;
	}
	else
	{
		inputData.txtName.value = "My Custom View";
		inputData.txtDescription.value = "Describe this view here";
	}

	// Scope
	var lbl = alib.dom.createElement("h4", dv);
	alib.dom.styleSet(lbl, "margin", "5px 0 5px 0");
	lbl.innerHTML = "Scope - View will be available to:";
    
    // Scope Dropdown
    var inp_dv = alib.dom.createElement("div", dv);
    alib.dom.styleSet(inp_dv, "margin", "5px 0 5px 0");
    inputData.selectScope = alib.dom.createElement("select", inp_dv);
    alib.dom.styleSet(inputData.selectScope, "margin-right", "10px");
    
    // Team Dropdown
    inputData.selectTeam = alib.dom.createElement("select", inp_dv);
    alib.dom.styleSet(inputData.selectTeam, "display", "none");
    
    // Select User
    var userCon = alib.dom.createElement("div", inp_dv);
    alib.dom.styleSet(userCon, "display", "none");
    this.showUsers(userCon);
    
    // Scope Event
    inputData.selectScope.selectTeam = inputData.selectTeam;
    inputData.selectScope.userCon = userCon;
    inputData.selectScope.onchange = function()
    {
        alib.dom.styleSet(this.selectTeam, "display", "none");
        alib.dom.styleSet(this.userCon, "display", "none");
        
        if(this.value == SCOPE_TEAM) // Team
            alib.dom.styleSet(this.selectTeam, "display", "inline-block");
        else if(this.value == SCOPE_USER) // User
            alib.dom.styleSet(this.userCon, "display", "inline-block");
    }
    
    // Populate Team Dropdown
    var userObject = new CAntObject("user");
    userObject.teamId = this.view.teamid;
    userObject.teamDropdown = inputData.selectTeam;
    userObject.onteamsloaded = function(ret)
    {
        var teamData = ret;
        delete ret['teamCount'];
        this.populateTeam(ret, ret[0].parentId);
        this.addSpacedPrefix(teamData);
    }
    userObject.loadTeam();
    
    var selectedScope = null;
    switch(this.view.scope)
    {
        case "User":
            selectedScope = SCOPE_USER;
            break;
        case "Team":
            selectedScope = SCOPE_TEAM;
            break;
        case "Everyone":
            selectedScope = SCOPE_EVERYONE;
            break;
        case "Me":
        default:
            selectedScope = SCOPE_ME;
            break;
    }
    
    // Populate Scope Dropdown
    buildDropdown(inputData.selectScope, [[SCOPE_ME, "Me"], [SCOPE_EVERYONE, "Everyone"], [SCOPE_TEAM, "Team"], [SCOPE_USER, "User"]], selectedScope);
    inputData.selectScope.onchange();
    
	// Default Input
	var lbl = alib.dom.createElement("h4", dv, "Default");
	alib.dom.styleSet(lbl, "margin", "5px 0 5px 0");
    var inp_dv = alib.dom.createElement("div", dv);
    alib.dom.styleSet(inp_dv, "margin", "5px 0 5px 0");
    
    // Default Yes
    var attrData = [["type", "radio"], ["name", "defaultChk"], ["value", "1"]];
    inputData.defRadioYes = alib.dom.setElementAttr(alib.dom.createElement("input", inp_dv), attrData);
    alib.dom.setElementAttr(alib.dom.createElement("span", inp_dv), [["innerHTML", "Yes"], ["margin-right", "10px"]]);
    
    // Default No
    var attrData = [["type", "radio"], ["name", "defaultChk"], ["value", "0"]];
    inputData.defRadioNo = alib.dom.setElementAttr(alib.dom.createElement("input", inp_dv), attrData);
    alib.dom.setElementAttr(alib.dom.createElement("span", inp_dv), [["innerHTML", "No"]]);
    
    if(this.view.fDefault)
        inputData.defRadioYes.checked = true;
    else
        inputData.defRadioNo.checked = true;

    var lbl = alib.dom.createElement("span", inp_dv, "&nbsp;&nbsp;&nbsp;-Should this view be used as the default for the scope selected?");

	// Button container
	var dv_btn = alib.dom.createElement("div", dv);

    inputData.save_view_id = save_view_id;
    
	// Save button
	var btn = alib.ui.Button("Save", {
		className:"b2", tooltip:"Click to save changes", cls:this, 
		inputData:inputData,
		onclick:function() 
                { 
                    this.cls.saveView(this.inputData); 
                }
	});
	btn.print(dv_btn);

	// Cancel
	var btn = alib.ui.Button("Cancel", {
		className:"b1", tooltip:"Close without saving any changes", cls:this, 
		onclick:function() { this.cls.showViewForm(); }
	});
	btn.print(dv_btn);
}

/**
 * Save a view
 *
 * @param {string} name The name of the view
 * @param {string} description Optional description of the view
 * @param {int} save_view_id Optional id of view to edit
 */
AntObjectViewEditor.prototype.saveView = function(inputData, name, description, save_view_id)
{
	// Create loading div
	var dlg = new CDialog(null, this.m_advancedSearchDlg);
    dlg.parentDlg = true;
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);

	var view = null;
    
    if(!this.searchView)
        this.searchView = new Object();
    
    // Define arrays so it wont throw an error     
    this.searchView.conditions = new Array();
    this.searchView.sort_order = new Array();
	this.searchView.view_fields = new Array();
    
    // Create Input Variables
    var name = inputData.txtName.value;
    var description = inputData.txtDescription.value;
    var save_view_id = inputData.save_view_id;
    var teamId = inputData.selectTeam.value;
    var defaultView = false;
    
    // Scope Value
    var scopeIdx = inputData.selectScope.selectedIndex;
    var scope = inputData.selectScope.options[scopeIdx].text
    
    if(inputData.defRadioYes.checked)
        defaultView = true;
    
    // Instantiate View Object
	if (save_view_id && !this.viewId) // If this.viewId already has value, lets create a new instance for current view
        view = this.mainObject.getViewById(save_view_id);
	else
        view = new AntObjectBrowserView(this.mainObject.name);
    
	if(view)
	{
        this.setViewFromBuf(view)
        
        // If view is saved again without closing the dialog, we need to use the new View Id
        if(this.viewId) // View Id will only have value once view is already saved.
            view.id = this.viewId;
        
		view.name = name;
		view.filterKey = this.viewsFilterKey;
        view.description = description;
        view.f_default = defaultView;
        view.scope = scope;
		
        if(inputData.selectScope.value == SCOPE_TEAM)
            view.team_id = teamId;
            
        if(inputData.selectScope.value == SCOPE_USER)
            view.user_id = this.user_id;
        
        view.cls = this;
		view.save_view_id = (save_view_id) ? save_view_id : null;
		view.dlg = dlg;
		view.onsave = function(ret)
		{
			dlg.hide();
			if (!this.save_view_id)
				this.cls.mainObject.views[this.cls.mainObject.views.length] = this;

			ALib.statusShowAlert("View Saved!", 3000, "bottom", "right");
            this.cls.viewId = ret; // Should set the new View Id so it wont create a duplicate entry when saved again

            // Execute Self onSave Callback
            this.cls.onSave();
            
            if(typeof this.cls.buildViewsDropdown == 'function')
            {
                this.cls.buildViewsDropdown();
                this.cls.showAdvancedSearch();
                this.cls.runSearch(this);
            }

			// Update global object def cache
			Ant.EntityDefinitionLoader.get(this.cls.mainObject.name).load();
            
            // Update Current View                
            this.cls.view.fDefault = defaultView;
            this.cls.view.userName = this.cls.username;
            this.cls.view.userid = this.cls.user_id;
            this.cls.view.fSystem = false;
            this.cls.createButtons();
            
            this.cls.view.name = name;
            this.cls.showViewForm();
		}
		view.onsaveError = function()
		{
			dlg.hide();
			ALib.statusShowAlert("ERROR: Unable to connect to server!", 3000, "bottom", "right");
            this.cls.showViewForm();
		}
		view.save();
	}
    else
    {
        var error = "ERROR: Unable save current view because another user has made some changes. Please click 'Refresh Views' button to view changes!";
        dv_load.innerHTML = error;
        
        
        var errorFunc = function()
        {
            dlg.hide();
            ALib.statusShowAlert(error, 3000, "bottom", "right");
        }
        
        window.setTimeout(errorFunc, 3000);
    }
}

/**
 * Shows the user dialog 
 *
 * @public
 * @this {class}
 * @param {DOMElement} userCon  Container for user browser
 */
AntObjectViewEditor.prototype.showUsers = function(userCon)
{
    var userLabel = alib.dom.setElementAttr(alib.dom.createElement("span", userCon), [["innerHTML", "None Selected"]]);
    alib.dom.styleSet(userLabel, "margin-right", "10px");
    
    if(this.view.userName && this.view.userName.length > 0 && this.view.scope == "User")
    {
        userLabel.innerHTML = this.view.userName;
        this.user_id = this.view.userid;
        this.username = this.view.userName;
    }
    
    var cbrowser = new CUserBrowser();
    cbrowser.cls = this;
    cbrowser.userLabel = userLabel;
    cbrowser.onSelect = function(cid, name) 
    {
        this.cls.user_id = cid;
        this.cls.username = name;
        this.userLabel.innerHTML = " " + name;
    }
    
    var btn = alib.ui.Button("Select", 
                            {
                                className:"b1", tooltip:"Select User for this view", cbUser:cbrowser, 
                                onclick:function() 
                                {
                                    this.cbUser.showDialog();
                                }
                            });
    btn.print(userCon);
}

/**
 * @fileoverview This class handles building calendar browsers in the JS created UI
 *
 * Example:
 * <code>
 * 	var ob = new AntCalendarBrowse("customer");
 *	ob.print(document.body);
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntCalendarBrowse
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 */
function AntCalendarBrowse(appclass, calid)
{
	/**
	 * Optional AntView object used to manage resizing and rendering pages
	 *
	 * @type {AntView}
	 * @public
	 */
	this.antView = null;

	/**
	 * Child view used for displaying events
	 *
	 * @type {AntView}
	 * @public
	 */
	this.eventView = null;

	/**
	 * Outer container where to calendar resizes
	 *
	 * @type {DOMElement}
	 * @private
	 */
    this.outerCon = null;

	/**
	 * Toolbar container
	 *
	 * @type {DOMElement}
	 * @private
	 */
    this.toolbarCon = null;

	/**
	 * Current date
	 *
	 * @type {date}
	 * @private
	 */
	this.currentDate = new Date();

	/**
	 * Last date that was loaded
	 *
	 * @var {Date}
	 * @private
	 */
	this.lastDate = null;

	/**
	 * If we are in month view this is a handle to the tbody of the calendar
	 *
	 * @type {DOMTableBody}
	 * @private
	 */
	this.monthViewTbody = null;

	/**
	 * Label container used to display current date string
	 *
	 * @type {DOMElement}
	 */
	this.dateLabel = null;

	/**
	 * Application class refernced, this will be set of the browser is loaded by an applicatoin
	 *
	 * @var {AntApp}
	 */
    this.m_appclass = (appclass) ? appclass : null;

	/**
	 * Specific calendar id
	 *
	 * @var {int}
	 */
    this.m_cid = (calid) ? calid : null;

	/**
	 * Set a manual height for this browser, otherwise will be 100 percent of container
	 *
	 * @var {int}
	 */
    this.browserHeight = 0;

	/**
	 * Global settings object (minscale should be put in below)
	 *
	 * @var {Object}
	 */
    this.settings = new Object();

	/**
	 * Set scale for each minute in px
	 *
	 * IE does not handle fractional px very well so set to 1. All other browsers can deal with .75 px
	 *
	 * @var {float}
	 */
    this.min_scale = (alib.userAgent.ie) ? 1 : .75;

    // Set initial events range
    this.eventsRangeFrom = calDateAddSubtract(this.currentDate, 'day', -31);
    this.eventsRangeTo = calDateAddSubtract(this.currentDate, 'day', 31);

	/**
	 * Array of all events for a given range
	 *
	 * @var {Array}
	 */
    this.events = new Array();

	/**
	 * Array of calendars we are working with, set in loadSettings
	 *
	 * @var {Array}
	 */
    this.calendars = new Array();

	/**
	 * If set the list will automatically refresh eveny n number of seconds
	 *
	 * @var {int}
	 */
	this.refreshInterval = null;
}

/**
 * Print the browser inside a container
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {DOMElement} con The container that will house the browser
 */
AntCalendarBrowse.prototype.print = function(con)
{
	// Draw the browser
	this.outerCon = con;
    this.outerCon.innerHTML = " Loading...";

    // Load settings for calendar browser (onload will build the interface)
    this.loadSettings();
}

/**
 * Load user settings for the calendar browser
 */
AntCalendarBrowse.prototype.loadSettings = function()
{
    // Set defaults
    this.settings.defaultView = "day";
         
    // Get settings
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(resp)
    {
        if (resp)
        {
            this.cbData.cls.settings.defaultView = resp.defaultView;

            // Set calendars
            for (var i = 0; i < resp.calendars.length; i++)
            {
                this.cbData.cls.calendars[i] = resp.calendars[i]; // id, name, color, user_id
            }
        }

        // Show browser
        this.cbData.cls.buildInterface();
        this.cbData.cls.refresh();
    };
    ajax.exec("/controller/Calendar/getuserSettings", 
              [["calendar_id", this.m_cid]]);
}

/**
 * Save a setting for the current user
 *
 * @param {string} name The name of the setting to save
 * @param {string} value The value to save for the 'name' key
 */
AntCalendarBrowse.prototype.saveSettings = function(name, value)
{
    switch (name)
    {
        case 'default_view':
            this.settings.defaultView = value;
            var pref = (this.m_cid) ? "calendar/"+this.m_cid+"/default_view" : "calendar/default_view";
            ajax = new CAjax('json');
            ajax.exec("/controller/Calendar/userSetSetting", 
                    [["setting_name", pref], ["setting_value", value]]);
        break;
    }
}

/**
 * Build the interface
 */
AntCalendarBrowse.prototype.buildInterface = function ()
{
    this.outerCon.innerHTML = "";

    // Creat the browser
    this.mainCon = alib.dom.createElement("div", this.outerCon);
	alib.dom.styleSetClass(this.mainObject, "calendarBrowseCon");
    
    this.titleCon = alib.dom.createElement("div", this.mainCon);

    this.toolbarCon = alib.dom.createElement("div", this.mainCon);
	alib.dom.styleSetClass(this.mainObject, "calendarBrowseToolbar");
	/*
    this.titleCon.className = "objectLoaderHeader";
    this.titleCon.innerHTML = "Calendar";
	*/
    this.bodyCon = alib.dom.createElement("div", this.mainCon);
    this.bodyCon.className = "objectLoaderBody";
    
    // Add Toolbar
    // ----------------------------------------------
    this.curTb = new CToolbar();

	// Views
	this.viewToggler = alib.ui.ButtonToggler();

	var btn = alib.ui.Button("Month", {
		className:"b1 grRight", tooltip:"View calendar in month view", cls:this,
		onclick:function() { this.cls.renderCal(null, "month"); }
	});
    this.curTb.AddItem(btn.getButton(), "right");
	this.viewToggler.add(btn, "month");

	var btn = alib.ui.Button("Week", {
		className:"b1 grCenter", tooltip:"View calendar in week view", cls:this,
		onclick:function() { this.cls.renderCal(null, "week"); }
	});
    this.curTb.AddItem(btn.getButton(), "right");
	this.viewToggler.add(btn, "week");

	var btn = alib.ui.Button("Day", {
		className:"b1 grLeft", tooltip:"View calendar in day view", cls:this,
		onclick:function() { this.cls.renderCal(null, "day"); }
	});
    this.curTb.AddItem(btn.getButton(), "right");
	this.viewToggler.add(btn, "day");

    // Today
	var btn = alib.ui.Button("Today", {
		className:"b1", tooltip:"Jump to today", cls:this,
		onclick:function() { this.cls.gotoToday(); }
	});
    this.curTb.AddItem(btn.getButton());
    
    // Previous date(s)
	var button = alib.ui.Button("<img src='/images/icons/arrow_left_16.png' />", {
		className:"b1 grLeft", tooltip:"Previous", cls:this,
		onclick:function() { this.cls.gotoPrev(); }
	});
	this.curTb.AddItem(button.getButton());

    // Next date(s)
	var button = alib.ui.Button("<img src='/images/icons/arrow_right_16.png' />", {
		className:"b1 grRight", tooltip:"Next", cls:this,
		onclick:function() { this.cls.gotoNext(); }
	});
	this.curTb.AddItem(button.getButton());

    // Refresh
	var btn = alib.ui.Button("<img src='/images/icons/refresh_12.png' />", {
		className:"b1", tooltip:"Refresh Events", cls:this,
		onclick:function() { this.cls.refresh(); }
	});
    this.curTb.AddItem(btn.getButton());

	// Add date label
    this.dateLabel = alib.dom.createElement("div");
    alib.dom.styleSetClass(this.dateLabel, "strong");
    alib.dom.styleSet(this.dateLabel, "margin", "8px 0 0 5px");
    this.curTb.AddItem(this.dateLabel);

    this.curTb.print(this.toolbarCon);
    
    // execute default
	this.activeView = this.settings.defaultView;
	this.gotoToday();
}

/**
 * Go to today
 */
AntCalendarBrowse.prototype.gotoToday = function()
{
	var dt = new Date(); 
	return this.renderCal(dt);

	/*
	var gotoView = (viewName) ? viewName : this.activeView;
	
	switch (gotoView)
	{
	case 'day':
		this.renderDay(td.getFullYear(), td.getMonth()+1, td.getDate());
		break;
	case 'week':
		this.renderWeek(td.getFullYear(), td.getMonth()+1, td.getDate());
		break;
	case 'month':
		this.renderMonth(td.getFullYear(), td.getMonth()+1);
		break;
	}

    this.getEvents();
	*/
}

/**
 * Go to next view page
 */

AntCalendarBrowse.prototype.gotoNext = function()
{
	var dt = new Date(this.currentDate);

	switch (this.activeView)
	{
	case 'day':
		dt.setDate(this.currentDate.getDate() + 1);	
		break;
	case 'week':
		dt.setDate(this.currentDate.getDate() + 7);	
		break;
	case 'month':
		dt.setMonth(this.currentDate.getMonth() + 1);
		break;
	}

	this.renderCal(dt); 
}

/**
 * Go to prev view page
 */
AntCalendarBrowse.prototype.gotoPrev = function()
{
	var dt = new Date(this.currentDate);

	switch (this.activeView)
	{
	case 'day':
		dt.setDate(this.currentDate.getDate() - 1);	
		break;
	case 'week':
		dt.setDate(this.currentDate.getDate() - 7);	        
		break;
	case 'month':
		dt.setMonth(this.currentDate.getMonth() - 1);        
		break;
	}

	this.renderCal(dt); 
}

/**
 * Render the calendar
 *
 * @param {Date} date The date to render
 * @param {string} viewName Optional view name, if null then use this.activeView
 */
AntCalendarBrowse.prototype.renderCal = function(date, viewName)
{
	var gotoView = viewName || this.activeView;
	var dt = date || new Date();
	this.currentDate = dt;
	
	switch (gotoView)
	{
	case 'day':
		this.renderDay(dt.getFullYear(), dt.getMonth()+1, dt.getDate());
		break;
	case 'week':
		this.renderWeek(dt.getFullYear(), dt.getMonth()+1, dt.getDate());
		break;
	case 'month':
		this.renderMonth(dt.getFullYear(), dt.getMonth()+1);
		break;
	}

    this.getEvents();
}


/**
 * Display the day view
 *
 * @param {int} year The year to load
 * @param {int} month The number of the month to load
 * @param {int} day The day to load
 */
AntCalendarBrowse.prototype.renderDay = function(year, month, day)
{
    this.bodyCon.innerHTML = "";
	this.viewToggler.select("day");
    
    var toolbarDay = alib.dom.createElement("div", this.bodyCon);
    var displayDay = alib.dom.createElement("div", this.bodyCon);    
    
    this.saveSettings("default_view", "day");

    this.activeView = "day";

    // Make sure the events range is right
	//this.currentDate = new Date(year, month-1, day);
    //this.updateDateRange(this.currentDate, this.currentDate);

    // Get number of days in the current month
    var num_days = calGetMonthNumDays(year, month);

    // Set navigator
    try
    {
        if (this.m_appclass && this.m_appclass.calNav)
            this.m_appclass.calNav(year, month, day, 'day');
    }
    catch(e){}

	// Set label
	this.dateLabel.innerHTML = calGetMonthName(month) + " " + day + ", " + year;

    // ----------------------------------------------------------------------------
    // Display dayview
    // ----------------------------------------------------------------------------
    var min_scale = this.min_scale; // px per minute

    // All Day
    // ------------------------------------------------------
    this.m_events_allday = alib.dom.createElement("div", displayDay);
    this.header_dv = this.m_events_allday;
    alib.dom.styleSet(this.m_events_allday, "margin-left", "69px");
    alib.dom.styleSet(this.m_events_allday, "margin-right", alib.dom.getScrollBarWidth()+"px");
    alib.dom.styleSetClass(this.m_events_allday, "CalendarDayAllDay");

    // Time
    // ------------------------------------------------------
    
	/*
    if(this.browserHeight == 0)
    {
        this.headerHeights = getHeaderHeights();
        this.browserHeight =  alib.dom.getContentHeight(this.outerCon) - this.headerHeights.appNavHeight;
    }
    var height = (this.browserHeight - this.headerHeights.totalHeaderHeight);
    alib.dom.styleSet(displayDay, "height", height+"px");
    alib.dom.styleSet(displayDay, "overflow", "auto");
	*/

    //var cdv = this.m_events_day;
    this.scrollTimedEvents = alib.dom.createElement("div", displayDay);
    var cdv = this.scrollTimedEvents;    
    alib.dom.styleSet(cdv, "position", "relative");
    alib.dom.styleSet(cdv, "overflow", "auto");

    var tdiv = alib.dom.createElement("div", cdv);
    alib.dom.styleSet(tdiv, "float", "left");
    alib.dom.styleSet(tdiv, "width", "70px");    

    this.m_events_day = alib.dom.createElement("div", cdv);
    alib.dom.styleSet(this.m_events_day, "position", "relative");
    alib.dom.styleSet(this.m_events_day, "margin-left", "71px");

    var oD = new Date(year, month-1, 1); //DD replaced line to fix date bug when current day is 31st
    oD.od=oD.getDay()+1; //DD replaced line to fix date bug when current day is 31st

    var todaydate=new Date() //DD added
    var is_today=(year==todaydate.getFullYear() && month==todaydate.getMonth()+1 && day==todaydate.getDate())? 1 : 0;

    if (is_today)
    {
        var hrs = todaydate.getHours();
        var mins = todaydate.getMinutes();
        var pos = ((hrs*60) + mins)*min_scale;

        var sliderdv = alib.dom.createElement("div", cdv);
        alib.dom.styleSet(sliderdv, "position", "absolute");
        alib.dom.styleSet(sliderdv, "top", (pos-6)+"px");
        alib.dom.styleSet(sliderdv, "left", "65px");
        sliderdv.innerHTML = "<img src='/images/icons/tilde_alert.png' border='0'>";

        var bardv = alib.dom.createElement("div", cdv);
        alib.dom.styleSet(bardv, "height", "1px");
        alib.dom.styleSet(bardv, "width", (cdv.scrollWidth-90)+"px");
        alib.dom.styleSet(bardv, "background-color", "red");
        alib.dom.styleSet(bardv, "position", "absolute");
        alib.dom.styleSet(bardv, "top", pos+"px");
        alib.dom.styleSet(bardv, "left", "70px");
    }

    for (var i = 0; i <24; i++)
    {
        var name = (i < 12) ? (((i==0)?12:i) + " AM") : ((i==12)?i:i-12) + " PM";

        var time_dv = alib.dom.createElement("div", tdiv);
        alib.dom.styleSet(time_dv, "height", ((min_scale*60)-1)+"px");
        alib.dom.styleSet(time_dv, "font-weight", "bold");
        alib.dom.styleSet(time_dv, "border-top", "1px solid #999999");
        alib.dom.styleSet(time_dv, "border-right", "1px solid #999999");
        //alib.dom.styleSet(time_dv, "float", "left");
        //alib.dom.styleSet(time_dv, "width", "70px");
        time_dv.innerHTML = name;

        var time_1 = (i < 12) ? (((i==0)?12:i) + ":00 AM") : ((i==12)?i:i-12) + ":00 PM";
        var time_2 = (i < 12) ? (((i==0)?12:i) + ":30 AM") : ((i==12)?i:i-12) + ":30 PM";
        var time_3 = ((i+1) < 12) ? ((((i+1)==0)?12:(i+1)) + ":00 AM") : (((i+1)==12)?(i+1):(i+1)-12) + ":00 PM";

        var hour_dv = alib.dom.createElement("div", this.m_events_day);
        hour_dv.times = [time_1, time_2];
        hour_dv.date_str= month+"/"+day+"/"+year;
        hour_dv.calid = this.m_cid;
        hour_dv.cls = this;
        var height = (alib.userAgent.webkit) ? min_scale*30 : (min_scale*30)-1;
        alib.dom.styleSet(hour_dv, "height", height+"px");
        alib.dom.styleSet(hour_dv, "border-top", "1px solid #999999");
        //alib.dom.styleSet(hour_dv, "margin-left", "71px");
        hour_dv.onmouseover = function()
        {
            this.style.backgroundColor = "#f1f1f1";
        }
        hour_dv.onmouseout = function()
        {
            this.style.backgroundColor = "";
        }
        hour_dv.ondblclick = function()
        {

            var vals = [
                        ['ts_start', this.date_str + " " + this.times[0]], ['ts_end', this.date_str + " " + this.times[1]], 
                        ['calid', this.calid]
                       ];

            //calEventOpen(null, "top.Ant.getHinst('cal_browse').refresh()", vals)
            //loadObjectForm("calendar_event", null, null, null, vals);
            this.cls.loadEvent(null, vals);
        }
        DragAndDrop.registerDropzone(hour_dv, "dzDay");
        hour_dv.m_cls = this;
        hour_dv.date_cur = new Date(year, month-1, day, i, 0);
        hour_dv.onDragDrop = function(e)
        {
            //alib.dom.styleSet(this, "border", "1px solid black");
            var ev = this.m_cls.getEventFromArray(e.eid);

            var ts_start = new Date((ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start);
            var ts_end = new Date((ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end);

            var dif = ts_end.getTime() - ts_start.getTime();

            ev.time_start = calGetClockTime(this.date_cur);
            ev.date_start = new Date((this.date_cur.getMonth()+1)+"/"+this.date_cur.getDate()+"/"+this.date_cur.getFullYear());
            ev.start_block = (this.date_cur.getHours()*60) + this.date_cur.getMinutes();
            ts_start = this.date_cur;

            ts_end.setTime(this.date_cur.getTime() + dif);

            ev.time_end = calGetClockTime(ts_end);
            ev.date_end = new Date((ts_end.getMonth()+1)+"/"+ts_end.getDate()+"/"+ts_end.getFullYear());
            ev.end_block = (ts_end.getHours()*60) + ts_end.getMinutes();

            this.m_cls.redrawEvents();
            /*
            var args = [
                        ["time_start", ev.time_start],
                        ["time_end", ev.time_end],
                        ["date_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear()],
                        ["date_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear()]
                        ];
            */
            var args = [
                        ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                        ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                        ];
            this.m_cls.updateEvent(e.eid, args);
        }

        var hour_dv2 = alib.dom.createElement("div", this.m_events_day);
        hour_dv2.times = [time_2, time_3];
        hour_dv2.date_str= month+"/"+day+"/"+year;
        hour_dv2.calid = this.m_cid;
        hour_dv2.cls = this;
        var height = (alib.userAgent.webkit) ? height-2 : height;
        alib.dom.styleSet(hour_dv2, "height", height+"px");
        alib.dom.styleSet(hour_dv2, "border-top", "1px solid #cccccc");
        //alib.dom.styleSet(hour_dv2, "margin-left", "71px");
        hour_dv2.onmouseover = function()
        {
            this.style.backgroundColor = "#f1f1f1";
        }
        hour_dv2.onmouseout = function()
        {
            this.style.backgroundColor = "";
        }
        hour_dv2.ondblclick = function()
        {

            /*
            var vals = [['date_start', this.date_str], ['date_end', this.date_str], ['time_start', this.times[0]], ['time_end', this.times[1]], ['calid', this.calid]];

            calEventOpen(null, "top.Ant.getHinst('cal_browse').refresh()", vals)
            */


            var vals = [
                        ['ts_start', this.date_str + " " + this.times[0]], ['ts_end', this.date_str + " " + this.times[1]], 
                        ['calid', this.calid]
                       ];

            //loadObjectForm("calendar_event", null, null, null, vals);
            this.cls.loadEvent(null, vals);
        }

        DragAndDrop.registerDropzone(hour_dv, "dzDay");
        hour_dv.m_cls = this;
        hour_dv.date_cur = new Date(year, month-1, day, i, 30);
        hour_dv.onDragDrop = function(e)
        {
            //alib.dom.styleSet(this, "border", "1px solid black");
            var ev = this.m_cls.getEventFromArray(e.eid);

            var ts_start = new Date((ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start);
            var ts_end = new Date((ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end);

            var dif = ts_end.getTime() - ts_start.getTime();

            ev.time_start = calGetClockTime(this.date_cur);
            ev.date_start = new Date((this.date_cur.getMonth()+1)+"/"+this.date_cur.getDate()+"/"+this.date_cur.getFullYear());
            ev.start_block = (this.date_cur.getHours()*60) + this.date_cur.getMinutes();

            ts_end.setTime(this.date_cur.getTime() + dif);

            ev.time_end = calGetClockTime(ts_end);
            ev.date_end = new Date((ts_end.getMonth()+1)+"/"+ts_end.getDate()+"/"+ts_end.getFullYear());
            ev.end_block = (ts_end.getHours()*60) + ts_end.getMinutes();

            this.m_cls.redrawEvents();
            /*
            var args = [
                        ["time_start", ev.time_start],
                        ["time_end", ev.time_end],
                        ["date_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear()],
                        ["date_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear()]
                        ];
                        */
            var args = [
                        ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                        ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                        ];
            this.m_cls.updateEvent(e.eid, args);
        }
    }

    // Resize
    this.resize();

    // Add events
    this.populateDayEvents(year, month, day);
}

/**
 * Display the week view
 *
 * @param {int} year The year to load
 * @param {int} month The month to load
 * @param {int} day The day of today's date
 */
AntCalendarBrowse.prototype.renderWeek = function(year, month, day)
{
    this.bodyCon.innerHTML = "";
	this.viewToggler.select("week");
    
    var toolbarWeek = alib.dom.createElement("div", this.bodyCon);
    var displayWeek = alib.dom.createElement("div", this.bodyCon);
    
    this.saveSettings("default_view", "week");
    this.activeView = "week";

    // Get number of days in the current month
    var num_days = calGetMonthNumDays(year, month);

    // Todays date
    var todaydate=new Date() //DD added

    // Get start date
    var dateWeekStart = calGetWeekStartDate(year, month, day);
    var dateWeekEnd = calDateAddSubtract(dateWeekStart, "day", 6);
	//this.currentDate = dateWeekStart;

    // Make sure the events range is right
    //this.updateDateRange(dateWeekStart, dateWeekEnd);

    // Set navigator
    try
    {
        if (this.m_appclass && this.m_appclass.calNav)
            this.m_appclass.calNav(year, month, day, 'week');
    }
    catch(e){}

	// set label
    this.dateLabel.innerHTML = calGetMonthName(dateWeekStart.getMonth()+1) + " " + dateWeekStart.getDate() + ", " + dateWeekStart.getFullYear() +
                    " - " + calGetMonthName(dateWeekEnd.getMonth()+1) + " " + dateWeekEnd.getDate() + ", " + dateWeekEnd.getFullYear()
     
    // ----------------------------------------------------------------------------
    // Display weekview
    // ----------------------------------------------------------------------------
    var min_scale = this.min_scale; // px per minute

    // All Day
    // ------------------------------------------------------
    var addv = alib.dom.createElement("div", displayWeek);

    // Time
    // ------------------------------------------------------
    this.m_weekdaycolsad = new Array();

    // Headers
    var dy=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
    this.header_dv = alib.dom.createElement("div", displayWeek);
    alib.dom.styleSet(this.header_dv, "padding-top", "3px");
    alib.dom.styleSet(this.header_dv, "margin-left", "70px");
    alib.dom.styleSet(this.header_dv, "margin-right", alib.dom.getScrollBarWidth()+"px");
    
    var dateCur = new Date();
    dateCur = dateWeekStart;
    var tbl = alib.dom.createElement("table", this.header_dv);
    alib.dom.styleSet(tbl, "table-layout", "fixed");
    tbl.cellSpacing = 0;
    tbl.cellPadding = 0;
    alib.dom.styleSet(tbl, "width", "100%");
    alib.dom.styleSet(tbl, "border-bottom", "1px solid");
    var tbody = alib.dom.createElement("tbody", tbl);
    var tr1 = alib.dom.createElement("tr", tbody);
    var tr2 = alib.dom.createElement("tr", tbody);
    tr2.vAlign='top';
    for(s=0;s<7;s++)
    {
        var td = alib.dom.createElement("td", tr1);
        alib.dom.styleSet(td, "width", "14%");
        /*
        alib.dom.styleSet(td, "border-left", "1px solid");
        alib.dom.styleSet(td, "font-weight", "bold");
        alib.dom.styleSet(td, "padding", "3px");
        */

        var is_today = (todaydate.getFullYear()==dateCur.getFullYear() && todaydate.getMonth()==dateCur.getMonth() && todaydate.getDate()==dateCur.getDate())?1:0;
        alib.dom.styleSetClass(td, ((is_today)?"CalendarWeekColHdrToday":"CalendarWeekColHdr"));
        td.innerHTML = "<div style='float:right;'>"+dateCur.getDate()+"</div>" + dy[s];

        // Print All Day Cells
        var td2 = alib.dom.createElement("td", tr2);
        this.m_weekdaycolsad[s] = td2;
        alib.dom.styleSetClass(td2, "CalendarWeekColAllDay");
        alib.dom.styleSet(td2, "width", "14%");
        td2.date_cur = dateCur;
        td2.m_cls = this;
        DragAndDrop.registerDropzone(td2, "dzAllDay");
        td2.onDragDrop = function(e)
        {
            //alib.dom.styleSet(this, "border", "1px solid black");
            var ev = this.m_cls.getEventFromArray(e.eid);
            var days = calDaysBetweenDates(ev.date_start, ev.date_end);
            if (days > 0)
            {
                ev.date_start = this.date_cur;
                ev.date_end = calDateAddSubtract(this.date_cur, 'day', days);
            }
            else
            {
                ev.date_start = this.date_cur;
                ev.date_end = this.date_cur;
            }
            this.m_cls.redrawEvents();
            
            var args = [
                        ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                        ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                        ];
            this.m_cls.updateEvent(e.eid, args);
        }
        /*
        alib.dom.styleSet(td2, "border-left", "1px solid");
        alib.dom.styleSet(td2, "border-top", "1px solid");
        alib.dom.styleSet(td2, "padding-top", "8px");
        */

        dateCur = calDateAddSubtract(dateCur, 'day', 1);
    }

    // Time div height
    this.m_events_week = alib.dom.createElement("div", displayWeek);
    var cdv = this.m_events_week;
    alib.dom.styleSet(cdv, "height", "200px");
    alib.dom.styleSet(cdv, "position", "relative");
    alib.dom.styleSet(cdv, "overflow", "auto");

    var oD = new Date(year, month-1, 1); //DD replaced line to fix date bug when current day is 31st
    oD.od=oD.getDay()+1; //DD replaced line to fix date bug when current day is 31st

    var is_today=(year==todaydate.getFullYear() && month==todaydate.getMonth()+1 && day==todaydate.getDate())? 1 : 0;

    if (is_today)
    {
        var hrs = todaydate.getHours();
        var mins = todaydate.getMinutes();
        var pos = ((hrs*60) + mins)*min_scale;

        var sliderdv = alib.dom.createElement("div", cdv);
        alib.dom.styleSet(sliderdv, "position", "absolute");
        alib.dom.styleSet(sliderdv, "top", (pos-6)+"px");
        alib.dom.styleSet(sliderdv, "left", "65px");
        sliderdv.innerHTML = "<img src='/images/icons/tilde_alert.png' border='0'>";

        try
        {
            var bardv = alib.dom.createElement("div", cdv);
            alib.dom.styleSet(bardv, "height", "1px");
            alib.dom.styleSet(bardv, "width", (cdv.scrollWidth-90)+"px");
            alib.dom.styleSet(bardv, "background-color", "red");
            alib.dom.styleSet(bardv, "position", "absolute");
            alib.dom.styleSet(bardv, "top", pos+"px");
            alib.dom.styleSet(bardv, "left", "70px");
        }
        catch(e){}
    }

    // Populate times
    var time_left = alib.dom.createElement("div", cdv);
    alib.dom.styleSet(time_left, "float", "left");
    alib.dom.styleSet(time_left, "width", "70px");    
    for (var i = 0; i < 24; i++)
    {
        var name = (i < 12) ? (((i==0)?12:i) + " AM") : ((i==12)?i:i-12) + " PM";

        var time_dv = alib.dom.createElement("div", time_left);
        alib.dom.styleSet(time_dv, "height", ((min_scale*60)-1)+"px");
        alib.dom.styleSet(time_dv, "font-weight", "bold");
        alib.dom.styleSet(time_dv, "border-top", "1px solid #999999");
        time_dv.innerHTML = name;
    }

    // populate days and events
    var time_days = alib.dom.createElement("div", cdv);
    alib.dom.styleSet(time_days, "margin-left", "70px");

    var tbl = alib.dom.createElement("table", time_days);
    alib.dom.styleSet(tbl, "table-layout", "fixed");
    alib.dom.styleSet(tbl, "width", "100%");
    tbl.cellPadding = '0';
    tbl.cellSpacing = '0';
    var tbody = alib.dom.createElement("tbody", tbl);
    var trow = alib.dom.createElement("tr", tbody);
    this.m_weekdaycols = new Array();

    var dateCur = new Date();
    dateCur = dateWeekStart;

    for (var d = 0; d < 7; d++)
    {
        var td_day = alib.dom.createElement("td", trow);
        alib.dom.styleSetClass(td_day, "CalendarWeekCol");
        alib.dom.styleSet(td_day, "width", "14%");
        //alib.dom.styleSet(td_day, "border-left", "1px solid #333333");
        this.m_weekdaycols[d] = alib.dom.createElement("div", td_day);
        alib.dom.styleSet(this.m_weekdaycols[d], "width", "100%");
        alib.dom.styleSet(this.m_weekdaycols[d], "position", "relative");

        for (var i = 0; i < 24; i++)
        {
            var time_1 = (i < 12) ? (((i==0)?12:i) + ":00 AM") : ((i==12)?i:i-12) + ":00 PM";
            var time_2 = (i < 12) ? (((i==0)?12:i) + ":30 AM") : ((i==12)?i:i-12) + ":30 PM";
            var time_3 = ((i+1) < 12) ? ((((i+1)==0)?12:(i+1)) + ":00 AM") : (((i+1)==12)?(i+1):(i+1)-12) + ":00 PM";

            var hour_dv = alib.dom.createElement("div", td_day);
            var height = (alib.userAgent.webkit) ? min_scale*30 : (min_scale*30)-1;
            alib.dom.styleSet(hour_dv, "height", height+"px");
            alib.dom.styleSet(hour_dv, "border-top", "1px solid #999999");
            hour_dv.times = [time_1, time_2];
            hour_dv.date_str= (dateCur.getMonth()+1)+"/"+dateCur.getDate()+"/"+dateCur.getFullYear();
            hour_dv.calid = this.m_cid;
            hour_dv.cls = this;
            hour_dv.onmouseover = function()
            {
                this.style.backgroundColor = "#f1f1f1";
            }
            hour_dv.onmouseout = function()
            {
                this.style.backgroundColor = "";
            }
            hour_dv.ondblclick = function()
            {
                var vals = [
                            ['ts_start', this.date_str + " " + this.times[0]], ['ts_end', this.date_str + " " + this.times[1]], 
                            ['calid', this.calid]
                           ];
                this.cls.loadEvent(null, vals);
            }

            DragAndDrop.registerDropzone(hour_dv, "dzDay");
            hour_dv.m_cls = this;
            hour_dv.date_cur = new Date(dateCur.getFullYear(), dateCur.getMonth(), dateCur.getDate(), i, 0);
            hour_dv.onDragDrop = function(e)
            {
                var ev = this.m_cls.getEventFromArray(e.eid);

                var ts_start = new Date((ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start);
                var ts_end = new Date((ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end);

                var dif = ts_end.getTime() - ts_start.getTime();

                ev.time_start = calGetClockTime(this.date_cur);
                ev.date_start = new Date((this.date_cur.getMonth()+1)+"/"+this.date_cur.getDate()+"/"+this.date_cur.getFullYear());
                ev.start_block = (this.date_cur.getHours()*60) + this.date_cur.getMinutes();

                ts_end.setTime(this.date_cur.getTime() + dif);

                ev.time_end = calGetClockTime(ts_end);
                ev.date_end = new Date((ts_end.getMonth()+1)+"/"+ts_end.getDate()+"/"+ts_end.getFullYear());
                ev.end_block = (ts_end.getHours()*60) + ts_end.getMinutes();

                this.m_cls.redrawEvents();
               
                var args = [
                            ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                            ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                            ];
                this.m_cls.updateEvent(e.eid, args);
            }

            var hour_dv2 = alib.dom.createElement("div", td_day);
            var height = (alib.userAgent.webkit) ? height-2 : height;
            alib.dom.styleSet(hour_dv2, "height", height+"px");
            alib.dom.styleSet(hour_dv2, "border-top", "1px solid #cccccc");
            hour_dv2.times = [time_2, time_3];
            hour_dv2.date_str= (dateCur.getMonth()+1)+"/"+dateCur.getDate()+"/"+dateCur.getFullYear();
            hour_dv2.calid = this.m_cid;
            hour_dv2.cls = this;
            hour_dv2.onmouseover = function()
            {
                this.style.backgroundColor = "#f1f1f1";
            }
            hour_dv2.onmouseout = function()
            {
                this.style.backgroundColor = "";
            }
            hour_dv2.ondblclick = function()
            {
                var vals = [
                            ['ts_start', this.date_str + " " + this.times[0]], ['ts_end', this.date_str + " " + this.times[1]], 
                            ['calid', this.calid]
                           ];

                this.cls.loadEvent(null, vals);
            }

            DragAndDrop.registerDropzone(hour_dv2, "dzDay");
            hour_dv2.m_cls = this;
            hour_dv2.date_cur = new Date(dateCur.getFullYear(), dateCur.getMonth(), dateCur.getDate(), i, 30);
            hour_dv2.onDragDrop = function(e)
            {
                //alib.dom.styleSet(this, "border", "1px solid black");
                var ev = this.m_cls.getEventFromArray(e.eid);

                var ts_start = new Date((ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start);
                var ts_end = new Date((ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end);

                var dif = ts_end.getTime() - ts_start.getTime();

                ev.time_start = calGetClockTime(this.date_cur);
                ev.date_start = new Date((this.date_cur.getMonth()+1)+"/"+this.date_cur.getDate()+"/"+this.date_cur.getFullYear());
                ev.start_block = (this.date_cur.getHours()*60) + this.date_cur.getMinutes();

                ts_end.setTime(this.date_cur.getTime() + dif);

                ev.time_end = calGetClockTime(ts_end);
                ev.date_end = new Date((ts_end.getMonth()+1)+"/"+ts_end.getDate()+"/"+ts_end.getFullYear());
                ev.end_block = (ts_end.getHours()*60) + ts_end.getMinutes();

                this.m_cls.redrawEvents();

                var args = [
                            ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                            ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                            ];
                this.m_cls.updateEvent(e.eid, args);
            }
        }

        dateCur = calDateAddSubtract(dateCur, 'day', 1);
    }
 
    // Resize
    this.resize();

    // Add events
    this.populateWeekEvents(dateWeekStart.getFullYear(), dateWeekStart.getMonth()+1, dateWeekStart.getDate());
}

/**
 * Render the month view
 *
 * @param {int} year The year to render
 * @param {int} month The month to render
 */
AntCalendarBrowse.prototype.renderMonth = function(year, month)
{    
    this.bodyCon.innerHTML = "";
    this.saveSettings("default_view", "month");
	this.viewToggler.select("month");

	// Update current date if different than alread loaded month/year
	//if (this.currentDate.getFullYear() != year || (this.currentDate.getMonth()+1)!=month)
		//this.currentDate = new Date(year, month-1, 1);

    this.activeView = "month";

    var num_days = calGetMonthNumDays(year, month);

    // Make sure the events range is right
    //var actDayFrom = new Date(year, month-1, 1);
    //var actDayTo = new Date(year, month-1, num_days);
    //this.updateDateRange(actDayFrom, actDayTo);

    // cells for each day of the month
    this.m_monthdaycells = new Array();

    // Set minical navigator 
    try
    {
        if (this.m_appclass && this.m_appclass.calNav)
            this.m_appclass.calNav(year, month, 1, 'month');
    }
    catch(e){}

	// set label
    this.dateLabel.innerHTML = calGetMonthName(this.currentDate.getMonth()+1) + " " + this.currentDate.getFullYear();


    // --------------------------------------------------------------------------------------
    // Display monthview
    // --------------------------------------------------------------------------------------
    var dv = alib.dom.createElement("div", this.bodyCon);
    alib.dom.styleSet(dv, "margin-top", "3px");

    var dy=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
    

    var oD = new Date(year, month-1, 1); //DD replaced line to fix date bug when current day is 31st
    oD.od=oD.getDay()+1; //DD replaced line to fix date bug when current day is 31st

    var todaydate=new Date() //DD added
    var scanfortoday=(year==todaydate.getFullYear() && month==todaydate.getMonth()+1)? todaydate.getDate() : 0 //DD added

    var tbl = alib.dom.createElement("table", dv);
    tbl.id = "CalendarMonthMainTable";
    alib.dom.styleSet(tbl, "table-layout", "fixed");
    tbl.cellPadding = 0;
    tbl.cellSpacing = 0;
    
    alib.dom.styleSet(tbl, "width", "100%");
    alib.dom.styleSetClass(tbl, "CalendarMonthMainTable");    
    
    /*
    alib.dom.styleSet(tbl, "border-left", "1px solid");
    alib.dom.styleSet(tbl, "border-bottom", "1px solid");
    */
    var tbody = alib.dom.createElement("tbody", tbl);
	this.monthViewTbody = tbody;

    var headers_tr = alib.dom.createElement("tr", tbody);
    for(s=0;s<7;s++)
    {
        var td = alib.dom.createElement("td", headers_tr);
        alib.dom.styleSetClass(td, "CalendarMonthWeekdayHdr");
        td.innerHTML = dy[s];

    }
    var tr = alib.dom.createElement("tr", tbody);
    tr.vAlign = "top";
    var d = 0; // number of days
    this.m_monthnumrows = 1;
    for(i=1; i<=42; i++)
    {
        var x=((i-oD.od>=0)&&(i-oD.od<num_days))? i-oD.od+1 : '&nbsp;';

        var td = alib.dom.createElement("td", tr);
        alib.dom.styleSetClass(td, "CalendarMonthCell");
        alib.dom.styleSet(td, "width", "14%");
        alib.dom.styleSet(td, "overflow", "auto");
        var td_dv = alib.dom.createElement("div", td);                
        alib.dom.styleSet(td_dv, "overflow", 'hidden');    

    
        if (x != "&nbsp;")
        {
            var act_lnk = alib.dom.createElement("a");
            act_lnk.innerHTML = "+ add";
            act_lnk.href = "javascript:void(0);";
            alib.dom.styleSet(act_lnk, "text-decoration", "none");
            act_lnk.mvars = [['ts_start', month+"/"+x+"/"+year], ['ts_end', month+"/"+x+"/"+year], ['all_day', 't'], ['calendar', this.m_cid]];
            act_lnk.cls = this;
            act_lnk.onclick = function() 
            {
                this.cls.loadEvent(null, this.mvars);
            }

            this.m_monthdaycells[d] = td;
            d++;

            DragAndDrop.registerDropzone(td, "dzDays");
            td.m_cls = this;
            td.date_cur = new Date(year, month-1, x);
            td.onDragEnter = function(e)
            {
                //alib.dom.styleSet(this, "border", "1px solid red");
            }
            td.onDragExit = function(e)
            {
                //alib.dom.styleSet(this, "border", "1px solid black");
            }
            td.onDragDrop = function(e)
            {
                //alib.dom.styleSet(this, "border", "1px solid black");
                var ev = this.m_cls.getEventFromArray(e.eid);
                var days = calDaysBetweenDates(ev.date_start, ev.date_end);
                if (days > 0)
                {
                    ev.date_start = this.date_cur;
                    ev.date_end = calDateAddSubtract(this.date_cur, 'day', days);
                }
                else
                {
                    ev.date_start = this.date_cur;
                    ev.date_end = this.date_cur;
                }
                this.m_cls.redrawEvents();
                var args = [
                            ["ts_start", (ev.date_start.getMonth()+1)+"/"+ev.date_start.getDate()+"/"+ev.date_start.getFullYear() + " " + ev.time_start],
                            ["ts_end", (ev.date_end.getMonth()+1)+"/"+ev.date_end.getDate()+"/"+ev.date_end.getFullYear() + " " + ev.time_end]
                            ];
                this.m_cls.updateEvent(e.eid, args);
            }
        }
        else
            var act_lnk = null;

        // Header
        var hdv = alib.dom.createElement("div", td_dv);
        if (x==scanfortoday) //DD added
            alib.dom.styleSetClass(hdv, "CalendarMonthHdrToday");
        else
            alib.dom.styleSetClass(hdv, "CalendarMonthHdr");
        if (act_lnk)
        {
            var add = alib.dom.createElement("div");
            alib.dom.styleSet(add, "float", "right");
            hdv.appendChild(add);
            add.appendChild(act_lnk);
        }
        var lbl = alib.dom.createElement("span", hdv);
        if (x != "&nbsp;")
        {
            var a_daylnk = alib.dom.createElement("a", lbl);
            a_daylnk.innerHTML = x;
            a_daylnk.m_cls = this;
            a_daylnk.year = year;
            a_daylnk.month = month;
            a_daylnk.day = x;
            a_daylnk.href = "javascript:void(0)";
            a_daylnk.onclick = function()
            {
                this.m_cls.renderDay(this.year, this.month, this.day);
            }
        }
        else
            lbl.innerHTML = x;

        if(((i)%7==0)&&(d<num_days))
        {
            tr = alib.dom.createElement("tr", tbody);
            tr.vAlign = "top";
            this.m_monthnumrows++;
        }
        else if(((i)%7==0)&&(d>=num_days))
        {
            break;
        }
    }
    
    // Resize
    this.resize();

    // Populate events
    this.populateMonthEvents(year, month);
}

/**
 * Resize browser interface
 */
AntCalendarBrowse.prototype.resize = function()
{
	if (!this.inline)
	{
		var minus_height = (alib.userAgent.ie) ? 30 : 0;
		var height = (getWorkspaceHeight()-minus_height);		

		if (this.titleCon)
			height -= this.titleCon.offsetHeight;

		if (this.toolbarCon)
			height -= this.toolbarCon.offsetHeight;

		if (height > 0)
			alib.dom.styleSet(this.bodyCon, "height", (height-10)+"px");
	}

    switch (this.activeView)
    {
    case 'day':
        return this.resizeDay();
    case 'week':
        return this.resizeWeek();
    case 'month':
        return this.resizeMonth();
    case 'list':
        break;
    }
}

/**
 * Resize the month view elements
 */
AntCalendarBrowse.prototype.resizeMonth = function()
{
	if (!this.monthViewTbody)
		return;

    var height = alib.dom.getContentHeight(this.bodyCon) -5;

	// Get the height of the first row
	var bodyHeight = height - this.monthViewTbody.childNodes[0].offsetHeight;

	// Get the number of days rows in this month view
	var numRows = this.monthViewTbody.childNodes.length - 1; // minus month labels

	// Loop through rows skipping the first row
	for (var i = 1; i < this.monthViewTbody.childNodes.length; i++)
	{
		// Set the height of each cell
		for (var j in this.monthViewTbody.childNodes[i].childNodes)
		{
			try
			{
				if (this.monthViewTbody.childNodes[i].childNodes[j])
					alib.dom.styleSet(this.monthViewTbody.childNodes[i].childNodes[j], "height", (bodyHeight/numRows) + "px");
			}
			catch (e)
			{
				// Fail gracefully because the table nodes may not be loaded yet
			}
		}
	}
}

/**
 * Resize the week view elements
 */
AntCalendarBrowse.prototype.resizeWeek= function()
{
    var height = alib.dom.getContentHeight(this.bodyCon) - this.header_dv.offsetHeight;
    alib.dom.styleSet(this.m_events_week, "height", height+"px");    

    this.m_events_week.scrollTop = (this.m_events_week.scrollHeight/2)-(this.m_events_week.offsetHeight/2);
}


/**
 * Resize the day view elements
 */
AntCalendarBrowse.prototype.resizeDay = function()
{
    var height = alib.dom.getContentHeight(this.bodyCon) - this.header_dv.offsetHeight -20;

    alib.dom.styleSet(this.scrollTimedEvents, "height", height+"px");

    this.scrollTimedEvents.scrollTop = (this.scrollTimedEvents.scrollHeight/2)-(this.scrollTimedEvents.offsetHeight/2);
}

/*************************************************************************
*    Function:    populateDayEvents
*
*    Purpose:    Put events on the canvas (day, week, month)
**************************************************************************/
AntCalendarBrowse.prototype.populateDayEvents = function(year, month, day, tcon_num)
{
    var curDate = new Date(year, month-1, day);
    
    if (typeof tcon_num != "undefined")
    {
        var use_con = this.m_weekdaycols[tcon_num];
        var use_allday_con = this.m_weekdaycolsad[tcon_num];
    }
    else
    {
        var use_con = this.m_events_day;
        var use_allday_con = this.m_events_allday;
    }

    for (var i = 0 ; i < this.events.length; i++)
    {
        var ev = this.events[i];

        var fUse = false;
        var start_block = ev.start_block;
        var end_block = ev.end_block;

        if (ev.date_start.getTime() == ev.date_end.getTime() && ev.date_start.getTime() == curDate.getTime())
        {
            fUse = true;
        }
        else if (ev.date_start.getTime() <= curDate.getTime() && ev.date_end.getTime() >= curDate.getTime())
        {
            fUse = true;

            if (ev.date_start.getTime() != curDate.getTime())
                start_block = 0;
            if (ev.date_end.getTime() != curDate.getTime())
                end_block = 1440;
        }

        if (fUse)
        {
            if (ev.allDay)
            {
                var evdv = alib.dom.createElement("div", use_allday_con);
                //alib.dom.styleSet(evdv, "width", "98%"); // 2 hours
                alib.dom.styleSet(evdv, "background-color", "#"+ev.color);
                alib.dom.styleSet(evdv, "color", "#"+getColorTextForGroup(ev.color));
                alib.dom.styleSet(evdv, "padding", "3px");
                alib.dom.styleSet(evdv, "margin", "2px");
                alib.dom.styleSet(evdv, "overflow", "hidden");
                alib.dom.styleSet(evdv, "white-space", "nowrap");
                alib.dom.styleSet(evdv, "text-overflow", "ellipsis");
                alib.dom.styleSet(evdv, "cursor", "pointer"); // 2 hours
                evdv.innerHTML = ev.name;
                evdv.eid = ev.eid;
                evdv.calid = this.m_cid;                
                evdv.cls = this;
                evdv.onclick = function() 
                { 
                    this.cls.loadEvent(this.eid, [["calid", this.calid]]);
                    //loadObjectForm("calendar_event", this.eid, null, null, [["calid", this.calid]]); 
                }
                DragAndDrop.registerDragable(evdv, null, "dzAllDay"); // , null, "dzGroup1"
            }
            else
            {
                var height = (this.min_scale*(end_block-start_block - 1)); // Add 1 px for space
                if (height < this.min_scale*10)
                    height = 14;
                else if (height < 12)
                    height = 12;

                var det_htm = "<div style='overflow:hidden;height:100%;margin-left:3px;'><div style='font-weight:bold;margin-bottom:5px;'>" + ev.name + "</div>";
                if (ev.loc) det_htm += "<div>" + ev.loc + "</div>";
                if (ev.time_start) det_htm += "<div>" + ev.time_start + " - " + ev.time_end + "</div>";
                if (ev.notes) det_htm += "<div>" + ev.notes + "</div>";
                det_htm += "</div>";

                var wandm = this.getEventWidth(ev);
                var evdv = alib.dom.createElement("div", use_con);
                this.events[i].m_div = evdv;
                alib.dom.styleSet(evdv, "position", "absolute");
                alib.dom.styleSet(evdv, "top", (this.min_scale*start_block)+"px"); // 8 am - add +5 for the rounded borders
                alib.dom.styleSet(evdv, "left", "0px"); // 8 am - add +5 for the rounded borders
                alib.dom.styleSet(evdv, "height", height+"px"); // 2 hours  - subtract 1-px for the rounded borders
                alib.dom.styleSet(evdv, "width", wandm[0]+"%");
                if (wandm[1])
                    alib.dom.styleSet(evdv, "margin-left", wandm[1]+"%");
                alib.dom.styleSet(evdv, "background-color", "#"+ev.color);
                alib.dom.styleSet(evdv, "color", "#"+getColorTextForGroup(ev.color));
                alib.dom.styleSet(evdv, "cursor", "pointer"); // 2 hours
                evdv.innerHTML = det_htm;
                evdv.eid = ev.eid;
                evdv.calid = this.m_cid;
                //evdv.onclick = function() { calEventOpen(this.eid, "top.Ant.getHinst('cal_browse').refresh()", [["calid", this.calid]]); }
                evdv.cls = this;
                evdv.onclick = function() 
                { 
                    this.cls.loadEvent(this.eid, [["calid", this.calid]]);
                    //loadObjectForm("calendar_event", this.eid, null, null, [["calid", this.calid]]); 
                }            
                //ALib.Effect.round(evdv, 5);

                DragAndDrop.registerDragable(evdv, null, "dzDay"); // , null, "dzGroup1"
            }
        }
    }

    if (typeof tcon_num == "undefined")
        this.resizeDay();
}

/*************************************************************************
*    Function:    populateWeekEvents
*
*    Purpose:    Put events on the canvas (day, week, month)
**************************************************************************/
AntCalendarBrowse.prototype.populateWeekEvents= function(year, month, day)
{
    var dateCur = new Date(year, month-1, day);

    for(s=0;s<7;s++)
    {
        this.populateDayEvents(dateCur.getFullYear(), dateCur.getMonth()+1, dateCur.getDate(), s);
        
        dateCur = calDateAddSubtract(dateCur, 'day', 1);
    }

    this.resizeWeek();
}

/*************************************************************************
*    Function:    populateMonthEvents
*
*    Purpose:    Call populateMonthDayEvents for each day
**************************************************************************/
AntCalendarBrowse.prototype.populateMonthEvents= function(year, month)
{
    // Get number of days in the current month
    var num_days = calGetMonthNumDays(year, month);
    //var dateStart = new Date(year, month-1, 1);
    //var dateEnd = new Date(year, month-1, num_days);

    for(s=0;s<num_days;s++)
        this.populateMonthDayEvents(year, month, s+1, this.m_monthdaycells[s].childNodes.item(0), 3);

    //this.resizeMonth();
}

/*************************************************************************
*    Function:    populateMonthDayEvents
*
*    Purpose:    Put events on the canvas for the month view
**************************************************************************/
AntCalendarBrowse.prototype.populateMonthDayEvents = function(year, month, day, tcon, displayCount, dlg)
{
    var curDate = new Date(year, month-1, day);    
    var eventCount = 0;
    var moreCount = 0;
    
    for (var i = 0 ; i < this.events.length; i++)
    {
        var ev = this.events[i];
        var fUse = false;

        if (ev.date_start.getTime() == ev.date_end.getTime() && ev.date_start.getTime() == curDate.getTime())
            fUse = true;
        else if (ev.date_start.getTime() <= curDate.getTime() && ev.date_end.getTime() >= curDate.getTime())
            fUse = true;

        if (fUse)
        {
            if(eventCount<displayCount)
            {
                eventCount++;
                var evhtml = ((!ev.allDay)?ev.time_start + " ":'') + "<span style='background-color:#" + ev.color  +"'>&nbsp;</span> " + ev.name;

                var evdv = alib.dom.createElement("div", tcon);
                ev.m_div = evdv;
                alib.dom.styleSet(evdv, "padding", "2px");
                alib.dom.styleSet(evdv, "overflow", "hidden");
                alib.dom.styleSet(evdv, "text-overflow", "ellipsis");
                alib.dom.styleSet(evdv, "white-space", "nowrap");
                alib.dom.styleSet(evdv, "cursor", "pointer");
                alib.dom.styleSet(evdv, "border-left", "3px solid #"+ev.color);                
                evdv.innerHTML = ((!ev.allDay)?ev.time_start + " ":'') +  ev.name;
                evdv.eid = ev.eid;
                evdv.calid = this.m_cid;
                evdv.cls = this;                
                evdv.onclick = function() 
                {
                    if(dlg)
                        dlg.hide();
                    this.cls.loadEvent(this.eid, [["calid", this.calid]]); 
                }
                DragAndDrop.registerDragable(evdv, null, "dzDays");
            }
            else
                moreCount++;
        }
    }
    
    if(moreCount > 0)
    {
        var evdv = alib.dom.createElement("div", tcon);
        ev.m_div = evdv;
        alib.dom.styleSet(evdv, "padding", "2px");
        alib.dom.styleSet(evdv, "overflow", "hidden");
        alib.dom.styleSet(evdv, "text-overflow", "ellipsis");
        alib.dom.styleSet(evdv, "white-space", "nowrap");
        alib.dom.styleSet(evdv, "cursor", "pointer");        
        evdv.innerHTML = "[Show all events]";        
        evdv.cls = this;        
        evdv.onclick = function() // show all calendar events for this day in modal window
        {
            var totalEvents = moreCount + displayCount;
            var dateTitle = calGetMonthName(month) + " " + day + ", " + year + " - " + totalEvents + " events";
            var dlg = new CDialog(dateTitle);
            var divModal = alib.dom.createElement("div");
            
            this.cls.populateMonthDayEvents(year, month, day, divModal, totalEvents, dlg);
            
            dlg.f_close = true;
            dlg.customDialog(divModal, 450);
        }                    
    }
}

/*************************************************************************
*    Function:    getEventWidth
*
*    Purpose:    Get the width of an event and adjust for overlapping
**************************************************************************/
AntCalendarBrowse.prototype.getEventWidth = function(evnt)
{
    var width = 100;
    var overlapping = 1;
    var margin = 0;
    var arrEvents = new Array();
    for (var i = 0 ; i < this.events.length; i++)
    {
        var ev = this.events[i];

        if (ev.ts_start.getTime() <= evnt.ts_start.getTime() && ev.ts_end.getTime() > evnt.ts_start.getTime() && ev.eid!=evnt.eid)
        {
            overlapping+=1;
            arrEvents[arrEvents.length] = ev;
        }
    }

    for (var i = 0; i < arrEvents.length; i++)
    {
        var ev = arrEvents[i];

        if (ev.m_div)
        {
            width = 100/overlapping;

            var evdv = ev.m_div;
            alib.dom.styleSet(evdv, "width", width+"%");
            if (margin)
                alib.dom.styleSet(evdv, "margin-left", margin+"%");

            margin = margin + width;
        }
    }

    return [width, margin];
}

/*************************************************************************
*    Function:    redrawEvents
*
*    Purpose:    Redraw events for the current view
**************************************************************************/
AntCalendarBrowse.prototype.redrawEvents = function()
{
    switch (this.activeView)
    {
    case 'day':
        this.renderDay(this.currentDate.getFullYear(), this.currentDate.getMonth()+1, this.currentDate.getDate());
        break;
    case 'week':
        this.renderWeek(this.currentDate.getFullYear(), this.currentDate.getMonth()+1, this.currentDate.getDate());
        break;
    case 'month':
        this.renderMonth(this.currentDate.getFullYear(), this.currentDate.getMonth()+1);
        break;
    }
}

/*************************************************************************
*    Function:    updateDateRange
*
*    Purpose:    Make sure we are within our already established date range
**************************************************************************/
AntCalendarBrowse.prototype.updateDateRange = function(date_from, date_to)
{
    if (date_from.getTime() < this.eventsRangeFrom.getTime() || date_to.getTime() > this.eventsRangeTo.getTime())
    {
        var activeDate = new Date(this.currentDate.getFullYear(), this.activeMonth-1, this.currentDate.getDate());
        this.eventsRangeFrom = calDateAddSubtract(activeDate, 'day', -31);
        this.eventsRangeTo = calDateAddSubtract(activeDate, 'day', 31);

        this.refresh();
    }
}

/**
 * Refresh events and other data
 */
AntCalendarBrowse.prototype.refresh = function()
{
    var from = (this.eventsRangeFrom.getMonth()+1)+"/"+this.eventsRangeFrom.getDate()+"/"+this.eventsRangeFrom.getFullYear();
    var to = (this.eventsRangeTo.getMonth()+1)+"/"+this.eventsRangeTo.getDate()+"/"+this.eventsRangeTo.getFullYear();

    this.getEvents(from, to);
}

/**
 * Set this browser to refresh automatically
 *
 * @public
 * @param {number} interval The interval to refresh, if < 1 (0 or null) then disable
 * @this {AntObjectBrowser}
 */
AntCalendarBrowse.prototype.setAutoRefresh = function(interval)
{	
	if (!interval)
	{
		clearTimeout(this.refreshTimer);
		this.refreshTimer = null;
	}

	if (!this.refreshTimer && interval)
	{
		var cls = this;
		this.refreshTimer = setTimeout(function() { cls.refresh(); }, this.refreshInterval);
	}
}


/**
 * Get the events from the backend
 *
 * Will use this.currentDate and pull all events for the currently selected month/year
 */
AntCalendarBrowse.prototype.getEvents = function(date_start, date_end)
{

    if (this.m_timer)
        clearTimeout(this.m_timer);

	// Get start date = first of month - 7 days into previous month
	var startDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth(), -6);
	var date_start = (startDate.getMonth()+1)+"/" + startDate.getDate() + "/"+ startDate.getFullYear();

	// Get end date = last of month + days into next month
	var endDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth()+1, 7);
	var date_end = (endDate.getMonth()+1)+"/" + endDate.getDate() + "/" + endDate.getFullYear();

    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        this.cbData.cls.events = new Array();

        if (ret.objects.length)
        {
            for(event in ret.objects)
            {
                var currentEvent = ret.objects[event];
                
                var event_id = currentEvent["id"];
                var event_rid = currentEvent["recur_id"];
                var event_name = currentEvent["name"];
                var color = currentEvent["color"];
                var ts_start = currentEvent["ts_start"];
                var ts_end = currentEvent["ts_end"];
                var event_calid = currentEvent["calendar"]["key"];
                var loc = currentEvent["location"];
                var notes = currentEvent["notes"];

                var date_start = new Date(ts_start);
                var date_end = new Date(ts_end);
                
                var m = this.cbData.cls.events.length;
                this.cbData.cls.events[m] = new Object();
                this.cbData.cls.events[m].date_start = new Date((date_start.getMonth()+1)+"/"+date_start.getDate()+"/"+date_start.getFullYear());
                this.cbData.cls.events[m].date_end = new Date((date_end.getMonth()+1)+"/"+date_end.getDate()+"/"+date_end.getFullYear());
                this.cbData.cls.events[m].start_block = (date_start.getHours()*60) + date_start.getMinutes();
                this.cbData.cls.events[m].end_block = (date_end.getHours()*60) + date_end.getMinutes(); 
                this.cbData.cls.events[m].time_start = calGetClockTime(date_start);
                this.cbData.cls.events[m].time_end = calGetClockTime(date_end);
                this.cbData.cls.events[m].allDay = (currentEvent["all_day"]=='t') ? true : false;
                this.cbData.cls.events[m].name = unescape(event_name);
                this.cbData.cls.events[m].loc = unescape(loc);
                this.cbData.cls.events[m].notes = unescape(notes);
                this.cbData.cls.events[m].eid = event_id;
                this.cbData.cls.events[m].recud_id = event_rid;
                this.cbData.cls.events[m].color = this.cbData.cls.getCalendarColor(event_calid);
                this.cbData.cls.events[m].ts_start = date_start;
                this.cbData.cls.events[m].ts_end = date_end;
            }
        }
        
        this.cbData.cls.redrawEvents();
    };
    
    var args = new Array();

    // Set date range to current month
    var ccount = 1;
    args[args.length] = ["conditions[]", ccount];
    args[args.length] = ["condition_blogic_"+ccount, "and"];
    args[args.length] = ["condition_fieldname_"+ccount, "ts_start"];
    args[args.length] = ["condition_operator_"+ccount, "is_greater_or_equal"];
    args[args.length] = ["condition_condvalue_"+ccount, date_start];
    ccount = 2;
    args[args.length] = ["conditions[]", ccount];
    args[args.length] = ["condition_blogic_"+ccount, "and"];
    args[args.length] = ["condition_fieldname_"+ccount, "ts_end"];
    args[args.length] = ["condition_operator_"+ccount, "is_less_or_equal"];
    args[args.length] = ["condition_condvalue_"+ccount, date_end];

    // Set calendars
    if (this.m_cid)
    {
        ccount++;
        args[args.length] = ["conditions[]", ccount];
        args[args.length] = ["condition_blogic_"+ccount, "and"];
        args[args.length] = ["condition_fieldname_"+ccount, "calendar"];
        args[args.length] = ["condition_operator_"+ccount, "is_equal"];
        args[args.length] = ["condition_condvalue_"+ccount, this.m_cid];
    }
    else if (this.calendars)
    {
        var blogic = "and";
        for(calendar in this.calendars)
        {
            var currentCalendar = this.calendars[calendar];
            
            ccount++;
            args[args.length] = ["conditions[]", ccount];
            args[args.length] = ["condition_blogic_"+ccount, blogic];
            args[args.length] = ["condition_fieldname_"+ccount, "calendar"];
            args[args.length] = ["condition_operator_"+ccount, "is_equal"];
            args[args.length] = ["condition_condvalue_"+ccount, currentCalendar.id];
            
            if(blogic=="and")
                blogic = "or";
        }
    }

    args[args.length] = ["obj_type", "calendar_event"];
    args[args.length] = ["limit", "1000"]; // Load a maximum of 1000 events per month
    ajax.exec("/controller/Calendar/getEvents", args);
}

/*************************************************************************
*    Function:    getEventFromArray
*
*    Purpose:    pull an event out of the array by id
**************************************************************************/
AntCalendarBrowse.prototype.getEventFromArray = function(id)
{
    for (var i = 0; i < this.events.length; i++)
    {
        if (this.events[i].eid == id)
            return this.events[i];
    }

    return false;
}

/*************************************************************************
*    Function:    getColorTextForGroup
*
*    Purpose:    Get associated text color for group
**************************************************************************
AntCalendarBrowse.prototype.getColorTextForGroup = function(color)
{
    var ret = "000000";
    for (var j = 0; j < G_GROUP_COLORS.length; j++)
    {
        if (G_GROUP_COLORS[j][1] == color)
            ret = G_GROUP_COLORS[j][2];
    }

    return ret;
}
*/

/*************************************************************************
*    Function:    updateEvent
*
*    Purpose:    Update an event
**************************************************************************/
AntCalendarBrowse.prototype.updateEvent = function(eid, args)
{
    // Set defaults
    this.settings.defaultView = "day";
      
    args[args.length] = ["eid", eid];
    args[args.length] = ["save_type", "this_event"];
    args[args.length] = ["only_defined", "true"];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            ALib.statusShowAlert("Event Updated!", 3000, "bottom", "right");
        }

		// Delay refresh for 1 second because we are
		// working with almost real-time indexes (elasticsearch) now
		var bcls = this.cls;
		setTimeout(function(){ bcls.refresh(); }, 1000);
        //this.cls.refresh(); 
    };
    ajax.exec("/controller/Calendar/saveEvent", args);
}

/**
 * Get calendar color
 *
 * @param int calid the id of the calendar to get the color for
 */
AntCalendarBrowse.prototype.getCalendarColor = function(calid)
{
    var color = "eeeeee";

    for(calendar in this.calendars)
    {
        var currentCalendar = this.calendars[calendar];
        
        if (currentCalendar.id == calid && currentCalendar.color)
            color = currentCalendar.color;
    }

    return color;
}


/**
 * Set AntView class for managing pages and views
 */
AntCalendarBrowse.prototype.setAntView = function(parentView)
{
    this.antView = parentView;
    this.antView.setViewsSingle(true);
	this.antView.options.cal = this;
	this.antView.onresize = function()
	{
		this.options.cal.resize();
	}

	// Add auto-refresh when displayed and clear when hidden - every minute
	this.antView.on("show", function(opts) { opts.cls.setAutoRefresh(1000*60); }, { cls:this });
	this.antView.on("hide", function(opts) { opts.cls.setAutoRefresh(null); }, { cls:this });


    var viewItem = this.antView.addView("calendar_event:[id]", {});
	viewItem.options.obj_type = "calendar_event";
	viewItem.options.bwserCls = this;
	viewItem.options.loadLoaded = null;
	viewItem.render = function() { }
	viewItem.onshow = function()  // draws in onshow so that it redraws every time
	{ 
		this.con.innerHTML = "";
		this.title = ""; // because objects are loaded in the same view, clear last title

		var ol = new AntObjectLoader(this.options.obj_type, this.variable);
		ol.setAntView(this);

        // Set associations and values
        if (this.options.params)
        {
            for (var i = 0; i < this.options.params.length; i++)
            {
                ol.setValue(this.options.params[i][0], this.options.params[i][1]);
            }
        }

		ol.print(this.con);
		ol.cbData.antView = this;
		ol.cbData.bwserCls = this.options.bwserCls;
		ol.onClose = function() 
		{ 
			this.cbData.antView.options.lastLoaded = this.mainObject.id; // Set so this form reloads to new form if newly saved id
			this.cbData.bwserCls.refresh(); 
			this.cbData.antView.goup(); 
		}
		ol.onRemove = function() { this.cbData.bwserCls.refresh(); }

		this.options.lastLoaded = this.variable;
	};
	this.eventView = viewItem;
}

/**
 * Load an event by id
 */
AntCalendarBrowse.prototype.loadEvent = function(oid, params)
{
    if (this.antView)
    {
		if (this.eventView && params)
			this.eventView.options.params = (params) ? params : new Object();

		if (oid == null) oid = ""; // convert null to an empty string
        this.antView.navigate("calendar_event:"+oid);
    }
    else if (this.outerCon)
    {
        var oldScrollTop = alib.dom.getScrollPosTop(); // this.browserCon.scrollTop;
        
        alib.dom.styleSet(this.mainCon, "display", "none");
        var objfrmCon = alib.dom.createElement("div", this.outerCon);
        objfrmCon.cls = this;
        objfrmCon.oldScrollTop = oldScrollTop;
        objfrmCon.close = function()
        {                        
            this.style.display = "none";
            alib.dom.styleSet(this.cls.mainCon, "display", "block");
            objfrmCon.cls.outerCon.removeChild(this);
            alib.dom.setScrollPosTop(this.oldScrollTop);
        }

        // Print object loader 
        var ol = new AntObjectLoader("calendar_event", oid);
            
        // Set associations and values
        if (params)
        {
            for (var i = 0; i < params.length; i++)
            {
                ol.setValue(params[i][0], params[i][1]);
            }
        }
            
        // Use ol.print only for default               
        ol.print(objfrmCon);
        
        ol.objfrmCon = objfrmCon;
        ol.objBrwsrCls = this;
        ol.onClose = function()
        {                    
            this.objfrmCon.close();
        }
        if (!this.preview)
        {
            ol.onSave = function()
            {                
                this.objBrwsrCls.refresh();
            }
        }
        ol.onRemove = function()
        {
            this.objBrwsrCls.refresh();
        }
    }
    else
    {
        loadObjectForm("calendar_event", oid, null, null, params);
    }
}

/**
* @fileOverview AntFsBrowser is used to browse the online file system in ANT
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2003-2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of AntFsBrowser
 *
 * @constructor
 * @parma {string} path Optional path to load. %userdir% will be loaded by default.
 */
function AntFsBrowser(path)
{
	/**
	 * The current path loaded/to load
	 *
	 * @private
	 * @var {string} currentPath
	 */
    this.currentPath = (typeof path != "undefined") ? path : "%userdir%";

	/**
	 * Browser is printed inline inslide an object form
	 *
	 * @private
	 * @var {bool} inline
	 */
	this.inline = false;

	/**
	 * List of AntObjectBrowserItem(s)
	 *
	 * @var {AntObjectBrowserItem[])
	 */
	this.objectList = new Array();

	/**
	 * Outer div for the whole browser
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.browserCon = null;

	/**
	 * Div container for the title
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.titleCon = null;

	/**
	 * Div container for the body of this browser
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.bodyCon = null;

	/**
	 * Div container for the toolbar
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.toolbarCon = null;

	/**
	 * Div container for pagination and number of objects display
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.objectListConNav = null;

	/**
	 * Div container for files and folders
	 *
	 * @private
	 * @var {DOMElement}
	 */
	this.objectListCon = null;

	/**
	 *Table and tbody for holding list of objects
	 *
	 * @var {DOMElement}
	 */
	this.listTable = null;
	this.listTableBody = null;
}

/**
 * Print the full main browser into con
 *
 * @public
 * @param {DOMElement} con The container to print this browser into
 */
AntFsBrowser.prototype.print = function(con)
{
	this.browserCon = alib.dom.createElement("div", con);

	this.titleCon = alib.dom.createElement("div", this.browserCon);
	this.titleCon.className = "objectLoaderHeader";
	if (this.antView)
		this.antView.getTitle(this.titleCon);
	else
		this.setTitle("Browse Files &amp; Documents");
	this.bodyCon = alib.dom.createElement("div", this.browserCon);
	this.bodyCon.className = "objectLoaderBody";

	// Create toolbar
	this.toolbarCon = alib.dom.createElement("div", this.bodyCon);

	var tb = new CToolbar();

	var button = alib.ui.Button("<img src='/images/icons/refresh_" + ((this.inline) ? "10" : "12") + ".png' />", {
		className:(this.inline) ? "b1 grCenter medium" : "b1 grCenter", tooltip:"Refresh", cls:this, 
		onclick:function() {this.cls.refresh(); }
	});
	tb.AddItem(button.getButton(), "left");
	
	tb.print(this.toolbarCon);

	this.objectListConNav = alib.dom.createElement("div", this.bodyCon);
	this.objectListCon = alib.dom.createElement("div", this.bodyCon);

	this.loadDirectory();
}

/**
 * Print a minimalized version of the browser for inclusion in object forms
 *
 * @public
 * @param {DOMElement} con The container to print this browser into
 */
AntFsBrowser.prototype.printInline = function(con)
{
}

/**
 * Display file/folder selection dialog. This will call onSelect(fid, label).
 *
 * @public
 * @this {AntFsBrowser}
 * @param {string} type May be "file" (default if blank) or "folder"
 * @param {CDialog} parent_dlg Optional parent dialog for module usage.
 */
AntFsBrowser.prototype.displaySelect = function(type, parent_dlg)
{
}

/**
 * Callback used once a user selects a file in selector mode
 *
 * Depending on the mode, fid and name could either be a file
 * or a folder.
 *
 * @public
 * @this {AntFsBrowser}
 * @param {int} fid The unique id of either the file or the folder.
 * @param {string} name The name of the file or folder selected.
 */
AntFsBrowser.prototype.onselect = function(fid, name)
{
}

/**
 * Set the header title
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} title The title string
 */
AntFsBrowser.prototype.setTitle = function(title)
{
	if (this.titleCon)
		this.titleCon.innerHTML = title;
}

/**
 * Resize the browser. This is mostly important in preview mode where 100% height is set.
 *
 * @public
 * @this {AntObjectBrowser}
 */
AntFsBrowser.prototype.resize = function()
{
	if (!this.inline)
	{
		var minus_height = (alib.userAgent.ie) ? 30 : 0;
		var height = (getWorkspaceHeight()-minus_height);		

		if (this.titleCon)
			height -= this.titleCon.offsetHeight;

		if (this.toolbarCon)
			height -= this.toolbarCon.offsetHeight;


		if (height > 0)
			this.m_wfresults.setHeight((height - 10) + "px");
	}
}

/**
 * Load objects into browser
 *
 * @public
 * @this {AntFsBrowser}
 * @param {number} offset The offset to start displaying. If null, then start at 0
 * @param {bool} update If set to true, then only load id and revision, not the rest of the data
 */
AntFsBrowser.prototype.loadDirectory= function(offset, update)
{
	if (typeof offset == "undefined")
		var offset = 0;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(resp)
	{
		this.cbData.cls.totalNum = resp.totalNum;

		// Load folders
		for (var i = 0; i < resp.folders.length; i++)
		{
			this.cbData.cls.populateFolder(resp.folders[i]);
		}

		// Load files
		for (var i = 0; i < resp.files.length; i++)
		{
			this.cbData.cls.populateFile(resp.files[i]);
		}

		//this.cbData.cls.onLoad();
	};

	// Set basic query vars
	var args = [["offset", this.offset], ["limit", 250], ["path", this.currentPath]];

	// Add conditions
	/*
	for (var i = 0; i < this.conditions.length; i++)
	{
		var cond = this.conditions[i];

		args[args.length] = ["conditions[]", i];
		args[args.length] = ["condition_blogic_"+i, cond.blogic];
		args[args.length] = ["condition_fieldname_"+i, cond.fieldName];
		args[args.length] = ["condition_operator_"+i, cond.operator];
		args[args.length] = ["condition_condvalue_"+i, cond.condValue];
	}
	*/
	
	// Get order by
	/*
	for (var i = 0; i < this.sortOrder.length; i++)
	{
		args[args.length] = ["order_by[]", this.sortOrder[i].fieldName+" "+this.sortOrder[i].order];
	}
	*/

	ajax.exec("/controller/AntFs/readFolder", args, this.async);
}

/**
 * Load folders intodirectory 
 *
 * @public
 * @this {AntFsBrowser}
 */
AntFsBrowser.prototype.loadDirFolders = function()
{
	// Get folder list
	// ---------------------------------
	var fldrList = new AntObjectList("folder");
	fldrList.cbData.antFsB = this;
	fldrList.onLoad = function()
	{
		this.cbData.antFsB.populateFolders(this);
	}
	fldrList.getObjects();

	// Get file list
	// ---------------------------------
	var fileList = new AntObjectList("file");
	fileList.cbData.antFsB = this;
	fileList.onLoad = function()
	{
		this.cbData.antFsB.populateFiles(this);
	}
	fileList.getObjects();
}

/**
 * Load files into directory
 *
 * @public
 * @this {AntFsBrowser}
 * @param {number} offset The offset to start displaying. If null, then start at 0
 * @param {bool} update If set to true, then only load id and revision, not the rest of the data
 */
AntFsBrowser.prototype.loadDirFiles = function(offset, update)
{
	if (this.skipLoad) // skip first time
	{
		this.skipLoad = false;
		return;
	}

	if (typeof offset != "undefined" && offset != null)
	{
		if (offset != this.lastOffset)
		{
			var update = false;
			this.firstLoaded = false;
		}

		this.lastOffset = offset;
	}
	else
	{
		this.lastOffset = 0;
		offset = 0;
	}

	if (!update)
    {
        //this.objectListCon.innerHTML = "<div class='loading'></div>";
    }		

	// Get file list
	// ---------------------------------
	var fileList = new AntObjectList("file");
	fileList.cbData.antFsB = this;
	fileList.onLoad = function()
	{
		this.cbData.antFsB.populateFiles(this);
	}
	fileList.getObjects();
}

/**
 * Populate folders into the browser table
 *
 * @param AntObjectList list The populated list of folder objects
 */
AntFsBrowser.prototype.populateFolder = function(folderData)
{
	var dv = alib.dom.createElement("div", this.objectListCon);
	/*
	alib.dom.styleSet(dv, "border-bottom", "1px solid red");
	alib.dom.styleSet(dv, "margin-bottom", "20px");
	//dv.innerHTML = JSON.stringify(folderData);
	dv.innerHTML = folderData.id + " - " + folderData.name;
	*/

	if (!this.m_listTable)
	{
		// Setup the containing table
		this.m_listTable = alib.dom.createElement("table", this.objectListCon);
		alib.dom.styleSetClass(this.m_listTable, "aobListTable");
		this.m_listTable.cellPadding = 0;
		this.m_listTable.cellSpacing = 0;
		this.m_listTableBody = alib.dom.createElement("tbody", this.m_listTable);

		// Print headers
		/*
		if (this.viewmode == "table")
		{
			var rw = alib.dom.createElement("tr", this.m_listTableBody);

			var sel_all = alib.dom.createElement("input");
			sel_all.type = "checkbox";
			sel_all.cls = this;
			sel_all.onclick = function() { this.cls.fAllSelected = this.checked; this.cls.toggleSelectAll(); }
			if (!this.hideCheckbox)
			{
				var th = alib.dom.createElement("th", rw);
				alib.dom.styleSet(th, "text-align", "center");
				alib.dom.styleSet(th, "padding-left", "0px");
				alib.dom.styleSet(th, "padding-right", "5px");
				th.appendChild(sel_all);
			}

			// Add static id header
			//var th = alib.dom.createElement("th", rw, "ID");

			// Now add the rest of the fields
			for (var j = 0; j < this.view_fields.length; j++)
			{
				var fld_def = this.mainObject.getFieldByName(this.view_fields[j].fieldName);
				var th = alib.dom.createElement("th", rw, fld_def.title);
			}

		}
		*/
	}

	folderData.isBrowse = true;
	var objListItem = new AntObjectBrowserItem(folderData, this);
	objListItem.print(this.m_listTableBody);
}

/**
 * Populate files into the browser table
 *
 * @param AntObjectList list The populated list of file objects
 */
AntFsBrowser.prototype.populateFile = function(fileData)
{
	var dv = alib.dom.createElement("div", this.objectListCon);
	alib.dom.styleSet(dv, "border-bottom", "1px solid blue");
	alib.dom.styleSet(dv, "margin-bottom", "20px");
	//dv.innerHTML = JSON.stringify(fileData);
	dv.innerHTML = fileData.id + " - " + fileData.name;
}

/**
* @fileOverview AntFsOpen is used to select files or folders
*
*	Usage:		// Select a folder
*				var mydiv = alib.dom.createElement("div", document.body);
*				var cbrowser = new AntFsOpen();
*				cbrowser.filterType = "folder"; // can be set to file or folder
*				cbrowser.cbvalues.div = mydiv; 	// cbvalues is used to store callback specific data
*				cbrowser.onSelect = function(fid, name, path)
*				{
*					this.cbvalues.div.innerHTML = fid + " - " + name + " @ " + path;
*				}
*				cbrowser.showDialog(); // open model browser
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2003-2012 Aereus Corporation. All rights reserved.
*/

var g_AntFsBrLastLoc = null;

/**
 * Creates an instance of AntFsOpen
 *
 * @constructor
 * @parma {string} path Optional path to load. %userdir% will be loaded by default.
 */
function AntFsOpen()
{
	this.filterType = null;				// Objects to view (file types or folder)
	this.currentPath = "%userdir%";
	this.currentFolderId = null;		// The current folder id (for selecting)
	this.root_folderid = null;
	this.dirUserId = null;				// Each time a directory is loaded the current user is populated for the upload tool
	this.strTitle = "";
	this.root_name = "";				// Store the actual name of current root, is returned from readfolder

	/**
	 * Buffer to store for properties for callback functions
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();
    
    if(g_AntFsBrLastLoc)
        this.currentPath = g_AntFsBrLastLoc;
}

/**
 * Display the file browser
 */
AntFsOpen.prototype.showDialog = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;
	if (this.strTitle)
		var title = this.strTitle;
	else
		var title = (this.filterType == "folder") ? "Select Folder" : "Select File(s)";
	this.m_dlg = new CDialog(title, this.parentDlg);
	this.m_dlg.f_close = true;
	var dlg = this.m_dlg;

	var dv = alib.dom.createElement("div");

	// toolbar
	// ---------------------------------------------------------
	var tbdiv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(tbdiv, "margin", "3px 0 3px 0");
	
	// Search Bar Containers
    var divSearchCon = alib.dom.setElementAttr(alib.dom.createElement("div", tbdiv), [["innerHTML", "Find: "]]);
    var divValueCon = alib.dom.createElement("div", tbdiv);
    var spanContainer = alib.dom.createElement("span", divSearchCon);    
    this.m_txtSearch = alib.dom.createElement("input", spanContainer);
    
    var btn = new CButton("Search", function(cls) {  cls.loadDirectory(); }, [this], "b1");
    btn.print(divSearchCon);
    
    // Style Set
    alib.dom.styleSet(divSearchCon, "float", "right");    
    alib.dom.styleSet(this.m_txtSearch, "width", "150px");
    alib.dom.styleSet(this.m_txtSearch, "marginRight", "5px");
    alib.dom.styleSet(this.m_txtSearch, "paddingRight", "25px");
    alib.dom.styleSet(divValueCon, "cursor", "pointer");
    spanContainer.className = "clearIcon";
    
    // span icon
    var spanIcon = alib.dom.createElement("span", spanContainer);
    spanIcon.className = "deleteicon";
    alib.dom.styleSet(spanIcon, "visibility", "hidden");
    alib.dom.styleSet(spanIcon, "right", "10px");
    
    // span icon onclick
    spanIcon.cls = this;
    spanIcon.textSearch = this.m_txtSearch;
    spanIcon.onclick = function()
    {
        this.textSearch.value = "";
        this.textSearch.focus();
        alib.dom.styleSet(this, "visibility", "hidden");
        this.cls.loadDirectory();
    }
    
    this.m_txtSearch.spanIcon = spanIcon;
    this.m_txtSearch.m_cls = this;
	this.m_txtSearch.onkeyup = function(e)
	{
		if (typeof e == 'undefined') 
		{
			if (ALib.m_evwnd)
				e = ALib.m_evwnd.event;
			else
				e = window.event;
		}

		if (typeof e.keyCode != "undefined")
			var code = e.keyCode;
		else
			var code = e.which;

		if (code == 13) // keycode for a return
		{
			this.m_cls.loadDirectory();
		}
        
        if(this.value.length > 0)
            alib.dom.styleSet(this.spanIcon, "visibility", "visible");
        else
            alib.dom.styleSet(this.spanIcon, "visibility", "hidden");
	}

	// Actions
	if (this.filterType != "folder") // Select folder
	{
		var btn = new CButton("Upload File(s)", function(cls) {  cls.uploadFiles(); }, [this], "b2");
		btn.print(tbdiv);
	}
	var btn = new CButton("Create New Folder", function(cls) {  cls.createNewFolder(); }, [this], "b1");
	btn.print(tbdiv);

	
	// Path
	// ---------------------------------------------------------
	this.pathDiv = alib.dom.createElement("div", dv);
	this.pathDiv.innerHTML = "&nbsp;";
	alib.dom.styleSet(this.pathDiv, "border", "1px solid");
	alib.dom.styleSet(this.pathDiv, "padding", "3px");
	//alib.dom.styleSet(this.pathDiv, "background-color", "white");
	
	
	// Pagination and add
	// ---------------------------------------------------------
	this.pag_div = alib.dom.createElement("div", dv);
	alib.dom.styleSet(this.pag_div, "margin-bottom", "3px");
	alib.dom.styleSet(this.pag_div, "text-align", "right");
	this.pag_div.innerHTML = "Page 1 of 1";

	// Results
	// ---------------------------------------------------------
	var bdv = alib.dom.createElement("div", dv);

	var appcon = new CSplitContainer("verticle", "100%", "350px");
	appcon.resizable = true;
	this.appNav = appcon.addPanel("105px");;
	this.m_browsedv = appcon.addPanel("*");
	alib.dom.styleSet(this.m_browsedv, "border", "1px solid");
	appcon.print(bdv);
	this.m_browsedv.innerHTML = "&nbsp;Loading...";

	// Buttons
	var dv_btn = alib.dom.createElement("div", dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");
	if (this.filterType == "folder") // Select folder
	{
		
		var btn = new CButton("Select This Folder", function(cls) { cls.select(cls.currentFolderId, cls.currentFolderName, cls.currentPath); }, [this], "b2");
		btn.print(dv_btn);
	}
	dlg.customDialog(dv, 600);

	// Load customers
	this.loadDirectory();

	// Build leftnav
	this.buildLeftnav();
    
	// Set starting path
	this.setPath(this.currentPath);
}

/**
 * Build the left navigation
 *
 * @private
 */
AntFsOpen.prototype.buildLeftnav= function()
{
	this.m_navbar = new CNavBar();
	var sec = this.m_navbar.addSection("Navigation");
	sec.addItem("My Files", "/images/icons/folder.png", function(cls){ cls.setPath("%userdir%"); cls.loadDirectory(); }, 
				[this], "favorites_my");
	sec.addItem("Global Files", "/images/icons/world_16.png", function(cls){ cls.setPath("/"); cls.loadDirectory(); }, 
				[this], "favorites_global");

	this.m_navbar.print(this.appNav);
    
    
    var parts = this.currentPath.split("/");
    if(parts[0] == "%userdir%")
	    this.m_navbar.itemChangeState('favorites_my', 'on');
    else
        this.m_navbar.itemChangeState('favorites_global', 'on');
        
	//sec.setHeight(alib.dom.getContentHeight(this.appNav));
}

/**
 * Internal function called when an object is selected
 *
 * @private
 */
AntFsOpen.prototype.select = function(fid, name, path)
{
	this.m_dlg.hide();
	this.onSelect(fid, name, path);
}

/**
 * Callback fired when user selects a file or a folder
 *
 * @public
 * @param int fid The unique id of the file or folder
 * @param string name The name of the file or folder
 * @param string path The full path to the file or folder
 */
AntFsOpen.prototype.onSelect = function(fid, name, path)
{
}

/**
 * Callback fired when user cancels the dialog
 *
 * @public
 */
AntFsOpen.prototype.onCancel = function()
{
}

/**
 * Callback fired when user sets the path
 *
 * @public
 */
AntFsOpen.prototype.onSetPath = function(path)
{
}

/**
 * Load the contents of the current directory
 *
 * @public
 * @param int start The starting offset to begin loading
 */
AntFsOpen.prototype.loadDirectory = function(start)
{
	var istart = (typeof start != "undefined") ? start : 0;

    
    if(!this.m_browsedv)
        this.m_browsedv = alib.dom.createElement("div");
        
    if(!this.pag_div)
        this.pag_div = alib.dom.createElement("div");
        
    
	this.m_browsedv.innerHTML = "&nbsp;Loading...";

	if (typeof offset == "undefined")
		var offset = 0;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(resp)
	{
		this.cbData.cls.m_browsedv.innerHTML = "";
		this.cbData.cls.pag_div.innerHTML = "";

		this.cbData.cls.m_doctbl = new CToolTable("100%");
		var tbl = this.cbData.cls.m_doctbl;
		tbl.print(this.cbData.cls.m_browsedv);

		tbl.addHeader("&nbsp;", "center", "20px");
		tbl.addHeader("Name");
		tbl.addHeader("Size");

		if (resp.browseByCurId)
			this.cbData.cls.currentFolderId = resp.browseByCurId;

		// Populate browseby(folders) if set
		// -------------------------------------------
		if (resp.browseByObjects && resp.browseByObjects.length)
		{
			var num_folders = parseInt(resp.browseByObjects.length);
			for (var i = 0; i < resp.browseByObjects.length; i++)
			{
				var objData = resp.browseByObjects[i];
				objData.isBrowse = true;
				var path = this.cbData.cls.currentPath;
				if (this.cbData.cls.currentPath != "/") // leave root out because it is implied in the / path
					path += "/";
				path += objData.name;

				var alnk = alib.dom.createElement("a");
				alnk.innerHTML = objData.name;
				alnk.href = "javascript:void(0);";
				alnk.m_id = objData.id;
				alnk.m_name = objData.name;
				alnk.m_browseclass = this.cbData.cls;
				alnk.m_path = path;
				alnk.onclick = function()
				{
					this.m_browseclass.setPath(this.m_path);
					this.m_browseclass.loadDirectory();
				}

				var rw = tbl.addRow();
				rw.addCell("<img src='/images/icons/folder_16.png' border='0'>", false, "center");
				rw.addCell(alnk);
				rw.addCell("&nbsp;", false, 'right');
			}
		}

		// Load files
		// -------------------------------------------
		for (var i = 0; i < resp.objects.length; i++)
		{
			var alnk = alib.dom.createElement("a");
			alnk.innerHTML = resp.objects[i].name;
			alnk.href = "javascript:void(0);";
			alnk.m_id = resp.objects[i].id;
			alnk.m_name = resp.objects[i].name;
			alnk.m_browseclass = this.cbData.cls;
			alnk.m_path = path;
			alnk.onclick = function()
			{
				this.m_browseclass.select(this.m_id, this.m_name, this.m_path);
			}

			var rw = tbl.addRow();
			rw.addCell("<img src='/images/icons/generic.gif' border='0'>", false, "center");
			rw.addCell(alnk);
			rw.addCell((resp.objects[i].file_size)?resp.objects[i].file_size:"&nbsp;", false, 'right');
		}

		// Handle pagination
		// -------------------------------------------
		if (resp.next || resp.prev)
		{
			var lbl = alib.dom.createElement("span", this.cbData.cls.pag_div);
			lbl.innerHTML = resp.desc;

			var lbl = alib.dom.createElement("span", this.cbData.cls.pag_div);
			lbl.innerHTML = " | ";

			if (resp.prev)
			{
				var lnk = alib.dom.createElement("span", this.cbData.cls.pag_div);
				lnk.innerHTML = "&laquo; previous";
				alib.dom.styleSet(lnk, "cursor", "pointer");
				lnk.start = resp.prev;
				lnk.m_browseclass = this.cbData.cls;
				lnk.onclick = function()
				{
					this.m_browseclass.loadDirectory(this.start);
				}
			}

			if (resp.next)
			{
				var lnk2 = alib.dom.createElement("span", this.cbData.cls.pag_div);
				lnk2.innerHTML = " next &raquo;";
				alib.dom.styleSet(lnk2, "cursor", "pointer");
				lnk2.start = resp.next;
				lnk2.m_browseclass = this.cbData.cls;
				lnk2.onclick = function()
				{
					this.m_browseclass.loadDirectory(this.start);
				}
			}
		}
	};

	// Set basic query vars
	var args = [["obj_type", "file"], ["offset", istart], ["limit", 250], ["browsebyfield", "folder_id"], ["browsebypath", this.currentPath]];

	if (this.m_txtSearch && this.m_txtSearch.value && this.m_txtSearch.value != 'search here')
		args[args.length] = ["cond_search", this.m_txtSearch.value];
        
	ajax.exec("/controller/ObjectList/query", args);
    
    g_AntFsBrLastLoc = this.currentPath;
}


/**
 * Prase a path with links
 *
 * @private
 */
AntFsOpen.prototype.parsePath = function()
{
	this.pathDiv.innerHTML = "";

	var parts = this.currentPath.split("/");
	var fullPath = "";
    var fullPathCheck = 0;
	for (var i = 0; i < parts.length; i++)
	{
		var part = parts[i];
		var title = part;

		if (i == 0 && part == "") // root
		{
			title = "Global Files";
			part = "/";
            fullPathCheck = 1;
		}
		else if (i == 0 && part == "%userdir%")
		{
			title = "My Files";
            fullPathCheck = 0;
		}

		if (i > fullPathCheck)
			fullPath += "/";
		
		fullPath += part;

		if (i > 0)
			var sp = alib.dom.createElement("span", this.pathDiv, "&nbsp;/&nbsp;");

		var a = alib.dom.createElement("a", this.pathDiv);
		a.innerHTML = title;
		a.href = "javascript:void(0);";
		a.fullPath = fullPath;
		a.bcls = this;
		a.onclick = function()
		{
			this.bcls.setPath(this.fullPath);
			this.bcls.loadDirectory();
		}
	}

}

/**
 * Set the current path by a folder id
 *
 * @public
 * @param string the current full path
 */
AntFsOpen.prototype.setPathById = function(folderId)
{
	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(ret)
	{
		if(!ret['error'])
		{
			this.cbData.cls.setPath(ret);
			this.cbData.cls.loadDirectory()
		}
		else 
			alert(ret['error']);
	};
	ajax.exec("/controller/AntFs/getPathFromId", [["folder_id", folderId]]);
}

/**
 * Set the current path
 *
 * @public
 * @param string the current full path
 */
AntFsOpen.prototype.setPath = function(path)
{
	this.currentPath = path;
	if (this.pathDiv) // if form is printed
		this.parsePath();
    
    this.onSetPath(path);
}

/**
 * Set the dialog title
 *
 * @public
 * @param string title The title of this dialog
 */
AntFsOpen.prototype.setTitle = function(title)
{
	this.strTitle = title;
}

/**
 * Create new browseby (folder) in the current directory
 *
 * @public
 */
AntFsOpen.prototype.createNewFolder = function()
{
	var dlg_p = new CDialog();
    dlg_p.parentDlg = true;
	dlg_p.promptBox("Name:", "New Folder Name", "New Folder");
	dlg_p.m_cls = this;
	dlg_p.onPromptOk = function(val)
	{
		var args = [["path", this.m_cls.currentPath], ["name", val]];
        
        ajax = new CAjax('json');
        ajax.cbData.cls = this.m_cls;
        ajax.onload = function(ret)
        {
            if(!ret['error'])
                this.cbData.cls.loadDirectory();
			else 
				alert(ret['error']);
        };
        ajax.exec("/controller/AntFs/newFolder", args);
        
        g_AntFsBrLastLoc = this.m_cls.currentPath;
	}
    
    dlg_p.m_input.onblur = function ()
    {
        checkSpecialCharacters("folder", this.value, this);
    }
}

/*************************************************************************
*	Function:	setPath
*
*	Purpose:	Set the current path
**************************************************************************/
AntFsOpen.prototype.uploadFiles = function()
{
	var cfupload = new AntFsUpload(this.currentPath, this.m_dlg);
	cfupload.cbData.m_browseclass = this;
	cfupload.onUploadFinished = function()
	{
		this.cbData.m_browseclass.loadDirectory();
	}
	cfupload.showDialog();
}



/**
* @fileOverview AntFsUpload is used to upload files to the AntFs
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2003-2012 Aereus Corporation. All rights reserved.
*/

/**
 * Global array of uplaoders.
 *
 * Used so multiple uplaoders can be run in parallele but needed for the flash callbacks below
 */
var g_AntFsUploadCurrent = null;

/**
 * Callback functions used by the flash file uploader
 */
function ToggleAdd()
{
	if (g_AntFsUploadCurrent != null)
		g_AntFsUploadCurrent.unload();
}
function FlUploadComplete()
{
	if (g_AntFsUploadCurrent != null)
		g_AntFsUploadCurrent.uploadFinished();
}

/**
 * Creates an instance of Upload
 *
 * @constructor
 * @parma {string} path Optional path to load. %userdir% will be loaded by default.
 */
function AntFsUpload(path, parentDlg)
{
	/**
	 * Optional folder id
	 *
	 * @private
	 * @var {int}
	 */
	this.folderId = "";

	/**
	 * Optional file id, if set then upload will update the file rather than create a new one
	 *
	 * @private
	 * @var {int}
	 */
	this.fileId = "";

	/**
	 * The current path relative to root or using a system variable like %tmp%
	 *
	 * @private
	 * @var {string}
	 */
	this.currentPath = (path) ? path : "%userdir%";

	/**
	 * parent dialog used if uplaoder is being called from another dialog so background is not closed
	 *
	 * @private
	 * @var {CDialog}
	 */
	this.parentDlg = (parentDlg) ? parentDlg : null;

	/**
	 * Authentication string used to send files in stateless mode
	 *
	 * @private
	 * @var {string}
	 */
	this.authStr = "";

	/**
	 * Optional processor function tells controller to do something with the file after uploading
	 *
	 * This is usually used for encoding and modifying uploaded files
	 *
	 * @private
	 * @var {string}
	 */
	this.process_function = null;

	/**
	 * Array of uploaded files
	 *
	 * @private
	 * @var {Array}
	 */
	this.m_uploadedFiles = new Array();

	/**
	 * Object used to store callback properties
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();
	
	// Get authentication string so we upload in stateless mode (for flash)
	this.getAuthString();
}

/**
 * Display the upload files dialog
 *
 * @public
 */
AntFsUpload.prototype.showDialog = function()
{
	if (!this.authStr)
	{
		this.getAuthString("showDialog");
		return;
	}

	this.m_dlg = new CDialog("Upload File(s)", this.parentDlg);
	var dlg = this.m_dlg;

	g_AntFsUploadCurrent = this;

	var dv = alib.dom.createElement("div");
	
	// iframe
	var dv_frame = alib.dom.createElement("div", dv);
	dv_frame.style.zIndex = 1000;

	var divFileProgressContainer = alib.dom.createElement("div", dv_frame);

	var btn_con = alib.dom.createElement("div", dv_frame);
	var tbl = alib.dom.createElement("table", btn_con);
	var tbody = alib.dom.createElement("tbody", tbl);
	var row = alib.dom.createElement("tr", tbody);

	var td = alib.dom.createElement("td", row);
	td.valign = "top";
	var spanButtonPlaceholder = alib.dom.createElement("span", td);

	var td = alib.dom.createElement("td", row);
	td.valign = "top";
	var cancel = alib.dom.createElement("div", td);
	alib.dom.styleSet(cancel, "vartical-align", "top");
	alib.dom.styleSet(cancel, "font-family", "Helvetica, Arial, sans-serif");
	alib.dom.styleSet(cancel, "font-size", "12px");
	alib.dom.styleSet(cancel, "cursor", "pointer");
	alib.dom.styleSet(cancel, "height", "16px");327
	alib.dom.styleSet(cancel, "width", "97px");
	alib.dom.styleSet(cancel, "background-image", "url(/images/buttons/flash_bg_100x18.png)");
	alib.dom.styleSet(cancel, "padding", "2px 0px 0px 3px");
	alib.dom.styleSet(cancel, "margin", "-2px 0px 0px 3px");
	alib.dom.styleSet(cancel, "overflow", "hidden");
	cancel.innerHTML = "Cancel";
	cancel.m_cls = this;
	cancel.onclick = function() { this.m_cls.unload(); }

	dlg.customDialog(dv, 460, 85);

	var url = "/controller/AntFs/upload?auth="+this.authStr;
	if (this.process_function)
		url += "&process_function="+this.process_function;
	if (this.folderId)
		url += "&folderid="+this.folderId;
	else
		url += "&path="+escape(this.currentPath);
	if (this.fileId)
		url += "&fileid="+this.fileId;

	var swfu;

	try
	{
		swfu = new SWFUpload({
					// Backend Settings
					upload_url: url,
					//post_params: {"PHPSESSID": "pdopmbhp2faiunsspjr64j14d4"},

					// File Upload Settings
					file_size_limit : "2GB",	// 2MB
					//file_types : "*.jpg",
					//file_types_description : "JPG Images",
					file_upload_limit : "0",
					//assume_success_timeout : 75,

					// Event Handler Settings - these functions as defined in Handlers.js
					//  The handlers are not part of SWFUpload but are part of my website and control how
					//  my website reacts to the SWFUpload events.
					file_queue_error_handler : AntFsUpload_fileQueueError,
					file_dialog_complete_handler : fileDialogComplete,
					upload_progress_handler : AntFsUpload_uploadProgress,
					upload_error_handler : AntFsUpload_uploadError,
					upload_success_handler : AntFsUpload_uploadSuccess,
					upload_complete_handler : AntFsUpload_uploadComplete,
					swfupload_loaded_handler : AntFsUpload_uploadFlashLoaded,

					// Button Settings
					button_image_url : "/images/buttons/flash_bg_100x18.png",
					button_placeholder : spanButtonPlaceholder,
					button_placeholder_id : "",
					button_width: 100,
					button_height: 18,
					button_text : '<span class="button">Select Files</span>',
					button_text_style : '.button { font-family: Helvetica, Arial, sans-serif; font-size: 12pt; }',
					button_text_top_padding: 0,
					button_text_left_padding: 3,
					button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT,
					button_cursor: SWFUpload.CURSOR.HAND,

					// Flash Settings
					flash_url : "/lib/SWFUpload/Flash/swfupload.swf",

					custom_settings : {
						upload_target : divFileProgressContainer,
						isMulti : false
					},

					// Debug Settings
					debug: false 
					});
	}
	catch (ex) { alert(ex); }
}

/**
 * Add Ability to upload temp files
 *
 * This will print the files uploaded into the files_con
 *
 * @public
 * @param {DOMElement} button_con The element to house the upload button
 * @param {DOMElement} files_con The element to house the files entries as they upload and once they are finished
 * @param {string} button_text The text label of the upload button
 * @param {int} file_upload_limit Limit the number of files that can be uplaoded
 */
AntFsUpload.prototype.showTmpUpload = function(button_con, files_con, button_text, file_upload_limit)
{
	if (!this.authStr)
	{
		this.m_tmpUpVarsObj = new Object();
		this.m_tmpUpVarsObj.button_con = button_con;
		this.m_tmpUpVarsObj.files_con = files_con;
		this.m_tmpUpVarsObj.button_text = button_text;
		this.m_tmpUpVarsObj.file_upload_limit = file_upload_limit;

		this.getAuthString("showTmpUpload");
		return;
	}

	this.m_resultscon = files_con;

	g_AntFsUploadCurrent = this;

	if (typeof(button_con) == "undefined" || typeof(files_con) == "undefined")
		return;

	if (typeof(button_text) == "undefined")
		button_text = "Upload File(s)";

	if (typeof(file_upload_limit) == "undefined")
		file_upload_limit = "0";

	var swfu;

	// Get current style
	var alnk = alib.dom.createElement("a", document.body);
	alib.dom.styleSet(alnk, "display", "none");
	alib.dom.styleSet(alnk, "position", "absolute");
	alnk.innerHTML = " ";
	var link_font = alib.dom.styleGet(alnk, "font-family");
	var font_size = alib.dom.styleGet(alnk, "font-size");
	var color = alib.dom.styleGet(alnk, "color");
	var decoration = alib.dom.styleGet(alnk, "text-decoration");
	document.body.removeChild(alnk);

	var url = "/controller/AntFs/upload?path="+escape("%tmp%")+"&auth="+this.authStr;
	if (this.process_function)
		url += "&process_function="+this.process_function;

	swfu = new SWFUpload({
				// Backend Settings
				upload_url: url,
				//post_params: {"PHPSESSID": "pdopmbhp2faiunsspjr64j14d4"},

				// File Upload Settings
				file_size_limit : "2GB",	// 2MB
				//file_types : "*.jpg",
				//file_types_description : "JPG Images",
				file_upload_limit : file_upload_limit,
				//assume_success_timeout : 7000,

				// Event Handler Settings - these functions as defined in Handlers.js
				//  The handlers are not part of SWFUpload but are part of my website and control how
				//  my website reacts to the SWFUpload events.
				file_queued_handler : AntFsUpload_fileQueued,
				file_queue_error_handler : AntFsUpload_fileQueueError,
				file_dialog_complete_handler : fileDialogComplete,
				upload_start_handler : AntFsUpload_uploadStart,
				upload_progress_handler : AntFsUpload_uploadProgress,
				upload_error_handler : AntFsUpload_uploadError,
				upload_success_handler : AntFsUpload_uploadSuccess,
				upload_complete_handler : AntFsUpload_uploadComplete,
				queue_complete_handler : AntFsUpload_queueComplete,	// Queue plugin event
				swfupload_loaded_handler : AntFsUpload_uploadFlashLoaded,

				// Button Settings
				button_image_url : "/images/buttons/flash_attachments_14x16.png",
				button_placeholder : button_con,
				button_placeholder_id : "",
				button_width: 100,
				button_height: 16,
				button_text : '<span class="button">'+button_text+'</span>',
				button_text_style : '.button { font-family: '+link_font+'; font-size: '+font_size+'; color: #'+color+';}',
				button_text_top_padding: 0,
				button_text_left_padding: 17,
				button_window_mode: SWFUpload.WINDOW_MODE.TRANSPARENT,
				button_cursor: SWFUpload.CURSOR.HAND,

				// Flash Settings
				flash_url : "/lib/SWFUpload/Flash/swfupload.swf",

				custom_settings : {
					upload_target : files_con,
					isMulti : true 
				},

				// Debug Settings
				debug: false 
	});
}

/**
 * Get auth string for this user
 *
 * Flash is sending the files and may not send the local cookie from the browse
 * so we authenticate manually with an auth string.
 *
 * @private
 * @param {string} functionString The name of the function to call once auth has been obtained
 */
AntFsUpload.prototype.getAuthString = function(functionString)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.functionString = functionString;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
 
        if(ret)
        {
            this.cbData.cls.authStr = ret;

            switch(functionString)
            {
            case 'showDialog':
                this.cbData.cls.showDialog();
                break;
            case 'showTmpUpload':
                this.cbData.cls.showTmpUpload(this.cbData.cls.m_tmpUpVarsObj.button_con, this.cbData.cls.m_tmpUpVarsObj.files_con, 
                                  this.cbData.cls.m_tmpUpVarsObj.button_text, this.cbData.cls.m_tmpUpVarsObj.file_up);
                break;
            }
        }
    };
    ajax.exec("/controller/User/getAuthString");
}

/**
 * Hide this dialog if we are not inline
 *
 * @public
 */
AntFsUpload.prototype.unload = function()
{
	if (this.m_dlg)
		this.m_dlg.hide();
}


/**
 * This callback is executed once all uploads are finished
 *
 * @private
 */
AntFsUpload.prototype.uploadFinished = function()
{
	this.onUploadFinished();
	if (this.m_dlg)
		this.m_dlg.hide();
}

/**
 * Clear uploaded files queue (usually after processing)
 *
 * @private
 */
AntFsUpload.prototype.clearUploadedFiles = function()
{
	// Clear current results
	if (this.m_resultscon) 
		this.m_resultscon.innerHTML = "";

	if (this.m_uploadedFiles)
		this.m_uploadedFiles = new Array();
}

/**
 * Get number of uploaded files
 *
 * @public
 */
AntFsUpload.prototype.getNumUploadedFiles = function()
{
	return this.m_uploadedFiles.length;
}

/**
 * Get {id, name} of each uplaoded file
 *
 * @public
 * @param {int} ind The index of the file to get in the array of uploaded files
 * @return {id, name}
 */
AntFsUpload.prototype.getUploadedFile = function(ind)
{
	return this.m_uploadedFiles[ind];
}

/**
 * Set folder id to use - this will override the path
 *
 * @param {int} folderId The unique id of the folder to upload files to
 */
AntFsUpload.prototype.setFolderId = function(folderId)
{
	this.folderId = folderId;
}

/**
 * Set the path to upload files to
 *
 * @param {string} path The path to set
 */
AntFsUpload.prototype.setPath = function(path)
{
	this.currentPath = path;
}

/**
 * Set file id to update, if set this will overwrite existing files
 *
 * @param {int} fileId The unique id of the file to update
 */
AntFsUpload.prototype.setFileId = function(fileId)
{
	this.fileId = fileId;
}


/*************************************************************************
* Callbacks
*************************************************************************/

/**
 * Called when flash is ready to receive commands
 */
AntFsUpload.prototype.onFlashLoad = function()
{
}

/**
 * Called when the queue starts being uploaded
 */
AntFsUpload.prototype.onUploadStarted = function()
{
}

/**
 * Called when the queue has finished uploading all files
 */
AntFsUpload.prototype.onUploadFinished = function()
{
}

/**
 * Called if the user cancels the upload
 */
AntFsUpload.prototype.onCancel = function()
{
}

/**
 * Called after each individual file has been uploaded
 *
 * @param {int} fid The file id of the newly uploaded file
 * @param {string} name The file name of the uploaded file
 */
AntFsUpload.prototype.onUploadSuccess = function(fid, name)
{
}

/**
 * Called when a user removes an individual file
 *
 * @param {int} fid The id of the file removed
 */
AntFsUpload.prototype.onRemoveUpload = function(fid)
{
}

/**
 * Called when the queue is completely finished processing everything
 */
AntFsUpload.prototype.onQueueComplete = function()
{
}



function AntFsUpload_fileQueued(file) {
	try {
		var progress = new FileProgress(file, this.customSettings.upload_target, this.customSettings.isMulti);
		progress.setStatus("Pending...");
		progress.toggleCancel(true, this);

	} catch (ex) {
		this.debug(ex);
	}

}

function AntFsUpload_fileQueueError(file, errorCode, message) 
{
	try 
	{
		if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) 
		{
			alert("You have attempted to queue too many files.\n" + (message === 0 ? "You have reached the upload limit." : "You may select " + (message > 1 ? "up to " + message + " files." : "one file.")));
			return;
		}

		var progress = new FileProgress(file, this.customSettings.upload_target, this.customSettings.isMulti);
		progress.setError();
		//progress.toggleCancel(false);
		progress.toggleRemove(true);

		switch (errorCode) 
		{
		case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
			progress.setStatus("File is too big.");
			this.debug("Error Code: File too big, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
			progress.setStatus("Cannot upload Zero Byte files.");
			this.debug("Error Code: Zero byte file, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
			progress.setStatus("Invalid File Type.");
			this.debug("Error Code: Invalid File Type, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		default:
			if (file !== null) {
				progress.setStatus("Unhandled Error");
			}
			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		}
	} 
	catch (ex) 
	{
        this.debug(ex);
	}
}

function fileDialogComplete(numFilesSelected, numFilesQueued) {
	try 
	{
		if (numFilesQueued > 0) 
		{
			this.startUpload();
		}
	} 
	catch (ex) 
	{
		this.debug(ex);
	}
}

function AntFsUpload_uploadStart(file) 
{
	try 
	{
		/* I don't want to do any file validation or anything,  I'll just update the UI and
		return true to indicate that the upload should start.
		It's important to update the UI here because in Linux no uploadProgress events are called. The best
		we can do is say we are uploading.
		 */
		var progress = new FileProgress(file, this.customSettings.upload_target, this.customSettings.isMulti);
		progress.setStatus("Uploading...");
		progress.toggleCancel(true, this);

		g_AntFsUploadCurrent.onUploadStarted();
	}
	catch (ex) {}
	
	return true;
}

function AntFsUpload_uploadProgress(file, bytesLoaded) 
{

	try 
	{
		var percent = Math.ceil((bytesLoaded / file.size) * 100);

		var progress = new FileProgress(file,  this.customSettings.upload_target, this.customSettings.isMulti);
		progress.setProgress(percent);
		if (percent === 100) 
		{
			progress.setStatus("Processing...");
			progress.toggleCancel(false, this);
			progress.toggleRemove(true);
		} 
		else 
		{
			progress.setStatus("Uploading...");
			progress.toggleCancel(true, this);
		}
	} 
	catch (ex) 
	{
		this.debug(ex);
	}
}

function AntFsUpload_uploadSuccess(file, serverData) 
{    
	try 
	{
		/*
		var xmlDoc = null;        
		if (window.DOMParser)
		{            
			parser=new DOMParser();            
			xmlDoc=parser.parseFromString(serverData,"text/xml");            
		}        
		else // Internet Explorer
		{
			xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
			xmlDoc.async="false";
			xmlDoc.loadXML(serverData); 
		}         
		*/

		var progress = new FileProgress(file,  this.customSettings.upload_target, this.customSettings.isMulti);
		progress.toggleCancel(false);
		progress.toggleRemove(true);

		var ret = JSON.parse(serverData);

		if (ret.error)
		{
			if (this.customSettings.isMulti)
			{
				progress.setStatus("Error - " + ret.error);
				progress.setComplete();
			}
			else
			{
				alert(ret.error);
			}
			return;
		}
		else if (this.customSettings.isMulti)
		{
			progress.setComplete();
			progress.setStatus("Complete");
		}

		var filename = ret[0].name;
		var fileid = ret[0].id;
		var jobid = "";        
		/*
		var root = xmlDoc.documentElement;        
		var file = root.getElementsByTagName("file");        
		if (file.length)
		{
			if (file[0].getElementsByTagName('id')[0].firstChild)
				fileid = file[0].getElementsByTagName('id')[0].firstChild.nodeValue;
			if (file[0].getElementsByTagName('name')[0].firstChild)
				filename = unescape(file[0].getElementsByTagName('name')[0].firstChild.nodeValue);
			if (file[0].getElementsByTagName('jobid')[0].firstChild)
				jobid = unescape(file[0].getElementsByTagName('jobid')[0].firstChild.nodeValue);
		}
		*/

		if (fileid)
		{
			progress.antFileId = fileid;
			progress.setStatus("Complete - <a href='/antfs/"+fileid+"/"+filename+"' target='_blank'>view file</a>" + "<input type='hidden' name='uploaded_file[]' value='"+fileid+"'>");

			g_AntFsUploadCurrent.onUploadSuccess(fileid, filename, jobid);
			g_AntFsUploadCurrent.m_uploadedFiles[g_AntFsUploadCurrent.m_uploadedFiles.length] = {id:fileid, name: filename};
		}
	
		/*
		if (serverData.substring(0, 7) === "FILEID:") 
		{
		progress.setStatus("Thumbnail Created.");
		progress.toggleCancel(false);
		} 
		else 
		{
		progress.setStatus("Error.");
		alert(serverData);
		}
		*/
	} 
	catch (ex) 
	{
		this.debug(ex);
	}
}

function AntFsUpload_uploadComplete(file) 
{    
	try 
	{
		/*  I want the next upload to continue automatically so I'll call startUpload here */
		if (this.getStats().files_queued > 0) 
		{
			this.startUpload();
		} 
		else 
		{
			if (!this.customSettings.isMulti)
			{
				var progress = new FileProgress(file,  this.customSettings.upload_target, this.customSettings.isMulti);
				progress.setComplete();
				progress.setStatus("All files received.");
				progress.toggleCancel(false);
				g_AntFsUploadCurrent.uploadFinished();
			}
		}
	} 
	catch (ex) 
	{
		this.debug(ex);
	}
}

function AntFsUpload_uploadError(file, errorCode, message) {
	try 
	{
		var progress = new FileProgress(file, this.customSettings.upload_target, this.customSettings.isMulti);
		progress.setError();
		progress.toggleCancel(false);
		progress.toggleRemove(true);

		switch (errorCode) 
		{
		case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
			progress.setStatus("Upload Error: " + message);
			this.debug("Error Code: HTTP Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
			progress.setStatus("Upload Failed.");
			this.debug("Error Code: Upload Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.IO_ERROR:
			progress.setStatus("Server (IO) Error");
			this.debug("Error Code: IO Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
			progress.setStatus("Security Error");
			this.debug("Error Code: Security Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
			progress.setStatus("Upload limit exceeded.");
			this.debug("Error Code: Upload Limit Exceeded, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
			progress.setStatus("Failed Validation.  Upload skipped.");
			this.debug("Error Code: File Validation Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
			// If there aren't any files left (they were all cancelled) disable the cancel button
			if (this.getStats().files_queued === 0) {
				ALib.m_document.getElementById(this.customSettings.cancelButtonId).disabled = true;
			}
			progress.setStatus("Cancelled");
			progress.setCancelled();
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
			progress.setStatus("Stopped");
			break;
		default:
			progress.setStatus("Unhandled Error: " + errorCode);
			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		}
	} 
	catch (ex) 
	{
        this.debug(ex);
    }
}

function AntFsUpload_uploadFlashLoaded()
{
	g_AntFsUploadCurrent.onFlashLoad();
}

function fadeIn(element, opacity) {
	var reduceOpacityBy = 5;
	var rate = 30;	// 15 fps


	if (opacity < 100) {
		opacity += reduceOpacityBy;
		if (opacity > 100) {
			opacity = 100;
		}

		if (element.filters) {
			try {
				element.filters.item("DXImageTransform.Microsoft.Alpha").opacity = opacity;
			} catch (e) {
				// If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.
				element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + opacity + ')';
			}
		} else {
			element.style.opacity = opacity / 100;
		}
	}

	if (opacity < 100) {
		setTimeout(function () {
			fadeIn(element, opacity);
		}, rate);
	}
}

// This event comes from the Queue Plugin
function AntFsUpload_queueComplete(numFilesUploaded) 
{    
	//var status = document.getElementById("divStatus");
	//status.innerHTML = numFilesUploaded + " file" + (numFilesUploaded === 1 ? "" : "s") + " uploaded.";
	g_AntFsUploadCurrent.onQueueComplete();
}


/* ******************************************
 *	FileProgress Object
 *	Control object for displaying file info
 * ****************************************** */

function FileProgress(file, targetDiv, isTmpMulti) 
{
	if (isTmpMulti)
		this.isMulti = isTmpMulti;

	if (this.isMulti)
		this.fileProgressID = file.id;
	else
		this.fileProgressID = "divFileProgress";

	this.fileProgressWrapper = ALib.m_document.getElementById(this.fileProgressID);
	if (!this.fileProgressWrapper) 
	{
		this.fileProgressWrapper = ALib.m_document.createElement("div");
		this.fileProgressWrapper.className = "progressWrapper";
		this.fileProgressWrapper.id = this.fileProgressID;

		this.fileProgressElement = ALib.m_document.createElement("div");
		this.fileProgressElement.className = "progressContainer";

		var progressCancel = ALib.m_document.createElement("a");
		progressCancel.className = "progressCancel";
		progressCancel.href = "#";
		progressCancel.style.visibility = "hidden";
		//progressCancel.appendChild(ALib.m_document.createTextNode("CANCEL"));
		progressCancel.innerHTML = "cancel";

		var progressText = ALib.m_document.createElement("div");
		progressText.className = "progressName";
		progressText.appendChild(ALib.m_document.createTextNode(file.name));

		var progressBar = ALib.m_document.createElement("div");
		progressBar.className = "progressBarInProgress";

		var progressStatus = ALib.m_document.createElement("div");
		progressStatus.className = "progressBarStatus";
		progressStatus.innerHTML = "&nbsp;";

		this.fileProgressElement.appendChild(progressCancel);
		this.fileProgressElement.appendChild(progressText);
		this.fileProgressElement.appendChild(progressStatus);
		this.fileProgressElement.appendChild(progressBar);

		this.fileProgressWrapper.appendChild(this.fileProgressElement);

		targetDiv.appendChild(this.fileProgressWrapper);
		//ALib.m_document.getElementById(targetID).appendChild(this.fileProgressWrapper);
		fadeIn(this.fileProgressWrapper, 0);

	} 
	else 
	{
		this.fileProgressElement = this.fileProgressWrapper.firstChild;
		this.fileProgressElement.childNodes[1].firstChild.nodeValue = file.name;
	}

	this.height = this.fileProgressWrapper.offsetHeight;

}
FileProgress.prototype.setProgress = function (percentage) {
	this.fileProgressElement.className = "progressContainer green";
	this.fileProgressElement.childNodes[3].className = "progressBarInProgress";
	this.fileProgressElement.childNodes[3].style.width = percentage + "%";
};
FileProgress.prototype.setComplete = function () {
	this.fileProgressElement.className = "progressContainer blue";
	this.fileProgressElement.childNodes[3].className = "progressBarComplete";
	this.fileProgressElement.childNodes[3].style.width = "";

};
FileProgress.prototype.setError = function () {
	this.fileProgressElement.className = "progressContainer red";
	this.fileProgressElement.childNodes[3].className = "progressBarError";
	this.fileProgressElement.childNodes[3].style.width = "";

};
FileProgress.prototype.setCancelled = function () {
	this.fileProgressElement.className = "progressContainer";
	this.fileProgressElement.childNodes[3].className = "progressBarError";
	this.fileProgressElement.childNodes[3].style.width = "";

};
FileProgress.prototype.setStatus = function (status) {
	this.fileProgressElement.childNodes[2].innerHTML = status;
};

FileProgress.prototype.toggleCancel = function (show, swfuploadInstance) {
	this.fileProgressElement.childNodes[0].style.visibility = show ? "visible" : "hidden";
	if (swfuploadInstance) 
	{
		var fileID = this.fileProgressID;
		this.fileProgressElement.childNodes[0].onclick = function () {
			swfuploadInstance.cancelUpload(fileID);
			return false;
		};
	}
};

FileProgress.prototype.toggleRemove = function(show) 
{
	this.fileProgressElement.childNodes[0].style.visibility = show ? "visible" : "hidden";

	if (show) 
	{
		this.fileProgressElement.childNodes[0].innerHTML = "remove";
		this.fileProgressElement.childNodes[0].progressObj = this;
		this.fileProgressElement.childNodes[0].onclick = function () 
		{
			if (this.progressObj.antFileId)
			{
				this.progressObj.setStatus("Removing..."); // moves the input form element
                                        
                ajax = new CAjax('json');
                ajax.cbData.cls = this;
                ajax.cbData.wrapper = this.progressObj.fileProgressWrapper;
                ajax.cbData.fid = this.progressObj.antFileId;
                ajax.onload = function(ret)
                {
                    this.cbData.wrapper.style.display = "none";
                    g_AntFsUploadCurrent.onRemoveUpload(this.cbData.fid);
                    for (var i = 0; i < g_AntFsUploadCurrent.m_uploadedFiles.length; i++)
                    {
                        if (g_AntFsUploadCurrent.m_uploadedFiles[i].id == this.cbData.fid)
                            g_AntFsUploadCurrent.m_uploadedFiles.splice(i, 1);
                    }
                };
                ajax.exec("/controller/UserFile/deleteFileId",
                            [["fid", this.progressObj.antFileId]]);
			}
			else
			{
				this.progressObj.setStatus("Removed"); // moves the input form element
				this.progressObj.fileProgressWrapper.style.display = "none";
			}
			return false;
		};
	}
};

/**
 * SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com
 *
 * mmSWFUpload 1.0: Flash upload dialog - http://profandesign.se/swfupload/,  http://www.vinterwebb.se/
 *
 * SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz�n and Mammon Media and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 * SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:
 * http://www.opensource.org/licenses/mit-license.php
 *
 */


/* ******************* */
/* Constructor & Init  */
/* ******************* */
var SWFUpload;

if (SWFUpload == undefined) {
	SWFUpload = function (settings) {
		this.initSWFUpload(settings);
	};
}

SWFUpload.prototype.initSWFUpload = function (settings) {
	try {
		this.customSettings = {};	// A container where developers can place their own settings associated with this instance.
		this.settings = settings;
		this.eventQueue = [];
		this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		this.movieElement = null;


		// Setup global control tracking
		SWFUpload.instances[this.movieName] = this;

		// Load the settings.  Load the Flash movie.
		this.initSettings();
		this.loadFlash();
		this.displayDebugInfo();
	} catch (ex) {
		delete SWFUpload.instances[this.movieName];
		throw ex;
	}
};

/* *************** */
/* Static Members  */
/* *************** */
SWFUpload.instances = {};
SWFUpload.movieCount = 0;
SWFUpload.version = "2.2.0 2009-03-25";
SWFUpload.QUEUE_ERROR = {
	QUEUE_LIMIT_EXCEEDED	  		: -100,
	FILE_EXCEEDS_SIZE_LIMIT  		: -110,
	ZERO_BYTE_FILE			  		: -120,
	INVALID_FILETYPE		  		: -130
};
SWFUpload.UPLOAD_ERROR = {
	HTTP_ERROR				  		: -200,
	MISSING_UPLOAD_URL	      		: -210,
	IO_ERROR				  		: -220,
	SECURITY_ERROR			  		: -230,
	UPLOAD_LIMIT_EXCEEDED	  		: -240,
	UPLOAD_FAILED			  		: -250,
	SPECIFIED_FILE_ID_NOT_FOUND		: -260,
	FILE_VALIDATION_FAILED	  		: -270,
	FILE_CANCELLED			  		: -280,
	UPLOAD_STOPPED					: -290
};
SWFUpload.FILE_STATUS = {
	QUEUED		 : -1,
	IN_PROGRESS	 : -2,
	ERROR		 : -3,
	COMPLETE	 : -4,
	CANCELLED	 : -5
};
SWFUpload.BUTTON_ACTION = {
	SELECT_FILE  : -100,
	SELECT_FILES : -110,
	START_UPLOAD : -120
};
SWFUpload.CURSOR = {
	ARROW : -1,
	HAND : -2
};
SWFUpload.WINDOW_MODE = {
	WINDOW : "window",
	TRANSPARENT : "transparent",
	OPAQUE : "opaque"
};

// Private: takes a URL, determines if it is relative and converts to an absolute URL
// using the current site. Only processes the URL if it can, otherwise returns the URL untouched
SWFUpload.completeURL = function(url) {
	if (typeof(url) !== "string" || url.match(/^https?:\/\//i) || url.match(/^\//)) {
		return url;
	}
	
	var currentURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
	
	var indexSlash = window.location.pathname.lastIndexOf("/");
	if (indexSlash <= 0) {
		path = "/";
	} else {
		path = window.location.pathname.substr(0, indexSlash) + "/";
	}
	
	return /*currentURL +*/ path + url;
	
};


/* ******************** */
/* Instance Members  */
/* ******************** */

// Private: initSettings ensures that all the
// settings are set, getting a default value if one was not assigned.
SWFUpload.prototype.initSettings = function () {
	this.ensureDefault = function (settingName, defaultValue) {
		this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
	};
	
	// Upload backend settings
	this.ensureDefault("upload_url", "");
	this.ensureDefault("preserve_relative_urls", false);
	this.ensureDefault("file_post_name", "Filedata");
	this.ensureDefault("post_params", {});
	this.ensureDefault("use_query_string", false);
	this.ensureDefault("requeue_on_error", false);
	this.ensureDefault("http_success", []);
	this.ensureDefault("assume_success_timeout", 0);
	
	// File Settings
	this.ensureDefault("file_types", "*.*");
	this.ensureDefault("file_types_description", "All Files");
	this.ensureDefault("file_size_limit", 0);	// Default zero means "unlimited"
	this.ensureDefault("file_upload_limit", 0);
	this.ensureDefault("file_queue_limit", 0);

	// Flash Settings
	this.ensureDefault("flash_url", "swfupload.swf");
	this.ensureDefault("prevent_swf_caching", true);
	
	// Button Settings
	this.ensureDefault("button_image_url", "");
	this.ensureDefault("button_width", 1);
	this.ensureDefault("button_height", 1);
	this.ensureDefault("button_text", "");
	this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	this.ensureDefault("button_text_top_padding", 0);
	this.ensureDefault("button_text_left_padding", 0);
	this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	this.ensureDefault("button_disabled", false);
	this.ensureDefault("button_placeholder_id", "");
	this.ensureDefault("button_placeholder", null);
	this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
	
	// Debug Settings
	this.ensureDefault("debug", false);
	this.settings.debug_enabled = this.settings.debug;	// Here to maintain v2 API
	
	// Event Handlers
	this.settings.return_upload_start_handler = this.returnUploadStart;
	this.ensureDefault("swfupload_loaded_handler", null);
	this.ensureDefault("file_dialog_start_handler", null);
	this.ensureDefault("file_queued_handler", null);
	this.ensureDefault("file_queue_error_handler", null);
	this.ensureDefault("file_dialog_complete_handler", null);
	
	this.ensureDefault("upload_start_handler", null);
	this.ensureDefault("upload_progress_handler", null);
	this.ensureDefault("upload_error_handler", null);
	this.ensureDefault("upload_success_handler", null);
	this.ensureDefault("upload_complete_handler", null);
	
	this.ensureDefault("debug_handler", this.debugMessage);

	this.ensureDefault("custom_settings", {});

	// Other settings
	this.customSettings = this.settings.custom_settings;
	
	// Update the flash url if needed
	if (!!this.settings.prevent_swf_caching) {
		this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime();
	}
	
	if (!this.settings.preserve_relative_urls) {
		//this.settings.flash_url = SWFUpload.completeURL(this.settings.flash_url);	// Don't need to do this one since flash doesn't look at it
		this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url);
		this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url);
	}
	
	delete this.ensureDefault;
};

// Private: loadFlash replaces the button_placeholder element with the flash movie.
SWFUpload.prototype.loadFlash = function () {
	var targetElement, tempParent;

	// Make sure an element with the ID we are going to use doesn't already exist
	if (ALib.m_document.getElementById(this.movieName) !== null) {
		throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
	}

	// Get the element where we will be placing the flash movie
	targetElement = ALib.m_document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder;

	if (targetElement == undefined) {
		throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
	}

	// Append the container and load the flash
	targetElement.innerHTML = this.getFlashHTML();
	this.targetElement = targetElement;

	/*
	tempParent = ALib.m_document.createElement("div");
	tempParent.innerHTML = this.getFlashHTML();	// Using innerHTML is non-standard but the only sensible way to dynamically add Flash in IE (and maybe other browsers)
	targetElement.parentNode.replaceChild(tempParent.firstChild, targetElement);
	*/

	// Fix IE Flash/Form bug
	if (window[this.movieName] == undefined) {
		window[this.movieName] = this.getMovieElement();
	}
};

// Private: getFlashHTML generates the object tag needed to embed the flash in to the document
SWFUpload.prototype.getFlashHTML = function () {
	// Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
	return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
				'<param name="wmode" value="', this.settings.button_window_mode, '" />',
				'<param name="movie" value="', this.settings.flash_url, '" />',
				'<param name="quality" value="high" />',
				'<param name="menu" value="false" />',
				'<param name="allowScriptAccess" value="always" />',
				'<param name="flashvars" value="' + this.getFlashVars() + '" />',
				'</object>'].join("");
};

// Private: getFlashVars builds the parameter string that will be passed
// to flash in the flashvars param.
SWFUpload.prototype.getFlashVars = function () {
	// Build a string from the post param object
	var paramString = this.buildParamString();
	var httpSuccessString = this.settings.http_success.join(",");
	
	// Build the parameter string
	return ["movieName=", encodeURIComponent(this.movieName),
			"&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			"&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string),
			"&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error),
			"&amp;httpSuccess=", encodeURIComponent(httpSuccessString),
			"&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout),
			"&amp;params=", encodeURIComponent(paramString),
			"&amp;filePostName=", encodeURIComponent(this.settings.file_post_name),
			"&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			"&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description),
			"&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit),
			"&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit),
			"&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit),
			"&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled),
			"&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url),
			"&amp;buttonWidth=", encodeURIComponent(this.settings.button_width),
			"&amp;buttonHeight=", encodeURIComponent(this.settings.button_height),
			"&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			"&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding),
			"&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding),
			"&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style),
			"&amp;buttonAction=", encodeURIComponent(this.settings.button_action),
			"&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled),
			"&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)
		].join("");
};

// Public: getMovieElement retrieves the DOM reference to the Flash element added by SWFUpload
// The element is cached after the first lookup
SWFUpload.prototype.getMovieElement = function () {

	if (this.movieElement == undefined) 
	{
		if (this.targetElement)
			this.movieElement = this.targetElement.firstChild;
		else
			this.movieElement = ALib.m_document.getElementById(this.movieName);
	}

	if (this.movieElement === null) {
		throw "Could not find Flash element";
	}
	
	return this.movieElement;
};

// Private: buildParamString takes the name/value pairs in the post_params setting object
// and joins them up in to a string formatted "name=value&amp;name=value"
SWFUpload.prototype.buildParamString = function () {
	var postParams = this.settings.post_params; 
	var paramStringPairs = [];

	if (typeof(postParams) === "object") {
		for (var name in postParams) {
			if (postParams.hasOwnProperty(name)) {
				paramStringPairs.push(encodeURIComponent(name.toString()) + "=" + encodeURIComponent(postParams[name].toString()));
			}
		}
	}

	return paramStringPairs.join("&amp;");
};

// Public: Used to remove a SWFUpload instance from the page. This method strives to remove
// all references to the SWF, and other objects so memory is properly freed.
// Returns true if everything was destroyed. Returns a false if a failure occurs leaving SWFUpload in an inconsistant state.
// Credits: Major improvements provided by steffen
SWFUpload.prototype.destroy = function () {
	try {
		// Make sure Flash is done before we try to remove it
		this.cancelUpload(null, false);
		

		// Remove the SWFUpload DOM nodes
		var movieElement = null;
		movieElement = this.getMovieElement();
		
		if (movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			// Loop through all the movie's properties and remove all function references (DOM/JS IE 6/7 memory leak workaround)
			for (var i in movieElement) {
				try {
					if (typeof(movieElement[i]) === "function") {
						movieElement[i] = null;
					}
				} catch (ex1) {}
			}

			// Remove the Movie Element from the page
			try {
				movieElement.parentNode.removeChild(movieElement);
			} catch (ex) {}
		}
		
		// Remove IE form fix reference
		window[this.movieName] = null;

		// Destroy other references
		SWFUpload.instances[this.movieName] = null;
		delete SWFUpload.instances[this.movieName];

		this.movieElement = null;
		this.settings = null;
		this.customSettings = null;
		this.eventQueue = null;
		this.movieName = null;
		
		
		return true;
	} catch (ex2) {
		return false;
	}
};


// Public: displayDebugInfo prints out settings and configuration
// information about this SWFUpload instance.
// This function (and any references to it) can be deleted when placing
// SWFUpload in production.
SWFUpload.prototype.displayDebugInfo = function () {
	this.debug(
		[
			"---SWFUpload Instance Info---\n",
			"Version: ", SWFUpload.version, "\n",
			"Movie Name: ", this.movieName, "\n",
			"Settings:\n",
			"\t", "upload_url:               ", this.settings.upload_url, "\n",
			"\t", "flash_url:                ", this.settings.flash_url, "\n",
			"\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n",
			"\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n",
			"\t", "http_success:             ", this.settings.http_success.join(", "), "\n",
			"\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n",
			"\t", "file_post_name:           ", this.settings.file_post_name, "\n",
			"\t", "post_params:              ", this.settings.post_params.toString(), "\n",
			"\t", "file_types:               ", this.settings.file_types, "\n",
			"\t", "file_types_description:   ", this.settings.file_types_description, "\n",
			"\t", "file_size_limit:          ", this.settings.file_size_limit, "\n",
			"\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n",
			"\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n",
			"\t", "debug:                    ", this.settings.debug.toString(), "\n",

			"\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n",

			"\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n",
			"\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n",
			"\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n",
			"\t", "button_width:             ", this.settings.button_width.toString(), "\n",
			"\t", "button_height:            ", this.settings.button_height.toString(), "\n",
			"\t", "button_text:              ", this.settings.button_text.toString(), "\n",
			"\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n",
			"\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n",
			"\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n",
			"\t", "button_action:            ", this.settings.button_action.toString(), "\n",
			"\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n",

			"\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n",
			"Event Handlers:\n",
			"\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n",
			"\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n",
			"\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n",
			"\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n",
			"\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n",
			"\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n",
			"\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n",
			"\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n",
			"\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n",
			"\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"
		].join("")
	);
};

/* Note: addSetting and getSetting are no longer used by SWFUpload but are included
	the maintain v2 API compatibility
*/
// Public: (Deprecated) addSetting adds a setting value. If the value given is undefined or null then the default_value is used.
SWFUpload.prototype.addSetting = function (name, value, default_value) {
    if (value == undefined) {
        return (this.settings[name] = default_value);
    } else {
        return (this.settings[name] = value);
	}
};

// Public: (Deprecated) getSetting gets a setting. Returns an empty string if the setting was not found.
SWFUpload.prototype.getSetting = function (name) {
    if (this.settings[name] != undefined) {
        return this.settings[name];
	}

    return "";
};



// Private: callFlash handles function calls made to the Flash element.
// Calls are made with a setTimeout for some functions to work around
// bugs in the ExternalInterface library.
SWFUpload.prototype.callFlash = function (functionName, argumentArray) {
	argumentArray = argumentArray || [];
	
	var movieElement = this.getMovieElement();
	var returnValue, returnString;

	// Flash's method if calling ExternalInterface methods (code adapted from MooTools).
	try {
		returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + '</invoke>');
		returnValue = eval(returnString);
	} catch (ex) {
		throw "Call to " + functionName + " failed";
	}
	
	// Unescape file post param values
	if (returnValue != undefined && typeof returnValue.post === "object") {
		returnValue = this.unescapeFilePostParams(returnValue);
	}

	return returnValue;
};

/* *****************************
	-- Flash control methods --
	Your UI should use these
	to operate SWFUpload
   ***************************** */

// WARNING: this function does not work in Flash Player 10
// Public: selectFile causes a File Selection Dialog window to appear.  This
// dialog only allows 1 file to be selected.
SWFUpload.prototype.selectFile = function () {
	this.callFlash("SelectFile");
};

// WARNING: this function does not work in Flash Player 10
// Public: selectFiles causes a File Selection Dialog window to appear/ This
// dialog allows the user to select any number of files
// Flash Bug Warning: Flash limits the number of selectable files based on the combined length of the file names.
// If the selection name length is too long the dialog will fail in an unpredictable manner.  There is no work-around
// for this bug.
SWFUpload.prototype.selectFiles = function () {
	this.callFlash("SelectFiles");
};


// Public: startUpload starts uploading the first file in the queue unless
// the optional parameter 'fileID' specifies the ID 
SWFUpload.prototype.startUpload = function (fileID) {
	this.callFlash("StartUpload", [fileID]);
};

// Public: cancelUpload cancels any queued file.  The fileID parameter may be the file ID or index.
// If you do not specify a fileID the current uploading file or first file in the queue is cancelled.
// If you do not want the uploadError event to trigger you can specify false for the triggerErrorEvent parameter.
SWFUpload.prototype.cancelUpload = function (fileID, triggerErrorEvent) {
	if (triggerErrorEvent !== false) {
		triggerErrorEvent = true;
	}
	this.callFlash("CancelUpload", [fileID, triggerErrorEvent]);
};

// Public: stopUpload stops the current upload and requeues the file at the beginning of the queue.
// If nothing is currently uploading then nothing happens.
SWFUpload.prototype.stopUpload = function () {
	this.callFlash("StopUpload");
};

/* ************************
 * Settings methods
 *   These methods change the SWFUpload settings.
 *   SWFUpload settings should not be changed directly on the settings object
 *   since many of the settings need to be passed to Flash in order to take
 *   effect.
 * *********************** */

// Public: getStats gets the file statistics object.
SWFUpload.prototype.getStats = function () {
	return this.callFlash("GetStats");
};

// Public: setStats changes the SWFUpload statistics.  You shouldn't need to 
// change the statistics but you can.  Changing the statistics does not
// affect SWFUpload accept for the successful_uploads count which is used
// by the upload_limit setting to determine how many files the user may upload.
SWFUpload.prototype.setStats = function (statsObject) {
	this.callFlash("SetStats", [statsObject]);
};

// Public: getFile retrieves a File object by ID or Index.  If the file is
// not found then 'null' is returned.
SWFUpload.prototype.getFile = function (fileID) {
	if (typeof(fileID) === "number") {
		return this.callFlash("GetFileByIndex", [fileID]);
	} else {
		return this.callFlash("GetFile", [fileID]);
	}
};

// Public: addFileParam sets a name/value pair that will be posted with the
// file specified by the Files ID.  If the name already exists then the
// exiting value will be overwritten.
SWFUpload.prototype.addFileParam = function (fileID, name, value) {
	return this.callFlash("AddFileParam", [fileID, name, value]);
};

// Public: removeFileParam removes a previously set (by addFileParam) name/value
// pair from the specified file.
SWFUpload.prototype.removeFileParam = function (fileID, name) {
	this.callFlash("RemoveFileParam", [fileID, name]);
};

// Public: setUploadUrl changes the upload_url setting.
SWFUpload.prototype.setUploadURL = function (url) {
	this.settings.upload_url = url.toString();
	this.callFlash("SetUploadURL", [url]);
};

// Public: setPostParams changes the post_params setting
SWFUpload.prototype.setPostParams = function (paramsObject) {
	this.settings.post_params = paramsObject;
	this.callFlash("SetPostParams", [paramsObject]);
};

// Public: addPostParam adds post name/value pair.  Each name can have only one value.
SWFUpload.prototype.addPostParam = function (name, value) {
	this.settings.post_params[name] = value;
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: removePostParam deletes post name/value pair.
SWFUpload.prototype.removePostParam = function (name) {
	delete this.settings.post_params[name];
	this.callFlash("SetPostParams", [this.settings.post_params]);
};

// Public: setFileTypes changes the file_types setting and the file_types_description setting
SWFUpload.prototype.setFileTypes = function (types, description) {
	this.settings.file_types = types;
	this.settings.file_types_description = description;
	this.callFlash("SetFileTypes", [types, description]);
};

// Public: setFileSizeLimit changes the file_size_limit setting
SWFUpload.prototype.setFileSizeLimit = function (fileSizeLimit) {
	this.settings.file_size_limit = fileSizeLimit;
	this.callFlash("SetFileSizeLimit", [fileSizeLimit]);
};

// Public: setFileUploadLimit changes the file_upload_limit setting
SWFUpload.prototype.setFileUploadLimit = function (fileUploadLimit) {
	this.settings.file_upload_limit = fileUploadLimit;
	this.callFlash("SetFileUploadLimit", [fileUploadLimit]);
};

// Public: setFileQueueLimit changes the file_queue_limit setting
SWFUpload.prototype.setFileQueueLimit = function (fileQueueLimit) {
	this.settings.file_queue_limit = fileQueueLimit;
	this.callFlash("SetFileQueueLimit", [fileQueueLimit]);
};

// Public: setFilePostName changes the file_post_name setting
SWFUpload.prototype.setFilePostName = function (filePostName) {
	this.settings.file_post_name = filePostName;
	this.callFlash("SetFilePostName", [filePostName]);
};

// Public: setUseQueryString changes the use_query_string setting
SWFUpload.prototype.setUseQueryString = function (useQueryString) {
	this.settings.use_query_string = useQueryString;
	this.callFlash("SetUseQueryString", [useQueryString]);
};

// Public: setRequeueOnError changes the requeue_on_error setting
SWFUpload.prototype.setRequeueOnError = function (requeueOnError) {
	this.settings.requeue_on_error = requeueOnError;
	this.callFlash("SetRequeueOnError", [requeueOnError]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setHTTPSuccess = function (http_status_codes) {
	if (typeof http_status_codes === "string") {
		http_status_codes = http_status_codes.replace(" ", "").split(",");
	}
	
	this.settings.http_success = http_status_codes;
	this.callFlash("SetHTTPSuccess", [http_status_codes]);
};

// Public: setHTTPSuccess changes the http_success setting
SWFUpload.prototype.setAssumeSuccessTimeout = function (timeout_seconds) {
	this.settings.assume_success_timeout = timeout_seconds;
	this.callFlash("SetAssumeSuccessTimeout", [timeout_seconds]);
};

// Public: setDebugEnabled changes the debug_enabled setting
SWFUpload.prototype.setDebugEnabled = function (debugEnabled) {
	this.settings.debug_enabled = debugEnabled;
	this.callFlash("SetDebugEnabled", [debugEnabled]);
};

// Public: setButtonImageURL loads a button image sprite
SWFUpload.prototype.setButtonImageURL = function (buttonImageURL) {
	if (buttonImageURL == undefined) {
		buttonImageURL = "";
	}
	
	this.settings.button_image_url = buttonImageURL;
	this.callFlash("SetButtonImageURL", [buttonImageURL]);
};

// Public: setButtonDimensions resizes the Flash Movie and button
SWFUpload.prototype.setButtonDimensions = function (width, height) {
	this.settings.button_width = width;
	this.settings.button_height = height;
	
	var movie = this.getMovieElement();
	if (movie != undefined) {
		movie.style.width = width + "px";
		movie.style.height = height + "px";
	}
	
	this.callFlash("SetButtonDimensions", [width, height]);
};
// Public: setButtonText Changes the text overlaid on the button
SWFUpload.prototype.setButtonText = function (html) {
	this.settings.button_text = html;
	this.callFlash("SetButtonText", [html]);
};
// Public: setButtonTextPadding changes the top and left padding of the text overlay
SWFUpload.prototype.setButtonTextPadding = function (left, top) {
	this.settings.button_text_top_padding = top;
	this.settings.button_text_left_padding = left;
	this.callFlash("SetButtonTextPadding", [left, top]);
};

// Public: setButtonTextStyle changes the CSS used to style the HTML/Text overlaid on the button
SWFUpload.prototype.setButtonTextStyle = function (css) {
	this.settings.button_text_style = css;
	this.callFlash("SetButtonTextStyle", [css]);
};
// Public: setButtonDisabled disables/enables the button
SWFUpload.prototype.setButtonDisabled = function (isDisabled) {
	this.settings.button_disabled = isDisabled;
	this.callFlash("SetButtonDisabled", [isDisabled]);
};
// Public: setButtonAction sets the action that occurs when the button is clicked
SWFUpload.prototype.setButtonAction = function (buttonAction) {
	this.settings.button_action = buttonAction;
	this.callFlash("SetButtonAction", [buttonAction]);
};

// Public: setButtonCursor changes the mouse cursor displayed when hovering over the button
SWFUpload.prototype.setButtonCursor = function (cursor) {
	this.settings.button_cursor = cursor;
	this.callFlash("SetButtonCursor", [cursor]);
};

/* *******************************
	Flash Event Interfaces
	These functions are used by Flash to trigger the various
	events.
	
	All these functions a Private.
	
	Because the ExternalInterface library is buggy the event calls
	are added to a queue and the queue then executed by a setTimeout.
	This ensures that events are executed in a determinate order and that
	the ExternalInterface bugs are avoided.
******************************* */

SWFUpload.prototype.queueEvent = function (handlerName, argumentArray) {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop
	
	if (argumentArray == undefined) {
		argumentArray = [];
	} else if (!(argumentArray instanceof Array)) {
		argumentArray = [argumentArray];
	}
	
	var self = this;
	if (typeof this.settings[handlerName] === "function") {
		// Queue the event
		this.eventQueue.push(function () {
			this.settings[handlerName].apply(this, argumentArray);
		});
		
		// Execute the next queued event
		setTimeout(function () {
			self.executeNextEvent();
		}, 0);
		
	} else if (this.settings[handlerName] !== null) {
		throw "Event handler " + handlerName + " is unknown or is not a function";
	}
};

// Private: Causes the next event in the queue to be executed.  Since events are queued using a setTimeout
// we must queue them in order to garentee that they are executed in order.
SWFUpload.prototype.executeNextEvent = function () {
	// Warning: Don't call this.debug inside here or you'll create an infinite loop

	var  f = this.eventQueue ? this.eventQueue.shift() : null;
	if (typeof(f) === "function") {
		f.apply(this);
	}
};

// Private: unescapeFileParams is part of a workaround for a flash bug where objects passed through ExternalInterface cannot have
// properties that contain characters that are not valid for JavaScript identifiers. To work around this
// the Flash Component escapes the parameter names and we must unescape again before passing them along.
SWFUpload.prototype.unescapeFilePostParams = function (file) {
	var reg = /[$]([0-9a-f]{4})/i;
	var unescapedPost = {};
	var uk;

	if (file != undefined) {
		for (var k in file.post) {
			if (file.post.hasOwnProperty(k)) {
				uk = k;
				var match;
				while ((match = reg.exec(uk)) !== null) {
					uk = uk.replace(match[0], String.fromCharCode(parseInt("0x" + match[1], 16)));
				}
				unescapedPost[uk] = file.post[k];
			}
		}

		file.post = unescapedPost;
	}

	return file;
};

// Private: Called by Flash to see if JS can call in to Flash (test if External Interface is working)
SWFUpload.prototype.testExternalInterface = function () {
	try {
		return this.callFlash("TestExternalInterface");
	} catch (ex) {
		return false;
	}
};

// Private: This event is called by Flash when it has finished loading. Don't modify this.
// Use the swfupload_loaded_handler event setting to execute custom code when SWFUpload has loaded.
SWFUpload.prototype.flashReady = function () {
	// Check that the movie element is loaded correctly with its ExternalInterface methods defined
	var movieElement = this.getMovieElement();

	if (!movieElement) {
		this.debug("Flash called back ready but the flash movie can't be found.");
		return;
	}

	this.cleanUp(movieElement);
	
	this.queueEvent("swfupload_loaded_handler");
};

// Private: removes Flash added fuctions to the DOM node to prevent memory leaks in IE.
// This function is called by Flash each time the ExternalInterface functions are created.
SWFUpload.prototype.cleanUp = function (movieElement) {
	// Pro-actively unhook all the Flash functions
	try {
		if (this.movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
			for (var key in movieElement) {
				try {
					if (typeof(movieElement[key]) === "function") {
						movieElement[key] = null;
					}
				} catch (ex) {
				}
			}
		}
	} catch (ex1) {
	
	}

	// Fix Flashes own cleanup code so if the SWFMovie was removed from the page
	// it doesn't display errors.
	window["__flash__removeCallback"] = function (instance, name) {
		try {
			if (instance) {
				instance[name] = null;
			}
		} catch (flashEx) {
		
		}
	};

};


/* This is a chance to do something before the browse window opens */
SWFUpload.prototype.fileDialogStart = function () {
	this.queueEvent("file_dialog_start_handler");
};


/* Called when a file is successfully added to the queue. */
SWFUpload.prototype.fileQueued = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queued_handler", file);
};


/* Handle errors that occur when an attempt to queue a file fails. */
SWFUpload.prototype.fileQueueError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("file_queue_error_handler", [file, errorCode, message]);
};

/* Called after the file dialog has closed and the selected files have been queued.
	You could call startUpload here if you want the queued files to begin uploading immediately. */
SWFUpload.prototype.fileDialogComplete = function (numFilesSelected, numFilesQueued, numFilesInQueue) {
	this.queueEvent("file_dialog_complete_handler", [numFilesSelected, numFilesQueued, numFilesInQueue]);
};

SWFUpload.prototype.uploadStart = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("return_upload_start_handler", file);
};

SWFUpload.prototype.returnUploadStart = function (file) {
	var returnValue;
	if (typeof this.settings.upload_start_handler === "function") {
		file = this.unescapeFilePostParams(file);
		returnValue = this.settings.upload_start_handler.call(this, file);
	} else if (this.settings.upload_start_handler != undefined) {
		throw "upload_start_handler must be a function";
	}

	// Convert undefined to true so if nothing is returned from the upload_start_handler it is
	// interpretted as 'true'.
	if (returnValue === undefined) {
		returnValue = true;
	}
	
	returnValue = !!returnValue;
	
	this.callFlash("ReturnUploadStart", [returnValue]);
};



SWFUpload.prototype.uploadProgress = function (file, bytesComplete, bytesTotal) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_progress_handler", [file, bytesComplete, bytesTotal]);
};

SWFUpload.prototype.uploadError = function (file, errorCode, message) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_error_handler", [file, errorCode, message]);
};

SWFUpload.prototype.uploadSuccess = function (file, serverData, responseReceived) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_success_handler", [file, serverData, responseReceived]);
};

SWFUpload.prototype.uploadComplete = function (file) {
	file = this.unescapeFilePostParams(file);
	this.queueEvent("upload_complete_handler", file);
};

/* Called by SWFUpload JavaScript and Flash functions when debug is enabled. By default it writes messages to the
   internal debug console.  You can override this event and have messages written where you want. */
SWFUpload.prototype.debug = function (message) {
	this.queueEvent("debug_handler", message);
};


/* **********************************
	Debug Console
	The debug console is a self contained, in page location
	for debug message to be sent.  The Debug Console adds
	itself to the body if necessary.

	The console is automatically scrolled as messages appear.
	
	If you are using your own debug handler or when you deploy to production and
	have debug disabled you can remove these functions to reduce the file size
	and complexity.
********************************** */
   
// Private: debugMessage is the default debug_handler.  If you want to print debug messages
// call the debug() function.  When overriding the function your own function should
// check to see if the debug setting is true before outputting debug information.
SWFUpload.prototype.debugMessage = function (message) {
	if (this.settings.debug) {
		var exceptionMessage, exceptionValues = [];

		// Check for an exception object and print it nicely
		if (typeof message === "object" && typeof message.name === "string" && typeof message.message === "string") {
			for (var key in message) {
				if (message.hasOwnProperty(key)) {
					exceptionValues.push(key + ": " + message[key]);
				}
			}
			exceptionMessage = exceptionValues.join("\n") || "";
			exceptionValues = exceptionMessage.split("\n");
			exceptionMessage = "EXCEPTION: " + exceptionValues.join("\nEXCEPTION: ");
			SWFUpload.Console.writeLine(exceptionMessage);
		} else {
			SWFUpload.Console.writeLine(message);
		}
	}
};

SWFUpload.Console = {};
SWFUpload.Console.writeLine = function (message) {
	var console, documentForm;

	try {
		console = ALib.m_document.getElementById("SWFUpload_Console");

		if (!console) {
			documentForm = ALib.m_document.createElement("form");
			ALib.m_document.getElementsByTagName("body")[0].appendChild(documentForm);

			console = ALib.m_document.createElement("textarea");
			console.id = "SWFUpload_Console";
			console.style.fontFamily = "monospace";
			console.setAttribute("wrap", "off");
			console.wrap = "off";
			console.style.overflow = "auto";
			console.style.width = "700px";
			console.style.height = "350px";
			console.style.margin = "5px";
			documentForm.appendChild(console);
		}

		console.value += message + "\n";

		console.scrollTop = console.scrollHeight - console.clientHeight;
	} catch (ex) {
		alert("Exception: " + ex.name + " Message: " + ex.message);
	}
};

/*
	Queue Plug-in
	
	Features:
		*Adds a cancelQueue() method for cancelling the entire queue.
		*All queued files are uploaded when startUpload() is called.
		*If false is returned from uploadComplete then the queue upload is stopped.
		 If false is not returned (strict comparison) then the queue upload is continued.
		*Adds a QueueComplete event that is fired when all the queued files have finished uploading.
		 Set the event handler with the queue_complete_handler setting.
		
	*/

var SWFUpload;
if (typeof(SWFUpload) === "function") {
	SWFUpload.queue = {};
	
	SWFUpload.prototype.initSettings = (function (oldInitSettings) {
		return function () {
			if (typeof(oldInitSettings) === "function") {
				oldInitSettings.call(this);
			}
			
			this.queueSettings = {};
			
			this.queueSettings.queue_cancelled_flag = false;
			this.queueSettings.queue_upload_count = 0;
			
			this.queueSettings.user_upload_complete_handler = this.settings.upload_complete_handler;
			this.queueSettings.user_upload_start_handler = this.settings.upload_start_handler;
			this.settings.upload_complete_handler = SWFUpload.queue.uploadCompleteHandler;
			this.settings.upload_start_handler = SWFUpload.queue.uploadStartHandler;
			
			this.settings.queue_complete_handler = this.settings.queue_complete_handler || null;
		};
	})(SWFUpload.prototype.initSettings);

	SWFUpload.prototype.startUpload = function (fileID) {
		this.queueSettings.queue_cancelled_flag = false;
		this.callFlash("StartUpload", [fileID]);
	};

	SWFUpload.prototype.cancelQueue = function () {
		this.queueSettings.queue_cancelled_flag = true;
		this.stopUpload();
		
		var stats = this.getStats();
		while (stats.files_queued > 0) {
			this.cancelUpload();
			stats = this.getStats();
		}
	};
	
	SWFUpload.queue.uploadStartHandler = function (file) {
		var returnValue;
		if (typeof(this.queueSettings.user_upload_start_handler) === "function") {
			returnValue = this.queueSettings.user_upload_start_handler.call(this, file);
		}
		
		// To prevent upload a real "FALSE" value must be returned, otherwise default to a real "TRUE" value.
		returnValue = (returnValue === false) ? false : true;
		
		this.queueSettings.queue_cancelled_flag = !returnValue;

		return returnValue;
	};
	
	SWFUpload.queue.uploadCompleteHandler = function (file) {
		var user_upload_complete_handler = this.queueSettings.user_upload_complete_handler;
		var continueUpload;
		
		if (file.filestatus === SWFUpload.FILE_STATUS.COMPLETE) {
			this.queueSettings.queue_upload_count++;
		}

		if (typeof(user_upload_complete_handler) === "function") {
			continueUpload = (user_upload_complete_handler.call(this, file) === false) ? false : true;
		} else if (file.filestatus === SWFUpload.FILE_STATUS.QUEUED) {
			// If the file was stopped and re-queued don't restart the upload
			continueUpload = false;
		} else {
			continueUpload = true;
		}
		
		if (continueUpload) {
			var stats = this.getStats();
			if (stats.files_queued > 0 && this.queueSettings.queue_cancelled_flag === false) {
				this.startUpload();
			} else if (this.queueSettings.queue_cancelled_flag === false) {
				this.queueEvent("queue_complete_handler", [this.queueSettings.queue_upload_count]);
				this.queueSettings.queue_upload_count = 0;
			} else {
				this.queueSettings.queue_cancelled_flag = false;
				this.queueSettings.queue_upload_count = 0;
			}
		}
	};
}

/*======================================================================================
	
	Module:		COlapCube

	Purpose:	OnLine Analytical Processing Cube 

	Author:		joe, sky.stebnicki@aereus.com
				Copyright (c) 2010 Aereus Corporation. All rights reserved.
	
	Usage:		var data = new COlap();
				data.load(report_id);
				data.printTable(container);
				data.printChart(container);

======================================================================================*/

function COlapCube(obj_type, view, measures)
{
	this.dimensions = new Array();
	this.measures = measures; // array of objects{field, aggregate}
	this.chartHtml = "";
	this.chart_type = "";
	this.chart_width = 800; // default for report
	this.obj_type = obj_type;
	this.dataXml = null;
	this.view = (view)?view:null;
	this.customReport = ""; // used to load custom data
}

/**************************************************************************
* Function: 	load	
*
* Purpose:		Load data for this cube
*
* Arguments:	d1 = field for dimension 1
* 				d1_grp = optional grouping for dimension 1
*				d2 = field for dimension 2
* 				d2_grp = optional grouping for dimension 2
**************************************************************************/
COlapCube.prototype.load = function(d1, d1_grp, d2, d2_grp, chart_type)
{
	var ajax = new CAjax();
	ajax.m_obj = this;
	ajax.onload = function(root)
	{
		for (var i = 0; i < root.getNumChildren(); i++)
		{
			var section = root.getChildNode(i);

			switch (section.m_name)
			{
			case "dimensions":
				for (var j = 0; j < section.getNumChildren(); j++)
				{
					var dim = section.getChildNode(j);
					var entries_arr = new Array();

					for (var d = 0; d < dim.getNumChildren(); d++)
					{
						var ent = dim.getChildNode(d);
						entries_arr[d] = {value:unescape(ent.getAttribute("value")), label:unescape(ent.getAttribute("label")), total:0};
					}

					this.m_obj.dimensions[j] = {name:unescape(dim.getAttribute("name")), label:unescape(dim.getAttribute("label")), entries:entries_arr};
				}
				break;
			case "chart":
				this.m_obj.chartHtml = unescape(section.m_text);
				break;
			case "data":
				this.m_obj.dataXml = section;
				break;
			case "query":
				if (ALib.m_debug)
					ALib.trace("OLAP Query: " + unescape(section.m_text));
				break;
			}
		}

		this.m_obj.onload();
	};

	var args = new Array();
	if (this.view)
	{
		for (var i = 0; i < this.view.conditions.length; i++)
		{
			var cond = this.view.conditions[i];
			args[args.length] = ["conditions[]", i];
			args[args.length] = ["condition_blogic_"+i, cond.blogic];
			args[args.length] = ["condition_fieldname_"+i, cond.fieldName];
			args[args.length] = ["condition_operator_"+i, cond.operator];
			args[args.length] = ["condition_condvalue_"+i, cond.condValue];
		}
	}

	for (var i = 0; i < this.measures.length; i++)
	{
		args[args.length] = ["measures[]", i];
		args[args.length] = ["measure_field_"+i, this.measures[i].field];
		args[args.length] = ["measure_aggregate_"+i, this.measures[i].aggregate];
	}

	var url = "/datacenter/xml_get_olap.php?obj_type="+this.obj_type;
	url += "&dim1="+d1;
	url += "&dim1_group="+d1_grp;
	url += "&dim2="+d2;
	url += "&dim2_group="+d2_grp;
	url += "&chart_type="+chart_type;
	url += "&chart_width="+this.chart_width;
	url += "&custom_report="+escape(this.customReport);

	/*
	ALib.m_debug = true;
	AJAX_TRACE_RESPONSE = true;
	*/

	ajax.m_method = AJAX_POST;
	ajax.exec(url, args);
}

/**************************************************************************
* Function: 	onload	
*
* Purpose:		To be over-ridden by calling process
**************************************************************************/
COlapCube.prototype.onload = function()
{
}

/**************************************************************************
* Function: 	printChart	
*
* Purpose:		Print chart into innerXML of container
*
* Arguments:	Container where the chart will reside
**************************************************************************/
COlapCube.prototype.printChart = function(con)
{
	con.innerHTML = this.chartHtml;
}

/**************************************************************************
* Function: 	printTable	
*
* Purpose:		Print a summary table
*
* Arguments:	Container where the chart will reside
**************************************************************************/
COlapCube.prototype.printTable = function(con)
{
	// Print table
	var tbl = new CToolTable("100%");
	tbl.print(con);

	// Print headers for dimension 2 if exists
	if (this.dimensions[1] && this.dimensions[1].entries.length)
	{
		tbl.addHeader("&nbsp;", "right");
		//var rw = tbl.addRow();
		for (var j = 0; j < this.dimensions[1].entries.length; j++)
		{
			tbl.addHeader(this.dimensions[1].entries[j].label, "right");
		}
		tbl.addHeader("Total", "right");
	}
	var val = 0;

	var totalOfTotals = 0;
	//ALib.m_debug = true;
	// Print data
	for (var i = 0; i < this.dimensions[0].entries.length; i++)
	{
		var rw = tbl.addRow();
		var d1 = this.dimensions[0].entries[i].value;

		rw.addCell(this.dimensions[0].entries[i].label, true);

		if (this.dimensions[1] && this.dimensions[1].entries.length)
		{
			var linetotal = 0;
			for (var j = 0; j < this.dimensions[1].entries.length; j++)
			{
				val = this.getValue(d1, this.dimensions[1].entries[j].value, 0);
				//ALib.trace(val);
				//val = new NumberFormat(String(val), 0).toFormatted();
				rw.addCell(String(val), false, "right");
				linetotal += val;
				this.dimensions[1].entries[j].total += val;
			}
			//var val = new NumberFormat(String(linetotal), 0).toFormatted();
			//rw.addCell(val, true, "right");
			rw.addCell(String(linetotal), true, "right");
			totalOfTotals += linetotal;
		}
		else
		{
			val = this.getValue(d1, null, 0);
			rw.addCell(String(val), false, "right");
			totalOfTotals += val;
		}
	}

	// Print dimension2 totals
	if (this.dimensions[1])
	{
		var rw = tbl.addRow();
		rw.addCell("Total", true, "right");
		for (var j = 0; j < this.dimensions[1].entries.length; j++)
		{
			//var val = new NumberFormat(String(this.dimensions[1].entries[j].total), 0).toFormatted();
			//rw.addCell(val, false, "right");
			var val = this.dimensions[1].entries[j].total;
			rw.addCell(String(val), false, "right");
		}
		//var val = new NumberFormat(String(totalOfTotals), 0).toFormatted();
		//rw.addCell(val, true, "right");
		rw.addCell(String(totalOfTotals), true, "right");
	}
	else
	{
		var rw = tbl.addRow();
		rw.addCell("Total", true, "right");
		//var val = new NumberFormat(String(totalOfTotals), 0).toFormatted();
		rw.addCell(String(totalOfTotals), true, "right");
	}
}

/**************************************************************************
* Function: 	getValue	
*
* Purpose:		Get the value at a specified dimension
*
* Arguments:	dimen
**************************************************************************/
COlapCube.prototype.getValue = function(d1, d2, measureind)
{
	if (!this.dataXml)
		return "";

	for (var i = 0; i < this.dataXml.getNumChildren(); i++)
	{
		var dim = this.dataXml.getChildNode(i);
		var val = unescape(dim.getAttribute("value"));
		if (val == d1)
		{
			if (d2)
			{
				for (var j = 0; j < dim.getNumChildren(); j++)
				{
					var dim2 = dim.getChildNode(j);
					var val2 = unescape(dim2.getAttribute("value"));

					if (val2 == d2)
					{
						var meas_val = unescape(dim2.getChildNode(measureind).m_text);
						if (meas_val)
							meas_val = parseFloat(meas_val);
						else
							meas_val = 0;
						return meas_val;
					}
				}
			}
			else
			{
				var meas_val = unescape(dim.getChildNode(measureind).m_text);
				if (meas_val)
					meas_val = parseFloat(meas_val);
				else
					meas_val = 0;
				return meas_val;
			}
		}
	}

	return 0;
}

/**
 * @fileoverview This is the base class for olap cubes in ANT
 *
 * There are a number of different engines used to generate the data for this cube found in /lib/js/OlaCube/*
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of OlapCube
 *
 * @constructor
 * @param {array} measures Array of of objects [{field, aggregate}]
 */
function OlapCube(objectType, custRpt, dwCube)
{
	/*
	this.dimensions = new Array();
	this.measures = measures; // array of objects{field, aggregate}
	this.conditions = measures; // array of objects{field, aggregate}
	*/

	/**
	 * Temporarily store dimensions used in the last query
	 *
	 * @var {array}
	 */
	this.tmpQueryDimensions = new Array();

    this.displayChart = true;
	this.chartHtml = "";
	this.chartType = "";
    this.chartWidth = 800; // default for report
	this.chartHeight = 400; // default for report

	this.obj_type = (objectType) ? objectType : ""; // Ad-hock object queries
	this.customReport = (custRpt) ? custRpt : ""; // used to load custom data
	this.datawareCube = (dwCube) ? dwCube : ""; // path to a prebuilt olap cube in the datawarehouse (optional)

	/**
	 * Variable used to store the data returned from a query
	 *
	 * @private
	 * @var {Object}
	 */
    this.cubeData = null;

	/**
	 * Used to store callback references
	 *
	 * @public
	 * @var {Object}
	 */
	this.cbData = new Object();
}

/**
 * Load data for this cube
 *
 * @param {OlapCube_Query} query Query object
 */
OlapCube.prototype.loadData = function(query, tabular)
{
	if (typeof tabular == "undefined") var tabular = false;

	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(data)
	{
		this.cbData.cls.cubeData = data;
		this.cbData.cls.onload(this.cbData.cls.cubeData);
	};

	var args = this.getArgParams(query);    
	if (tabular)
		args[args.length] = ["format", "tabular"];
	/*
	ALib.m_debug = true;
	AJAX_TRACE_RESPONSE = true;
	*/
	ajax.exec("/controller/Olap/queryCubeJson", args);

	this.tmpQueryDimensions = query.dimensions;
}

/**
 * Load tabular data
 *
 * @param {OlapCube_Query} query Query object
 */
OlapCube.prototype.loadTabularData = function(query)
{
	this.loadData(query, true);
}

/**
 * Load Graph using Olap Cube
 *  
 * @param {OlapCube_Query} query Query object
 */
OlapCube.prototype.loadOlapGraph = function(query)
{    
    var ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(data)
    {
        if(data.chart)
        {
            this.cbData.cls.chartHtml = data.chart;
            this.cbData.cls.onload(this.cbData.cls.chartHtml);
        }
        else
        {
            this.cbData.cls.displayChart = false;
            this.cbData.cls.chartHtml = data.message;
            this.cbData.cls.onload(this.cbData.cls.chartHtml);
        }
    };
    
    var args = this.getArgParams(query);
    args[args.length] = ["chart_type", this.chartType];
    args[args.length] = ["chart_width", this.chartWidth];
    args[args.length] = ["chart_height", this.chartHeight];
    args[args.length] = ["display_graph", true];
    /*
    ALib.m_debug = true;
    AJAX_TRACE_RESPONSE = true;
    */

    ajax.exec("/controller/Olap/processGraphDisplay", args);
}

/**
 * Get available dimensions for this cube
 *
 * @param {OlapCube_Query} query The query definition for pulling
 * @return {array} Params to be sent to server for this cube
 */
OlapCube.prototype.getArgParams = function(query)
{
	var args = new Array();
	args[args.length] = ["obj_type", this.obj_type];
	args[args.length] = ["customReport", this.customReport];
	args[args.length] = ["datawareCube", this.datawareCube];

	// Set filters
	for (var i = 0; i < query.filters.length; i++)
	{
		var cond = query.filters[i];
		args[args.length] = ["filters[]", i];
		args[args.length] = ["filter_blogic_"+i, cond.blogic];
		args[args.length] = ["filter_field_"+i, cond.field];
		args[args.length] = ["filter_operator_"+i, cond.operator];
		args[args.length] = ["filter_condition_"+i, cond.condition];
	}

	// Set measures
	for (var i = 0; i < query.measures.length; i++)
	{
		args[args.length] = ["measures[]", i];
		args[args.length] = ["measure_name_"+i, query.measures[i].name];
		args[args.length] = ["measure_aggregate_"+i, query.measures[i].aggregate];
	}

	// Set dimensions
	for (var i = 0; i < query.dimensions.length; i++)
	{
		args[args.length] = ["dimensions[]", i];
		args[args.length] = ["dimension_name_"+i, query.dimensions[i].name];
		args[args.length] = ["dimension_sort_"+i, query.dimensions[i].sort];
		args[args.length] = ["dimension_fun_"+i, query.dimensions[i].fun];
	}


	return args;
}

/**
 * Get available dimensions for this cube
 */
OlapCube.prototype.getDimensions = function()
{
}

/**
 * Get available measures for this cube
 */
OlapCube.prototype.getMeasures = function()
{
}

/**
 * Callback function called when code data has finished loading
 */
OlapCube.prototype.onload = function(data)
{
}

/**
 * Print chart into innerHTML of container (con)
 *
 * @param {DOMElement} con Container that will house the chart/graph
 */
OlapCube.prototype.printChart = function(con)
{
	con.innerHTML = this.chartHtml;
}

/**
 * Print a summary table
 *
 * @param {DOMElement} con The container that will house the summary table
 */
OlapCube.prototype.printTable = function(con)
{
	// Print table
	var tbl = new CToolTable("100%");
	tbl.print(con);

	// Print headers for dimension 2 if exists
	if (this.dimensions[1] && this.dimensions[1].entries.length)
	{
		tbl.addHeader("&nbsp;", "right");
		//var rw = tbl.addRow();
		for (var j = 0; j < this.dimensions[1].entries.length; j++)
		{
			tbl.addHeader(this.dimensions[1].entries[j].label, "right");
		}
		tbl.addHeader("Total", "right");
	}
	var val = 0;

	var totalOfTotals = 0;
	//ALib.m_debug = true;
	// Print data
	for (var i = 0; i < this.dimensions[0].entries.length; i++)
	{
		var rw = tbl.addRow();
		var d1 = this.dimensions[0].entries[i].value;

		rw.addCell(this.dimensions[0].entries[i].label, true);

		if (this.dimensions[1] && this.dimensions[1].entries.length)
		{
			var linetotal = 0;
			for (var j = 0; j < this.dimensions[1].entries.length; j++)
			{
				val = this.getValue(d1, this.dimensions[1].entries[j].value, 0);
				//ALib.trace(val);
				//val = new NumberFormat(String(val), 0).toFormatted();
				rw.addCell(String(val), false, "right");
				linetotal += val;
				this.dimensions[1].entries[j].total += val;
			}
			//var val = new NumberFormat(String(linetotal), 0).toFormatted();
			//rw.addCell(val, true, "right");
			rw.addCell(String(linetotal), true, "right");
			totalOfTotals += linetotal;
		}
		else
		{
			val = this.getValue(d1, null, 0);
			rw.addCell(String(val), false, "right");
			totalOfTotals += val;
		}
	}

	// Print dimension2 totals
	if (this.dimensions[1])
	{
		var rw = tbl.addRow();
		rw.addCell("Total", true, "right");
		for (var j = 0; j < this.dimensions[1].entries.length; j++)
		{
			//var val = new NumberFormat(String(this.dimensions[1].entries[j].total), 0).toFormatted();
			//rw.addCell(val, false, "right");
			var val = this.dimensions[1].entries[j].total;
			rw.addCell(String(val), false, "right");
		}
		//var val = new NumberFormat(String(totalOfTotals), 0).toFormatted();
		//rw.addCell(val, true, "right");
		rw.addCell(String(totalOfTotals), true, "right");
	}
	else
	{
		var rw = tbl.addRow();
		rw.addCell("Total", true, "right");
		//var val = new NumberFormat(String(totalOfTotals), 0).toFormatted();
		rw.addCell(String(totalOfTotals), true, "right");
	}
}

/**
 * Get the value at a specified dimension
 *
 * @param {string} d1 The field name of the dimension 1
 * @param {string} d2 Optional field name of the second dimension
 * @param {number} measureind The index of the measure to pull (default to 0)
 */
OlapCube.prototype.getValue = function(d1, d2, measureind)
{
	if (!this.dataXml)
		return "";

	for (var i = 0; i < this.dataXml.getNumChildren(); i++)
	{
		var dim = this.dataXml.getChildNode(i);
		var val = unescape(dim.getAttribute("value"));
		if (val == d1)
		{
			if (d2)
			{
				for (var j = 0; j < dim.getNumChildren(); j++)
				{
					var dim2 = dim.getChildNode(j);
					var val2 = unescape(dim2.getAttribute("value"));

					if (val2 == d2)
					{
						var meas_val = unescape(dim2.getChildNode(measureind).m_text);
						if (meas_val)
							meas_val = parseFloat(meas_val);
						else
							meas_val = 0;
						return meas_val;
					}
				}
			}
			else
			{
				var meas_val = unescape(dim.getChildNode(measureind).m_text);
				if (meas_val)
					meas_val = parseFloat(meas_val);
				else
					meas_val = 0;
				return meas_val;
			}
		}
	}

	return 0;
}

/**
 * Get the value at a specified dimension
 *
 * @param {string} dname The field name of the dimension to get children for
 */
OlapCube.prototype.getDimChildren = function(dname)
{
	// Set class property to store values
	this.dimEachChildren = new Array();

	// Get level
	var lvl = -1;
	for (var i = 0; i < this.tmpQueryDimensions.length; i++)
	{
		if (dname == this.tmpQueryDimensions[i].name)
			lvl = i;
	}

	if (-1 == lvl) // dim not found
		return false;

	this.getDimChildrenBydDepth(this.cubeData, lvl, 0);

	// TODO: now sort the values
	
	var tmpArr = this.dimEachChildren;
	this.dimEachChildren = null; // cleanup
	return tmpArr;
}

/**
 * Get the values of a dimension at a specified depth
 *
 * @param {string} dname The field name of the dimension to get children for
 */
OlapCube.prototype.getDimChildrenBydDepth = function(data, gotoDepth, currDepth)
{
	var cd = (currDepth) ? currDepth : 0;

	if (gotoDepth == cd)
	{
		for(var index in data) 
		{
			var bfound = false;
			for (var i = 0; i < this.dimEachChildren.length; i++)
			{
				if (this.dimEachChildren[i] == index)
					bfound = true;
			}

			if (!bfound)
				this.dimEachChildren.push(index);
		}
	}
	else
	{
		// Dig another level deeper
		for(var index in data) 
		{
			this.getDimChildrenBydDepth(data[index], gotoDepth, (cd + 1));
		}
	}

}

 /**
  * Loads the dimension and measures of the olap object/dataware
  *
  * @public
  * @this {OlapCube}
  * @param {type} name   description
  */
OlapCube.prototype.loadDefinition = function()
{
    var args = new Array();
    
    if(this.obj_type)
        args[args.length] = ['obj_type', this.obj_type];
        
    if(this.datawareCube)
        args[args.length] = ['datawareCube', this.datawareCube];
        
    if(this.customReport)
        args[args.length] = ['customReport', this.customReport];
        
    ajax = new CAjax('json');
    ajax.cbData.cls = this;    
    ajax.onload = function(ret)
    {
        this.cbData.cls.onloadDefinition(ret.dimensions, ret.measures);
    };
    ajax.exec("/controller/Olap/getCubeData", args);
}

/**
* To be over-ridden by calling process to detect when definition is finished loading.
*
* @public
* @this {OlapCube} 
* @param {Object} dimensions    Object contains dimension data
* @param {Object} measures      Object contains measures data
*/
OlapCube.prototype.onloadDefinition = function(dimensions, measures)
{    
}

/**
 * @fileoverview This object is used to build queries for olap cubes
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 *
 * @constructor
 * @param {OlapCube} cube The OlapCube we will be working with to create this table
 */
function OlapCube_Query()
{
	/**
	* Measures to include in results
	*
	* Properties of each element:
	* .name = the name of the measure
	* .aggregate = 'sum' | 'avg' | 'max' | 'min'
	*
	* @public
	* @type {Object[]}
	*/
	this.measures = new Array();

	/**
	* Dimensions to pull
	*
	* Properties of each element:
	* .name = the name of the measure
	* .sort = 'asc' | 'desc'
	* .fun = optional function - usually used for formatting time-series dimensions
	*
	* @public
	* @type {Object[]}
	*/
	this.dimensions = new Array();

	/**
	* Filters or conditions
	*
	* Properties of each element:
	* .blogic = 'and' | 'or'
	* .field = The name of the field or dimension to check against
	* .operator = Any standard ANT query operators
	* .condition = The conditional text to query against.
	*
	* @public
	* @type {Object[]}
	*/
	this.filters = new Array();
}

/**
 * Add a measure to this query
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) agg The aggregate function to use
 */
OlapCube_Query.prototype.addMeasure = function(dname, agg)
{
	var a = (agg) ? agg : "sum";
	this.measures[this.measures.length] = {name:dname, aggregate:a};
}

/**
 * Add a dimension to the query
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) s The order to sort this dimension in. Can be 'asc' or 'desc'. Defaults to 'asc'
 * @param (string) f Optional formatting function to use
 */
OlapCube_Query.prototype.addDimension = function(dname, s, f)
{
	this.dimensions[this.dimensions.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a filter condition
 *
 * @param {string} bl The boolean logic to use. Can be 'and' or 'or'
 * @param (string) fld The field/dimension name to query
 * @param (string) op ANT operator to use
 * @param (string) cond The condition to query against
 */
OlapCube_Query.prototype.addFilter = function(bl, fld, op, cond)
{
	this.filters[this.filters.length] = {blogic:bl, field:fld, operator:op, condition:cond};
}

/**
 * @fileoverview This class is used to create all charts from olap cubes
 *
 * All graph related functions to be encapsulated inside this class including
 * getting/setting options, generating the graph, updating, formatting, and even saving/loading data
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of OlapCube
 *
 * @constructor
 * @param {OlapCube} cube The olap cube is required to generate any graphs
 */
function OlapCube_Graph(cube)
{
	/**
	 * The OLAP cube that is used to generate this graph
	 *
	 * @type {OlapCube}
	 */
	this.cube = new OlapCube(cube.obj_type, cube.customReport, cube.datawareCube);
    
    /**
    * Measures to include in results
    *
    * Properties of each element:
    * .name = the name of the measure
    * .aggregate = 'sum' | 'avg' | 'max' | 'min'
    *
    * @public
    * @type {Object[]}
    */
    this.dimensions = new Array();

    /**
    * Dimensions for rows
    *
    * Properties of each element:
    * .name = the name of the measure
    * .sort = 'asc' | 'desc'
    * .fun = optional function - usually used for formatting time-series dimensions
    *
    * @public
    * @type {Object[]}
    */
    this.measures = new Array();

    /**
    * Filters or conditions
    *
    * Properties of each element:
    * .blogic = 'and' | 'or'
    * .field = The name of the field or dimension to check against
    * .operator = Any standard ANT query operators
    * .condition = The conditional text to query against.
    *
    * @public
    * @type {Object[]}
    */
    this.filters = new Array();
    
    this.chartWidth = 800;
    this.chartHeight = 400;
    this.chartType = null;
}

/**
 * Print the graph view
 *
 * @param {DOMElement} con The element to print table in
 * @param (bool) loaded Used for recurrsive calling to make sure data is loaded before building the table
 */
OlapCube_Graph.prototype.print = function(con, loaded)
{    
    if (typeof loaded == "undefined") loaded = false;
    
    // Check to see if the data cube has been loaded
    if (!loaded)
    {        
        alib.dom.styleSet(con, "height", "50px");

        this.cube.cbData.graph = this;
        this.cube.cbData.con = con;

        this.cube.onload = function()
        {
            this.cbData.graph.print(this.cbData.con, true);
        }

        var query = new OlapCube_Query();

        for (var i = 0; i < this.measures.length; i++)
            query.addMeasure(this.measures[i].name, this.measures[i].aggregate);

        for (var i = 0; i < this.dimensions.length; i++)
            query.addDimension(this.dimensions[i].name, this.dimensions[i].sort, this.dimensions[i].fun);

        for (var i = 0; i < this.filters.length; i++)
            query.addFilter(this.filters[i].blogic, this.filters[i].field, this.filters[i].operator, this.filters[i].condition);
        
        if(this.chartType)
        {
            this.cube.chartWidth = this.chartWidth;
			if (this.chartHeight) this.cube.chartHeight = this.chartHeight;
            this.cube.chartType = this.chartType;
            this.cube.loadOlapGraph(query, con);            
        }        
        return;
    }
    
    
    if(this.cube.displayChart)
        alib.dom.styleSet(con, "height", this.chartHeight);
        
    con.innerHTML = this.cube.chartHtml;
}

/**
 * Add a measure to use as data
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) agg The aggregate function to use
 */
OlapCube_Graph.prototype.addMeasure = function(mname, agg)
{
    var a = (agg) ? agg : "sum";
    this.measures[this.measures.length] = {name:mname, aggregate:a};
}

/**
 * Add a Dimension dimension to the table
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) s The order to sort this dimension in. Can be 'asc' or 'desc'. Defaults to 'asc'
 * @param (string) f Optional formatting function to use
 */
OlapCube_Graph.prototype.addDimension = function(dname, s, f)
{
    this.dimensions[this.dimensions.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a filter condition
 *
 * @param {string} bl The boolean logic to use. Can be 'and' or 'or'
 * @param (string) fld The field/dimension name to query
 * @param (string) op ANT operator to use
 * @param (string) cond The condition to query against
 */
OlapCube_Graph.prototype.addFilter = function(bl, fld, op, cond)
{
    this.filters[this.filters.length] = {blogic:bl, field:fld, operator:op, condition:cond};
}

/**
 * @fileoverview This table creates a tabular view from a populated OlapCube
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 *
 * @constructor
 * @param {OlapCube} cube The OlapCube we will be working with to create this table
 */
function OlapCube_Table_Tabular(cube)
{
	/**
	* Data cube we are working with
	*
	* @private
	* @type {OlapCube}
	*/
	this.cube = new OlapCube(cube.obj_type, cube.customReport, cube.datawareCube);


	/**
	* Dimensions for columns
	*
	* Properties of each element:
	* .name = the name of the measure
	* .sort = 'asc' | 'desc'
	* .fun = optional function - usually used for formatting time-series dimensions
	*
	* @public
	* @type {Object[]}
	*/
	this.columns = new Array();

	/**
	* Filters or conditions
	*
	* Properties of each element:
	* .blogic = 'and' | 'or'
	* .field = The name of the field or dimension to check against
	* .operator = Any standard ANT query operators
	* .condition = The conditional text to query against.
	*
	* @public
	* @type {Object[]}
	*/
	this.filters = new Array();
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param (bool) loaded Used for recurrsive calling to make sure data is loaded before building the table
 */
OlapCube_Table_Tabular.prototype.print = function(con, loaded)
{
	if (typeof loaded == "undefined") loaded = false;

	// Check to see if the data cube has been loaded
	if (!loaded)
	{
		con.innerHTML = "Loading....";

		this.cube.cbData.sumTable = this;
		this.cube.cbData.con = con;

		this.cube.onload = function()
		{
			this.cbData.sumTable.print(this.cbData.con, true);
		}

		var query = new OlapCube_Query();

		for (var i = 0; i < this.columns.length; i++)
			query.addDimension(this.columns[i].name, this.columns[i].sort, this.columns[i].fun);

		for (var i = 0; i < this.filters.length; i++)
			query.addFilter(this.filters[i].blogic, this.filters[i].field, this.filters[i].operator, this.filters[i].condition);

		this.cube.loadTabularData(query);
		return;
	}

	con.innerHTML = "";

	/// Get data
	// Build table
	var tbl = alib.dom.createElement("table", con);
	var tbody = alib.dom.createElement("tbody", tbl);
	this.tbody = tbody;

	// Print column headers
	// ---------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	// first make empty headers for the number of rows
	for (var i = 0; i < this.columns.length; i++)
		var td = alib.dom.createElement("th", row, this.columns[i].name);

	// Now print each row
	for (var i = 0; i < this.cube.cubeData.length; i++)
	{
		var row = alib.dom.createElement("tr", tbody);

		for (var j = 0; j < this.columns.length; j++)
		{
			var val = (this.cube.cubeData[i][this.columns[j].name]) ? this.cube.cubeData[i][this.columns[j].name] : ""
			var td = alib.dom.createElement("td", row, val);
		}
	}
}

/**
 * Add a column dimension to the table
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) s The order to sort this dimension in. Can be 'asc' or 'desc'. Defaults to 'asc'
 * @param (string) f Optional formatting function to use
 */
OlapCube_Table_Tabular.prototype.addColumn = function(dname, s, f)
{
	this.columns[this.columns.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a filter condition
 *
 * @param {string} bl The boolean logic to use. Can be 'and' or 'or'
 * @param (string) fld The field/dimension name to query
 * @param (string) op ANT operator to use
 * @param (string) cond The condition to query against
 */
OlapCube_Table_Tabular.prototype.addFilter = function(bl, fld, op, cond)
{
	this.filters[this.filters.length] = {blogic:bl, field:fld, operator:op, condition:cond};
}

/**
 * @fileoverview This table creates a summary view from a populated OlapCube
 *
 * Example:
 *                      | Measure 1 |  Measure 2 |
 * -----------------------------------------------
 * Row 1  | Row 1.1     | 1         | 2          |
 * -----------------------------------------------
 *        | Row 1.2     | 3         | 2          |
 * -----------------------------------------------
 *                Total | 4         | 5          |
 * -----------------------------------------------
 * Row 2  | Row 2.1     | 4         | 2          |
 * -----------------------------------------------
 *        | Row 2.2     | 1         | 1          |
 * -----------------------------------------------
 *                Total | 5         | 3          |
 * -----------------------------------------------
 *          Grand Total | 9         | 8          |
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 *
 * @constructor
 * @param {OlapCube} cube The OlapCube we will be working with to create this table
 */
function OlapCube_Table_Summary(cube)
{
	/**
	* Data cube we are working with.
	*
	* We make a copy to try and keep the parameters all localized
	*
	* @private
	* @type {OlapCube}
	*/
	this.cube = new OlapCube(cube.obj_type, cube.customReport, cube.datawareCube);

	/**
	* Show total for rows
	*
	* @public
	* @type {bool}
	*/
	this.showTotalRows = true;

	/**
	* Table body
	*
	* @private
	* @type {DOMElementTBody}
	*/
	this.tbody = null;

	/**
	* Array holding the grand totals of each measure
	*
	* @public
	* @type {number[]}
	*/
	this.grandTotals = new Array();

	/**
	* Measures to include in results
	*
	* Properties of each element:
	* .name = the name of the measure
	* .aggregate = 'sum' | 'avg' | 'max' | 'min'
	*
	* @public
	* @type {Object[]}
	*/
	this.measures = new Array();

	/**
	* Dimensions for rows
	*
	* Properties of each element:
	* .name = the name of the measure
	* .sort = 'asc' | 'desc'
	* .fun = optional function - usually used for formatting time-series dimensions
	*
	* @public
	* @type {Object[]}
	*/
	this.rows = new Array();

	/**
	* Filters or conditions
	*
	* Properties of each element:
	* .blogic = 'and' | 'or'
	* .field = The name of the field or dimension to check against
	* .operator = Any standard ANT query operators
	* .condition = The conditional text to query against.
	*
	* @public
	* @type {Object[]}
	*/
	this.filters = new Array();
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param (bool) loaded Used for recurrsive calling to make sure data is loaded before building the table
 */
OlapCube_Table_Summary.prototype.print = function(con, loaded)
{
	if (typeof loaded == "undefined") loaded = false;

	// Check to see if the data cube has been loaded
	if (!loaded)
	{
		con.innerHTML = "Loading....";

		this.cube.cbData.sumTable = this;
		this.cube.cbData.con = con;

		this.cube.onload = function()
		{
			this.cbData.sumTable.print(this.cbData.con, true);
		}

		var query = new OlapCube_Query();

		for (var i = 0; i < this.measures.length; i++)
			query.addMeasure(this.measures[i].name, this.measures[i].aggregate);

		for (var i = 0; i < this.rows.length; i++)
			query.addDimension(this.rows[i].name, this.rows[i].sort, this.rows[i].fun);

		for (var i = 0; i < this.filters.length; i++)
			query.addFilter(this.filters[i].blogic, this.filters[i].field, this.filters[i].operator, this.filters[i].condition);

		this.cube.loadData(query);
		return;
	}

	con.innerHTML = "";

	/// Get data
	var rows = new Array();
	for (var i = 0; i < this.rows.length; i++)
		rows[rows.length] = this.rows[i].name;

	var measures = new Array();
	for (var i = 0; i < this.measures.length; i++)
		measures[measures.length] = this.measures[i].name;

	// Build table
	var tbl = alib.dom.createElement("table", con);
	var tbody = alib.dom.createElement("tbody", tbl);
	this.tbody = tbody;

	// Print column headers for measures
	// ---------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	// first make empty headers for the number of rows
	if (rows.length)
	{
		var td = alib.dom.createElement("th", row);
		td.setAttribute("colspan", rows.length+1);
		td.innerHTML = "&nbsp;";
	}
	// Now print a header for each measure/data entry
	for (var i = 0; i < measures.length; i++)
	{
		var td = alib.dom.createElement("th", row);
		td.innerHTML = measures[i];
	}

	// Now build table
	this.populateTableRows(this.cube.cubeData, rows, measures, 0, false);

	// Now show grand totals
	if (this.showTotalRows)
	{
		var row = alib.dom.createElement("tr", this.tbody);
		// Print spacers
		for (var j = 1; j < measures.length; j++)
			var td = alib.dom.createElement("td", row, "&nbsp;");

		var td = alib.dom.createElement("td", row, "Grand Total:");
		alib.dom.styleSet(td, 'text-align', 'right');

		for(var index in this.grandTotals) 
		{
			var td = alib.dom.createElement("td", row, String(this.grandTotals[index]));
			alib.dom.styleSet(td, 'text-align', 'right');
		}
	}
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param {string[]} rows Array of dimensions used for each row level
 * @param (string[]) data Array of measures that are to be summarized by
 */
OlapCube_Table_Summary.prototype.populateTableRows = function(data, rows, measures, lvl, domRow)
{
	// Check if we are in the last dimension
	var dimFinished = (lvl >= rows.length-1) ? true : false;
	var totals = new Array();

	// Loop through this level data and create cells
	var i = 0;
	for(var index in data) 
	{
		var row = (domRow) ? domRow : alib.dom.createElement("tr", this.tbody);

		// If we are not on the first item, then print spacers below parent
		if (i>0 && lvl>0)
		{
			for (var j = 0; j < lvl; j++)
			{
				var td = alib.dom.createElement("td", row);
				td.innerHTML = "&nbsp;";
			}
		}

		var rowCell = alib.dom.createElement("td", row);
		rowCell.innerHTML = index;

		// Check if we are on the last dimension
		if (dimFinished)
		{
			// Print measures for this dimension
			for (var j = 0; j < measures.length; j++)
			{
				var td = alib.dom.createElement("td", row);
				alib.dom.styleSet(td, 'text-align', 'right');
				td.innerHTML = String(data[index][measures[j]]);

				// Set subtotals and grand totals
				if (!totals[measures[j]])
					totals[measures[j]] = 0;
				if (!this.grandTotals[measures[j]])
					this.grandTotals[measures[j]] = 0;
				totals[measures[j]] += parseFloat(data[index][measures[j]]);
				this.grandTotals[measures[j]] += parseFloat(data[index][measures[j]]);
			}

		}
		else
		{
			// Loop through next dimension
			this.populateTableRows(data[index], rows, measures, (lvl + 1), row);
		}

		i++;
		domRow = null; // only first element may print on the parent row
	}

	// If we just printed the measures, then also print totals
	if (dimFinished && this.showTotalRows)
	{
		var row = alib.dom.createElement("tr", this.tbody);
		// Print spacers
		for (var j = 0; j < lvl; j++)
			var td = alib.dom.createElement("td", row, "&nbsp;");

		var td = alib.dom.createElement("td", row, "Total:");
		alib.dom.styleSet(td, 'text-align', 'right');

		for(var index in totals) 
		{
			var td = alib.dom.createElement("td", row, String(totals[index]));
			alib.dom.styleSet(td, 'text-align', 'right');
		}
	}
}

/**
 * Add a measure to use as data
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) agg The aggregate function to use
 */
OlapCube_Table_Summary.prototype.addMeasure = function(dname, agg)
{
	var a = (agg) ? agg : "sum";
	this.measures[this.measures.length] = {name:dname, aggregate:a};
}

/**
 * Add a row dimension to the table
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) s The order to sort this dimension in. Can be 'asc' or 'desc'. Defaults to 'asc'
 * @param (string) f Optional formatting function to use
 */
OlapCube_Table_Summary.prototype.addRow = function(dname, s, f)
{
	this.rows[this.rows.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a filter condition
 *
 * @param {string} bl The boolean logic to use. Can be 'and' or 'or'
 * @param (string) fld The field/dimension name to query
 * @param (string) op ANT operator to use
 * @param (string) cond The condition to query against
 */
OlapCube_Table_Summary.prototype.addFilter = function(bl, fld, op, cond)
{
	this.filters[this.filters.length] = {blogic:bl, field:fld, operator:op, condition:cond};
}

/**
 * @fileoverview This table creates a pivot/summary view from a populated OlapCube
 *
 * This class will take data from an OlapCube and print it out in a matrix/pivot table. 
 *
 * Example:
 *                      | Column 1  |  Column 2  | Total
 * -------------------------------------------------------
 * Row 1  | Row 1.1     | 1         | 2          | 3
 * -------------------------------------------------------
 *        | Row 1.2     | 3         | 2          | 5
 * -------------------------------------------------------
 *                Total | 4         | 5          | 8    
 * -------------------------------------------------------
 * Row 2  | Row 2.1     | 4         | 2          | 6
 * -------------------------------------------------------
 *        | Row 2.2     | 1         | 1          | 2
 * -------------------------------------------------------
 *                Total | 5         | 3          | 8    
 * -------------------------------------------------------
 *          Grand Total | 9         | 8          | 16 
 *
 * The data from the cube will be in the following structure:
 * [Row 1][Row1.1][Column 1][Column 2]["measure"]
 * [Row 1][Row1.2][Column 1][Column 2]["measure"]
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 *
 * @constructor
 * @param {OlapCube} cube The OlapCube we will be working with to create this table
 */
function OlapCube_Table_Matrix(cube)
{
	/**
	* Data cube we are working with.
	*
	* We make a copy to try and keep the parameters all localized
	*
	* @private
	* @type {OlapCube}
	*/
	this.cube = new OlapCube(cube.obj_type, cube.customReport, cube.datawareCube);

	/**
	* Show subtotals
	*
	* @public
	* @type {bool}
	*/
	this.showSubtotals = true;

	/**
	* Array holding the grand totals of each measure
	*
	* @public
	* @type {number[]}
	*/
	this.grandTotalsCols = new Array();

	/**
	* Array holding the grand totals of each measure
	*
	* @public
	* @type {number[]}
	*/
	this.grandTotalsRows = new Array();

	/**
	* Array that stores reference to columns by dim name then value
	*
	* @private
	* @type {array[string[]]}
	*/
	this.dimColChildren = new Array();

	/**
	* Measures to include in results
	*
	* Properties of each element:
	* .name = the name of the measure
	* .aggregate = 'sum' | 'avg' | 'max' | 'min'
	*
	* @public
	* @type {Object[]}
	*/
	this.measures = new Array();

	/**
	* Dimensions for rows
	*
	* Properties of each element:
	* .name = the name of the measure
	* .sort = 'asc' | 'desc'
	* .fun = optional function - usually used for formatting time-series dimensions
	*
	* @public
	* @type {Object[]}
	*/
	this.rows = new Array();

	/**
	* Dimensions for columns
	*
	* Properties of each element:
	* .name = the name of the measure
	* .sort = 'asc' | 'desc'
	* .fun = optional function - usually used for formatting time-series dimensions
	*
	* @public
	* @type {Object[]}
	*/
	this.columns = new Array();

	/**
	* Filters or conditions
	*
	* Properties of each element:
	* .blogic = 'and' | 'or'
	* .field = The name of the field or dimension to check against
	* .operator = Any standard ANT query operators
	* .condition = The conditional text to query against.
	*
	* @public
	* @type {Object[]}
	*/
	this.filters = new Array();
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param (bool) loaded Used for recurrsive calling to make sure data is loaded before building the table
 */
OlapCube_Table_Matrix.prototype.print = function(con, loaded)
{
	if (typeof loaded == "undefined") loaded = false;

	// Check to see if the data cube has been loaded
	if (!loaded)
	{
		con.innerHTML = "Loading....";

		this.cube.cbData.matTable = this;
		this.cube.cbData.con = con;

		this.cube.onload = function()
		{
			this.cbData.matTable.print(this.cbData.con, true);
		}

		var query = new OlapCube_Query();

		for (var i = 0; i < this.measures.length; i++)
			query.addMeasure(this.measures[i].name, this.measures[i].aggregate);

		for (var i = 0; i < this.rows.length; i++)
			query.addDimension(this.rows[i].name, this.rows[i].sort, this.rows[i].fun);

		for (var i = 0; i < this.columns.length; i++)
			query.addDimension(this.columns[i].name, this.columns[i].sort, this.columns[i].fun);

		for (var i = 0; i < this.filters.length; i++)
			query.addFilter(this.filters[i].blogic, this.filters[i].field, this.filters[i].operator, this.filters[i].condition);

		this.cube.loadData(query);
		return;
	}

	con.innerHTML = "";

	/// Get data
	var rows = new Array();
	for (var i = 0; i < this.rows.length; i++)
		rows[rows.length] = this.rows[i].name;

	var cols = new Array();
	for (var i = 0; i < this.columns.length; i++)
		cols[cols.length] = this.columns[i].name;

	var measures = new Array();
	for (var i = 0; i < this.measures.length; i++)
		measures[measures.length] = this.measures[i].name;

	con.innerHTML = "";
	var tbl = alib.dom.createElement("table", con);
	var tbody = alib.dom.createElement("tbody", tbl);
	this.tbody = tbody;

	// Print column headers for measures
	// ---------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	// first make empty headers for the number of rows
	if (rows.length)
	{
		var td = alib.dom.createElement("th", row);
		td.setAttribute("colspan", rows.length);
		td.innerHTML = "&nbsp;";
	}
	// Now print a header for each measure/data entry
	for (var i = 0; i < cols.length; i++)
	{
		var dimChildren = this.cube.getDimChildren(cols[i]);
		this.dimColChildren = dimChildren;

		for (var j = 0; j < dimChildren.length; j++)
		{
			var td = alib.dom.createElement("th", row);
			td.innerHTML = dimChildren[j];
		}
	}

	// Now build table
	this.populateTableRows(this.cube.cubeData, rows, cols, measures, 0, false);

	// Now show grand totals
	if (this.grandTotalsCols)
	{
		var row = alib.dom.createElement("tr", this.tbody);
		// Print spacers
		for (var j = 1; j < measures.length; j++)
			var td = alib.dom.createElement("td", row, "&nbsp;");

		var td = alib.dom.createElement("td", row, "Grand Total:");
		alib.dom.styleSet(td, 'text-align', 'right');

		var grandOfCols = 0;
		for(var index in this.grandTotalsCols) 
		{
			var td = alib.dom.createElement("td", row, String(this.grandTotalsCols[index]));
			alib.dom.styleSet(td, 'text-align', 'right');
			grandOfCols += this.grandTotalsCols[index];
		}

		if (this.grandTotalsRows)
		{
			var td = alib.dom.createElement("td", row, String(grandOfCols));
			alib.dom.styleSet(td, 'text-align', 'right');
		}
	}
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param {string[]} rows Array of dimensions used for each row level
 * @param (string[]) data Array of measures that are to be summarized by
 */
OlapCube_Table_Matrix.prototype.populateTableRows = function(data, rows, cols, measures, lvl, domRow)
{
	// Check if we are in the last dimension
	var dimRowsFinished = (lvl >= rows.length) ? true : false;
	var dimFinished = (lvl >= (rows.length + cols.length)) ? true : false;
	var colTotals = new Array();

	// Loop through this level data and create cells
	var i = 0;
	for(var index in data) 
	{
		var row = (domRow) ? domRow : alib.dom.createElement("tr", this.tbody);

		// If we are not on the first item, then print spacers below parent
		if (i>0 && lvl>0 && !dimRowsFinished)
		{
			for (var j = 0; j < lvl; j++)
			{
				var td = alib.dom.createElement("td", row);
				td.innerHTML = "&nbsp;";
			}
		}

		var rowCell = alib.dom.createElement("td", row);
		rowCell.innerHTML = index;

		// Check if we are on the last dimension
		if ((lvl + 1) >= rows.length)
		{
			var rowTotal = 0;
			// Print measures for this dimension
			for (var j = 0; j < this.dimColChildren.length; j++)
			{
				var val = this.dimColChildren[j];

				var measureVal = this.getColMeasure(data[index], val, measures);

				var td = alib.dom.createElement("td", row);
				alib.dom.styleSet(td, 'text-align', 'right');
				td.innerHTML = String(measureVal);

				// Set column totals
				if (!colTotals[val])
					colTotals[val] = 0;
				colTotals[val] += parseFloat(measureVal);

				// Set row torowTotaltals
				rowTotal += parseFloat(measureVal);

				// Set grand totals
				if (!this.grandTotalsCols[val])
					this.grandTotalsCols[val] = 0;
				this.grandTotalsCols[val] += parseFloat(measureVal);
			}

			if (this.grandTotalsRows)
			{
				var td = alib.dom.createElement("td", row);
				alib.dom.styleSet(td, 'text-align', 'right');
				td.innerHTML = String(rowTotal);
			}
		}
		else
		{

			// Loop through next dimension
			this.populateTableRows(data[index], rows, cols, measures, (lvl + 1), row);
		}

		i++;
		domRow = null; // only first element may print on the parent row
	}

	// If we just printed the measures, then also print colTotals
	/*
	if (dimRowsFinished && this.showSubtotals)
	{
		var row = alib.dom.createElement("tr", this.tbody);
		// Print spacers
		for (var j = 0; j < lvl; j++)
			var td = alib.dom.createElement("td", row, "&nbsp;");

		var td = alib.dom.createElement("td", row, "Total:");
		alib.dom.styleSet(td, 'text-align', 'right');

		for(var index in colTotals) 
		{
			var td = alib.dom.createElement("td", row, String(colTotals[index]));
			alib.dom.styleSet(td, 'text-align', 'right');
		}
	}
	*/
}

/**
 * Get the measure for a specified column
 */
OlapCube_Table_Matrix.prototype.getColMeasure = function(data, val, measures)
{
	ret = 0;

	// check to see if 'val' is
	// an array and then dig deeper if it is and print a cell for each end value

	if (data[val])
	   ret = data[val][measures[0]];


	return ret;
}

/**
 * Print the contents of this matrix report into 'con'
 *
 * @param {DOMElement} con The element to print table in
 * @param {string[]} rows Array of dimensions used for each row level
 * @param (string[]) data Array of measures that are to be summarized by
 */
OlapCube_Table_Matrix.prototype.populateTableCols = function(data, rows, cols, measures, lvl, domRow)
{
	// Check if we are in the last dimension
	var dimFinished = (lvl >= rows.length) ? true : false;
	var totals = new Array();

	// Loop through this level data and create cells
	var i = 0;
	for(var index in data) 
	{
		var row = (domRow) ? domRow : alib.dom.createElement("tr", this.tbody);

		// If we are not on the first item, then print spacers below parent
		if (i>0 && lvl>0)
		{
			for (var j = 0; j < lvl; j++)
			{
				var td = alib.dom.createElement("td", row);
				td.innerHTML = "&nbsp;";
			}
		}

		var rowCell = alib.dom.createElement("td", row);
		rowCell.innerHTML = index;

		// Check if we are on the last dimension
		if (dimFinished)
		{
			// Print measures for this dimension
			for (var j = 0; j < cols.length; j++)
			{
				var td = alib.dom.createElement("td", row);
				alib.dom.styleSet(td, 'text-align', 'right');
				td.innerHTML = String(data[index][measures[j]]);

				// Set subtotals and grand totals
				if (!totals[measures[j]])
					totals[measures[j]] = 0;
				totals[measures[j]] += parseFloat(data[index][measures[j]]);

				if (!this.grandTotalsCols[measures[j]])
					this.grandTotalsCols[measures[j]] = 0;
				this.grandTotalsCols[measures[j]] += parseFloat(data[index][measures[j]]);
			}

		}
		else
		{
			// Loop through next dimension
			this.populateTableRows(data[index], rows, cols, measures, (lvl + 1), row);
		}

		i++;
		domRow = null; // only first element may print on the parent row
	}

	// If we just printed the measures, then also print totals
	if (dimFinished && this.showTotalRows)
	{
		var row = alib.dom.createElement("tr", this.tbody);
		// Print spacers
		for (var j = 0; j < lvl; j++)
			var td = alib.dom.createElement("td", row, "&nbsp;");

		var td = alib.dom.createElement("td", row, "Total:");
		alib.dom.styleSet(td, 'text-align', 'right');

		for(var index in totals) 
		{
			var td = alib.dom.createElement("td", row, String(totals[index]));
			alib.dom.styleSet(td, 'text-align', 'right');
		}
	}
}

/**
 * Add a measure to use as data
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) agg The aggregate function to use
 */
OlapCube_Table_Matrix.prototype.addMeasure = function(dname, agg)
{
	var a = (agg) ? agg : "sum";
	this.measures[this.measures.length] = {name:dname, aggregate:a};
}

/**
 * Add a column dimension to this matrix table
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) agg The aggregate function to use
 */
OlapCube_Table_Matrix.prototype.addColumn = function(dname, s, f)
{
	this.columns[this.columns.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a row dimension to the table
 *
 * @param {string} dname Name of the dimension/field to use as a measure
 * @param (string) s The order to sort this dimension in. Can be 'asc' or 'desc'. Defaults to 'asc'
 * @param (string) f Optional formatting function to use
 */
OlapCube_Table_Matrix.prototype.addRow = function(dname, s, f)
{
	this.rows[this.rows.length] = {name:dname, sort:s, fun:f};
}

/**
 * Add a filter condition
 *
 * @param {string} bl The boolean logic to use. Can be 'and' or 'or'
 * @param (string) fld The field/dimension name to query
 * @param (string) op ANT operator to use
 * @param (string) cond The condition to query against
 */
OlapCube_Table_Matrix.prototype.addFilter = function(bl, fld, op, cond)
{
	this.filters[this.filters.length] = {blogic:bl, field:fld, operator:op, condition:cond};
}

/**
* @fileOverview The New Report will display report form to create object or dataware report
*
* @author:    Marl Tumulak, marl.tumulak@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Pivot Table Options
 *
 * @constructor  
 * @param {Object} obj The parent Object
 */
function AntObjectLoader_Report_Dialog(obj)
{
    this.parentObject = obj;
    
    this.loaderCls = this.parentObject.loaderCls;
    this.bodyFormCon = this.parentObject.bodyFormCon;
    
    this.reportType = this.parentObject.reportType;
    this.objType = this.parentObject.objType;
    this.cubePath = this.parentObject.cubePath;
    
    this.newReportForm = new Object();
}

/**
* Prints the create new report dialog
*
* @public
* @this {AntObjectLoader_Report_Dialog}
*/
AntObjectLoader_Report_Dialog.prototype.print = function()
{
    this.reportObject = new Report(null);
    this.reportObject.cls = this;
    this.buildNewReportType();
}

/**
 * Builds the New Report Dialog
 *
 * @public
 * @this {AntObjectLoader_Report_Dialog}  
 */
AntObjectLoader_Report_Dialog.prototype.buildNewReportType = function()
{
    this.newReportDlg = new CDialog("New Report Type");
    this.newReportDlg.f_close = true;
        
    var divModal = alib.dom.createElement("div");
    divModal.innerHTML = "<div class='loading'></div>";
    this.newReportDlg.customDialog(divModal, 460);
    
    this.reportObject.onload = function(ret)
    {
        this.cls.objectData = ret;
        this.cls.newReportTypeForm(divModal);
    }
    this.reportObject.getObjects();
    
    var closeCon = this.newReportDlg.m_titlecon.firstChild;
    closeCon.cls = this;
    closeCon.onclick = function()
    {
        this.cls.newReportDlg.hide();
        this.cls.loaderCls.close();
    }
}

/**
 * Builds the New Report Form
 *
 * @public
 * @this {AntObjectLoader_Report_Dialog}  
 * * @param {DOMElement} divModal The container where we can print the report form
 */
AntObjectLoader_Report_Dialog.prototype.newReportTypeForm = function(divModal)
{
    divModal.innerHTML = "";
    var tableForm = alib.dom.createElement("table", divModal);
    var tBody = alib.dom.createElement("tbody", tableForm);
    
    this.newReportForm.lblHeader = alib.dom.setElementAttr(alib.dom.createElement("div"));
    this.newReportForm.lblHeader.innerHTML = "What kind of report this will be?";
    
    var attrData = [["id", "reportObject"], ["type", "radio"], ["name", "reportType"], ["checked", true], ["inputLabel", "Report on an object (like customer, lead, task)"]];
    this.newReportForm.reportObject = alib.dom.setElementAttr(alib.dom.createElement("input"), attrData);    
    
    this.newReportForm.objectTypes = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "objectTypes"]]);
    
    var attrData = [["id", "reportDataware"], ["type", "radio"], ["name", "reportType"], ["inputLabel", "Report using Dataware Cube"]];
    this.newReportForm.reportDataware = alib.dom.setElementAttr(alib.dom.createElement("input"), attrData);
    
    var attrData = [["innerHTML", "Dataware cubes are predefined sets of aggregated data. To see available cubes go to the \"Reports\" application and browse under \"Data Cubes\"."]];
    this.newReportForm.lblDataware = alib.dom.setElementAttr(alib.dom.createElement("div"), attrData);
    
    this.newReportForm.cubePath = alib.dom.setElementAttr(alib.dom.createElement("input"), [["id", "cubePath"], ["type", "text"], ["disabled", "disabled"]]);
    
    var btn = new CButton("Create Report",
                            function(cls)
                            {
                                cls.createReport();
                            },
                            [this], "b1");
    this.newReportForm.createReport = btn.getButton();
        
    this.loaderCls.buildFormInput(this.newReportForm, tBody);
    
    // add additional elements
    var cubePathParent = this.newReportForm.cubePath.parentNode;
    var lblCubePath = alib.dom.setElementAttr(alib.dom.createElement("label"), [["innerHTML", "Cube Path "]]);    
    cubePathParent.insertBefore(lblCubePath, cubePathParent.firstChild);
    
    // Set Element Events
    this.newReportForm.reportObject.cls = this;
    this.newReportForm.reportObject.onclick = function()
    {
        this.cls.newReportForm.cubePath.setAttribute("disabled", "disabled");
        this.cls.newReportForm.objectTypes.removeAttribute("disabled");
    }
    
    this.newReportForm.reportDataware.cls = this;
    this.newReportForm.reportDataware.onclick = function()
    {
        this.cls.newReportForm.objectTypes.setAttribute("disabled", "disabled");
        this.cls.newReportForm.cubePath.removeAttribute("disabled");
    }
    
    // Set Input Styles
    alib.dom.styleSet(this.newReportForm.lblHeader, "fontWeight", "bold");
    alib.dom.styleSet(this.newReportForm.objectTypes, "visibility", "visible");
    alib.dom.styleSet(this.newReportForm.objectTypes, "marginLeft", "15px");
    alib.dom.styleSet(this.newReportForm.lblDataware, "marginLeft", "15px");
    alib.dom.styleSet(this.newReportForm.createReport, "float", "right");
    alib.dom.styleSet(lblCubePath, "marginLeft", "15px");    
    alib.dom.styleSet(lblCubePath, "fontWeight", "bold");    
    
    // Add Select Options
    for(object in this.objectData)
    {            
        var currentObject = this.objectData[object];
        this.newReportForm.objectTypes[this.newReportForm.objectTypes.length] = new Option(currentObject.fullTitle, currentObject.name);
    }
    
    this.newReportDlg.reposition();
}

/**
 * Saves the report in the database
 *
 * @public
 * @this {AntObjectLoader_Report_Dialog}   
 */
AntObjectLoader_Report_Dialog.prototype.createReport = function() 
{
    this.bodyFormCon.innerHTML = "<div class='loading'></div>";
    
    if(this.newReportForm.reportDataware.checked)
    {
        this.cubePath = this.newReportForm.cubePath.value;
        this.reportType = REPORT_TYPE_DATAWARE;
    }        
    else
        this.objType = this.newReportForm.objectTypes.value;
        
    var dlg = showDialog("Creating report...");
    this.reportObject.onsave = function(ret)
    {
        if(!ret)
        {
            ALib.statusShowAlert("Error occured when saving the report data.", 3000, "bottom", "right");
            return;
        }
        
        if(!ret.error)
        {
            this.cls.newReportDlg.hide();
            this.cls.onsave(ret);
            ALib.statusShowAlert("Report successfully created!", 3000, "bottom", "right");
        }
        else
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
            
        dlg.hide();
    }
    
    var args = new Array();
    args[args.length] = ['objType', this.objType];
    args[args.length] = ['reportType', this.reportType];
    args[args.length] = ['cubePath', this.cubePath];
    this.reportObject.createReport(args);
}

/**
* To be over-ridden by calling process to detect when definition is finished saving.
*
* @public
* @this {Report} 
* @param {Object} ret   Object that is a result from ajax
*/
AntObjectLoader_Report_Dialog.prototype.onsave = function(ret)
{
}

/**
* @fileOverview The tabular report will display the table options used in Olap Report Object
*
* @author:    Marl Tumulak, marl.tumulak@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Tabular Table Options
 *
 * @constructor  
 * @param {Object} obj The parent Object
 */
function AntObjectLoader_Report_Tabular(obj)
{    
    this.parentObject = obj;
    this.reportDimensionData = this.parentObject.reportDimensionData;
    
    this.dimensionData = this.parentObject.dimensionData;
    this.filterData = this.parentObject.filterData;
    this.sortData = this.parentObject.sortData;
    
    this.loaderCls = this.parentObject.loaderCls;
    this.tableType = this.parentObject.tableType;
    this.deleteImage = this.parentObject.deleteImage;
    
    this.tabularDimensionData = new Array();
    this.tabularCount = 0; // Current count of tabular dimension
    
    this.savedDataLoaded = false; // Determines if the saved data already loaded
}

/**
 * Displays the table tabular options
 *
 * @public
 * @this {AntObjectLoader_Report_Tabular} 
 * @param {DOMElement} divTabularCon The container where we can print the tabular options 
 */
AntObjectLoader_Report_Tabular.prototype.buildTableTabular = function(divTabularCon)
{
    reportTabularObj = new Object();
    
    reportTabularObj.lblDimension = alib.dom.setElementAttr(alib.dom.createElement("label"), [["innerHTML", "View Fields:"]]);    
    reportTabularObj.dimension = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_name"]]);    
    reportTabularObj.sort = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_sort"]]);
    
    this.loaderCls.buildFormInputDiv(reportTabularObj, divTabularCon, false, "10px");
    alib.dom.divClear(divTabularCon);
    
    // Tabular Link
    var divLink = alib.dom.createElement("div", divTabularCon);
    var linkData = [["innerHTML", "Add Dimension"], ["href", "javascript: void(0)"]];
    var linkAddDim = alib.dom.setElementAttr(alib.dom.createElement("a", divLink), linkData);
    
    // Dimension display
    var divTabularDimension = alib.dom.createElement("div", divTabularCon);
    
    // Set Element Style
    alib.dom.styleSet(divLink, "marginLeft", "75px");
    alib.dom.styleSet(divTabularDimension, "marginLeft", "75px");
    alib.dom.styleSet(reportTabularObj.lblDimension, "fontSize", "12px");
    alib.dom.styleSet(reportTabularObj.lblDimension.parentNode, "marginTop", "2px");    
    
    // Create Element Event
    linkAddDim.cls = this;
    linkAddDim.reportTabularObj = reportTabularObj;    
    linkAddDim.divTabularDimension = divTabularDimension;    
    linkAddDim.onclick = function()
    {
        this.cls.buildTabularDimension(this.divTabularDimension, this.cls.tabularCount);
        
        var dimObj = {id:null, name:this.reportTabularObj.dimension.value, sort:this.reportTabularObj.sort.value};        
        this.cls.setDimensionData(dimObj, this.cls.tabularCount); 
        
        this.cls.buildOlapData();        
        this.cls.tabularCount++;
    }
    
    // Add Select Options    
    this.loaderCls.buildDropdown(reportTabularObj.sort, this.sortData);
    
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = reportTabularObj.dimension.length
        
        reportTabularObj.dimension[dimLen] = new Option(currentDimension.name, currentDimension.name);        
    }
    
    // Load Dimensions
    for(var x=0; x<this.tabularCount; x++)
        this.buildTabularDimension(divTabularDimension, x);
    
    // Load Saved Dimensions
    if(!this.savedDataLoaded)
    {
        this.displaySavedDim(divTabularDimension);        
        this.savedDataLoaded = true;
    }
    
    if(this.tableType == TABLE_TABULAR)
        this.buildOlapData();
}

/**
 * Displays the Tablar Olap Cube Data in table
 *
 * @public
 * @this {AntObjectLoader_Report_Tabular} 
 * @param {DOMElement} divTabularDimension   The container where we can print the tabular dimensions
 * @param {Integer} currentCount             Holds the current count of summarize
 */
AntObjectLoader_Report_Tabular.prototype.buildTabularDimension = function(divTabularDimension, currentCount)
{
    var newDimension = true;
    var divDimension = alib.dom.createElement("div", divTabularDimension);
    alib.dom.styleSet(divDimension, "marginTop", "5px");
    
    if(this.tabularDimensionData[currentCount])
        newDimension = false;
    else
        this.tabularDimensionData[currentCount] = new Object();
    
    var currentDimension = this.tabularDimensionData[currentCount];
    
    if(newDimension)
    {
        // Set Current Dimension Id to null value
        currentDimension.id = null;
        currentDimension.dimension = alib.dom.setElementAttr(alib.dom.createElement("div"), [["id", "dimension_name_" + currentCount]]);
        currentDimension.sort = alib.dom.setElementAttr(alib.dom.createElement("div"), [["id", "dimension_sort_" + currentCount]]);
        currentDimension.removeDimension = alib.dom.createElement("img");
    }
    
    this.loaderCls.buildFormInputDiv(currentDimension, divDimension, false, "10px");
    alib.dom.divClear(divDimension);
    
    // Set Element Events
    currentDimension.removeDimension.divTabularDimension = divTabularDimension;
    currentDimension.removeDimension.divDimension = divDimension;
    currentDimension.removeDimension.cls = this;
    currentDimension.removeDimension.currentCount = currentCount;
    currentDimension.removeDimension.onclick = function()
    {
        this.divTabularDimension.removeChild(this.divDimension);
        
        delete this.cls.tabularDimensionData[currentCount]
        this.cls.buildOlapData();
    }
    
    // Set Element Data
    currentDimension.removeDimension.src = this.deleteImage;
    
    // Set Element Style
    alib.dom.styleSet(currentDimension.removeDimension, "cursor", "pointer");
    alib.dom.styleSet(currentDimension.removeDimension, "marginTop", "3px");
}

/**
 * Displays the Tablar Olap Cube Data in table
 *
 * @public
 * @param {Object} dimObj   Object row of the current dimension data
 */
AntObjectLoader_Report_Tabular.prototype.setDimensionData = function(dimObj, currentCount)
{
    var currentDimension = this.tabularDimensionData[currentCount];
    
    currentDimension.id = dimObj.id;
    currentDimension.dimension.innerHTML = dimObj.name;
    currentDimension.sort.innerHTML = dimObj.sort;
}

/**
 * Displays the saved dimension table 
 *
 * @public
 * @this {AntObjectLoader_Report_Tabular} 
 * @param {DOMElement} divTabularDimension   The container where we can print the tabular dimensions
 */
AntObjectLoader_Report_Tabular.prototype.displaySavedDim = function(divTabularDimension)
{
    if(this.reportDimensionData.length)
    {        
        for(dimension in this.reportDimensionData)
        {
            var currentDimension = this.reportDimensionData[dimension];
            
            if(currentDimension.table_type == TABLE_TABULAR)
            {
                this.buildTabularDimension(divTabularDimension, this.tabularCount);
            
                this.setDimensionData(currentDimension, this.tabularCount);
                this.tabularCount++;
            }            
        }
    }
}

/**
 * Displays the Tablar Olap Cube Data in table
 *
 * @public
 * @this {AntObjectLoader_Report_Tabular} 
 */
AntObjectLoader_Report_Tabular.prototype.buildOlapData = function()
{
    var tableResultCon = this.parentObject.tableResultCon;
    var filterData = this.parentObject.filterData;
    var finishBuilding = this.parentObject.finishBuilding;
    
    if(!finishBuilding)
        return; 
        
    // Set Olap Cube
    var cube = this.parentObject.cube;
    var olapCube = new OlapCube_Table_Tabular(cube);
    
    this.args = new Array();
    
    // Set Dimension Data
    for(dimension in this.tabularDimensionData)
    {
        var currentDimension = this.tabularDimensionData[dimension];
        
        this.args[this.args.length] = ["dimensions[]", dimension];
        this.args[this.args.length] = ["dimension_id_" + dimension, currentDimension.id];
        this.args[this.args.length] = ["f_column_" + dimension, false];
        this.args[this.args.length] = ["f_row_" + dimension, false];
        this.args[this.args.length] = ["dimension_name_" + dimension, currentDimension.dimension.innerHTML];
        this.args[this.args.length] = ["dimension_sort_" + dimension, currentDimension.sort.innerHTML];
        
        olapCube.addColumn(currentDimension.dimension.innerHTML, currentDimension.sort.innerHTML);
    }
    
    // Set Filter Data
    for(filter in filterData)
    {
        var currentFilter = filterData[filter];
        olapCube.addFilter(currentFilter.blogic, currentFilter.fieldName, currentFilter.operator, currentFilter.condValue);
    }
    
    if(this.args.length > 0)
        olapCube.print(tableResultCon);
}
 
/**
 * Returns the array data of Table Option Values that will be used for saving the report
 *
 * @public
 * @this {AntObjectLoader_Report_Tabular} 
 * @return {Array} this.args        Data array of Table Option Values
 */
AntObjectLoader_Report_Tabular.prototype.getTableOptions = function()
{    
    return this.args;
}

/**
* @fileOverview The Summary report will display the table options used in Olap Report Object
*
* @author:    Marl Tumulak, marl.tumulak@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of Summary Table Options
 *
 * @constructor  
 * @param {Object} obj The parent Object
 */
function AntObjectLoader_Report_Summary(obj)
{    
    this.parentObject = obj;
    
    this.reportDimensionData = this.parentObject.reportDimensionData;
    this.reportMeasureData = this.parentObject.reportMeasureData;
    
    this.dimensionData = this.parentObject.dimensionData;
    this.measureData = this.parentObject.measureData;    
    
    this.aggregateData = this.parentObject.aggregateData;
    this.sortData = this.parentObject.sortData;
    this.formatData = this.parentObject.formatData;
    this.dimTypeData = this.parentObject.dimTypeData;
    
    this.loaderCls = this.parentObject.loaderCls;
    this.deleteImage = this.parentObject.deleteImage;
    this.tableType = this.parentObject.tableType;
    
    this.reportForm = new Object();
    this.reportForm.summaryGroup = new Array();
    this.reportForm.summarySumm = new Array();
    
    this.summaryGroupCount = 0; // Current count of tabular dimension
    this.summarySummCount = 0; // Current count of tabular dimension
    
    this.savedDataLoaded = false; // Determines if the saved data already loaded
}

/**
 * Displays the table summary options
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @param {DOMElement} divSummaryCon The container where we can print the summary options 
 */
AntObjectLoader_Report_Summary.prototype.buildTableSummary = function(divSummaryCon)
{
    var reportSummaryObj = new Object();
    reportSummaryObj.groupBy = alib.dom.setElementAttr(alib.dom.createElement("div"), [["label", "Group By:"]]);
    reportSummaryObj.summarizeBy = alib.dom.setElementAttr(alib.dom.createElement("div"), [["label", "Summarize By:"]]);
    
    this.loaderCls.buildFormInput(reportSummaryObj, divSummaryCon);
    
    var groupParentCon = reportSummaryObj.groupBy.parentNode;
    var summarizeParentCon = reportSummaryObj.summarizeBy.parentNode;
    
    // Create Additional Elements
    var addDimensionLink = alib.dom.setElementAttr(alib.dom.createElement("a", groupParentCon), [["href", "javascript: void(0);"], ["innerHTML", "Add Dimension"]]);
    addDimensionLink.cls = this;
    addDimensionLink.groupBy = reportSummaryObj.groupBy;
    addDimensionLink.onclick = function()
    {
        this.cls.buildSummaryGroup(this.groupBy, this.cls.summaryGroupCount++);
        this.cls.buildOlapData();
    }
    
    var addMeasureLink = alib.dom.setElementAttr(alib.dom.createElement("a", summarizeParentCon), [["href", "javascript: void(0);"], ["innerHTML", "Add Measure"]]);
    addMeasureLink.cls = this;
    addMeasureLink.summarizeBy = reportSummaryObj.summarizeBy;
    addMeasureLink.onclick = function()
    {
        this.cls.buildSummarySumm(this.summarizeBy, this.cls.summarySummCount++);
        this.cls.buildOlapData();
    }
    
    // Set Element Styles
    alib.dom.styleSet(addDimensionLink, "fontSize", "11px");
    alib.dom.styleSet(groupParentCon.previousSibling, "verticalAlign", "top");
    alib.dom.styleSet(groupParentCon.previousSibling, "paddingTop", "5px");
    alib.dom.styleSet(addMeasureLink, "fontSize", "11px");
    alib.dom.styleSet(summarizeParentCon.previousSibling, "verticalAlign", "top");
    alib.dom.styleSet(summarizeParentCon.previousSibling, "paddingTop", "5px");
    
    // Load Summary Options
    for(var x=0; x<this.summaryGroupCount; x++)
        this.buildSummaryGroup(reportSummaryObj.groupBy, x);
    
    for(var x=0; x<this.summarySummCount; x++)
        this.buildSummarySumm(reportSummaryObj.summarizeBy, x);
    
    if(!this.savedDataLoaded)
    {
        this.displaySavedGroup(reportSummaryObj.groupBy);
        this.displaySavedSummarize(reportSummaryObj.summarizeBy);
        this.savedDataLoaded = true;
    }
    if(this.tableType == TABLE_SUMMARY)
        this.buildOlapData();
}

/**
 * Displays the saved group table 
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @param {DOMElement} divSummaryGroup The container where we can print the table options group
 */
AntObjectLoader_Report_Summary.prototype.displaySavedGroup = function(divSummaryGroup)
{    
    if(this.reportDimensionData.length)
    {        
        for(dimension in this.reportDimensionData)
        {
            var currentDimension = this.reportDimensionData[dimension];
            
            if(currentDimension.table_type == TABLE_SUMMARY)
            {                
                this.buildSummaryGroup(divSummaryGroup, this.summaryGroupCount);            
                var currentSummaryGroup = this.reportForm.summaryGroup[this.summaryGroupCount];
                
                var dimType = this.dimTypeData[currentDimension.name];
                this.parentObject.displayFormat(dimType, currentSummaryGroup.lblRow, currentSummaryGroup.format);
                
                currentSummaryGroup.id = currentDimension.id;
                currentSummaryGroup.dimension.value = currentDimension.name;
                currentSummaryGroup.dimension.dimType = dimType;
                currentSummaryGroup.sort.value = currentDimension.sort;
                currentSummaryGroup.format.value = currentDimension.format;
                
                this.summaryGroupCount++;
            }
        }        
    }    
}

/**
 * Builds the summary group elements
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @param {DOMElement} divSummaryGroup  The container where we can print the summary group options 
 * @param {Integer} currentCount        Holds the current count of summary group
 */
AntObjectLoader_Report_Summary.prototype.buildSummaryGroup = function(divSummaryGroup, currentCount)
{
    var newGroup = true;
    var divSummary = alib.dom.createElement("div", divSummaryGroup);
    alib.dom.styleSet(divSummary, "marginTop", "5px");    
    
    if(this.reportForm.summaryGroup[currentCount])
        newGroup = false;
    else
        this.reportForm.summaryGroup[currentCount] = new Object();        
        
    var currentSummaryGroup = this.reportForm.summaryGroup[currentCount];
    
    if(newGroup)
    {
        // Set Current Summary Group Id to null value
        currentSummaryGroup.id = null;
        currentSummaryGroup.dimension = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_name_" + currentCount]]);
        currentSummaryGroup.sort = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_sort_" + currentCount]]);
        currentSummaryGroup.lblGroup = alib.dom.setElementAttr(alib.dom.createElement("label"), [["innerHTML", "By"]]);
        currentSummaryGroup.format = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_format_" + currentCount]]);    
        currentSummaryGroup.removeDimension = alib.dom.createElement("img");
    }
    
    this.loaderCls.buildFormInputDiv(currentSummaryGroup, divSummary, false, "10px");
    alib.dom.divClear(divSummary);
    
    // Set Element Events    
    currentSummaryGroup.removeDimension.divSummaryGroup = divSummaryGroup;
    currentSummaryGroup.removeDimension.divSummary = divSummary;
    currentSummaryGroup.removeDimension.cls = this;
    currentSummaryGroup.removeDimension.currentCount = currentCount;
    currentSummaryGroup.removeDimension.onclick = function()
    {
        this.divSummaryGroup.removeChild(this.divSummary);
        delete this.cls.reportForm.summaryGroup[this.currentCount];
        this.cls.buildOlapData();
        
        // TO DO: create a list of deleted objects, so the loop wont recreate it 
        // TO DO: remove the filter in the database if its already a saved filter
    }
    
    currentSummaryGroup.dimension.cls = this;
    currentSummaryGroup.dimension.lblGroup = currentSummaryGroup.lblGroup;
    currentSummaryGroup.dimension.currentSummaryGroup = currentSummaryGroup;
    currentSummaryGroup.dimension.onchange = function()
    {           
        this.dimType = this.cls.dimTypeData[this.value];
         
        this.cls.parentObject.displayFormat(this.dimType, this.lblGroup, this.currentSummaryGroup.format);        
        this.cls.buildOlapData();
    }
    
    currentSummaryGroup.sort.cls = this;
    currentSummaryGroup.sort.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    currentSummaryGroup.format.cls = this;
    currentSummaryGroup.format.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    // Set Element Data
    currentSummaryGroup.removeDimension.src = this.deleteImage;
    
    // Set Element Style
    alib.dom.styleSet(currentSummaryGroup.removeDimension, "cursor", "pointer");
    alib.dom.styleSet(currentSummaryGroup.removeDimension, "marginTop", "3px");    
    
    if(!newGroup) // Do not re-populate the dropdown list
        return;
    
    // Add select options    
    this.loaderCls.buildDropdown(currentSummaryGroup.sort, this.sortData);
    this.loaderCls.buildDropdown(currentSummaryGroup.format, this.formatData);
    
    var defaultType = null;
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = currentSummaryGroup.dimension.length
        
        currentSummaryGroup.dimension[dimLen] = new Option(currentDimension.name, currentDimension.name);        
        currentSummaryGroup.dimension[dimLen].dimType = currentDimension.type;
        
        // get the first dimension type
        if(defaultType==null)
            defaultType = currentDimension.type;
    }
    
    this.parentObject.displayFormat(defaultType, currentSummaryGroup.lblGroup, currentSummaryGroup.format);        
}

/**
 * Displays the saved summarize 
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @param {DOMElement} divSummaryGroup The container where we can print the table options group
 */
AntObjectLoader_Report_Summary.prototype.displaySavedSummarize = function(divSummarySumm)
{
    if(this.reportMeasureData.length)
    {        
        for(measure in this.reportMeasureData)
        {            
            var currentMeasure = this.reportMeasureData[measure];
            
            if(currentMeasure.table_type == TABLE_SUMMARY)
            {
                this.buildSummarySumm(divSummarySumm, this.summarySummCount);            
                var currentSummarySumm = this.reportForm.summarySumm[this.summarySummCount];
                
                currentSummarySumm.id = currentMeasure.id;
                currentSummarySumm.measure.value = currentMeasure.name;
                
                if(currentMeasure.aggregate.length > 0 && currentSummarySumm.aggregate)
                    currentSummarySumm.aggregate.value = currentMeasure.aggregate;
                    
                this.summarySummCount++;
            }
        }
    }
    else // display count dropdown as default
    {
        this.buildSummarySumm(divSummarySumm, this.summarySummCount);
        this.summarySummCount++;
    }
}

/**
 * Builds the summarize elements
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @param {DOMElement} divSummarySumm   The container where we can print the summarize options 
 * @param {Integer} currentCount        Holds the current count of summarize
 */
AntObjectLoader_Report_Summary.prototype.buildSummarySumm = function(divSummarySumm, currentCount)
{
    var newSumm = true;
    var divSummary = alib.dom.createElement("div", divSummarySumm);
    alib.dom.styleSet(divSummary, "marginTop", "5px");    
    
    if(this.reportForm.summarySumm[currentCount])
        newSumm = false;
    else
        this.reportForm.summarySumm[currentCount] = new Object();
        
    var currentSummarySumm = this.reportForm.summarySumm[currentCount];
    
    if(newSumm)
    {
        // Set Current Summarize Id to null value
        currentSummarySumm.id = null;
        currentSummarySumm.measure = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "measure_name_" + currentCount]]);
    
        if(currentCount>0)
        {
            currentSummarySumm.aggregate = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "measure_aggregate_" + currentCount]]);
            currentSummarySumm.removeMeasure = alib.dom.createElement("img");
        }
    }
    
    this.loaderCls.buildFormInputDiv(currentSummarySumm, divSummary, false, "10px");
    alib.dom.divClear(divSummary);
    
    // Set Element Events
    currentSummarySumm.measure.cls = this;
    currentSummarySumm.measure.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    if(currentCount > 0) // display other measures
    {
        // Set Element Events
        currentSummarySumm.aggregate.cls = this;
        currentSummarySumm.aggregate.onchange = function()
        {
            this.cls.buildOlapData();
        }
        
        currentSummarySumm.removeMeasure.divSummarySumm = divSummarySumm;
        currentSummarySumm.removeMeasure.divSummary = divSummary;
        currentSummarySumm.removeMeasure.cls = this;
        currentSummarySumm.removeMeasure.currentCount = currentCount;
        currentSummarySumm.removeMeasure.onclick = function()
        {
            this.divSummarySumm.removeChild(this.divSummary);
            delete this.cls.reportForm.summarySumm[this.currentCount];
            this.cls.buildOlapData();
        }
        
        // Set Element Data
        currentSummarySumm.removeMeasure.src = this.deleteImage;
        
        // Set Element Style
        alib.dom.styleSet(currentSummarySumm.removeMeasure, "cursor", "pointer");
        alib.dom.styleSet(currentSummarySumm.removeMeasure, "marginTop", "3px");

        if(!newSumm) // Do not re-populate the dropdown list
            return;
        
        // Set Element Events        
        this.loaderCls.buildDropdown(currentSummarySumm.aggregate, this.aggregateData);
    
        for(measure in this.measureData)
        {
            var currentMeasure = this.measureData[measure];
            var dimLen = currentSummarySumm.measure.length;
            
            currentSummarySumm.measure[dimLen] = new Option(currentMeasure.name, currentMeasure.name);        
        }
    }
    else // Display Count Only
    {
        if(!newSumm) // Do not re-populate the dropdown list
            return;
            
        this.loaderCls.buildDropdown(currentSummarySumm.measure, [MEASURE_COUNT]);
    }
}

/**
 * Displays the Summary Olap Cube Data in table
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 */
AntObjectLoader_Report_Summary.prototype.buildOlapData = function()
{
    var tableResultCon = this.parentObject.tableResultCon;    
    var filterData = this.parentObject.filterData;
    var finishBuilding = this.parentObject.finishBuilding;
    
    if(!finishBuilding)
        return; 
    
    // Set Olap Cube
    var cube = this.parentObject.cube;
    var olapCube = new OlapCube_Table_Summary(cube);
    
    this.args = new Array();
    
    // Set Dimension Data
    for(group in this.reportForm.summaryGroup)
    {
        if(group)
        {            
            var currentGroup = this.reportForm.summaryGroup[group];
            
            this.args[this.args.length] = ["dimensions[]", group];
            this.args[this.args.length] = ["dimension_id_" + group, currentGroup.id];
            this.args[this.args.length] = ["f_column_" + group, false];
            this.args[this.args.length] = ["f_row_" + group, false];
            this.args[this.args.length] = [currentGroup.dimension.id, currentGroup.dimension.value];
            this.args[this.args.length] = [currentGroup.sort.id, currentGroup.sort.value];
            
            switch(currentGroup.dimension.dimType)
            {
                case "timestamp":
                case "date":
                case "time":                    
                    olapCube.addRow(currentGroup.dimension.value, currentGroup.sort.value, currentGroup.format.value);
                    this.args[this.args.length] = [currentGroup.format.id, currentGroup.format.value];
                    break;
                default:                    
                    olapCube.addRow(currentGroup.dimension.value, currentGroup.sort.value);                    
                    break;
            }
        }        
    }
    
    // Set Measure Data
    for(summarize in this.reportForm.summarySumm)
    {        
        if(summarize)
        {
            var currentSummarize = this.reportForm.summarySumm[summarize];
            
            this.args[this.args.length] = ["measures[]", summarize];
            this.args[this.args.length] = ["measure_id_" + summarize, currentSummarize.id];
            this.args[this.args.length] = [currentSummarize.measure.id, currentSummarize.measure.value];
            
            var aggregate = '';
            if(currentSummarize.measure.value !== MEASURE_COUNT)
            {
                aggregate = currentSummarize.aggregate.value;
                this.args[this.args.length] = [currentSummarize.aggregate.id, aggregate];
            }
                
            olapCube.addMeasure(currentSummarize.measure.value, aggregate)
        }        
    }
    
    // Set Filter Data
    for(filter in filterData)
    {
        var currentFilter = filterData[filter];
        olapCube.addFilter(currentFilter.blogic, currentFilter.fieldName, currentFilter.operator, currentFilter.condValue);
    }
    
    if(this.args.length > 0)
        olapCube.print(tableResultCon);    
}

/**
 * Returns the array data of Table Option Values that will be used for saving the report
 *
 * @public
 * @this {AntObjectLoader_Report_Summary} 
 * @return {Array} this.args        Data array of Table Option Values
 */
AntObjectLoader_Report_Summary.prototype.getTableOptions = function()
{    
    return this.args;
}

/**
* @fileOverview The Pivot Matrix report will display the table options used in Olap Report Object
*
* @author:    Marl Tumulak, marl.tumulak@aereus.com; 
*             Copyright (c) 2012 Aereus Corporation. All rights reserved.
*/

var DIMENSION_COLUMN      = 0;
var DIMENSION_ROW         = 1;

/**
 * Creates an instance of Pivot Table Options
 *
 * @constructor  
 * @param {Object} obj The parent Object
 */
function AntObjectLoader_Report_PivotMatrix(obj)
{    
    this.parentObject = obj;
    
    this.reportData = this.parentObject.reportData;
    this.reportDimensionData = this.parentObject.reportDimensionData;
    this.reportMeasureData = this.parentObject.reportMeasureData;
    
    this.dimensionData = this.parentObject.dimensionData;
    this.measureData = this.parentObject.measureData;    
    
    this.aggregateData = this.parentObject.aggregateData;
    this.sortData = this.parentObject.sortData;
    this.formatData = this.parentObject.formatData;
    this.dimTypeData = this.parentObject.dimTypeData;
        
    this.loaderCls = this.parentObject.loaderCls;
    this.deleteImage = this.parentObject.deleteImage;
    this.tableType = this.parentObject.tableType;
    this.measureHasCount = this.parentObject.measureHasCount;
    
    this.reportForm = new Object();
    this.reportForm.pivotData = new Object();
    this.reportForm.pivotColumn = new Array();
    this.reportForm.pivotRow = new Array();
    
    this.pivotColumnCount = 0; // Current count of tabular dimension
    this.pivotRowCount = 0; // Current count of tabular dimension
    
    this.savedDataLoaded = false; // Determines if the saved data already loaded
}

/**
 * Displays the table pivot matrix options
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_PivotMatrix} 
 * @param {DOMElement} divPivotCon The container where we can print the pivot matrix options 
 */
AntObjectLoader_Report_PivotMatrix.prototype.buildTablePivot = function(divPivotCon)
{
    var pivotDataId = null;
    var pivotDataMeasure = null;
    var pivotDataAggregate = null;
    if(this.reportMeasureData.length>0)
    {
        if(this.reportMeasureData[0].table_type == TABLE_PIVOT)
        {
            pivotDataId = this.reportMeasureData[0].id;
            pivotDataMeasure = this.reportMeasureData[0].name;
            pivotDataAggregate = this.reportMeasureData[0].aggregate;
        }
    }
    
    this.reportForm.pivotData.id = pivotDataId;
    this.reportForm.pivotData.showTotal = alib.dom.setElementAttr(alib.dom.createElement("div"), [["label", "Show Totals: &nbsp;"]]);
    this.reportForm.pivotData.column = alib.dom.setElementAttr(alib.dom.createElement("div"), [["label", "Columns:"]]);
    this.reportForm.pivotData.row = alib.dom.setElementAttr(alib.dom.createElement("div"), [["label", "Rows:"]]);
    this.reportForm.pivotData.measure = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "measure_name_"], ["label", "Data:"]]);    
    this.loaderCls.buildFormInput(this.reportForm.pivotData, divPivotCon);
        
    var columnParentCon = this.reportForm.pivotData.column.parentNode;
    var rowParentCon = this.reportForm.pivotData.row.parentNode;
        
    // Create Additional Elements
    this.reportForm.pivotTotals = new Object();
    var attrRow = [["type", "checkbox"], ["id", "f_row_totals"], ["label", "Row Totals"], ["checked", (this.reportData.f_row_totals=="f")?false:true]];
    this.reportForm.pivotTotals.row = alib.dom.setElementAttr(alib.dom.createElement("input"), attrRow);
    
    var attrColumn = [["type", "checkbox"], ["id", "f_column_totals"], ["label", "Column Totals"], ["checked", (this.reportData.f_column_totals=="f")?false:true]];
    this.reportForm.pivotTotals.column = alib.dom.setElementAttr(alib.dom.createElement("input"), attrColumn);
    
    var attrSub = [["type", "checkbox"], ["id", "f_sub_totals"], ["label", "Subtotals"], ["checked", (this.reportData.f_sub_totals=="f")?false:true]];
    this.reportForm.pivotTotals.sub = alib.dom.setElementAttr(alib.dom.createElement("input"), attrSub);
    
    this.loaderCls.buildFormInputDiv(this.reportForm.pivotTotals, this.reportForm.pivotData.showTotal, false, "15px");    
    
    var addDimensionLink = alib.dom.setElementAttr(alib.dom.createElement("a", columnParentCon), [["href", "javascript: void(0);"], ["innerHTML", "Add Column Dimension"]]);
    var addMeasureLink = alib.dom.setElementAttr(alib.dom.createElement("a", rowParentCon), [["href", "javascript: void(0);"], ["innerHTML", "Add Row Dimension"]]);
    
    var measureTd = this.reportForm.pivotData.measure.parentNode;
    this.reportForm.pivotData.aggregate = alib.dom.setElementAttr(alib.dom.createElement("select", measureTd), [["id", "measure_aggregate_"]]);
    
    // Set Element Events
    this.reportForm.pivotTotals.sub.cls = this;
    this.reportForm.pivotTotals.sub.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    addDimensionLink.cls = this;
    addDimensionLink.column = this.reportForm.pivotData.column;
    addDimensionLink.onclick = function()
    {
        this.cls.buildPivotColumn(this.column, this.cls.pivotColumnCount++);
        this.cls.buildOlapData();
    }
    
    addMeasureLink.cls = this;
    addMeasureLink.row = this.reportForm.pivotData.row;
    addMeasureLink.onclick = function()
    {
        this.cls.buildPivotRow(this.row, this.cls.pivotRowCount++);
        this.cls.buildOlapData();
    }
    
    this.reportForm.pivotData.measure.cls = this;
    this.reportForm.pivotData.measure.onchange = function()
    {
        if(this.value=='count')
            alib.dom.styleSet(this.cls.reportForm.pivotData.aggregate, "display", "none");
        else
            alib.dom.styleSet(this.cls.reportForm.pivotData.aggregate, "display", "inline-block");
            
        this.cls.buildOlapData();
    }
    
    this.reportForm.pivotData.aggregate.cls = this;
    this.reportForm.pivotData.aggregate.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    // Add Select Options
    if(!this.measureHasCount)   
        this.loaderCls.buildDropdown(this.reportForm.pivotData.measure, [MEASURE_COUNT], pivotDataMeasure);
        
    this.loaderCls.buildDropdown(this.reportForm.pivotData.aggregate, this.aggregateData, pivotDataAggregate);
        
    for(measure in this.measureData)
    {
        var currentMeasure = this.measureData[measure];
        var dimLen = this.reportForm.pivotData.measure.length;
        var selected = false;
        
        if(pivotDataMeasure == currentMeasure.name)
            selected = true;
            
        this.reportForm.pivotData.measure[dimLen] = new Option(currentMeasure.name, currentMeasure.name, false, selected);
    }
    
    // Set Element Styles
    alib.dom.styleSet(this.reportForm.pivotData.showTotal, "marginTop", "2px");    
    alib.dom.styleSet(this.reportForm.pivotData.aggregate, "marginLeft", "10px");
    alib.dom.styleSet(addDimensionLink, "fontSize", "11px");
    alib.dom.styleSet(columnParentCon.previousSibling, "verticalAlign", "top");
    alib.dom.styleSet(columnParentCon.previousSibling, "paddingTop", "5px");
    alib.dom.styleSet(addMeasureLink, "fontSize", "11px");
    alib.dom.styleSet(rowParentCon.previousSibling, "verticalAlign", "top");
    alib.dom.styleSet(rowParentCon.previousSibling, "paddingTop", "5px");
    
    if(pivotDataMeasure == MEASURE_COUNT || pivotDataMeasure == null)
        alib.dom.styleSet(this.reportForm.pivotData.aggregate, "display", "none");
    
    for(var x=0; x<this.pivotColumnCount; x++)
        this.buildPivotColumn(this.reportForm.pivotData.column, x);
    
    for(var x=0; x<this.pivotRowCount; x++)
        this.buildPivotRow(this.reportForm.pivotData.row, x);
    
    if(!this.savedDataLoaded)
    {
        this.displaySavedDims();        
        this.savedDataLoaded = true;
    }
    
    if(this.tableType == TABLE_PIVOT)
        this.buildOlapData();
    
}

/**
 * Displays the saved dimensions
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_PivotMatrix}  
 */
AntObjectLoader_Report_PivotMatrix.prototype.displaySavedDims = function()
{
    if(this.reportDimensionData.length)
    {        
        for(dimension in this.reportDimensionData)
        {
            var currentDimension = this.reportDimensionData[dimension];
            
            if(currentDimension.table_type == TABLE_PIVOT)
            {
                if(currentDimension.f_column=="t")
                {
                    this.buildPivotColumn(this.reportForm.pivotData.column, this.pivotColumnCount);
                    this.setDimValues(this.reportForm.pivotColumn[this.pivotColumnCount], currentDimension)
                    
                    this.pivotColumnCount++;
                }
                else if(currentDimension.f_row=="t")
                {
                    this.buildPivotRow(this.reportForm.pivotData.row, this.pivotRowCount);
                    this.setDimValues(this.reportForm.pivotRow[this.pivotRowCount], currentDimension)
                    
                    this.pivotRowCount++;
                }
            }
        }        
    }
}

/**
 * Displays the saved dimensions
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_PivotMatrix}  
 * @param {Object} currentPivot         Object of the current pivot column / row
 * @param {Object} currentDimension     Object row of the current dimension data in this.reportDimensionData
 */
AntObjectLoader_Report_PivotMatrix.prototype.setDimValues = function(currentPivot, currentDimension)
{
    var dimType = this.dimTypeData[currentDimension.name];
    this.parentObject.displayFormat(dimType, currentPivot.lblRow, currentPivot.format);
    
    currentPivot.id = currentDimension.id;
    currentPivot.dimension.value = currentDimension.name;
    currentPivot.dimension.dimType = dimType;
    currentPivot.sort.value = currentDimension.sort;
    currentPivot.format.value = currentDimension.format;
}

/**
 * Displays the table pivot matrix column options
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_PivotMatrix} 
 * @param {divPivotColumn} divPivotColumn   The container where we can print the pivot matrix column options 
 * @param {Integer} currentCount            Holds the current count of pivot matrix column
 */
AntObjectLoader_Report_PivotMatrix.prototype.buildPivotColumn = function(divPivotColumn, currentCount)
{
    var newColumn = true;
    var divPivot = alib.dom.createElement("div", divPivotColumn);
    alib.dom.styleSet(divPivot, "marginTop", "5px");    

    if(this.reportForm.pivotColumn[currentCount])
        newColumn = false;
    else
        this.reportForm.pivotColumn[currentCount] = new Object();
        
    var currentPivotColumn = this.reportForm.pivotColumn[currentCount];
    
    if(newColumn)
    {
        currentPivotColumn.id = null;
        currentPivotColumn.dimension = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_name_" + currentCount + DIMENSION_COLUMN]]);
        currentPivotColumn.sort = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_sort_" + currentCount + DIMENSION_COLUMN]]);
        currentPivotColumn.lblColumn = alib.dom.setElementAttr(alib.dom.createElement("label"), [["innerHTML", "By"]]);
        currentPivotColumn.format = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_format_" + currentCount + DIMENSION_COLUMN]]);    
        currentPivotColumn.removeColumn = alib.dom.createElement("img");
    }
    
    this.loaderCls.buildFormInputDiv(currentPivotColumn, divPivot, false, "10px");
    alib.dom.divClear(divPivot);
    
    // Set Element Events    
    currentPivotColumn.removeColumn.divPivotColumn = divPivotColumn;
    currentPivotColumn.removeColumn.divPivot = divPivot;
    currentPivotColumn.removeColumn.cls = this;
    currentPivotColumn.removeColumn.currentCount = currentCount;
    currentPivotColumn.removeColumn.onclick = function()
    {
        this.divPivotColumn.removeChild(this.divPivot);
        delete this.cls.reportForm.pivotColumn[this.currentCount];
        this.cls.buildOlapData();
        
        // TO DO: create a list of deleted objects, so the loop wont recreate it
        // TO DO: remove the filter in the database if its already a saved filter
    }
    
    currentPivotColumn.dimension.cls = this;
    currentPivotColumn.dimension.lblColumn = currentPivotColumn.lblColumn;
    currentPivotColumn.dimension.currentPivotColumn = currentPivotColumn;
    currentPivotColumn.dimension.onchange = function()
    {           
        this.dimType = this.cls.dimTypeData[this.value];
         
        this.cls.parentObject.displayFormat(this.dimType, this.lblColumn, this.currentPivotColumn.format);        
        this.cls.buildOlapData();
    }
    
    currentPivotColumn.sort.cls = this;
    currentPivotColumn.sort.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    currentPivotColumn.format.cls = this;
    currentPivotColumn.format.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    // Set Element Data
    currentPivotColumn.removeColumn.src = this.deleteImage;
    
    // Set Element Style
    alib.dom.styleSet(currentPivotColumn.removeColumn, "cursor", "pointer");
    alib.dom.styleSet(currentPivotColumn.removeColumn, "marginTop", "3px");    
    
    if(!newColumn) // Do not re-populate the dropdown list
        return;
    
    // Add select options    
    this.loaderCls.buildDropdown(currentPivotColumn.sort, this.sortData);
    
    this.loaderCls.buildDropdown(currentPivotColumn.format, this.formatData);
    
    var defaultType = null;
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = currentPivotColumn.dimension.length
        
        switch(currentDimension.type)
        {
            case 'timestamp':
            case 'time':
            case 'date':                
            case 'numeric':
            case 'number':
            case 'real':
            case 'integer':
            case 'fkey':
            case 'fkey_multi':
            default: // Set default for the mean time
                currentPivotColumn.dimension[dimLen] = new Option(currentDimension.name, currentDimension.name);        
                currentPivotColumn.dimension[dimLen].dimType = currentDimension.type;
                
                // get the first dimension type
                if(defaultType==null)
                    defaultType = currentDimension.type;
                break;
        }
    }
    
    this.parentObject.displayFormat(defaultType, currentPivotColumn.lblColumn, currentPivotColumn.format);    
    currentCount++; // increment the count to be used for the next index
}

/**
 * Displays the table pivot matrix row options
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_PivotMatrix} 
 * @param {divPivotColumn} divPivotRow      The container where we can print the pivot matrix row options 
 * @param {Integer} currentCount            Holds the current count of pivot matrix column
 */
AntObjectLoader_Report_PivotMatrix.prototype.buildPivotRow = function(divPivotRow, currentCount)
{
    var newRow = true;
    var divPivot = alib.dom.createElement("div", divPivotRow);
    alib.dom.styleSet(divPivot, "marginTop", "5px");    
    
    if(this.reportForm.pivotRow[currentCount])
        newRow = false;
    else
        this.reportForm.pivotRow[currentCount] = new Object();
        
    var currentPivotRow = this.reportForm.pivotRow[currentCount];
    
    if(newRow)
    {
        currentPivotRow.id = null;
        currentPivotRow.dimension = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_name_" + currentCount + DIMENSION_ROW]]);
        currentPivotRow.sort = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_sort_" + currentCount + DIMENSION_ROW]]);
        currentPivotRow.lblRow = alib.dom.setElementAttr(alib.dom.createElement("label"), [["innerHTML", "By"]]);
        currentPivotRow.format = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "dimension_format_" + currentCount + DIMENSION_ROW]]);    
        currentPivotRow.removeRow = alib.dom.createElement("img");
    }
    
    this.loaderCls.buildFormInputDiv(currentPivotRow, divPivot, false, "10px");
    alib.dom.divClear(divPivot);
    
    // Set Element Events    
    currentPivotRow.removeRow.divPivotRow = divPivotRow;
    currentPivotRow.removeRow.divPivot = divPivot;
    currentPivotRow.removeRow.cls = this;
    currentPivotRow.removeRow.pivotRowCount = currentCount;
    currentPivotRow.removeRow.onclick = function()
    {
        this.divPivotRow.removeChild(this.divPivot);
        delete this.cls.reportForm.pivotRow[this.currentCount];
        this.cls.buildOlapData();
        
        // TO DO: create a list of deleted objects, so the loop wont recreate it 
        // TO DO: remove the filter in the database if its already a saved filter
    }
    
    currentPivotRow.dimension.cls = this;
    currentPivotRow.dimension.lblRow = currentPivotRow.lblRow;
    currentPivotRow.dimension.currentPivotRow = currentPivotRow;
    currentPivotRow.dimension.onchange = function()
    {        
        this.dimType = this.cls.dimTypeData[this.value];
         
        this.cls.parentObject.displayFormat(this.dimType, this.lblRow, this.currentPivotRow.format);        
        this.cls.buildOlapData();
    }
    
    currentPivotRow.sort.cls = this;
    currentPivotRow.sort.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    currentPivotRow.format.cls = this;
    currentPivotRow.format.onchange = function()
    {
        this.cls.buildOlapData();
    }
    
    // Set Element Data
    currentPivotRow.removeRow.src = this.deleteImage;
    
    // Set Element Style
    alib.dom.styleSet(currentPivotRow.removeRow, "cursor", "pointer");
    alib.dom.styleSet(currentPivotRow.removeRow, "marginTop", "3px");    
    
    if(!newRow) // Do not re-populate the dropdown list
        return;
    
    // Add select options    
    this.loaderCls.buildDropdown(currentPivotRow.sort, this.sortData);    
    this.loaderCls.buildDropdown(currentPivotRow.format, this.formatData);
    
    var defaultType = null;
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = currentPivotRow.dimension.length
                
        switch(currentDimension.type)
        {
            case 'timestamp':
            case 'time':
            case 'date':                
            case 'numeric':
            case 'number':
            case 'real':
            case 'integer':
            case 'fkey':
            case 'fkey_multi':
            default: // Set default for the mean time
                currentPivotRow.dimension[dimLen] = new Option(currentDimension.name, currentDimension.name);        
                currentPivotRow.dimension[dimLen].dimType = currentDimension.type;
                
                // get the first dimension type
                if(defaultType==null)
                    defaultType = currentDimension.type;
                break;
        }
    }
    
    this.parentObject.displayFormat(defaultType, currentPivotRow.lblRow, currentPivotRow.format);    
    currentCount++; // increment the count to be used for the next index
}

/**
 * Displays the Summary Olap Cube Data in table
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix_Summary} 
 */
AntObjectLoader_Report_PivotMatrix.prototype.buildOlapData = function()
{
    var tableResultCon = this.parentObject.tableResultCon;    
    var filterData = this.parentObject.filterData;
    var finishBuilding = this.parentObject.finishBuilding;    
    
    if(!finishBuilding)
        return; 
        
    // Set Olap Cube
    var cube = this.parentObject.cube;
    var olapCube = new OlapCube_Table_Matrix(cube);
    olapCube.showSubtotals = this.reportForm.pivotTotals.sub.checked
    
    this.args = new Array();
    
    // Set Column Data
    for(column in this.reportForm.pivotColumn)
    {
        if(column)
        {
            var currentColumn = this.reportForm.pivotColumn[column];
            
            this.buildDimensionArg(column, currentColumn, DIMENSION_COLUMN);
            
            switch(currentColumn.dimension.dimType)
            {
                case "timestamp":
                case "date":
                case "time":                    
                    olapCube.addColumn(currentColumn.dimension.value, currentColumn.sort.value, currentColumn.format.value);
                    this.args[this.args.length] = [currentColumn.format.id, currentColumn.format.value];
                    break;
                default:
                    olapCube.addColumn(currentColumn.dimension.value, currentColumn.sort.value);                    
                break;
            }
        }        
    }
    
    // Set Row Data
    for(row in this.reportForm.pivotRow)
    {
        if(row)
        {
            var currentRow = this.reportForm.pivotRow[row];
            
            this.buildDimensionArg(row, currentRow, DIMENSION_ROW);
            
            switch(currentRow.dimension.dimType)
            {
                case "timestamp":
                case "date":
                case "time":                    
                    olapCube.addRow(currentRow.dimension.value, currentRow.sort.value, currentRow.format.value);
                    this.args[this.args.length] = [currentRow.format.id, currentRow.format.value];
                    break;
                default:
                    olapCube.addRow(currentRow.dimension.value, currentRow.sort.value);
                break;
            }
        }        
    }
    
    // Set Measure Data
    var aggregate = this.reportForm.pivotData.aggregate.value;
    
    if(this.reportForm.pivotData.measure.value == MEASURE_COUNT)
        aggregate = '';
    
    olapCube.addMeasure(this.reportForm.pivotData.measure.value, aggregate);
    
    // Set Measure Args
    var summarize = 0;
    this.args[this.args.length] = ["measures[]", summarize];
    this.args[this.args.length] = ["measure_id_" + summarize, this.reportForm.pivotData.id];
    this.args[this.args.length] = [this.reportForm.pivotData.measure.id + summarize, this.reportForm.pivotData.measure.value];
    this.args[this.args.length] = [this.reportForm.pivotData.aggregate.id + summarize, aggregate];
    
    // Set Filter Data
    for(filter in filterData)
    {
        var currentFilter = filterData[filter];
        olapCube.addFilter(currentFilter.blogic, currentFilter.fieldName, currentFilter.operator, currentFilter.condValue);
    }
    
    if(this.args.length > 0)
        olapCube.print(tableResultCon);
}

/**
 * Builds the dimension arg
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix}  
 * @param {Integer} idx             Index of current row/column
 * @param {object} dim              Dimension object that has the current form elements
 * @param {String} type             Determines if its column or row. (col / row)
 */
AntObjectLoader_Report_PivotMatrix.prototype.buildDimensionArg = function(idx, dim, type)
{
    this.args[this.args.length] = ["dimensions[]", idx + type];
    this.args[this.args.length] = ["dimension_id_" + idx + type, dim.id];    
    this.args[this.args.length] = [dim.dimension.id, dim.dimension.value];
    this.args[this.args.length] = [dim.sort.id, dim.sort.value];
    this.args[this.args.length] = ["f_column_" + idx + type, (type==DIMENSION_COLUMN)?true:false];
    this.args[this.args.length] = ["f_row_" + idx + type, (type==DIMENSION_ROW)?true:false];
}

/**
 * Returns the report form data object
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix} 
 * @return {Object} this.reportForm         Object data that contains the form elements
 */
AntObjectLoader_Report_PivotMatrix.prototype.getReportForm = function()
{
    return this.reportForm;
}

/**
 * Returns the array data of Table Option Values that will be used for saving the report
 *
 * @public
 * @this {AntObjectLoader_Report_PivotMatrix} 
 * @return {Array} this.args        Data array of Table Option Values
 */
AntObjectLoader_Report_PivotMatrix.prototype.getTableOptions = function()
{    
    return this.args;
}

/**
* @fileoverview This is a User Class Object
*
* @author    	Marl Tumulak, marl.aereus@aereus.com
* @author    	joe, sky.stebnicki@aereus.com
* @copyright	Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
* Extends base object
*
* @constructor
* @param {CAntObject} base The base object to extend
*/
function CAntObject_User(base)
{
    base.userId = base.id;
    base.teamId = null;
    base.teamDropdown = null;

	/**
 	 * To be over-ridden by calling process to detect when definition is finished loading.
	 *
	 * @public
	 * @this {CAntObject_User} 
	 * @param {Object} ret   Object that is a result from ajax
	 */
	base.onteamsloaded = function(ret) { }

	/**
	 * Loads the team data
	 *
	 * @public
	 * @this {CAntObject_User} 
	 */
	base.loadTeam = function()
	{
		ajax = new CAjax('json');
		ajax.cbData.cls = this;
		ajax.onload = function(ret)
		{
			this.cbData.cls.onteamsloaded(ret);
		};
		var args = new Array();    
		ajax.exec("/controller/User/getTeams");
	}

	/**
	 * Populate the team dropdown
	 *
	 * @public
	 * @this {CAntObject_User} 
	 * @param {Object} teamData      Contains the team data info
	 * @param {Integer} parentId     The parent Id of the current team
	 */
	base.populateTeam = function(teamData, parentId)
	{    
		if(parentId==null)
		{
			var teamId = teamData[0].id;        
			if(teamId > 0)
			{
				this.addTeamOption(teamId, teamData[0])
				delete teamData[0];
				this.populateTeam(teamData, teamId)            
			}            
			else
				return;
		}
		
		var teamId = 0;
		for(team in teamData)
		{
			var currentTeam = teamData[team];

			if(currentTeam.parentId == parentId)
			{
				teamId = currentTeam.id;
				this.addTeamOption(teamId, currentTeam)
				
				delete teamData[teamId];
				this.populateTeam(teamData, teamId)
			}
		}
	}

	/**
	 * Add an entry in the team dropdown
	 *
	 * @public
	 * @this {CAntObject_User} 
	 * @param {Integer} teamId         The team id of the current team
	 * @param {Object} currentTeam     Contains the team info of the current team
	 */
	base.addTeamOption = function(teamId, currentTeam)
	{
		if(teamId > 0)
		{
			var selected = false;
			if(teamId == this.teamId)
				selected = true;
			
			var optionLength = this.teamDropdown.length;
			this.teamDropdown[optionLength] = new Option(currentTeam.name, teamId, false, selected);
			this.teamDropdown[optionLength].parentId = currentTeam.parentId;
		}    
	}

	/**
	 * Add spaced prefix child teams so we know a team is a sub-team of the parent.
	 *
	 * @public
	 * @this {CAntObject_User} 
	 * @param {Object} teamData     Contains the team data info
	 */
	base.addSpacedPrefix = function(teamData)
	{
		var spacedTeam = new Array;
		var spacedCount = 0;
		for(option in this.teamDropdown)
		{
			if(option > 0)
			{
				var currentOption = this.teamDropdown[option];
				
				if(currentOption.parentId !==null)
				{   
					var spaced = 0;
					
					if(!spacedTeam[currentOption.parentId])
					{
						spacedCount += 1;
						spacedTeam[currentOption.parentId] = spaced = spacedCount;
						
					}
					else
					{
						var prevOption = this.teamDropdown[option-1]
						
						spaced = spacedTeam[currentOption.parentId];
						
						if((prevOption.parentId !== currentOption.parentId))
							spacedCount -= 1;
					}
					
					var spacedTxt = "";
					for(var x = 0; x < spaced; x++)
						spacedTxt += "\u00A0\u00A0\u00A0";
					
					currentOption.text = spacedTxt + currentOption.text;
				}
			}
		}
	}
}

/**
* @fileOverview AntApp: Used to process XML definitions to load apps into ANT
*
* ANT Application shell. Will process XML definition to load app into ANT.
* This class should be used for loading apps in both desktop and mobile
* environments and will lean heavy on AntView(s)
*
* var app = new AntApp("crm");
* app.main() // execute, load definition, build interface
*
* Example Def:
* <code>
* <applicaiton name='crm' title='Customer Relationship Management'>
*		<objects> // list of objects associated with this application (will be included in settings)
*			<object>email</object>
*			<object>email_message</object>
*		</objects>
*		<navigation>
*			<section name='Actions'>
*				<item type='object' name='new_customer' obj_type='customer' />
*				<item type='browse' name='activity' obj_type='activity' />
*				<item type='link' name='' url='http://www.aereus.com/support/answers/123' />
*				<item type='folder' name='Worship Team Files' path='/music/myfiles' />
*			</section>
*			<section name='Browse Messages'>
*				<item type='browse' name='All Mail' obj_type='email_thread'></view>
*			</section>
*		</navigation>
* </application>
* </code>
*
* @author:	joe, sky.stebnicki@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
 * Creates an instance of AntApp
 *
 * @constructor
 * @parma {string} name The unique name of the applicaiton to load
 */
function AntApp(name)
{
	/**
	* The system name of this app
	*
	* @param {string} name Unique ID of this app
	*/
    this.name = name;	

	/**
	* The human readable title of this app
	*
	* @default "Untitled"
	*/
    this.title = "Untitled";

	/**
	* The human readable short title of this app
	*
	* @default "Untitled"
	*/
    this.shortTitle = "Untitled";

	/**
	* Reference to AntView which is required in main
	*
	* @default null
	*/
    this.view = null;

	/**
	* Link to the rood node of the xml definition for this app
	*
	* @default null
	*/
    this.xmlDef = null;

	/**
	* View to load by default if in desktop mode
	*
	* @default null
	*/		
    this.defaultViewName = null; 

	/**
	 * Calendar view browser for my calendars
	 *
	 * @default null
	 * @type {AntCalendarBrowse}
	 */
	this.calendarBrowser = null;

	/**
	 * Currently visible object browser
	 *
	 * @default null
	 * @type {AntObjectBrowser}
	 */
	this.currentObjectBrowser = null;

	/**
	 * Currently visible dashboard
	 *
	 * @default null
	 * @type {AntAppDash}
	 */
	this.currentDashBoard = null;

	/**
	* Select Type of view for this app
	*
	* @param {string} "desktop" or "mobile"
	* @default "desktop"
	*/		
    this.clientMode = "desktop";
    this.refObjects = new Array(); // {name, type}
    this.refCalendars = new Array();
	this.hidenav="f";
    this.myCalendarView = null;	// Separate view used for calendar
    this.isNewWin = false;      // determines whether the application is viewed in new window

	/**
	 * Array of processes waiting to load before this application has finished loading
	 *
	 * There are a number of asynchronous calls made in the navigation that must be completed
	 * before any item view is called. For instance, if a grouping is still loading, you will
	 * not be able to pathe to the browse by group until it finished.
	 *
	 * @type {string}
	 * @private
	 */
    this.runningProcesses = new Array();	

	/**
	 * Left navigation bar
	 *
	 * @default null
	 * @type {CNavBar}
	 */
	this.navBar = null;

	/**
	 * List of sections for the navbar
	 *
	 * @default null
	 * @type {CNavBarSection}
	 */
	this.navBarSections = new Array();

	/**
	 * Generic object used by calling scrpts to store data for callback functions like onload
	 *
	 * @type {Object}
	 */
	this.cbData = new Object();

	/**
	 * Settings string can be 'none' to hide settings button, blank for default or a plugin class name
	 *
	 * @type {string}
	 */
	this.settings = "";

	/**
	 * Name of welcome tour to use for this application
	 *
	 * @type {string}
	 */
	this.tour = "";
}

/**
* Run application and build interface
*/
AntApp.prototype.main = function(view)
{
    this.view = view;
    this.loadAppDef();	
}


/**
* Set this process as currently loading. This will delay the calling of the loaded function
*
* @private
* @param {string} name The unique name of the process that is running - can be anything unique
*/
AntApp.prototype.setLoading = function(name)
{
	var found = false;

	// First check to see if this process already exists
	for (var i = 0; i < this.runningProcesses.length; i++)
	{
		if (this.runningProcesses[i] == name)
			found = true;
	}

	if (!found)
		this.runningProcesses[this.runningProcesses.length] = name;
}

/**
 * Set this process as currently loading. 
 *
 * Once all processes are finsihed loading, then the this.loaded function will be called
 * to indicate that the application is loaded and ready for work - such as loading items or views
 *
 * @private
 * @param {string} name The unique name of the process that is running - can be anything unique
 */
AntApp.prototype.setFinishedLoading = function(name)
{
	// Loop through running process array and remove if found
	for (var i = 0; i < this.runningProcesses.length; i++)
	{
		if (this.runningProcesses[i] == name)
			this.runningProcesses.splice(i, 1);
	}

	// If there are no more running processes, then call loaded
	if (this.runningProcesses.length==0)
		this.loaded();
}

/**
 * Internal function to call once the application is loaded
 *
 * @param bool noInterface Set to true if you want to skip building the interface
 */
AntApp.prototype.loaded = function(noInterface)
{
	var noint = (typeof noInterface != "undefined") ? noInterface : false;

	if (noint == false)
	{
		if (this.clientMode == "desktop" && this.defaultViewName)
			this.view.setDefaultView(this.defaultViewName);

		this.view.setViewsLoaded();

		this.resize();
	}

    this.onload();

	if (typeof Ant != "undefined")
		Ant.updateAppTitle();
}
AntApp.prototype.onload = function() {} // overload me

/**
* Get application definition
*
* @param bool buildInterface Set to true if you want to skip building the interface
*/
AntApp.prototype.loadAppDef = function(noInterface)
{
	var noint = (typeof noInterface != "undefined") ? noInterface : false;

	this.view.con.innerHTML = "<div class='loading'></div>";

    var ajax = new CAjax();
    ajax.appObj = this;
	ajax.cbData.noint = noint;
    ajax.onload = function(xmlroot)
    {
		// Clear loading status
		this.appObj.view.con.innerHTML = "";

		this.appObj.xmlDef = xmlroot;
        this.appObj.title = unescape(xmlroot.getAttribute("title"));
        this.appObj.shortTitle = unescape(xmlroot.getAttribute("short_title"));
        this.appObj.name = unescape(xmlroot.getAttribute("name"));
        this.appObj.scope = unescape(xmlroot.getAttribute("scope"));
        this.appObj.isSystem = unescape(xmlroot.getAttribute("isSystem"));
        this.appObj.userId = unescape(xmlroot.getAttribute("userId"));
        this.appObj.teamId = unescape(xmlroot.getAttribute("teamId"));
        this.appObj.settings = unescape(xmlroot.getAttribute("settings"));
        this.appObj.tour = unescape(xmlroot.getAttribute("tour"));

        /**
		* Get default navigation view
		*/
        var navnode = xmlroot.getChildNodeByName("navigation");
        if (navnode)

	        this.appObj.defaultViewName = unescape(navnode.getAttribute("default"));
			this.appObj.hidenav = unescape(navnode.getAttribute("hidenav"));


        /**
		* Get referenced objects
		*/
        var objects = xmlroot.getChildNodeByName("objects");
        if (objects)
   		{
            for (var j = 0; j < objects.getNumChildren(); j++)
                {
                var obj = objects.getChildNode(j);
                this.appObj.refObjects[this.appObj.refObjects.length] = {
                    name:unescape(obj.getAttribute("name")), 
                    title:unescape(obj.getAttribute("title")), 
                    fSystem:((obj.getAttribute("system")=='t')?true:false) // is a system object
                };
            }
        }

        // Get referenced calendars 
        var calendars = xmlroot.getChildNodeByName("calendars");
        if (calendars)
        {
            for (var j = 0; j < calendars.getNumChildren(); j++)
                {
                var cal = calendars.getChildNode(j);
                this.appObj.refCalendars[this.appObj.refCalendars.length] = {id:cal.getAttribute("id"), name:unescape(cal.getAttribute("name"))};
            }
        }
        
		if (!this.cbData.noint)
	    	this.appObj.buildInterface(); // once finished the this.loaded will be called
		else
			this.appObj.loaded(noint);
    };
	var url = "/applications/xml_getappdef.php?app="+this.name;
	ajax.exec(url);
}

/**
* Callback to be overridden
**/
AntApp.prototype.onload = function()
{
}

/**
* Create or print interface
*/
AntApp.prototype.buildInterface = function()
{
	// Set human readable title for this view
    this.view.title = this.shortTitle; //this.name.toUpperCase();
    switch (this.clientMode)
    {
        case 'mobile':
            this.buildInterfaceMobile();
            break;
        case 'desktop':
        default:
            this.buildInterfaceDesktop();
            break;
    }
}

/**
* Create or print mobile version of interface
*/
AntApp.prototype.buildInterfaceMobile = function()
{
	// Let application know we have started loading the navigation
	this.setLoading("main_mobile_navigation"); 

	/**
	* Create function to set application title
	*/
    this.view.bindOnViewLoad(function(opts, remPath) { opts.cls.setMobileApplicationTitle(remPath); }, { cls:this });

    this.view.setViewsToggle(true); // Subviews all toggle - if one is visible, the others are hidden

    this.appOuter = this.view.con;
    this.appTitle = null;

    this.appNav = alib.dom.createElement("div", this.appOuter);
    this.appMain = null;

	/** 
	* Get navigation
	*/
    var navnode = this.xmlDef.getChildNodeByName("navigation");
    if (navnode)
        this.buildMobileNavigation(navnode);

	// inform the app that the main thread for loading the navigation is finished
	this.setFinishedLoading("main_mobile_navigation");
}

/**
* Create nagivation from definition
*/
AntApp.prototype.buildMobileNavigation = function(navnode, secDiv)
{
    for (var i = 0; i < navnode.getNumChildren(); i++)
        {
        var childNode = navnode.getChildNode(i);

        switch (childNode.m_name)
        {
            case "section":
                //var secItems = alib.dom.createElement("section", this.appNav);

                var secTitle = alib.dom.createElement("article", this.appNav);
                alib.dom.styleSetClass(secTitle, "nav");
                secTitle.innerHTML = "<a><h2 class='navSecTitle'>"+childNode.getAttribute("title")+"</h2></a>";

                this.buildMobileNavigation(childNode, this.appNav);
                break;
            case "item":
                this.addNavMobileItem(secDiv, childNode);
                break;
        }
    }
}

/**
* Create or print desktop version of interface
*/
AntApp.prototype.buildInterfaceDesktop = function()
{
	// Let application know we have started loading the navigation
	this.setLoading("main_desktop_navigation"); 

	// Subviews all toggle - if one is visible, the others are hidden
    this.view.setViewsToggle(true); 

	// Create application title container
    this.titleCon = alib.dom.createElement("div", this.view.con);
    //this.titleCon.id = "apptitle";
    alib.dom.styleSetClass(this.titleCon, "apptitle");    
    this.view.bindOnViewLoad(function(opts, remPath) { 
			opts.cls.setDesktopeApplicationTitle(remPath); 
			opts.cls.setDesktopNavPathSate(remPath); 
		}, { cls:this });    

	// New window con
    var newWinCon = alib.dom.createElement("div", this.titleCon);
    alib.dom.styleSet(newWinCon, "float", "right");
    //alib.dom.styleSet(newWinCon, "margin-top", "-20px");
    //alib.dom.divClear(this.titleCon);

	// Populate title h1
    var ttl = alib.dom.createElement("h1", this.titleCon);
    ttl.innerHTML = this.title;

	// joe, 10-15-2013
	// Note: breadcrumbs are now part of the object loader rather than the application title
    //this.titleCon.bcCon = alib.dom.createElement("div", this.titleCon);
    //alib.dom.styleSet(this.titleCon.bcCon, "float", "left");
	
    this.view.onchange = function(path) { /*this.options.titleCon.innerHTML = path;*/ };    

	// Create application layout divs
	var appNav = alib.dom.createElement("div", this.view.con);
	alib.dom.styleSetClass(appNav, "appInstNav");

	// Main container
	this.appMain = alib.dom.createElement("div", this.view.con);
	alib.dom.styleSetClass(this.appMain, "appInstBody");
	if(this.hidenav=="t")
	{
		alib.dom.styleSet(appNav, "display", "none");
	}
	else
	{
		alib.dom.styleAddClass(this.appMain, "appInstBodyFloat");
	}

    var nb = new CNavBar();
	var navnode = this.xmlDef.getChildNodeByName("navigation");
	var childnode = navnode.getChildNodeByName("section");
	var mainnode = childnode.getChildNodeByName("item");
    
	nb.print(appNav);

	/* Commented out because it was messy. If we need to hide nav later it will need to be reviewed
	if(this.hidenav!="t")
	    nb.print(appNav);
    else
    {
        var viewItem = this.view.addView(name, nb, this.appMain);
        viewItem.options.dashboard = this.name + "." + mainnode.getAttribute("name"); // appname.navname        
        viewItem.render = function()
        {
            var dashboardObject = new CAntObject_Dashboard();
            dashboardObject.appNavname = this.options.dashboard;
            dashboardObject.print(this.con);                
        }
        viewItem.show();
		viewItem.onresize = function()
		{
			alib.dom.styleSet(this.con, "max-height", (getWorkspaceHeight() - 10) + "px");
			alib.dom.styleSet(this.con, "overflow", "auto");
		}
	}
	*/

	/**
	* Get Navigation
	*/
    var navnode = this.xmlDef.getChildNodeByName("navigation");
    if (navnode)
        this.buildDesktopNavigation(navnode, nb);

	// inform the app that the main thread for loading the navigation is finished
	this.setFinishedLoading("main_desktop_navigation");

	this.navBar = nb;

	// Add application settings
	var viewItem = this.view.addView("settings", {}, this.appMain);
	viewItem.options.app = this;
	viewItem.options.settings = this.settings;
	viewItem.render = function() 
	{
		this.con.innerHTML = "";


		// Load default settings
		if (!this.options.settings)
		{
			var appSettings = new AntAppSettings(this.options.app);
			appSettings.cbData.antView = this;
			appSettings.onclose = function() { this.cbData.antView.goup(); }
			appSettings.print(this.con);
		}
		else if (this.options.settings) 
		{
			// Load plugin
			this.con.innerHTML = "";
			this.options.app.loadPlugin(this.options.settings, this);
		}
	}
	// Show settings button
	var btn = alib.ui.Button("<img src='/images/icons/settings_16.png' />", {
		className:"b1", tooltip:"View settings for this application", view:this.view,
		onclick:function() 
		{
			this.view.navigate("settings");
		}
	});
	if (this.settings != "none")
		btn.print(newWinCon);

	// Show open in new window
    if(!this.isNewWin)
    {
        var btn = alib.ui.Button("<img src='/images/icons/new_window_16.png' />", 
        {
            className:"b1", tooltip:"Open this application to new window",
            onclick:function() 
            {
                var hash = document.location.hash;
                var parts = hash.split("/");
                
                window.open('http://' + window.location.host + '/app.php?app=' + parts[0].substring(1) + hash);
            }
        });
        btn.print(newWinCon);
    }

	// Add tour
	if (this.tour)
	{
		var tourCon = alib.dom.createElement("div", appNav, "<div data-tour='" + this.tour + "' data-tour-type='dialog'></div>");
		alib.dom.styleSet(tourCon, "display", 'none');
		Ant.HelpTour.loadTours(tourCon);
	}
}

/**
* Create navigation from definition
*/
AntApp.prototype.buildDesktopNavigation = function(navnode, navbar, sec)
{
	
	for (var i = 0; i < navnode.getNumChildren(); i++)
	{
		var childNode = navnode.getChildNode(i);
		switch (childNode.m_name)
		{
			case "section":
				var sec = navbar.addSection(unescape(childNode.getAttribute("title")));
				this.buildDesktopNavigation(childNode, navbar, sec);
				this.navBarSections[this.navBarSections.length] = sec;
				break;
			case "item":
				this.addNavDesktopItem(sec, childNode, navbar);
				break;
		}
	}
}

/**
* Add an item to a section of the main app navigation
*/
AntApp.prototype.addNavDesktopItem = function(sec, childNode, navbar)
{
	/**
	* Get common attributes
	*/
    var name = unescape(childNode.getAttribute("name"));
    var icon = unescape(childNode.getAttribute("icon"));
    var title = unescape(childNode.getAttribute("title"));
	var type =unescape(childNode.getAttribute("type"));

    if (!title)
        title = name;
	/** 
	* @param {string} name Required name for the childnode.
	*/
    if (!name) 
        return false;

    switch (type)
    {
	case 'dashboard':
		var secItem = sec.addItem(title, icon, 
			function(view, name){ view.navigate(name); }, 
			[this.view, name], name);

		var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.dashboard = this.name + "." + name; // appname.navname			
		viewItem.render = function()
		{
			var ajax = new CAjax('json');
			ajax.cbData.con = this.con;
			ajax.cbData.view = this;
			ajax.onload = function(ret)
			{
				var ol = new AntObjectLoader("dashboard", ret);
				ol.fEnableClose = false;
				ol.setAntView(this.cbData.view);
				ol.print(this.cbData.con);
			};        
			ajax.exec("/controller/Dashboard/loadAppDashForUser", [["dashboard_name", this.options.dashboard]]);
		}
		/*
		viewItem.onshow = function() 
		{
			//this.options.nb.itemChangeState(this.name, "on"); 				
		};

		viewItem.onresize = function()
		{
			alib.dom.styleSet(this.con, "max-height", (getWorkspaceHeight()) + "px");
			alib.dom.styleSet(this.con, "overflow", "auto");
		}
		*/
		
		break;

	case 'dashboards':

		var ajax = new CAjax('json');
		ajax.cbData.sec = sec;
		ajax.cbData.view = this.view;
		ajax.cbData.name = name;
		ajax.cbData.appCls = this;
		ajax.onload = function(ret)
		{
			var icon = "/images/icons/objects/dashboard_16.png";

			for(i in ret)
			{

				var secItem = this.cbData.sec.addItem(ret[i].name, icon, 
											function(view, name){ view.navigate(name); }, 
											[this.cbData.view, ret[i].uname], ret[i].uname);

				var viewItem = this.cbData.view.addView(ret[i].uname, {dbid:ret[i].id}, this.cbData.appCls.appMain);
				viewItem.render = function()
				{
					var ol = new AntObjectLoader("dashboard", this.options.dbid);
					ol.setAntView(this);
					ol.fEnableClose = false;
					ol.print(this.con);
				}

				/*
				viewItem.onresize = function()
				{
					alib.dom.styleSet(this.con, "max-height", (getWorkspaceHeight()) + "px");
					alib.dom.styleSet(this.con, "overflow", "auto");
				}
				*/
			}
		};
		ajax.exec("/controller/Dashboard/loadDashboards");

		break;

	case 'link':
		var url = unescape(childNode.getAttribute("url"));
		sec.addItem(title, icon, 
						function(url){ window.open(url); }, 
						[url, name], -1);
		break;

	case 'browse':
		var secItem = sec.addItem(title, icon, 
								  function(view, name){ view.navigate(name); }, 
								  [this.view, name], name);
		var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.type = childNode.getAttribute("obj_type");
		viewItem.options.preview = childNode.getAttribute("preview");
		viewItem.options.childNode = childNode;
		viewItem.options.appCls = this;
		viewItem.render = function()
		{
			var ob = new AntObjectBrowser(this.options.type);
			ob.setAntView(this);
			if (this.options.preview == "t")
				ob.preview = true;

			// Check for filter conditions
			var filter = this.options.childNode.getChildNodeByName("filter")
			if (filter)
			{
				for (var i = 0; i < filter.getNumChildren(); i++)
				{
					var cond = filter.getChildNode(i);
					var blogic = cond.getAttribute("blogic");
					var field = cond.getAttribute("field");
					var operator = cond.getAttribute("operator");
					var value = cond.getAttribute("value");
					ob.setFilter(field, value);
				}
			}

			// Check for activity type and set associations filter
			if (this.options.type == "activity")
			{
				for (var i = 0; i < this.options.appCls.refObjects.length; i++)
				{
					var op = (i > 0) ? "or" : "and";
					ob.addCondition(op, "type_id", "is_equal", this.options.appCls.refObjects[i].title);
				}
			}

			ob.print(this.con);
			this.options.browser = ob;
		}
		viewItem.onshow = function() { this.options.appCls.currentObjectBrowser = this.options.browser; /*this.options.nb.itemChangeState(this.name, "on");*/ };
		viewItem.onhide = function() { this.options.appCls.currentObjectBrowser = null; }


		/**
		* Check for browsable filtering based on fkey - used for things like groups and status keys
		*/
		var filterField = childNode.getAttribute("browseby");
		if (filterField)
		{
			var dm = new alib.ui.PopupMenu();

			var item = new alib.ui.MenuItem("Add New Subgroup", {icon:"<img src='/images/icons/add_10.png' />"});
			item.cbData.cls = this;
			item.cbData.obj_type = viewItem.options.type;
			item.cbData.filterField = filterField;
			item.cbData.secItem = secItem;
			item.onclick = function() { this.cbData.cls.addGrouping(this.cbData.obj_type, this.cbData.filterField, "", this.cbData.secItem, true); }
			dm.addItem(item);

			var ocon = secItem.getOptionCon();

			var img = alib.dom.createElement("img", ocon);
			img.src = "/images/icons/rightclick_off.gif";
			dm.attach(img);
			/*
			ocon.appendChild(dm.createImageMenu("/images/icons/rightclick_off.gif", 
												"/images/icons/rightclick_over.gif", 
												"/images/icons/rightclick_on.gif"));
												*/

			var grpdata = new Object();
			grpdata.obj_type = viewItem.options.type; 
			this.getGroupings(grpdata, filterField, secItem);
		}

		break;

	case 'folder':

		var secItem = sec.addItem(title, icon, 
		function(view, name){ view.navigate(name); }, 
		[this.view, name], name);
		var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.path = childNode.getAttribute("path");
		viewItem.render = function()
		{
			this.con.innerHTML = "";

			//alib.dom.styleSet(this.con, "max-height", (getWorkspaceHeight() - 10) + "px");
			//alib.dom.styleSet(this.con, "overflow", "auto");

			var browser = new AntObjectBrowser("file");
			//browser.optForceFullRefresh = true; // update refresh has a bug with folders for now
			browser.setBrowseBy("folder_id", this.options.path);
			browser.setAntView(this);
			browser.print(this.con);

			/*
			var br = new CFileBrowser();
			br.setAntView(this);
			br.setPath(this.options.path);
			br.print(this.con);
			*/
		}

		break;

	case 'object_newwin':
		sec.addItem(title, icon, 
					function(obj_type) {  loadObjectForm(obj_type); }, [childNode.getAttribute("obj_type")], -1);
		break;

	case 'object':
		sec.addItem(title, icon, 
						function(view, name){ view.navigate(name); }, 
						[this.view, name], name);
		var viewItem = this.view.addView(name, {nb:navbar, appcls:this}, this.appMain);
		viewItem.options.type = childNode.getAttribute("obj_type");
		viewItem.render = function() { }
		viewItem.onshow = function()  // draws in onshow so that it redraws every time
		{ 
			this.con.innerHTML = "";

			var ol = new AntObjectLoader(this.options.type);
			ol.setAntView(this);
			ol.print(this.con);
			ol.cbData.antView = this;
			ol.cbData.appcls = this.options.appcls;
			ol.onClose = function()
			{
				this.cbData.antView.goup();
			}
			ol.onRemove = function()
			{
			}
			ol.onSave = function()
			{
				// Trigger object saved event for app
				alib.events.triggerEvent(this.cbData.appcls, "objectsaved", {oid:this.oid, objType:this.objType, name:this.mainObject.getName()});
			}

			//this.options.nb.itemChangeState(this.name, "on"); 
		};
		break;

	case 'settings':
		sec.addItem(title, icon, 
					function(view, name){ view.navigate(name); }, 
					[this.view, name], name);
		var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.app = this;
		viewItem.render = function() 
		{
			this.con.innerHTML = "";

			var appSettings = new AntAppSettings(this.options.app);
			appSettings.cbData.antView = this;
			appSettings.onclose = function() { this.cbData.antView.goup(); }
			appSettings.print(this.con);
		}
		viewItem.onshow = function() { /*this.options.nb.itemChangeState(this.name, "on"); */ };
		break;

	case 'plugin':
		sec.addItem(title, icon, 
					function(view, name){ view.navigate(name); }, 
					[this.view, name], name);
					var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.app = this;
		viewItem.options.plugin = childNode.getAttribute("class");
		viewItem.render = function() 
		{
			this.con.innerHTML = "";
			this.options.app.loadPlugin(this.options.plugin, this);
		}
		viewItem.onshow = function() { /* this.options.nb.itemChangeState(this.name, "on"); */ };
		break;

	case 'calendar':
		sec.addItem(title, icon, 
					function(view, name){ view.navigate(name); }, 
					[this.view, name], name);
		var viewItem = this.view.addView(name, {nb:navbar}, this.appMain);
		viewItem.options.app = this;
		viewItem.options.calendar_id = childNode.getAttribute("id");	// Get calendar_id
		viewItem.render = function() 
		{
			this.con.innerHTML = "";

			// Load item calendar
			var caldv = alib.dom.createElement("div", this.con);
			this.options.cls.calendarBrowser = new AntCalendarBrowse(this.options.cls);
			this.options.cls.calendarBrowse.setAntView(caldv);
			this.options.cls.calendarBrowse.print(this);
		}
		viewItem.onshow = function() { }
		break;

	case 'myminical':
		// Check if Calendar view is defined
		if(this.myCalendarView == null)
		{
			this.myCalendarView = this.view.addView("mycalendar", {}, this.appMain);
			this.myCalendarView.options.cls = this;
			this.myCalendarView.options.nav = navbar;
			this.myCalendarView.render = function() 
			{ 
				this.con.innerHTML = "";
				var caldv = alib.dom.createElement("div", this.con);
				this.options.cls.calendarBrowser = new AntCalendarBrowse(this.options.cls);
				this.options.cls.calendarBrowser.setAntView(this);
				this.options.cls.calendarBrowser.print(caldv);
			}
			this.myCalendarView.onshow = function() 
			{ 
			}
		}
		this.cal_con = sec.addCon();
		this.calNav();
		break;

	case 'mycalendars':
		ajax = new CAjax('json');
		ajax.cls = this;
		ajax.sec = sec;
		ajax.onload = function(ret)
		{
			var icon = "/images/icons/calendar.png";
			
			for(calendar in ret.myCalendars)
				this.cls.insertCalendar(this.sec, ret.myCalendars[calendar]);
				
			this.cls.resize();
		};
		ajax.exec("/controller/Calendar/getCalendars");

		// Listen for new calendars and add to list
		alib.events.listen(this, "objectsaved", function(evt) { 
			if (evt.data.objType == "calendar")
				evt.data.appcls.insertCalendar(evt.data.nbsection, {id:evt.data.oid, name:evt.data.name, f_view:'t'});
		}, {appcls:this, nbsection:sec});
		break;

	case 'myothercals':
		ajax = new CAjax('json');
		ajax.cls = this;
		ajax.sec = sec;
		ajax.onload = function(ret)
		{
			var icon = "/images/icons/calendar.png";
			
			for(calendar in ret.otherCalendars)
				this.cls.insertCalendar(this.sec, ret.otherCalendars[calendar]);
				
			this.cls.resize();
		};
		ajax.exec("/controller/Calendar/getCalendars");
		break;

	case 'myminiprofile':
		if (typeof Ant != "undefined")
		{
			var pcon = alib.dom.createElement("div", sec.addCon());
			alib.dom.styleSet(pcon, "margin", "10px 0px 0px 3px");

			var imgcon = alib.dom.createElement("div", pcon);
			alib.dom.styleSet(imgcon, "width", "48px");
			alib.dom.styleSet(imgcon, "height", "48px");
			alib.dom.styleSet(imgcon, "float", "left");
			imgcon.innerHTML = "<img src='/files/userimages/current/48/48' style='width:48px;' />";

			var namecon = alib.dom.createElement("div", pcon);
			alib.dom.styleSet(namecon, "margin-left", "58px");
			alib.dom.styleSet(namecon, "padding-top", "15px");
			alib.dom.styleSet(namecon, "height", "33px"); // make sure it is the same height to handle float issues
			namecon.innerHTML = "<a href='#settings' class='boldLink'>" + Ant.user.fullName + "</a>";
		}
		break;

	case 'recentobjects':
		var ajax = new CAjax('json');
		ajax.cbData.sec = sec;
		ajax.onload = function(ret)
		{
			for(i in ret)
			{
				var icon = (ret[i].icon) ? 
					ret[i].icon : 
					"/images/icons/objects/generic_16.png";

				this.cbData.sec.addItem(ret[i].name, icon, function(obj_type, oid) {
											loadObjectForm(obj_type, oid);
										}, [ret[i].obj_type, ret[i].id], -1);
			}
		};
		ajax.exec("/controller/Object/getRecent");
		break;
		
	case "wizard":
		sec.addItem(title, icon, 
					function(wiz_type)
					{
						var wiz = new AntWizard(wiz_type);
						wiz.show(); 
					}, [childNode.getAttribute("wiz_type")], -1);
		
		break;

	default: // Do nothing but print in navbar for debugging
		sec.addItem(title, "/images/icons/plus.png", 
		function(){ }, 
		[], -1);
		break;
    }
}

/**
* Add an item to a section of the main app navigation
*/
AntApp.prototype.addNavMobileItem = function(secDiv, childNode)
{
    // Get common attributes
    var name = childNode.getAttribute("name");
    var icon = childNode.getAttribute("icon");
    var title = unescape(childNode.getAttribute("title"));
    var type = childNode.getAttribute("type");
    if (!title)
        title = name;
	/**
	* @param {string} name Required name of childnode.
	*/
    if (!name)
        return false;

    var entry = alib.dom.createElement("article", secDiv);
    alib.dom.styleSetClass(entry, "nav");
    switch (type)
    {
        case 'link':
            var url = childNode.getAttribute("url");
            entry.innerHTML = "<a target='_blank' href=\""+url+"\">"
            + "<span class='icon'><img src='"+icon+"' /></span><h2><span class='more'></span>"+title+"</h2></a>";
            break;
        case 'browse':
			entry.innerHTML = "<a behavior='selectable' href=\"#"+this.view.getPath()+"/"+name+"\" onclick=\"alib.dom.styleAddClass(this, 'selected');\">"
			+ "<span class='icon'><img src='"+icon+"' /></span><h2><span class='more'></span>"+title+"</h2></a>";
			entry.view = this.view;
			entry.name = name;
			//entry.onclick = function() { this.view.navigate(this.name); };

			var viewItem = this.view.addView(name, {});
			viewItem.options.type = childNode.getAttribute("obj_type");
			viewItem.options.childNode = childNode;
			viewItem.options.appCls = this;
			viewItem.render = function()
			{
				var ob = new AntObjectBrowser(this.options.type);
				ob.mobile = true;
				ob.setAntView(this);

				// Check for filter conditions
				var filter = this.options.childNode.getChildNodeByName("filter")
				if (filter)
				{
					for (var i = 0; i < filter.getNumChildren(); i++)
					{
						var cond = filter.getChildNode(i);
						var blogic = cond.getAttribute("blogic");
						var field = cond.getAttribute("field");
						var operator = cond.getAttribute("operator");
						var value = cond.getAttribute("value");
						ob.setFilter(field, value);
					}
				}

				ob.print(this.con);
			}
			viewItem.onshow = function() { this.options.appCls.currentObjectBrowser = this.options.browser; };
			viewItem.onhide = function() { this.options.appCls.currentObjectBrowser = null; }

			/**
			* Check for browsable filtering based on fkey - used for things like groups and status keys
			*/
			var filterField = childNode.getAttribute("browseby");
			if (filterField)
			{
				var grpdata = new Object();
				grpdata.obj_type = viewItem.options.type; 
				this.getGroupings(grpdata, filterField, null, secDiv);
			}

        break;

        case 'object':
            entry.innerHTML = "<a behavior='selectable' href=\"#"+this.view.getPath()+"/"+name+"\" onclick=\"alib.dom.styleAddClass(this, 'selected');\">"
            + "<span class='icon'><img src='"+icon+"' /></span><h2><span class='more'></span>"+title+"</h2></a>";

            var viewItem = this.view.addView(name, {});
            viewItem.options.type = childNode.getAttribute("obj_type");
            viewItem.render = function() { }
            viewItem.onshow = function()  // draws in onshow so that it redraws every time
            { 
                this.con.innerHTML = "";

                var ol = new AntObjectLoader(this.options.type);
                ol.print(this.con);
                ol.curView = this;
                ol.onClose = function() { }
                ol.onRemove = function() { }
            };
            break;

        case 'folder':
            entry.innerHTML = "<a behavior='selectable' href=\"#"+this.view.getPath()+"/"+name+"\" onclick=\"alib.dom.styleAddClass(this, 'selected');\">"
            + "<span class='icon'><img src='"+icon+"' /></span><h2><span class='more'></span>"+title+"</h2></a>";

            var viewItem = this.view.addView(name, {});
            viewItem.options.path= childNode.getAttribute("path");
            viewItem.render = function() { }
			/**
			* draws in onshow so that it redraws every time
			*/
            viewItem.onshow = function()  
            { 
                this.con.innerHTML = "";

                var browser = new AntObjectBrowser("file");
				browser.optForceFullRefresh = true; // update refresh has a bug with folders for now
				browser.setBrowseBy("folder_id", this.options.path);
				browser.setAntView(this);
				browser.print(this.con);
            };
            break;

        default: // Do nothing
            break;
    }
}

/**
* Get filter field values - used for groups / status codes
* @param {object} grpdata Type of object is in grpdata.obj_type.
* @param {string} field_name Name of field in object.
* @param {string} parentNavItem
* @param {string} secDiv
*/
AntApp.prototype.getGroupings = function(grpdata, field_name, parentNavItem, secDiv)
{
	// Add this async process to the queue so the application knows when it is finished
	this.setLoading("get_grouping_" + "_" + grpdata.obj_type + "_" + field_name);

	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.parentNavItem = (parentNavItem) ? parentNavItem : null;
    ajax.cbData.secDiv = (secDiv) ? secDiv : null;
    ajax.cbData.grpdata = grpdata;
    ajax.cbData.field_name = field_name;
	ajax.onload = function(groupings)
	{
		if (groupings.length)
		{
            if (this.cbData.cls.clientMode == "mobile")
			{
                this.cbData.cls.addGroupingsMobile(this.cbData.grpdata.obj_type, this.cbData.field_name, groupings, this.cbData.secDiv);
            }
            else
			{
                this.cbData.cls.addGroupings(this.cbData.grpdata.obj_type, this.cbData.field_name, groupings, this.cbData.parentNavItem);
                this.cbData.parentNavItem.expand(); // Open first level
            }
		}

		// Inform application we are finished building the navigation
		this.cbData.cls.setFinishedLoading("get_grouping_" + "_" + this.cbData.grpdata.obj_type + "_" + this.cbData.field_name);
	};
	ajax.exec("/controller/Object/getGroupings", 
			  [["obj_type", grpdata.obj_type], ["field", field_name]]);
}

/**
* Put item into the nav bar
*/
AntApp.prototype.addGroupings = function(obj_type, field_name, node, parentNavItem, level, new_group)
{
    //var icon = "/images/themes/"+Ant.m_theme+"/icons/newnote_small.png";
    if (!level)
        var level = 0;

    for (var c = 0; c < node.length; c++)
	{
        var child = node[c];


		var id = child.id;
		var title = child.title;
		var parent_id = child.parent_id;
		var color = child.color;
		var f_system = child.system;
		var viewName = child.viewname;

		// Hide system groupings - joe
		// We did this because inbox, drafts etc., are not in the application nav grouping than browseby
		if (f_system)
			continue;

		// Create color div
		var clr = alib.dom.createElement("div");
		alib.dom.styleSet(clr, "width", "14px");
		alib.dom.styleSet(clr, "height", "10px");
		alib.dom.styleSet(clr, "margin-top", "3px");
		alib.dom.styleSet(clr, "background-color", "#"+((color)?color:G_GROUP_COLORS[0][1]));
		ALib.Effect.round(clr, 2);

		var viewItem = this.view.addView(viewName, 
										{
											type:obj_type, 
											field_name:field_name, 
											filter_id:id, 
											f_system:f_system, 
											title:title, 
											appCls:this
										}, 
									    this.appMain);
		viewItem.render = function()
		{
			this.con.innerHTML = "";
			var ob = new AntObjectBrowser(this.options.type);
			ob.cbData.groupingId = this.options.filter_id; // store this for custom actions
			ob.setAntView(this);

			// If this is a deleted items grouping then set query
			if (this.options.f_system && ("Trash"==this.options.title || "Deleted Items"==this.options.title))
				ob.addCondition("and", 'f_deleted', 'is_equal', 't');
			else
				ob.setFilter(this.options.field_name, this.options.filter_id);

			ob.print(this.con);

			this.options.browser = ob;
		}
		
		viewItem.onshow = function() 
		{ 
			this.options.appCls.currentObjectBrowser = this.options.browser; 
			// Refresh is now automatic in the object browser
			//this.options.browser.setAutoRefresh(10000); // Refresh active list every 10 seconds
		};

		viewItem.onhide = function() 
		{ 
			this.options.appCls.currentObjectBrowser = null; 
			//this.options.browser.setAutoRefresh(null); // Disable. UPDATE: hendled in the browser
		}
        
		var entry = parentNavItem.addItem(title, clr, 
										 function(view, name){ view.navigate(name); }, 
										 [this.view, viewName], viewName);

		var lblcon = entry.getLabelCon();
		var ocon = entry.getOptionCon();

		var dm = new alib.ui.PopupMenu();

		// Add change color
		var submenu = new alib.ui.SubMenu("Change Color");
		for (var j = 0; j < G_GROUP_COLORS.length; j++)
		{
			/*
			colorent.addEntry(G_GROUP_COLORS[j][0], 
						function(cls, obj_type, field_name, clrdv, clr, gid)
						{cls.changeGroupingColor(obj_type, field_name, clrdv, clr, gid);}, null, 
						"<div style='width:9px;height:9px;background-color:#" + G_GROUP_COLORS[j][1] + "'></div>",
						[this, obj_type, field_name, clr, G_GROUP_COLORS[j][1], id]);

			*/
			var item = new alib.ui.MenuItem(G_GROUP_COLORS[j][0], {
				icon:"<div style='width:10px;height:10px;background-color:#" + G_GROUP_COLORS[j][1] + "'></div>"
			});
			item.cbData.cls = this;
			item.cbData.obj_type = obj_type;
			item.cbData.filterField = field_name;
			item.cbData.clrdv = clr;
			item.cbData.clr = G_GROUP_COLORS[j][1];
			item.cbData.gid = id;
			item.onclick = function() { 
				this.cbData.cls.changeGroupingColor(this.cbData.obj_type, this.cbData.field_name, this.cbData.clrdv, this.cbData.clr, this.cbData.gid);
			};
			submenu.addItem(item);
		}
		dm.addItem(submenu);

		// Add new Subgroup
		var item = new alib.ui.MenuItem("Add New Subgroup", {icon:"<img src='/images/icons/add_10.png' />"});
		item.cbData.cls = this;
		item.cbData.obj_type = obj_type;
		item.cbData.filterField = field_name;
		item.cbData.secItem = entry;
		item.cbData.gid = id;
		item.onclick = function() { 
			this.cbData.cls.addGrouping(this.cbData.obj_type, this.cbData.filterField, this.cbData.gid, this.cbData.secItem, true); 
		};
		dm.addItem(item);

		/*
		dm.addEntry("Add New Subgroup", function(cls, obj_type, field_name, gid, pnode) { cls.addGrouping(obj_type, field_name, gid, pnode, true); }, 
					"/images/icons/addStock.gif", null, [this, obj_type, field_name, id, entry]);
		*/

		if (!f_system)
		{
			var item = new alib.ui.MenuItem("Rename", {icon:"<img src='/images/icons/edit_10.png' />"});
			item.cbData.cls = this;
			item.cbData.obj_type = obj_type;
			item.cbData.field_name = field_name;
			item.cbData.gid = id;
			item.cbData.title = title;
			item.cbData.lblcon = lblcon;
			item.onclick = function() { 
				this.cbData.cls.renameGrouping(this.cbData.obj_type, this.cbData.field_name, this.cbData.gid, this.cbData.title, this.cbData.lblcon);
			};
			dm.addItem(item);

			var item = new alib.ui.MenuItem("Delete", {icon:"<img src='/images/icons/delete_10.png' />"});
			item.cbData.cls = this;
			item.cbData.obj_type = obj_type;
			item.cbData.field_name = field_name;
			item.cbData.gid = id;
			item.cbData.title = title;
			item.cbData.entry = entry;
			item.onclick = function() { 
				this.cbData.cls.deleteGrouping(this.cbData.obj_type, this.cbData.field_name, this.cbData.gid, this.cbData.title, this.cbData.entry);
			};
			dm.addItem(item);
		}

		var img = alib.dom.createElement("img", ocon);
		img.src = "/images/icons/rightclick_off.gif";
		dm.attach(img);
		/*
		ocon.appendChild(dm.createImageMenu("/images/icons/rightclick_off.gif", 
											"/images/icons/rightclick_over.gif", 
											"/images/icons/rightclick_on.gif"));
		*/

		entry.appCls = this;
		entry.viewTitle = title;
		entry.groupingField = field_name;
		entry.objectType = obj_type;
		entry.groupingToId = id;
		entry.registerDropzone("dzNavbarDrop_" + obj_type);
		entry.onDragEnter = function(e)
		{
		}
		entry.onDragExit = function(e)
		{
		}
		entry.onDragDrop = function(e)
		{
			if (this.appCls.currentObjectBrowser)
			{
				if (this.appCls.currentObjectBrowser.cbData.groupingId)
				{
					var sendArgs = [["obj_type", this.objectType], ["field_name", this.groupingField], 
									["move_from", this.appCls.currentObjectBrowser.cbData.groupingId], ["move_to", this.groupingToId]];
					var act = {url:"/controller/Object/moveByGrouping", args:sendArgs, 
								refresh:true, doneMsg:"Moved to "+this.viewTitle, flush:true};
					this.appCls.currentObjectBrowser.actionCustom(act);
				}
			}
		}

		if (child.children && child.children.length)
        {
            this.addGroupings(obj_type, field_name, child.children, entry, ++level);
        }

		if (level)
			entry.collapse();
            
        if(new_group)
            parentNavItem.expand();
	}
}

/**
* Put item into the nav bar
*/
AntApp.prototype.addGroupingsMobile = function(obj_type, field_name, node, secDiv, level)
{
    if (!level)
        var level = 0;

    for (var c = 0; c < node.length; c++)
	{
        var child = node[c];

		var id = child.id;
		var title = child.title;
		var parent_id = child.parent_id;
		var color = child.color;
		var viewName = child.viewname;

		var viewItem = this.view.addView(viewName, {type:obj_type, field_name:field_name, filter_id:id, appCls:this});
		viewItem.render = function()
		{
			this.con.innerHTML = "";
			var ob = new AntObjectBrowser(this.options.type);
			ob.mobile = true;
			ob.setAntView(this);
			ob.setFilter(this.options.field_name, this.options.filter_id);
			ob.print(this.con);
			this.options.browser = ob;
		}
		viewItem.onshow = function() { this.options.appCls.currentObjectBrowser = this.options.browser; };
		viewItem.onhide = function() { this.options.appCls.currentObjectBrowser = null; }

		var entry = alib.dom.createElement("article", secDiv);
		alib.dom.styleSetClass(entry, "nav");

		var spacer = "";
		for (var s = 0; s < level; s++)
			spacer += "&nbsp;";

		entry.innerHTML = "<a behavior='selectable' href=\"#"+this.view.getPath()+"/"+viewName+"\" onclick=\"alib.dom.styleAddClass(this, 'selected');\">"
					    + "<span class='icon'></span><h2><span class='more'></span>" + spacer + title + "</h2></a>";

		if (child.children && child.children.length)
			this.addGroupingsMobile(obj_type, field_name, child.children, secDiv, ++level);
    }
}

/**
* The container was resized so we shoud redraw
*/
AntApp.prototype.resize = function()
{
	// Resize leftnav
	if (this.navBarSections.length)
	{
		var topHeight = 0;
		var total_height = getWorkspaceHeight();

		// Exclode the last section
		for (var i = 0; i < (this.navBarSections.length-1); i++)
		{
			topHeight += this.navBarSections[i].getHeight();
		}

		this.navBarSections[this.navBarSections.length-1].setMaxHeight(total_height-topHeight);
	}

	// Resize the current active view and all children
	this.view.resize(true);
	
	/*
	if (this.currentObjectBrowser)
		this.currentObjectBrowser.resize();

	if (this.calendarBrowser)
		this.calendarBrowser.resize();

	if (this.currentDashBoard)
		this.currentDashBoard.resize();
	*/
}

/**
* Change the color of a grouping field like category or status
*/
AntApp.prototype.changeGroupingColor = function(obj_type, field_name, clrdv, clr, gid)
{
	ajax = new CAjax('json');
	ajax.cbData.clrdv = clrdv;
	ajax.cbData.clr = clr;
	ajax.onload = function(ret)
	{
		if (ret)
		{
			alib.dom.styleSet(this.cbData.clrdv, "background-color", "#"+this.cbData.clr);
			ALib.Effect.round(this.cbData.clrdv, 2);
		}
	};
	ajax.exec("/controller/Object/setGroupingColor", 
			  [["obj_type", obj_type], ["field", field_name], ["color", clr], ["gid", gid]]);
}

/**
* Add a grouping field value
*/
AntApp.prototype.addGrouping = function(obj_type, field_name, pgid, pnode, new_group)
{
    var name = prompt('Enter a name for new subgroup', "New Group");

    if (!name)
        return;

	ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.pnode = pnode;
	ajax.cbData.obj_type = obj_type;
    ajax.cbData.field_name = field_name;
	ajax.cbData.new_group = new_group;
	ajax.onload = function(ret)
	{
		if (ret && ret.id)
		{
			var node = new Array(ret);
			this.cbData.cls.addGroupings(this.cbData.obj_type, this.cbData.field_name, node, this.cbData.pnode, null, this.cbData.new_group);
		}
	};
	ajax.exec("/controller/Object/createGrouping", 
			  [["obj_type", obj_type], ["field", field_name], ["parent_id", pgid], ["title", name]]);
}

/**
* Rename a grouping field value
*/
AntApp.prototype.renameGrouping = function(obj_type, field_name, gid, gname, lbldv)
{
    var ldiv = (typeof(lbldv) != "undefined") ? lbldv : null;

    var name = prompt('Enter a name for this group', gname);

    if (!name)
        return;

	ajax = new CAjax('json');
	ajax.cbData.lbldv = ldiv;
	ajax.cbData.title = name;
	ajax.onload = function(ret)
	{
		if (ret && this.cbData.lbldv)
		{
			this.cbData.lbldv.innerHTML = this.cbData.title;
		}
	};
	ajax.exec("/controller/Object/renameGrouping", 
			  [["obj_type", obj_type], ["field", field_name], ["title", name], ["gid", gid]]);
}

/**
* Delete a grouping field value
**/
AntApp.prototype.deleteGrouping = function(obj_type, field_name, gid, gname, gitem)
{
    ALib.Dlg.confirmBox("Are you sure you want to delete " + gname + "?", "Delete Group", [obj_type, field_name, gid, gitem]);
    ALib.Dlg.onConfirmOk = function(obj_type, field_name, gid, gitem)
    {
		ajax = new CAjax('json');
		ajax.cbData.gitem = gitem;
		ajax.onload = function(ret)
		{
			if (ret)
				this.cbData.gitem.deleteItem();
		};
		ajax.exec("/controller/Object/deleteGrouping", 
				  [["obj_type", obj_type], ["field", field_name], ["title", name], ["gid", gid]]);
    }
}

/**
* Used to set the application title for this.view and children
*/
AntApp.prototype.setMobileApplicationTitle = function(remPath, childView)
{
    var view = (childView) ? childView : this.view;

    if (view.conAppTitle)
    {
        view.conAppTitle.innerHTML = "<h1>" + this.title + "</h1>";
        alib.dom.styleSetClass(view.conAppTitle, "apptitle");
    }

    if (view.viewManager)
    {
        for (var i = 0; i < view.viewManager.views.length; i++)
        {
            this.setMobileApplicationTitle(remPath, view.viewManager.views[i]);
        }
    }
}

/**
* Used to create application breadcrumbs
*
* @param string remPath The path after this view [thisviewname]/sub/path would be "sub/path"
* @param AntView childView Optional view used rather than this.view to traverse tree
*/
AntApp.prototype.setDesktopeApplicationTitle = function(remPath, childView)
{
	// We no longer use these breadcrumbs
	// because the object loader handles bc
	return;

    if (!childView)
	{
        this.titleCon.bcCon.innerHTML = "";
    }
    else
	{
        var sp = alib.dom.createElement("span", this.titleCon.bcCon);
        sp.innerHTML = " > ";
    }

    var view = (childView) ? childView : this.view;
    var lnk = alib.dom.createElement("a", this.titleCon.bcCon);
    lnk.href = "#"+view.getPath();
    lnk.view = view;
    //lnk.onclick = function() { this.view.navigate(this.view.getPath()); }
    view.getTitle(lnk); // passing the element will bind it to be updated on title change

    /**
	* Now load active child views into title
	*/
    var nextViewName = remPath;
    var postFix = "";
    if (remPath.indexOf("/")!=-1)
  	{
        var parts = remPath.split("/");
        var nextViewName = parts[0];
        if (parts.length > 1)
            {
			/*
			* Skip of first which is current view
			*/
            for (var i = 1; i < parts.length; i++) 
                {
                if (postFix != "")
                    postFix += "/";
                postFix += parts[i];
            }
        }
    }

	// Traverse remaining views
    if (view.viewManager && nextViewName)
   	{
        for (var i = 0; i < view.viewManager.views.length; i++)
            {
            if (view.viewManager.views[i].nameMatch(nextViewName))
                this.setDesktopeApplicationTitle(postFix, view.viewManager.views[i]);
        }
    }
}

/**
* Set the current active navigation state based on view name
*
* @param string remPath The path after this view [thisviewname]/sub/path would be "sub/path"
*/
AntApp.prototype.setDesktopNavPathSate = function(remPath)
{
    if (remPath)
  	{
        var parts = remPath.split("/");
        var activeNav = parts[0];
		if (this.navBar)
			this.navBar.itemChangeState(activeNav, "on");
    }
}

/**
* Calendar navigator
*/
AntApp.prototype.calNav = function(year, month, day, sel)
{
    var todaydate=new Date() //DD added

    var year = (year) ? year : todaydate.getFullYear();
    var month = (month) ? month : todaydate.getMonth()+1;
    var day = (day) ? day : todaydate.getDate();

    var sel = (sel) ? sel : '';

    this.cal_con.innerHTML = "";

    var dy=['S','M','T','W','T','F','S'];

    var oD = new Date(year, month-1, 1); //DD replaced line to fix date bug when current day is 31st
    oD.od=oD.getDay()+1; //DD replaced line to fix date bug when current day is 31st

    var scanfortoday=(year==todaydate.getFullYear() && month==todaydate.getMonth()+1)? todaydate.getDate() : 0 //DD added

    var num_days = calGetMonthNumDays(year, month);

    // Print navigation and month/year title
    // ---------------------------------------------------------------------------------
    var tbl = alib.dom.createElement("table", this.cal_con);
    alib.dom.styleSet(tbl, "width", "100%");
    alib.dom.styleSet(tbl, "font-size", "12px");
    var tbody = alib.dom.createElement("tbody", tbl);
    var tr = alib.dom.createElement("tr", tbody);
    var td = alib.dom.createElement("td", tr);
    alib.dom.styleSet(td, "width", "10px");
    td.innerHTML = "&lt;";
    alib.dom.styleSet(td, "cursor", "pointer");
    td.month = month;
    td.year = year;
    td.m_cls = this;
    td.onclick = function()
    {
        if (this.month == 1)
            {
            this.year = this.year - 1;
            this.month = 12;
        }
        else
            this.month = this.month - 1;
        this.m_cls.calNav(this.year, this.month);
    }
    var td = alib.dom.createElement("td", tr);
    alib.dom.styleSet(td, "text-align", "center");
    td.innerHTML = calGetMonthName(month) + ", " + year;
    var td = alib.dom.createElement("td", tr);
    alib.dom.styleSet(td, "width", "10px");
    td.innerHTML = "&gt;";
    alib.dom.styleSet(td, "cursor", "pointer");
    td.month = month;
    td.year = year;
    td.m_cls = this;
    td.onclick = function()
    {
        if (this.month == 12)
            {
            this.year = this.year + 1;
            this.month = 1;
        }
        else
            this.month = this.month + 1;
        this.m_cls.calNav(this.year, this.month);
    }

    /**
	* Print mini-cal
    */
    var tbl = alib.dom.createElement("table", this.cal_con);
    alib.dom.styleSet(tbl, "width", "100%");
    tbl.cellSpacing = 0;
    tbl.cellPadding = 0;
    //alib.dom.styleSetClass(tbl, "CalendarMonthMainTable");
    var tbody = alib.dom.createElement("tbody", tbl);

    var headers_tr = alib.dom.createElement("tr", tbody);
    for(s=0;s<7;s++)
        {
        var td = alib.dom.createElement("td", headers_tr);
        alib.dom.styleSet(td, "text-align", "center");
        alib.dom.styleSet(td, "font-weight", "bold");
        td.innerHTML = dy[s];

    }
    var curDate = new Date(year, month-1, 1);
    if (curDate.getDay()>0)
        {
        curDate = calDateAddSubtract(curDate, 'day', curDate.getDay()*(-1));
    }

    var tr = alib.dom.createElement("tr", tbody);
    tr.vAlign = "top";
    var d = 0; // number of days
    this.m_monthnumrows = 1;
    for(i=1; i<=42; i++)
        {
        var x=((i-oD.od>=0)&&(i-oD.od<num_days))? i-oD.od+1 : '&nbsp;';

        var td = alib.dom.createElement("td", tr);
        alib.dom.styleSet(td, "width", "14%");
        alib.dom.styleSet(td, "text-align", "center");
        alib.dom.styleSet(td, "padding", "3px");
        alib.dom.styleSet(td, "cursor", "pointer");

        if (x != "&nbsp;")
            {
            var act_lnk = '<a href="javascript:void(0);" style="text-decoration:none;" onclick="calEventOpen(null, null, ';
            act_lnk += "[['date_start', '"+month+"/"+x+"/"+year+"'], ['date_end', '"+month+"/"+x+"/"+year+"'], ['all_day', 't']]);\">+ event</a>";
        }
        else
            var act_lnk = "";

        if (x==scanfortoday) //DD added
            alib.dom.styleSet(td, "font-weight", "bold");

        /**
		* Check for selection background
		*/
        switch (sel)
        {
            case 'month':
                if (curDate.getMonth()+1 == month)
                    alib.dom.styleSet(td, "background-color", "#e3e3e3");
                break;
            case 'week':
                var testDate = new Date(year, month-1, day);
                var dateFrom = (testDate.getDay()>0) ? calDateAddSubtract(testDate, 'day', testDate.getDay()*(-1)) : testDate;
                var dateTo = (testDate.getDay()<6) ? calDateAddSubtract(testDate, 'day', 6-testDate.getDay()) : testDate;

                if (curDate.getTime() >= dateFrom.getTime() && curDate.getTime() <= dateTo.getTime())
                    alib.dom.styleSet(td, "background-color", "#e3e3e3");
                break;
            case 'day':
                var testDate = new Date(year, month-1, day);
                if (curDate.getTime() == testDate.getTime())
                    alib.dom.styleSet(td, "background-color", "#e3e3e3");
                break;
        }

        td.innerHTML = curDate.getDate();

        td.m_cls = this;
        td.m_year = curDate.getFullYear();
        td.m_month = curDate.getMonth()+1;
        td.m_day = curDate.getDate();
        td.onclick = function()
        {
            try
            {
                if (this.m_cls.calendarBrowser)
            	{
					// Navigate to Calendar view and clear selected item
                    this.m_cls.view.navigate("mycalendar");
                    this.m_cls.myCalendarView.options.nav.itemClearOnStates();

                    var view = this.m_cls.calendarBrowser.activeView;

                    switch(view)
                    {
                        case 'day':
                            this.m_cls.calendarBrowser.renderDay(this.m_year, this.m_month, this.m_day);
                            break;
                        case 'week':
                            this.m_cls.calendarBrowser.renderWeek(this.m_year, this.m_month, this.m_day);
                            break;
                        case 'month':
                            this.m_cls.calendarBrowser.renderMonth(this.m_year, this.m_month);
                            break;
                    }
                }
                else
                    {
                    /**
					* Navigate to Calendar view and clear selected item
					*/
                    this.m_cls.view.navigate("mycalendar");
                    this.m_cls.myCalendarView.options.nav.itemClearOnStates();
                }
            }
            catch(e) { }
        }

        curDate = calDateAddSubtract(curDate, 'day', 1);

        if(((i)%7==0)&&(d<num_days))
            {
            tr = alib.dom.createElement("tr", tbody);
            tr.vAlign = "top";
            this.m_monthnumrows++;
        }
        else if(((i)%7==0)&&(d>=num_days))
            {
            break;
        }
    }
}

/**
* Insert a calendar into the list
*/
AntApp.prototype.insertCalendar = function(sec, cal)
{
    var share_id = (cal.share_id) ? cal.share_id : null;
    var calendar_id = cal.id;
    var cal_event = {share_id:share_id, calendar_id:calendar_id};

    var cb = alib.dom.createElement("input");
    alib.dom.styleSet(cb, "cursor", "pointer");
    
    cb.type = "checkbox";
    if (cal.f_view == 't')
        cb.checked = true;

    var itemname = (share_id) ? "share_"+share_id : "cal_"+cal.id;
    var entry = sec.addItem("", cb, 
                        function(cls, cal_event, cb)
                        {
                            /** 
		                    * Change checkbox selection
		                    */		
                            if(cb.checked)
                                cb.checked = false;
                            else
                                cb.checked = true;
                                
                            cb.onchange();
                            
                        }, [this, cal_event, cb], itemname, false);	
                        
    // Add checkbox event
    cb.cal_event = cal_event;
    cb.cls = this;
    cb.calendar = cal;
    cb.onchange = function()
    {
        var f_view = (this.checked) ? 't' : 'f';
        var calendarId = this.calendar.id;
        var calendarArg = "calendar_id";
        if (this.cal_event.share_id)
        {
            calendarId = this.cal_event.share_id;
            calendarArg = "share_id";
        }
        
        ajax = new CAjax('json');
        ajax.cbData.f_view = f_view;
        ajax.cbData.calendar = this.calendar;
        ajax.cbData.cls = this.cls;
        ajax.onload = function(ret)
        {
            this.cbData.cls.processCalendar(this.cbData.calendar, this.cbData.f_view);
        };
        
        var params = [["f_view", f_view], [calendarArg, calendarId]];
        ajax.exec("/controller/Calendar/setFView", params);
    }

    var lblcon = entry.getLabelCon();
    var ocon = entry.getOptionCon();

    var color = cal.color;

    /** 
	* Create color div
	*/
    var clr = alib.dom.createElement("div", lblcon);
    alib.dom.styleSet(clr, "float", "left");
    alib.dom.styleSet(clr, "width", "14px");
    alib.dom.styleSet(clr, "height", "10px");
    alib.dom.styleSet(clr, "margin-top", "3px");
    alib.dom.styleSet(clr, "background-color", "#"+color);
    ALib.Effect.round(clr, 2);

    /** 
	* Now add text
	*/
    var lbl = alib.dom.createElement("div", lblcon);
    alib.dom.styleSet(lbl, "margin-left", "18px");
    lbl.innerHTML = unescape(cal.name);

    /**
	* Add dropdown
	*/
	var dm = new alib.ui.PopupMenu();


	var submenu = new alib.ui.SubMenu("Change Color");
	for (var j = 0; j < G_GROUP_COLORS.length; j++)
	{
		var item = new alib.ui.MenuItem(G_GROUP_COLORS[j][0], {
			icon:"<div style='width:9px;height:9px;background-color:#" + G_GROUP_COLORS[j][1] + "'></div>"
		});
		item.cbData.cls = this;
		item.cbData.cid = cal.id;
		item.cbData.share_id = share_id;
		item.cbData.color =  G_GROUP_COLORS[j][1];
		item.cbData.clrDiv =  clr;
		item.onclick = function() { 
			this.cbData.cls.changeCalColor(this.cbData.cid, this.cbData.share_id, this.cbData.color, this.cbData.clrDiv);
		};
		submenu.addItem(item);
	}
	dm.addItem(submenu);

    var delname = (share_id) ? "Remove Share" : "Delete Calendar";
	var item = new alib.ui.MenuItem(delname, {icon:"<img src='/images/icons/delete_10.png' />"});
	item.cbData.cls = this;
	item.cbData.cid = cal.id;
	item.cbData.share_id = share_id;
	item.cbData.name = unescape(cal.name);
	item.onclick = function() { 
		if (this.cbData.share_id) 
			this.cbData.cls.removeShare(this.cbData.share_id, this.cbData.name); 
		else 
			this.cbData.cls.deleteCalendar(this.cbData.cid, this.cbData.name); }
	dm.addItem(item);

    if (!share_id)
    {
		var item = new alib.ui.MenuItem("Share Calendar", {icon:"<img src='/images/icons/share_16.png' />"});
		item.cbData.cls = this;
		item.cbData.cid = cal.id;
		item.onclick = function() { 
			var antBrowser = new AntObjectBrowser("user");
			antBrowser.cbData.clsRef = this.cbData.cls;
			antBrowser.cbData.cid = this.cbData.cid;
			antBrowser.onSelect = function(objId, objLabel) 
			{
				var ajax = new CAjax('json');
				ajax.onload = function(ret)
				{
                	alib.statusShowAlert("Share invitation sent to " + objLabel, 3000, "bottom", "right");
				};
				ajax.exec("/controller/Calendar/addSharedCalendar", [["calendar_id", this.cbData.cid], ["user_id", objId]]);
			}
			antBrowser.displaySelect();         
		}
		dm.addItem(item);

		var item = new alib.ui.MenuItem("Permissions", {icon:"<img src='/images/icons/permissions_16.png' />"});
		item.cbData.cls = this;
		item.cbData.cid = cal.id;
		item.onclick = function() { 
			loadDacl(null, "calendars/" + this.cbData.cid);
		};
		dm.addItem(item);
    }

	var img = alib.dom.createElement("img", ocon);
	img.src = "/images/icons/rightclick_off.gif";
	dm.attach(img);
	/*
    ocon.appendChild(dm.createImageMenu("/images/icons/rightclick_off.gif", 
    "/images/icons/rightclick_over.gif", 
    "/images/icons/rightclick_on.gif"));
	*/
}

/**
* Process the calendar event
*/
AntApp.prototype.processCalendar= function(calendar, f_view)
{
    for(cb in this.calendarBrowser.calendars)
    {
        var currentCalendar = this.calendarBrowser.calendars[cb];
        
        if(currentCalendar.id == calendar.id)
        {
            delete this.calendarBrowser.calendars[cb];
            break;
        }
    }
    
    if(f_view == "t")
    {
        var idx = this.calendarBrowser.calendars.length;
        this.calendarBrowser.calendars[idx] = calendar;
    }
    
    this.calendarBrowser.getEvents();
}


/**
* Change the color for a calendar
*/
AntApp.prototype.changeCalColor= function(calendar_id, share_id, color, clrdv)
{
    if (share_id)
        var params = [["color", color], ["share_id", share_id]];
    else
        var params = [["color", color], ["calendar_id", calendar_id]];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.clrdv = clrdv;
    ajax.onload = function(ret)
    {
        this.clrdv.style.backgroundColor = '#'+ret; 
        ALib.Effect.round(this.clrdv, 2);
        this.cls.calendarBrowser.refresh();
    };
    ajax.exec("/controller/Calendar/calSetColor", params);
}

/**
* Delete a calendar belonging to this user
*/
AntApp.prototype.deleteCalendar = function(id, name)
{
    var dlg = new CDialog();
    dlg.confirmBox("Are you sure you want to delete "+unescape(name)+" and all it's events?", "Delete Calendar", [this, id]);
    dlg.onConfirmOk = function(cls, id)
    {
        ajax = new CAjax('json');
        ajax.cls = cls;
        ajax.id = id;
        ajax.onload = function(ret)
        {
            if (ret)
            {
                ALib.statusShowAlert("Calendar Deleted!", 3000, "bottom", "right");
                this.cls.navBar.deleteItem('cal_' + this.id);
            }
        };
        ajax.exec("/controller/Calendar/deleteCalendar", [["id", id]]);
    }
}

/**
* Delete a calendar belonging to this user
*/
AntApp.prototype.removeShare = function(id, name)
{
    var dlg = new CDialog();
    dlg.confirmBox("Are you sure you want to remove "+unescape(name)+"?", "Remove Shared Calendar", [this, id]);
    dlg.onConfirmOk = function(cls, id)
    {
        ajax = new CAjax('json');
        ajax.cls = cls;
        ajax.id = id;
        ajax.onload = function(ret)
        {
            if (ret)
            {
                ALib.statusShowAlert("Calendar Share Removed!", 3000, "bottom", "right");
                this.cls.navBar.deleteItem('share_' + this.id);
            }             
        };
        ajax.exec("/controller/Calendar/deleteShare", [["id", id]]);
    }
}

/**
 * Load a plugin
 *
 * @param string className = the name of the applet
 */
AntApp.prototype.loadPlugin = function(className, antView)
{

	var classParts = className.split("_"); // Nomenclature is Plugin_[modulename]_[classname]

	// Module specific
	if (classParts.length == 3)
	{
		var moduleDir = classParts[1];
		var fileName = classParts[2];
	}

	// Global plugins
	if (classParts.length == 2)
	{
		var moduleDir = "";
		var fileName = classParts[1];
	}

	// Set default resize for antView - can be overridden by plugin if desired
	antView.onresize = function()
	{
		alib.dom.styleSet(this.con, "max-height", (getWorkspaceHeight()) + "px");
		alib.dom.styleSet(this.con, "overflow", "auto");
	}

	// Set plugin path
	var filepath = "/applications/plugins";
	if (moduleDir)
		filepath += "/" + moduleDir;
	filepath += "/" + fileName + ".js";

	// Check if script is already loaded
	if (!document.getElementById("js_app_" + this.name + "_pl" + className))
	{
		// Load External file into this document
		var fileRef = document.createElement('script');
		fileRef.pluginClassName = className;
		fileRef.antView = antView;

		if (alib.userAgent.ie)
		{
			fileRef.onreadystatechange = function () 
			{ 
				if (this.readyState == "complete" || this.readyState == "loaded") 
				{
					var applet = eval("new "+this.pluginClassName+"()");
					if (applet.print)
						applet.print(this.antView);
				}
			};
		}
		else
		{
			fileRef.onload = function () 
			{ 
                var applet = eval("new "+this.pluginClassName+"()");
				if (applet.print)
            		applet.print(this.antView);
			};
		}

		fileRef.type = "text/javascript";
		fileRef.id = "js_app_" + this.name + "_pl" + className;
		fileRef.src =  filepath;
		document.getElementsByTagName("head")[0].appendChild(fileRef);

	}
	else
	{
		var applet = eval("new "+className+"()");
		if (applet.print)
			applet.print(antView);
	}
}

/**
 * Get application header hight
 *
 * @public
 * @this {AntApp}
 * @return {number} Height in px of the application header/title
 */
AntApp.prototype.getAppHeaderHeight = function()
{
	/** 
	 * We no longer print the title container
	 * so this has be disabled for the time being and returns 0
	if (this.titleCon)
	{
		return alib.dom.getElementHeight(this.titleCon);
	}
	*/

	return 0;
}

/**
* @fileOverview AntAppSettings: Dynamic settings class for applications in ANT.
*
* Usage
* var settings = new AntAppSettings(&referenceToAntApp)
* settings.print(div);
*
* @author: joe, sky.stebnicki@aereus.com; Copyright (c) 2011 Aereus Corporation. All rights reserved.
* @constructor AntAppSettings
* @param {object} app reference to instance of AntApp
*/
function AntAppSettings(app)
{
	this.app = (app) ? app : null;
	this.nav_xml = "";						// Navigation xml
	this.default_type = "";					// Default Navigation item type
	this.navigation_items = new Array();	// Array of navigation items
    
    this.objTypes = null;
    this.mainCon = null;
    this.workflowCon = null;
	this.antView = null;

	/**
	 * Generic callback object for temp values
	 *
	 * @var {Object}
	 */
	this.cbData = new Object();
}

/**
* Callback is used when 'close' is clicked for this applet
*
* If this is defined the close button will be enabled
*/
// AntAppSettings.prototype.onclose = function() {}

/**
 * Load app definition by name and print
 *
 * @param {string} appName The application mame to load
 * @param {AntView} view The AntView that is managing this applet
 */
AntAppSettings.prototype.loadAndPrint = function(appName, view)
{
	this.antView = view;

	this.app = new AntApp(appName);
    this.app.appName = appName;
	this.app.view = view;
	this.app.cbData.applet = this;
	this.app.cbData.con = view.con;
	this.app.onload = function()
	{
		this.cbData.applet.print(this.cbData.con);
	}
	this.app.loadAppDef(true);
}

/**
* Run application and build interface
* @param {object} con  dom element container for settings
*/
AntAppSettings.prototype.print = function(con)
{
	/**
	* Add content Table
	*/    
    this.mainCon = con;
    this.titleCon = alib.dom.createElement("div", this.mainCon);
    this.titleCon.className = "objectLoaderHeader";
    this.titleCon.innerHTML = this.app.title + " Settings";
    this.innerCon = alib.dom.createElement("div", this.mainCon);
    this.innerCon.className = "objectLoaderBody";

	/**
	* Add tabs
	*/
	var tabs = new CTabs();
	tabs.print(this.innerCon);

    // Load the object type
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.objTypes = ret;
    };
    ajax.exec("/controller/Object/getObjects");
    
	var tabcon = tabs.addTab("General");
	this.buildGeneral(tabcon);
	this.workflowCon = tabs.addTab("Workflow");
	this.buildWorkflow(this.workflowCon);
	var tabcon = tabs.addTab("Navigation");
	this.buildLayout(tabcon);
}

/**
* Build tab elements for general settings
* @param {object} con  dom element of current tab
*/
AntAppSettings.prototype.buildGeneral = function(con)
{
	var formData = new Object();

	/**
	* Add main toolbar
	*/
	var toolbar = alib.dom.createElement("div", con);
	var tb = new CToolbar();

	if (this.onclose)
	{
		var close = alib.ui.Button("Close", {className:"b1", tooltip:"Close Settings", cls:this, onclick:function(){this.cls.onclose()}});
		tb.AddItem(close.getButton(), "left");
	}

	var btn = new CButton("Save Settings", 
	function(cls, form)
	{
		/**
		* Get form values
		*/
		var title = form.txtTitle.value;
		var short_title = form.txtShortTitle.value;
		var scope = form.cbScope.value;

		/**
		* Save values
		*/
		function cbfun(ret)
		{            
			if(!ret['error'])
				ALib.statusShowAlert("Settings Saved!", 3000, "bottom", "right");
			else			
				ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
		}
		
		var args = [["app", cls.app.name], ["title", title], ["short_title", short_title], ["scope", scope]];
        
        switch(scope)
        {
            case "user":
                if(cls.userDetails)
                    args[args.length] = ["userId", cls.userDetails.id];
                break;
            case "team":
                if(cls.teamDropdown)
                    args[args.length] = ["teamId", cls.teamDropdown.value];
                break;
        }
        
        ajax = new CAjax('json');        
        ajax.onload = function(ret)
        {
            if(!ret['error'])
                ALib.statusShowAlert("Settings Saved!", 3000, "bottom", "right");
            else            
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
        };
        ajax.exec("/controller/Application/saveGeneral", args);
	}, 
	[this, formData], "b2");
	tb.AddItem(btn.getButton(), "left");
	tb.print(toolbar);

	/**
	* General settings div
	*/
	var gsCon = alib.dom.createElement("div", con);
	var table = alib.dom.createElement("table", gsCon);
	table.setAttribute("cellpadding", 0);
	table.setAttribute("cellspacing", 0);
	alib.dom.styleSet(table, "width", "90%");
	var tbody = alib.dom.createElement("tbody", table);

	/**
	* Title
	*/
	var tr = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Title";
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formValue");
	formData.txtTitle = alib.dom.createElement("input");
	formData.txtTitle.type = "text";
	formData.txtTitle.value = this.app.title;
	alib.dom.styleSet(formData.txtTitle, "width", "300px");
	td.appendChild(formData.txtTitle);

	/**
	* Permissions
	*/
	var td = alib.dom.createElement("td", tr);
	td.colSpan = 2;
	td.innerHTML = "<img src='/images/icons/permissions_16.png' />&nbsp;&nbsp;<a href='javascript:void(0);' "
				 + "onclick=\"loadDacl(null, 'applications/"+this.app.name+"');\">Edit Application Permissions</a>";

	var tr = alib.dom.createElement("tr", tbody);

	/**
	* Short Title
	*/
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Short Title";
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formValue");
	formData.txtShortTitle = alib.dom.createElement("input");
	formData.txtShortTitle.type = "text";
	formData.txtShortTitle.value = this.app.shortTitle;
	alib.dom.styleSet(formData.txtShortTitle, "width", "300px");
	td.appendChild(formData.txtShortTitle);

	/**
	* Scope
	*/
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formLabel");
    alib.dom.styleSet(td, "verticalAlign", "top");
	td.innerHTML = "Publish to: ";
	var td = alib.dom.createElement("td", tr);
	alib.dom.styleSetClass(td, "formValue");    
    
    var scopeCon = alib.dom.createElement("div");
    alib.dom.styleSet(scopeCon, "width", "300px");
    
    // Scope Dropdown
    var divScopeDropdown = alib.dom.createElement("div", scopeCon);    
    alib.dom.styleSet(divScopeDropdown, "float", "left");
	formData.cbScope = alib.dom.createElement("select", divScopeDropdown);
    var scopeData = [["system", "Everyone"], ["user", "Specific User"], ["team", "A Team"], ["draft", "Nobody - Unpublish"]];
    buildDropdown(formData.cbScope, scopeData, this.app.scope);
	td.appendChild(scopeCon);
    
    // Scope User
    this.divScopeUser = alib.dom.createElement("div", scopeCon);
    alib.dom.styleSet(this.divScopeUser, "float", "left");
    alib.dom.styleSet(this.divScopeUser, "marginLeft", "10px");    
    this.divScopeUser.innerHTML = "<div class='loading'></div>";
    this.loadCurrentUser();
    
    // Scope Team
    this.divScopeTeam = alib.dom.createElement("div", scopeCon);
    alib.dom.styleSet(this.divScopeTeam, "float", "left");
    alib.dom.styleSet(this.divScopeTeam, "marginLeft", "10px");    
    this.divScopeTeam.innerHTML = "<div class='loading'></div>";
    this.teamDropdown();
    
    alib.dom.divClear(scopeCon);
    
    // Scope onchange event
    formData.cbScope.cls = this;    
    formData.cbScope.onchange = function()
    {
        this.cls.toggleScope(this.value);
    }
    
    this.toggleScope(this.app.scope);

	/**
	* Referenced objects
	*/
	var wf = new CWindowFrame("Referenced Objects");
	var roCon = wf.getCon();
	wf.print(con);

    var tableCon = alib.dom.createElement("element", roCon);
    var linkCon = alib.dom.createElement("element", roCon);
    
	var tbl = new CToolTable("100%");
	tbl.print(tableCon);
	tbl.addHeader("Name");
	//tbl.addHeader("Application");
	//tbl.addHeader("&nbsp;", "center", "100px");
	tbl.addHeader("&nbsp;", "center", "100px");
	tbl.addHeader("&nbsp;", "center", "100px");
	tbl.addHeader("Delete", "center", "50px");

    this.antObject = new CAntObjects();
    this.antObject.objCls = this;
    this.antObject.appName = this.app.name
    this.antObject.tblObject = tbl;
    this.antObject.fObjectReference = true;
    this.antObject.loadObjects(tableCon);
    
    // Setup call back function to display first the default referenced system objects
    this.antObject.onLoadObjects = function()
    {
        this.mapObject(this.objCls.app.refObjects);
    }
    
	
	/**
	* Add object actions
	*/
	var actDiv = alib.dom.createElement("div", linkCon);
	alib.dom.styleSet(actDiv, "padding", "5px");
	var a = alib.dom.createElement("a", actDiv);
	a.href = "javascript:void(0);";
	a.innerHTML = "Create New Object";
	a.cls = this;
    a.tbl = tbl;
	a.onclick= function()
	{
		this.cls.antObject.addNewObject();
	}
	
	var sp = alib.dom.createElement("span", actDiv);
	sp.innerHTML = " | ";
	
	var a = alib.dom.createElement("a", actDiv);
    a.href = "javascript:void(0);";
    a.innerHTML = "Reference Existing Object";
    a.cls = this;
    a.tbl = tbl;
    a.onclick = function()
    {
        var dlg_d = new CDialog("Reference Existing Object");
        var dlg_con = alib.dom.createElement("div");
        dlg_d.cls = this.cls;
        dlg_d.tbl = this.tbl;
        
        var table = alib.dom.createElement("table", dlg_con);
        var tableBody = alib.dom.createElement("tbody", table);
        var tr = alib.dom.createElement("tr", tableBody);
        var td = alib.dom.createElement("td", tr);
        var lbl = alib.dom.createElement("div", td);
        lbl.innerHTML = "<strong>Select an object: </strong>";
        lbl.style.padding = "3px";
        td.appendChild(lbl);
        var td = alib.dom.createElement("td", tr);
        var td_con = alib.dom.createElement("div", td);
        var sel_con = alib.dom.createElement("select");
        sel_con[sel_con.length] = new Option("Select", "");
        sel_con.cls = dlg_d.cls;
        sel_con.tbl = dlg_d.tbl;
        sel_con.onchange = function()
        {
            if(this.value != "")
            {
                var obj_ref = this.cls.checkObjectReference(this.value);
                
                /**
                * If Object Reference doesn't already exist
                */
                if(!obj_ref)
                {
                    var args = [["app", this.cls.app.name], ["obj_type", this.value]];                    
                    
                    ajax = new CAjax('json');
                    ajax.cls = this.cls;
                    ajax.tbl = this.tbl;
                    ajax.obj_type = this.value;
                    ajax.onload = function(ret)
                    {
                        if(!ret['error'])
                        {
                            dlg_d.hide();
                            /**
                            * Insert new object in Referenced Objects table
                            */
                            var newAntObj = new Object();
                            newAntObj.name = this.obj_type;
                            this.cls.antObject.listObject(newAntObj);
                        }
                        else
                        {
                            dlg_d.hide();
                            ALib.Dlg.messageBox("ERROR: Could not add object reference. Please try again.");
                        }    
                    };
                    ajax.exec("/controller/Application/addObjectReference", args);
                }
                /**
                * Object Reference already exists
                */
                else
                {
                    dlg_d.hide();
                    ALib.Dlg.messageBox("ERROR: Object Reference already exists!");
                }
            }
        }
        tr.appendChild(td);
        table.appendChild(tableBody);
        
        ajax = new CAjax('json');        
        ajax.con = sel_con;
        ajax.onload = function(ret)
        {
            for(object in ret)
                this.con[this.con.length] = new Option(ret[object].title, ret[object].name);
        };
        ajax.exec("/controller/Object/getObjects");
        
        var btn_con = alib.dom.createElement("div");
        alib.dom.styleSet(btn_con, "float", "right");
        var btn = new CButton("Cancel", function(){  dlg_d.hide(); }, null, "b1");
        btn_con.appendChild(btn.getButton());
        dlg_con.appendChild(btn_con);
        dlg_d.customDialog(dlg_con, 260, 60);
        td_con.appendChild(sel_con);
    }
    
    var sp = alib.dom.createElement("span", actDiv);
    sp.innerHTML = " | ";
    
    var a = alib.dom.createElement("a", actDiv);
	a.href = "javascript:void(0);";
	a.innerHTML = "Refresh";
	a.cls = this;
	a.tableCon = tableCon;
	a.onclick = function()
	{
		this.cls.antObject.loadObjects(this.tableCon);
    
        // Setup call back function to display first the default referenced system objects
        this.cls.antObject.onLoadObjects = function()
        {
            this.mapObject(this.objCls.app.refObjects);
        }
	}

	/**
	* Calendars
	*/
	var wf = new CWindowFrame("Application Calendars");
	var calCon = wf.getCon();
	wf.print(con);

	var tbl = new CToolTable("100%");
	tbl.print(calCon);
	tbl.addHeader("Name");
	tbl.addHeader("Delete", "center", "50px");

	for (var i = 0; i < this.app.refCalendars.length; i++)
	{
		var rw = tbl.addRow();

		rw.addCell(this.app.refCalendars[i].name);
		
		var del_dv = alib.dom.createElement("div");
		del_dv.m_rw = rw;
		del_dv.cls = this;
		del_dv.calid = this.app.refCalendars[i].id;
		del_dv.onclick = function()
		{
			this.cls.removeCalendar(this.calid, this.m_rw);
		}
		del_dv.innerHTML = "<img border='0' src='/images/icons/delete_10.png' />";
		alib.dom.styleSet(del_dv, "cursor", "pointer");
		rw.addCell(del_dv, false, "center");
		
		//rw.addCell("<img src='/images/icons/delete_10.png' />", false, "center");
	}

	/**
	* Add calendar action
	*/
	var actDiv = alib.dom.createElement("div", calCon);
	alib.dom.styleSet(actDiv, "padding", "5px");
	var a = alib.dom.createElement("a", actDiv);
	a.href = "javascript:void(0);";
	a.tbl = tbl;
	a.cls = this;
	a.onclick = function()
	{
		var dlg_p = new CDialog();
		dlg_p.cls = this.cls;
		dlg_p.tbl = this.tbl;
		dlg_p.promptBox("Enter A Name For This Calendar", "Calendar Name:", "Application Calendar");
		dlg_p.onPromptOk = function(val)
		{                    
            ajax = new CAjax('json');
            ajax.cls = this.cls;
            ajax.name = val;
            ajax.tbl = this.tbl;
            ajax.onload = function(ret)
            {
                if (!ret["error"])
                {
                    var rw = this.tbl.addRow();
                    rw.addCell(this.name);

                    var del_dv = alib.dom.createElement("div");
                    del_dv.m_rw = rw;
                    del_dv.cls = this.cls;
                    del_dv.calid = ret;
                    del_dv.onclick = function()
                    {
                        this.cls.removeCalendar(this.calid, this.m_rw);
                    }
                    del_dv.innerHTML = "<img border='0' src='/images/icons/delete_10.png' />";
                    alib.dom.styleSet(del_dv, "cursor", "pointer");
                    rw.addCell(del_dv, false, "center");
                }    
            };
            ajax.exec("/controller/Application/createCalendar", 
                        [["cal_name", val], ["app", this.cls.app.name]]);
            
		}
	}
	a.innerHTML = "Create Application Calendar";
}

/**
*Delete calendar from calendars and application_calendars
* @param {number} cal_id  Id of calendar to delete
* @param {number} row  Row in table to delete
*/
AntAppSettings.prototype.removeCalendar = function(cal_id, row)
{
	var dlg = new CDialog();
	dlg.cls = this;
	dlg.row = row;
	dlg.cal_id = cal_id;
	dlg.confirmBox("Are you sure you want to delete this calendar?", "Delete Calendar");
	dlg.onConfirmOk = function()
	{
		var args = [["app", this.cls.app.name], ["cal_id", this.cal_id]];
        
        ajax = new CAjax('json');        
        ajax.row = this.row;
        ajax.onload = function(ret)
        {
            if(!ret['error'])
            {    
                ALib.statusShowAlert("Calendar Deleted!", 3000, "bottom", "right");
                this.row.deleteRow();    // Delete row from table
            }
            else
            {
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
            }    
        };
        ajax.exec("/controller/Application/deleteCalendar", args);
	}
}

/**
*Add object to Referenced Objects table
* @param {object} tbl  Referenced Object table
* @param {object} obj_type object type to add
* @param {boolean} co = Customer Object 
*/
AntAppSettings.prototype.addReferencedObject = function(tbl, obj_type, co)
{
	/**
	* Add new Object reference to refObjects array
	*/
	var index = this.app.refObjects.length;
	if(co)
	{	var obj_name = "co_"+obj_type;
		this.app.refObjects[index] = { name:obj_name, title:obj_type, fSystem:false };
	}
	else
		this.app.refObjects[index] = { name:obj_type, title:obj_type, fSystem:false };

	var rw = tbl.addRow();
	rw.addCell(this.app.refObjects[index].title, false);
	//rw.addCell("system");

	/**
	* Import data
	*/
	var lnk = alib.dom.createElement("a");
	lnk.innerHTML = "[import data]";
	lnk.href = "javascript:void(0);";
	lnk.obj_type = this.app.refObjects[index].name;
	lnk.onclick = function() 
	{
		var wiz = new AntWizard("EntityImport", {obj_type:this.obj_type});
		wiz.show();
	}
	rw.addCell(lnk, false, "center");

	/**
	* Import data
	*/
	var lnk = alib.dom.createElement("a");
	lnk.innerHTML = "[edit permissions]";
	lnk.href = "javascript:void(0);";
	lnk.obj_type = this.app.refObjects[index].name;
	lnk.onclick = function() { loadDacl(null, '/objects/' + this.obj_type); }
	rw.addCell(lnk, false, "center");

	/**
	*Edit object
	*/
	var lnk = alib.dom.createElement("a");
	lnk.innerHTML = "[edit object]";
	lnk.href = "javascript:void(0);";
	lnk.obj_type = this.app.refObjects[index].name;
	lnk.onclick = function() 
	{
		var objedt_dlg = new Ant.EntityDefinitionEdit(this.obj_type);
		objedt_dlg.showDialog();
	}
	rw.addCell(lnk, false, "center");

	/**
	* Delete
	*/
	if (this.app.refObjects[index].fSystem)
		var delLnk = "&nbsp;";
	else
	{
		var delLnk = alib.dom.createElement("div");
		delLnk.cls = this;
		delLnk.row = rw;
		delLnk.obj_type = obj_type;
		delLnk.innerHTML = "<img src='/images/icons/delete_10.png' />";
		delLnk.onclick = function()
		{
			this.cls.deleteReferencedObject(this.row, this.cls.app.refObjects[index].name);
		}
	}
	rw.addCell(delLnk, false, "center");
}

/**
* Delete object in Referenced Objects table
* @param {object} 	row Row in table to delete
* @param {object} obj_type object type to add
*/
AntAppSettings.prototype.deleteReferencedObject = function(row, obj_type)
{	
	var dlg = new CDialog();
	dlg.cls = this;
	dlg.row = row;
	dlg.obj_type = obj_type;
	dlg.confirmBox("Are you sure you want to delete this referenced object?", "Delete Referenced Object");
	dlg.onConfirmOk = function()
	{
		var args = [["app", this.cls.app.name], ["obj_type", this.obj_type]];        
        
        ajax = new CAjax('json');        
        ajax.row = this.row;
        ajax.onload = function(ret)
        {
            if(!ret['error'])
            {    
                ALib.statusShowAlert("Object Deleted!", 3000, "bottom", "right");
                this.row.deleteRow();    // Delete row from table
            }
            else
            {
                ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
            }
        };
        ajax.exec("/controller/Application/deleteObjectReference", args);
	}
}

/**
* Check if Object Reference already exists
* @param {object} obj_type object type to add
*/
AntAppSettings.prototype.checkObjectReference = function(obj_type)
{
	var ret = false;	// return true if object reference already exists 
	
	for (var i = 0; i < this.app.refObjects.length; i++)
	{
		if(this.app.refObjects[i].name == obj_type)
			ret = true;
	}
	
	return ret;
}

/**
* Show all active workflows 
* @param {object} con dom element of current tab
*/
AntAppSettings.prototype.buildWorkflow = function(con)
{
	con.innerHTML = "";

	/**
	* Add table
	*/
	var tbl = new CToolTable("100%");
	//tbl.addHeader("#", "center", "20px");
	tbl.addHeader("Name");
	tbl.addHeader("Object Type", "center", "60px");
	tbl.addHeader("Active", "center", "30px");
	tbl.addHeader("", "center", "30px");
	tbl.addHeader("Delete", "center", "50px");

	/**
	* Add toolbar
	*/
	var tb = new CToolbar();

	if (this.onclose)
	{
		var close = alib.ui.Button("Close", {className:"b1", tooltip:"Close Settings", cls:this, onclick:function(){this.cls.onclose()}});
		tb.AddItem(close.getButton(), "left");
	}

	/**
	* New workflow
	*/
	var btn = new CButton("Create Workflow", function(cls) { cls.openWorkflow(); }, [this], "b2");
	tb.AddItem(btn.getButton());

	var btn = new CButton("Refresh", function(cls, con) { cls.buildWorkflow(con); }, [this, con]);
	tb.AddItem(btn.getButton());
	tb.print(con);

	var p = alib.dom.createElement("p", con);
	alib.dom.styleSetClass(p, "notice");
	p.innerHTML = "Use workflows to automate tasks based on any object. To get started, click \"Create Workflow\" above and select the object type you would like to automate tasks for.";

	/**
	* Add window frame
	*/
	var wf = new CWindowFrame("Automated Workflows");
	wf.print(con);
	var wfDiv = wf.getCon();
    wfDiv.innerHTML = "<div class='loading'></div>";
    
	var ajax = new CAjax("json");
	ajax.m_tbl = tbl;
    ajax.m_app = this;
	ajax.m_wfDiv = wfDiv;
	ajax.onload = function(ret)
	{
        this.m_wfDiv.innerHTML = "";
        this.m_tbl.print(this.m_wfDiv);
		if (ret.length)
		{
			for (workflow in ret)
			{
                var currentWorkflow = ret[workflow];
				var oname = "";
				var id = "";
				var act = "";
				var object_type = "";

                if(currentWorkflow.name)
				    oname = currentWorkflow.name;

                if(currentWorkflow.f_active)
                {
                    if(currentWorkflow.f_active=="t")
                        act = "yes";
                    else
                        act = "no";
                }				    
                
                if(currentWorkflow.object_type)
				    object_type = currentWorkflow.object_type;
                    
                if(currentWorkflow.id > 0)
                {
                    id = currentWorkflow.id;
                    this.m_app.addWorkflowToList(id, oname, act, object_type, this.m_tbl);
                }
			}
		}
	};

	var strObjTypes = "activity:comment";
	for (var i = 0; i < this.app.refObjects.length; i++)
		strObjTypes += ":"+this.app.refObjects[i].name;
    
    var args = new Array();
    args[args.length] = ['otypes', strObjTypes];
	ajax.exec("/controller/WorkFlow/getWorkflow", args);
}

/**
* Open a workflow window
* @param {number} id the id of the workflow to open. If null then create new.
* @param {number} id he id of the workflow to open. If null then create new.
* @param {string} obj_type the object name of obj_type
*/
AntAppSettings.prototype.openWorkflow = function(id, obj_type)
{
	// Edit existing workflow 
	if(id && obj_type)
	{
		var wf_wizard = new WorkflowWizard(obj_type, id);
        wf_wizard.g_objTypes = this.objTypes;
		wf_wizard.showDialog();
	}
	// Create new workflow
	else
	{
		var wf_wizard = new WorkflowWizard();
        wf_wizard.g_objTypes = this.objTypes;
		wf_wizard.showDialog();
	}
    
    wf_wizard.cls = this;
    wf_wizard.onsave = function()
    {        
        this.cls.buildWorkflow(this.cls.workflowCon);
    }    
}

/**
* Add a row to the workflows table
* @param {number} id  The id of the workflow
* @param {string} name The name/title of this workflow
* @param {boolean} name Is active - yes/no used
* @param {string}  obj_type The object name of obj_type
* @param {object} tbl Reference to workflows table
*/
AntAppSettings.prototype.addWorkflowToList = function(id, name, act, obj_type, tbl)
{
	var rw = tbl.addRow();
	var pro_params = "width=765,height=600,toolbar=no,menubar=no,location=no,directories=no,status=no,resizable=yes,scrollbars=yes";
	var opn_params = "toolbar=no,menubar=no,location=no,directories=no,status=no,resizable=yes,scrollbars=yes";
	
	var del_dv = alib.dom.createElement("div");
	del_dv.m_rw = rw;
	del_dv.m_app = this;
	del_dv.m_wfid = id;
	del_dv.onclick = function()
	{
		this.m_app.deleteWorkflow(this.m_wfid, this.m_rw);
	}
	del_dv.innerHTML = "<img border='0' src='/images/icons/delete_10.png' />";
	alib.dom.styleSet(del_dv, "cursor", "pointer");
	rw.addCell(name);
	rw.addCell(obj_type);
	rw.addCell(act);
	btn = new CButton("open", function(cls, wfid, obj_type) { cls.openWorkflow(wfid, obj_type); }, [this, id, obj_type], "b2");
	rw.addCell(btn.getButton());
	rw.addCell(del_dv, true, "center");
}

/**
* Remove a workflow
*/
AntAppSettings.prototype.deleteWorkflow = function(wfid, row)
{
	var dlg = new CDialog("Remove Workflow");
	dlg.rw = row;
	dlg.wfid = wfid;
	dlg.confirmBox("Are you sure you want to delete this workflow?", "Remove Workflow");
	dlg.onConfirmOk = function()
	{
        ajax = new CAjax('json');        
        ajax.cbData.rw = this.rw;
        ajax.onload = function(ret)
        {
            this.cbData.rw.deleteRow();
        };
        ajax.exec("/controller/WorkFlow/deleteWorkflow", [["wid", this.wfid]]);

	}
}

/**
* Build main layout modification form
* @param {object} con DOM element of current tab
*/
AntAppSettings.prototype.buildLayout = function(con)
{
    /**
    * Add main toolbar
    */
    var toolbar = alib.dom.createElement("div", con);
    var tb = new CToolbar();
    
	/**
	* Build main split container
	*/
    var splitCon = alib.dom.createElement("div", con);
	var appcon = new CSplitContainer();
	left_div = appcon.addPanel("330px");
	right_div = appcon.addPanel("*");
	
	if (this.onclose)
	{
		var close = alib.ui.Button("Close", {className:"b1", tooltip:"Close Settings", cls:this, onclick:function(){this.cls.onclose()}});
		tb.AddItem(close.getButton(), "left");
	}

	var btn = new CButton("Save Navigation", 
	                        function(cls, root)
	                        {
		                        cls.nav_xml = "";
		                        cls.saveLayout(root);		                        
	                        }, [this, left_div], "b2");	
    tb.AddItem(btn.getButton(), "left");
	
    var btn = new CButton("Select Default Item", 
	                        function(cls, root)
	                        {
		                        var dlg_d = new CDialog("Default Navigation Item");
		                        var dlg_con = alib.dom.createElement("div");
		                        
		                        var table = alib.dom.createElement("table", dlg_con);
		                        var tableBody = alib.dom.createElement("tbody", table);
		                        var tr = alib.dom.createElement("tr", tableBody);
		                        var td = alib.dom.createElement("td", tr);
		                        var lbl = alib.dom.createElement("div", td);
		                        lbl.innerHTML = "<strong>Select a default item: </strong>";
		                        lbl.style.padding = "3px";
		                        td.appendChild(lbl);
		                        var td = alib.dom.createElement("td", tr);
		                        var td_con = alib.dom.createElement("div", td);
		                        var sel_con = alib.dom.createElement("select");
		                        sel_con.cls = cls;
		                        sel_con[sel_con.length] = new Option("Select", "");
		                        /**
		                        * Used to reset default type
		                        */
		                        sel_con[sel_con.length] = new Option("Null", "");
		                        sel_con.onchange = function()
		                        {
			                        /**
			                        * Update default item type
			                        */
			                        dlg_d.hide();
			                        this.cls.default_type = this.value;
		                        }
		                        tr.appendChild(td);
		                        table.appendChild(tableBody);
		                        cls.addNavigationItems(sel_con);
		                        
		                        var btn_con = alib.dom.createElement("div");
		                        alib.dom.styleSet(btn_con, "float", "right");
		                        var btn = new CButton("Cancel", function(){  dlg_d.hide(); }, null, "b1");
		                        btn_con.appendChild(btn.getButton());
		                        dlg_con.appendChild(btn_con);
		                        dlg_d.customDialog(dlg_con, 260, 60);
		                        td_con.appendChild(sel_con);
	                        }, [this, left_div], "b1");		
    tb.AddItem(btn.getButton(), "left");
	
    var btn = new CButton("Reset to default", 
                            function(cls, splitCon)
                            {
                                ajax = new CAjax('json');
                                ajax.cbData.cls = cls;
                                ajax.onload = function(ret)
                                {
                                    if(!ret)
                                        ALib.statusShowAlert("Error Occured!", 3000, "bottom", "right");
                                        
                                    if(ret.error)
                                        ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
                                        
                                    if(ret)
                                    {
                                        var appcon = new CSplitContainer();
                                        left_div = appcon.addPanel("330px");
                                        right_div = appcon.addPanel("*");
                                        
                                        cls.buildLeftLayout(left_div, right_div);
                                        cls.buildRightLayout(right_div);
                                        
                                        splitCon.innerHTML = "";
                                        appcon.print(splitCon);
                                        
                                        alib.dom.styleSet(this.cbData.cls.resetDefault, "display", "none");
                                        ALib.statusShowAlert(this.cbData.cls.app.appName.capitalize() + " navigation is reset to default!", 3000, "bottom", "right");
                                    }
                                };
                                
                                var args = new Array();
                                args[args.length] = ['name', cls.app.appName];
                                args[args.length] = ['layout_xml', null];
                                ajax.exec("/controller/Application/saveLayout", args);
                            }, [this, splitCon], "b1");
    this.resetDefault = btn.getButton();
    tb.AddItem(this.resetDefault, "left");
    alib.dom.styleSet(this.resetDefault, "display", "none");
    
    tb.print(toolbar);
    
    
    
	/**
	* Append split container
	*/
	appcon.print(splitCon);
	
	/**
	* Build Left div
	*/
	var total_height = document.body.offsetHeight;
	left_div.style.height = total_height + "px";
	left_div.id = "nav_root";
	this.buildLeftLayout(left_div, right_div);
	
	/**
	* Build Right div
	*/
	this.buildRightLayout(right_div);
    
    this.checkDefault();
}

/**
* Build left navigation div under layout
* @param {object} con DOM element of left div in layout tab
* @param {string} right_div Navigation item details container
*/
AntAppSettings.prototype.buildLeftLayout = function(con, right_div)
{
	var nav_lbl = alib.dom.createElement("h2", con);
	nav_lbl.innerHTML = "Navigation";
	
	/**
	* Main left div, sortable container
	*/
	var left_div = alib.dom.createElement("div", con);
	DragAndDrop.registerDropzone(left_div, "main_dz");
	DragAndDrop.registerSortable(left_div);
	left_div.id = "left_div";
	
	/**
	* Get root node of navigation tree - see /customer/crm_def.php for an example
	*/
	var navXmlRoot = this.app.xmlDef.getChildNodeByName("navigation");
	
	/**
	* Build form by looping through navXmlRoot
	*/
	this.buildNavigation(left_div, right_div, navXmlRoot);
	
	/**
	* Add section button
	*/
	var button = alib.dom.createElement("div", con);
	alib.dom.styleSet(button, "text-align", "center");
	var btn = new CButton("+ Add Section", this.addSection, [this, left_div, right_div], "b1");
	button.appendChild(btn.getButton());
	button.id = "end_nav";
}

/**
* Build right navigation details div under layout
* @param {object} con DOM element of right div in layout tab
*/
AntAppSettings.prototype.buildRightLayout = function(con)
{
	var right_div = alib.dom.createElement("div", con);
	right_div.id = "right_div";
	
	/**
	* Default message under Navigation item details
	*/
	var main_lbl = alib.dom.createElement("p", right_div);
	alib.dom.styleSet(main_lbl, "margin", "0 0 0 5px");
	alib.dom.styleSetClass(main_lbl, "notice");
	main_lbl.innerHTML = "Select an item to the left to edit properties or click Add item to create a new item";
}


/**
* Build items in navigation
* @param {object} con DOM element of left div
* @param {object} right_div Navigation item details container
* @param {object} node Node of navigation tree to add 
*/
AntAppSettings.prototype.buildNavigation = function(con, right_div, node)
{	
	for(var i = 0; i < node.getNumChildren(); i++)
	{
		var child = node.getChildNode(i);			
		
		switch (child.m_name)
		{
			case "section":
				var section = alib.dom.createElement("div", con);
				DragAndDrop.registerDragableChild(null, section, null, "main_dz");
				alib.dom.styleSet(section, "margin", "5px 3px 5px 3px");
				section.style.border = "1px solid black";
				section.style.cursor = "move";
				section.title = unescape(child.getAttribute("title"));
				section.nav_type = "section";
				
				/**
				* Section Title
				*/
				var title = alib.dom.createElement("div", section);
				alib.dom.styleSet(title, "margin", "3px 3px 3px 3px");
				var sec_lbl = alib.dom.createElement("div");
				alib.dom.styleSet(sec_lbl, "margin", "0 100px 0 0");
				sec_lbl.innerHTML = "<strong>" + section.title + "</strong>";
				var sec_rename = alib.dom.createElement("div");
				alib.dom.styleSet(sec_rename, "margin", "0 3px 0 0");
				alib.dom.styleSet(sec_rename, "float", "right");
				var btn = new CButton("Rename", this.renameSection, [sec_lbl], "b1", null, null, null, 'link');
				sec_rename.appendChild(btn.getButton());
				var sec_delete = alib.dom.createElement("div");
				alib.dom.styleSet(sec_delete, "float", "right");
				var btn = new CButton("X", this.deleteItem, [section, right_div], "b3", null, null, null, 'link');
				sec_delete.appendChild(btn.getButton());
				title.appendChild(sec_delete);
				title.appendChild(sec_rename);
				title.appendChild(sec_lbl);
				
				var space = alib.dom.createElement("div", section);
				space.style.height = "5px";
				
				/**
				* Container for items
				*/
				var items = alib.dom.createElement("div", section);
				DragAndDrop.registerDropzone(items, "section_dz");
				DragAndDrop.registerSortable(items);
				
				/**
				* Add items
				*/
				this.buildNavigation(items, right_div, child);
				
				/**
				* Link to add item/link to section
				*/
				var link = alib.dom.createElement("a", section);
				link.href = 'javascript:void(0);'
				link.innerHTML = "<center>" + "Add item/link to section" + "</center>";
				link.items = items;
				link.ref = this;
				link.onclick = function() 
				{
                    alib.dom.styleSet(this.ref.resetDefault, "display", "block");
					this.ref.addItem(this.items, right_div);
				}
				break;
			case "item":
				var item = alib.dom.createElement("div", con);
				DragAndDrop.registerDragableChild(con.parentNode, item, null, "section_dz");
				alib.dom.styleSet(item, "margin", "5px 3px 5px 3px");
				item.style.border = "1px solid black";
				item.style.cursor = "move";
				item.nav_type = "item";

				/**
				* Set item attributes
				*/
				item.name = child.getAttribute("name");
				item.type = child.getAttribute("type");
				if(child.getAttribute("title") != "")
					item.title = unescape(child.getAttribute("title"));
				else
					item.title = unescape(child.getAttribute("name"));
				if(item.type == "calendar")
					item.calendar_id = child.getAttribute("id");
				if(child.getAttribute("icon") != "")
					item.icon = unescape(child.getAttribute("icon"));
				if(child.getAttribute("tooltip") != "")
					item.tooltip = unescape(child.getAttribute("tooltip"));
				if(item.type == "object" || item.type == "browse")
					item.obj_type = child.getAttribute("obj_type");
				if(item.type == "browse" && child.getAttribute("browseby") != "")
					item.browseby = child.getAttribute("browseby");
				if(item.type == "browse" && child.getAttribute("folder_id") != "")
					item.folder_id = child.getAttribute("folder_id");                
				if(item.type == "link" && child.getAttribute("url") != "")
					item.url = unescape(child.getAttribute("url"));
				
				/**
				* Item Title
				*/
				var title = alib.dom.createElement("div", item);
				alib.dom.styleSet(title, "margin", "3px 3px 3px 3px");
				var item_lbl = alib.dom.createElement("div");
				alib.dom.styleSet(item_lbl, "margin", "0 100px 0 0");
				item_lbl.innerHTML = item.title;
				var item_options = alib.dom.createElement("div");
				alib.dom.styleSet(item_options, "margin", "0 3px 0 0");
				alib.dom.styleSet(item_options, "float", "right");
				var btn = new CButton("Options", this.buildItemDetails, [this, right_div, item], "b1", null, null, null, 'link');
				item_options.appendChild(btn.getButton());
				var item_delete = alib.dom.createElement("div");
				alib.dom.styleSet(item_delete, "float", "right");
				var btn = new CButton("X", 
				function(cls, item, con) 
				{ 
					cls.deleteItem(item, con);  
					cls.deleteNavigationItem(item.name, item.type); 
				}, [this, item, right_div], "b3", null, null, null, 'link');
				item_delete.appendChild(btn.getButton());
				title.appendChild(item_delete);
				title.appendChild(item_options);
				title.appendChild(item_lbl);
				
				var space = alib.dom.createElement("div", item);
				space.style.height = "5px";
				
				/**
				* Add item to navigation_items array
				*/
				this.navigation_items[this.navigation_items.length] = {title:item.title, name:item.name, type:item.type};
				
				/**
				* Add items
				*/
				this.buildNavigation(item, right_div, child);
				break;
			case "filter":
				var filter = alib.dom.createElement("div", con);
				filter.style.display = "none";
				filter.nav_type = "filter";
				
				/**
				* Create new condition array
				*/
				var conditions = new Array();
				filter.conditions = conditions;
				
				this.buildNavigation(filter, right_div, child);
				break;
			case "condition":
				var condition = alib.dom.createElement("div", con);
				condition.style.display = "none";
				condition.nav_type = "condition";

				/**
				* Create new condition object
				*/
				var cond = new Object();
				cond.blogic = child.getAttribute("blogic");
				cond.field = child.getAttribute("field");
				cond.operator = child.getAttribute("operator");
				cond.value = child.getAttribute("value");

				/**
				* Add condition object to condition array
				*/
				con.conditions[con.conditions.length] = cond;
				
				this.buildNavigation(condition, right_div, child);
				break;
		}
	}
}

/**
* Build item details for selected item
* @param {object} cls  This class 
* @param {object} con  Navigation item details container
* @param {object} item = Container of item to set details on
*/
AntAppSettings.prototype.buildItemDetails = function(cls, con, item)
{
	/**
	* Right div
	*/    
    if(!cls.objTypes)
    {
        con.innerHTML = "<div class='loading'></div>";
        var functCls = cls;
        var callback = function()
        {            
            functCls.buildItemDetails(cls, con, item);
        }
        
        window.setTimeout(callback, 1000);
        return;
    }
    
    
    
	con.innerHTML = "";
	
	/**
	* Navigation Item Details
	*/
	var title_lbl = alib.dom.createElement("h2", con);
	title_lbl.innerHTML = "Navigation Item Details";
	var table = alib.dom.createElement("table", con);
	var tableBody = alib.dom.createElement("tbody", table);
	
	/**
	* Item Title/Label
	*/
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var title_dv = alib.dom.createElement("div", con);
	title_dv.innerHTML = "<strong>Title/Label </strong>";
	title_dv.style.padding = "3px";
	td.appendChild(title_dv);
	var td = alib.dom.createElement("td", tr);
	var inp1 = alib.dom.createElement("input", td);
	inp1.setAttribute('maxLength', 128);
	inp1.type = "text";
	inp1.style.width = "160px";
	inp1.value = item.title;
	inp1.onchange = function() 
	{

		/**
		* Set new title and name
		*/
		if(inp1.value != "")
		{
			var old_name = item.name;
			
			item.title = inp1.value;
			item.childNodes[0].childNodes[2].innerHTML = inp1.value;
			var name = inp1.value.toLowerCase();
			name = name.replace(/ /g, "_");
			name = name.replace(/[^a-zA-Z0-9_]+/g,'');
			item.name = name;
			sys_name.innerHTML = name;
			
			/**
			* Update item name and title in navigation_items array
			*/
			cls.updateNavigationItemName(old_name, item.name, item.title);
		}
	}
	td.appendChild(inp1);
	tr.appendChild(td);
	

	/**
	* Item System Name
	*/
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var name_dv = alib.dom.createElement("div", con);
	name_dv.innerHTML = "<strong>System Name </strong>";
	name_dv.style.padding = "3px";
	td.appendChild(name_dv);
	var td = alib.dom.createElement("td", tr);
	var sys_name = alib.dom.createElement("div", td);
	sys_name.innerHTML = item.name;
	td.appendChild(sys_name);
	tr.appendChild(td);
	
	/**
	* Item Icon
	*/
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var icon_dv = alib.dom.createElement("div", con);
	icon_dv.innerHTML = "<strong>Icon </strong>";
	icon_dv.style.padding = "3px";
	td.appendChild(icon_dv);
	var td = alib.dom.createElement("td", tr);
	var inp2 = alib.dom.createElement("input", td);
	inp2.setAttribute('maxLength', 128);
	inp2.type = "text";
	inp2.style.width = "160px";
	if(item.icon != null && item.icon != "")
		inp2.value = item.icon;
	else
		inp2.value = "";
	inp2.onchange = function() 
	{
		item.icon = inp2.value;
	}
	td.appendChild(inp2);
	tr.appendChild(td);
	
	/**
	* Item Tooltip
	*/
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var tooltip_dv = alib.dom.createElement("div", con);
	tooltip_dv.innerHTML = "<strong>Tooltip </strong>";
	tooltip_dv.style.padding = "3px";
	td.appendChild(tooltip_dv);
	var td = alib.dom.createElement("td", tr);
	var inp3 = alib.dom.createElement("input", td);
	inp3.setAttribute('maxLength', 128);
	inp3.type = "text";
	inp3.style.width = "160px";
	if(item.tooltip != null && item.tooltip != "")
		inp3.value = item.tooltip;
	else
		inp3.value = "";
	inp3.onchange = function() 
	{
		item.tooltip = inp3.value;
	}
	td.appendChild(inp3);
	tr.appendChild(td);
	
	/**
	* Item Type
	*/
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var type_dv = alib.dom.createElement("div", con);
	type_dv.innerHTML = "<strong>Type </strong>";
	type_dv.style.padding = "3px";
	td.appendChild(type_dv);
	var td = alib.dom.createElement("td", tr);	
	var itm_type = alib.dom.createElement("select", td);
	itm_type.onchange = function() 
	{
		/**
		* Update item type in navigation_items
		*/
		cls.updateNavigationItemType(item.name, item.type, this.value)
		
		/**
		* Set new item type
		*/
		item.type = this.value;
		cls.buildItemDetails(cls, right_div, item);
	}
	itm_type[itm_type.length] = new Option("Browse", "browse");
	itm_type[itm_type.length] = new Option("Calendar", "calendar");
	itm_type[itm_type.length] = new Option("Folder", "folder");
	itm_type[itm_type.length] = new Option("Link", "link");
	itm_type[itm_type.length] = new Option("My Mini Calendar", "myminical");
	itm_type[itm_type.length] = new Option("My Calendars", "mycalendars");
	itm_type[itm_type.length] = new Option("My Other Calendars", "myothercals");
	itm_type[itm_type.length] = new Option("Object", "object");
	itm_type[itm_type.length] = new Option("Settings", "settings");
	itm_type.value = item.type;
	td.appendChild(itm_type);
	tr.appendChild(td);
	
	if(item.type == "browse" || item.type == "object")
	{
		var additional = alib.dom.createElement("div", con);
		
		/**
		* Object type
		*/
		var tr = alib.dom.createElement("tr", tableBody);
		var td = alib.dom.createElement("td", tr);
		var objt_dv = alib.dom.createElement("div", additional);
		objt_dv.innerHTML = "<strong>Object Type </strong>";
		objt_dv.style.padding = "3px";
		td.appendChild(objt_dv);
		var td = alib.dom.createElement("td", tr);
		var itm_objt = alib.dom.createElement("select", td);
		itm_objt.onchange = function()
		{
			item.obj_type = this.value;
			cls.buildItemDetails(cls, right_div, item);
		}
		
        if(cls.objTypes)
        {            
            cls.addObjectTypes(itm_objt, item.obj_type);
        }
        else
        {
            ajax = new CAjax('json');        
            ajax.onload = function(ret)
            {
                if(ret)
                {
                    cls.objTypes = ret;
                    cls.addObjectTypes(itm_objt, item.obj_type);
                    itm_objt.value = item.obj_type;
                }
            };
            ajax.exec("/controller/Object/getObjects");
        }
        
		td.appendChild(itm_objt);
		tr.appendChild(td);
		
		if(item.type == "browse")
		{            
			var g_antObject = new CAntObject(item.obj_type, null);
		
			/**
			* Browse By Field
			*/
			var tr = alib.dom.createElement("tr", tableBody);
			var td = alib.dom.createElement("td", tr);
			var browse_dv = alib.dom.createElement("div", additional);
			browse_dv.innerHTML = "<strong>Browse By Field </strong>";
			browse_dv.style.padding = "3px";
			td.appendChild(browse_dv);
			var td = alib.dom.createElement("td", tr);
			var field_dd = alib.dom.createElement("select", td);
			field_dd[field_dd.length] = new Option("Select Field", "");
			for (var i = 0; i < g_antObject.fields.length; i++)
			{
				var field = g_antObject.fields[i];
                var selected = false;
				
                if(field.name == item.browseby)
                    selected = true;
                
				if(field.type == "fkey" || field.type == "fkey_multi")
					field_dd[field_dd.length] = new Option(field.title, field.name, selected, selected);
			}
			field_dd.onchange = function()
			{
				if(field_dd.value != "")
					item.browseby = field_dd.value;
			}

			/**
			* Set initial value if browseby is set
			*/
			if(item.browseby != null)
				field_dd.value = item.browseby;
			td.appendChild(field_dd);
			tr.appendChild(td);
			
			/**
			* Filter Browse Results
			*/
			var filter_dv = alib.dom.createElement("div", additional);
			alib.dom.styleSet(filter_dv, "margin", "5px 5px 5px 5px");
			filter_dv.innerHTML = "<strong>Filter Browse Results</strong>";
			
			/**
			* Add Condition
			*/
			var cond_dv = alib.dom.createElement("div", additional);
			alib.dom.styleSet(cond_dv, "margin", "5px 5px 5px 5px");
			var obj = new CAntObject(item.obj_type, null);
			item.conditions = obj.buildAdvancedQuery(cond_dv);
		}
	}
	
	if(item.type == "link")
	{
		var link_div = alib.dom.createElement("div", con);
		
		/**
		* Item Link
		*/
		var tr = alib.dom.createElement("tr", tableBody);
		var td = alib.dom.createElement("td", tr);
		var lk_dv = alib.dom.createElement("div", con);
		lk_dv.innerHTML = "<strong>Link </strong>";
		lk_dv.style.padding = "3px";
		td.appendChild(lk_dv);
		var td = alib.dom.createElement("td", tr);
		var inp4 = alib.dom.createElement("input", td);
		inp4.setAttribute('maxLength', 128);
		inp4.type = "text";
		inp4.style.width = "160px";
		if(item.url != null && item.url != "")
			inp4.value = item.url;
		else
			inp4.value = "http://";
		inp4.onchange = function() 
		{
			if(inp4.value != "" || inp4.value != "http://")
				item.url = inp4.value;
		}
		td.appendChild(inp4);
		tr.appendChild(td);
	}
	
	if(item.type == "folder")
	{
		var folder_div = alib.dom.createElement("div", con);
		
		/**
		* Select Folder
		*/
		var tr = alib.dom.createElement("tr", tableBody);
		var td = alib.dom.createElement("td", tr);
		var fd_dv = alib.dom.createElement("div", con);
		fd_dv.innerHTML = "<strong>Folder </strong>";
		fd_dv.style.padding = "3px";
		td.appendChild(fd_dv);
		var td = alib.dom.createElement("td", tr);
		var btn = new CButton("Select Folder", cls.selectFolder, [item], "b1");
		td.appendChild(btn.getButton());
		tr.appendChild(td);
	}
	
	if(item.type == "calendar")
	{
		/**
		* Select Calendar Id
		*/
		var tr = alib.dom.createElement("tr", tableBody);
		var td = alib.dom.createElement("td", tr);
		var cal_dv = alib.dom.createElement("div");
		cal_dv.innerHTML = "<strong>Calendar </strong>";
		cal_dv.style.padding = "3px";
		td.appendChild(cal_dv);
		
		/**
		* Select Calendar Dropdown
		*/
		var td = alib.dom.createElement("td", tr);
		var cal_dd = alib.dom.createElement("select", td);
		cal_dd.app = cls.app;
		cal_dd[cal_dd.length] = new Option("Select Calendar", "");
		for (var i = 0; i < cls.app.refCalendars.length; i++)
		{
			cal_dd[cal_dd.length] = new Option(cal_dd.app.refCalendars[i].name, cal_dd.app.refCalendars[i].id);
		}
		cal_dd.onchange = function()
		{
			if(cal_dd.value != "")
				item.calendar_id = cal_dd.value;
		}
		/**
		* Set initial value if calendar_id is set
		*/
		if(item.calendar_id != null)
			cal_dd.value = item.calendar_id;
		td.appendChild(cal_dd);
		tr.appendChild(td);
	}
	table.appendChild(tableBody);
}


/**
* Add navogation items to dropdown menu
* @param {object} dropdown  Dropdown menu to add items to
*/
AntAppSettings.prototype.addNavigationItems = function(dropdown)
{
	for(var i = 0; i < this.navigation_items.length; i++)
	{
		var type = this.navigation_items[i].type;
		var item = this.navigation_items[i].title;
		
		/**
		* Check for item.type == myminical, mycalendars, myothercals
		*/
		if(type == "myminical" || type == "mycalendars" || type == "myothercals")
			var val = "mycalendar";
		else
			var val = this.navigation_items[i].name;
		dropdown[dropdown.length] = new Option(item, val);
	}
}


/**
* Delete navigation item from navigation_items array
* @param {string} item_name Navigation item name to delete
* @param {string} item_type Navigation item type to delete
*/
AntAppSettings.prototype.deleteNavigationItem = function(item_name, item_type)
{
	for(var i = 0; i < this.navigation_items.length; i++)
	{
		/**
		* Delete item from navigation_items (removes first match found)
		*/
		if(this.navigation_items[i].name == item_name && this.navigation_items[i].type == item_type)
		{
			this.navigation_items.splice(i, 1);
			break;
		}
	}
}

/**
* Update item name and title in navigation_items array
* @param {string} old_name Old item name
* @param {string} new_name New item name
* @param {string} new_title New item title
*/
AntAppSettings.prototype.updateNavigationItemName = function(old_name, new_name, new_title)
{
	for(var i = 0; i < this.navigation_items.length; i++)
	{

		/**
		* Update item name and title (replaces first match found)
		*/
		if(this.navigation_items[i].name == old_name)
		{
			this.navigation_items[i].name = new_name;
			this.navigation_items[i].title = new_title;
			break;
		}
	}
}

/**
* Update item type in navigation_items array
* @param {string} item_name Item name
* @param {string} old_type Old item type
* @param {string} new_type New item type
*/
AntAppSettings.prototype.updateNavigationItemType = function(item_name, old_type, new_type)
{
	for(var i = 0; i < this.navigation_items.length; i++)
	{
		/**
		* Update item type (replaces first match found)
		*/
		if(this.navigation_items[i].name == item_name && this.navigation_items[i].type == old_type)
		{
			this.navigation_items[i].type = new_type;
			break;
		}
	}
}

/**
* Add section to navigation
* @param {object} cls This class
* @param {object} con Container to append new section to
* @param {object} right_div Navigation item details container
*/
AntAppSettings.prototype.addSection = function(cls, con, right_div)
{
	var dlg_d = new CDialog("New Section");
	var cont = alib.dom.createElement("div");
	var table = alib.dom.createElement("table", cont);
	var tableBody = alib.dom.createElement("tbody", table);
	
	/**
	* Add New Section
	*/	
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var inp_dv = alib.dom.createElement("div", cont);
	inp_dv.innerHTML = "<strong>Title: </strong>";
	inp_dv.style.padding = "3px";
	td.appendChild(inp_dv);
	var td = alib.dom.createElement("td", tr);
	var inp1 = alib.dom.createElement("input", td);
	inp1.setAttribute('maxLength', 128);
	inp1.type = "text";
	inp1.style.width = "160px";
	inp1.value = "";
	td.appendChild(inp1);
	tr.appendChild(td);
	table.appendChild(tableBody);
	
	var btn_con = alib.dom.createElement("div");
	alib.dom.styleSet(btn_con, "float", "right");
	var btn = new CButton("Ok", 
	function(cls) 
	{
		if(inp1.value != "")
		{
			cls.appendSection(inp1.value, con, right_div);
		}
		dlg_d.hide(); 
	}, [cls], "b1");
	btn_con.appendChild(btn.getButton());
	var btn = new CButton("Cancel", function(){  dlg_d.hide(); }, null, "b1");
	btn_con.appendChild(btn.getButton());
	cont.appendChild(btn_con);
	dlg_d.customDialog(cont, 238, 48);
}


/**
* Append new section to container
* @param {string} sec_title Title of new section
* @param {object} con Container to append new section to
* @param {object} right_div Navigation item details container
*/
AntAppSettings.prototype.appendSection = function(sec_title, con, right_div)
{
	var section = alib.dom.createElement("div", con);
	DragAndDrop.registerDragableChild(null, section, null, "main_dz");
	alib.dom.styleSet(section, "margin", "5px 3px 5px 3px");
	section.style.border = "1px solid black";
	section.style.cursor = "move";
	section.title = sec_title;
	section.nav_type = "section";
	
	/**
	* Section Title
	*/	
	var title = alib.dom.createElement("div", section);
	alib.dom.styleSet(title, "margin", "3px 3px 3px 3px");
	var sec_lbl = alib.dom.createElement("div");
	sec_lbl.title = sec_title;
	alib.dom.styleSet(sec_lbl, "margin", "0 100px 0 0");
	sec_lbl.innerHTML = "<strong>" + sec_title + "</strong>";
	var sec_rename = alib.dom.createElement("div");
	alib.dom.styleSet(sec_rename, "margin", "0 3px 0 0");
	alib.dom.styleSet(sec_rename, "float", "right");
	var btn = new CButton("Rename", this.renameSection, [sec_lbl], "b1", null, null, null, 'link');
	sec_rename.appendChild(btn.getButton());
	var sec_delete = alib.dom.createElement("div");
	alib.dom.styleSet(sec_delete, "float", "right");
	var btn = new CButton("X", this.deleteItem, [section, right_div], "b3", null, null, null, 'link');
	sec_delete.appendChild(btn.getButton());
	title.appendChild(sec_delete);
	title.appendChild(sec_rename);
	title.appendChild(sec_lbl);
	
	var space = alib.dom.createElement("div", section);
	space.style.height = "5px";
	
	/**
	* Container for items
	*/	
	var items = alib.dom.createElement("div", section);
	DragAndDrop.registerDropzone(items, "section_dz");
	DragAndDrop.registerSortable(items);
				
	/**
	* Link to add item/link to section
	*/	
	var link = alib.dom.createElement("a", section);
	link.href = 'javascript:void(0);'
	link.innerHTML = "<center>" + "Add item/link to section" + "</center>";
	link.items = items;
	link.ref = this;
	link.onclick = function() 
	{
        alib.dom.styleSet(this.ref.resetDefault, "display", "block");
		this.ref.addItem(this.items, right_div);
	}
}

/**
* Add section to navigation
* @param {string} con Div to set title
*/
AntAppSettings.prototype.renameSection = function(con)
{
	var dlg_d = new CDialog("Rename Section");
	var cont = alib.dom.createElement("div");
	var table = alib.dom.createElement("table", cont);
	var tableBody = alib.dom.createElement("tbody", table);
	
	/**
	* Section Title
	*/	
	var tr = alib.dom.createElement("tr", tableBody);
	var td = alib.dom.createElement("td", tr);
	var inp_dv = alib.dom.createElement("div", cont);
	inp_dv.innerHTML = "<strong>Title: </strong>";
	inp_dv.style.padding = "3px";
	td.appendChild(inp_dv);
	var td = alib.dom.createElement("td", tr);
	var inp1 = alib.dom.createElement("input", td);
	inp1.setAttribute('maxLength', 128);
	inp1.type = "text";
	inp1.style.width = "160px";
	inp1.value = con.parentNode.parentNode.title;
	td.appendChild(inp1);
	tr.appendChild(td);
	table.appendChild(tableBody);
	
	var btn_con = alib.dom.createElement("div");
	alib.dom.styleSet(btn_con, "float", "right");
	var btn = new CButton("Ok", 
	function() 
	{ 
		if(inp1.value != "")
		{
			con.parentNode.parentNode.title = inp1.value;
			con.innerHTML = "<strong>" + inp1.value + "</strong>";
		}
		dlg_d.hide(); 
	}, null, "b1");
	btn_con.appendChild(btn.getButton());
	var btn = new CButton("Cancel", function(){  dlg_d.hide(); }, null, "b1");
	btn_con.appendChild(btn.getButton());
	cont.appendChild(btn_con);
	dlg_d.customDialog(cont, 238, 48);
}

/**
* Add object types to dropdown menu
* @param {object} objTypes Array of objects to add to dropdown
* @param {object} dropdown Dropdown menu to add items to
*/
AntAppSettings.prototype.addObjectTypes = function(dropdown, itemObjType)
{
    
    for(type in this.objTypes)
    {
        var currentType = this.objTypes[type];
        var selected = false;
        
        if(currentType.name == itemObjType)
            selected = true;
        
        dropdown[dropdown.length] = new Option(currentType.fullTitle, currentType.name, selected);
    }
    
	/*for(var i = 0; i < types.length; i++)
	{
		dropdown[dropdown.length] = new Option(types[i][1], types[i][0]);
	}*/
}

/**
* Add default item to section
* @param {object} con Container to append item to
* @param {object} right_div Navigation item details container
*/
AntAppSettings.prototype.addItem = function(con, right_div)
{
	this.navigation_items[this.navigation_items.length] = {title:"New Item", name:"new_item", type:"link"};

	var item = alib.dom.createElement("div", con);
	DragAndDrop.registerDragableChild(con.parentNode, item, null, "section_dz");
	alib.dom.styleSet(item, "margin", "5px 3px 5px 3px");
	item.style.border = "1px solid black";
	item.style.cursor = "move";
	item.nav_type = "item";
	
	/**
	* Set item attributes
	*/	
	item.name = "new_item";
	item.type = "link";
	item.title = "New Item";
	item.url = "http://www.aereus.com";
	
	/**
	* Item Title
	*/	
	var title = alib.dom.createElement("div", item);
	alib.dom.styleSet(title, "margin", "3px 3px 3px 3px");
	var item_lbl = alib.dom.createElement("div");
	alib.dom.styleSet(item_lbl, "margin", "0 100px 0 0");
	item_lbl.innerHTML = item.title;
	var item_options = alib.dom.createElement("div");
	alib.dom.styleSet(item_options, "margin", "0 3px 0 0");
	alib.dom.styleSet(item_options, "float", "right");
	var btn = new CButton("Options", this.buildItemDetails, [this, right_div, item], "b1", null, null, null, 'link');
	item_options.appendChild(btn.getButton());
	var item_delete = alib.dom.createElement("div");
	alib.dom.styleSet(item_delete, "float", "right");
	var btn = new CButton("X", 
	function(cls, item, con) 
	{ 
		cls.deleteItem(item, con);  
		cls.deleteNavigationItem(item.name, item.type); 
	}, [this, item, right_div], "b3", null, null, null, 'link');
	item_delete.appendChild(btn.getButton());
	title.appendChild(item_delete);
	title.appendChild(item_options);
	title.appendChild(item_lbl);
	
	var space = alib.dom.createElement("div", item);
	space.style.height = "5px";
}

/**
* Delete item in navigation
* @param {object} con Element to delete
* @param {object} right_div Navigation item details container
*/
AntAppSettings.prototype.deleteItem = function(con, right_div)
{
	con.style.display = "none";
	con.conState = false;
	
	right_div.innerHTML = "";

	/**
	* Set Navigation item details to default message
	*/		
	var main_lbl = alib.dom.createElement("p", right_div);
	alib.dom.styleSet(main_lbl, "margin", "0 0 0 5px");
	alib.dom.styleSetClass(main_lbl, "notice");
	main_lbl.innerHTML = "Select an item to the left to edit properties or click Add item to create a new item";
}

/**
* Select a folder
* @param {object} item = item to set folder path to
*/
AntAppSettings.prototype.selectFolder = function(item)
{
	var file_browser = new AntFsOpen();
	file_browser.filterType = "folder";
	file_browser.onSelect = function(fid, name, path)
	{
		item.folder_id = fid;
	}
	file_browser.showDialog();
}

/**
* Save navigation layout
* @param {object} con Current container node
*/
AntAppSettings.prototype.saveLayout = function(con)
{
	for(var node = 0; node < con.childNodes.length; node++)
	{
		if(con.childNodes[node].nav_type)
		{
			switch(con.childNodes[node].nav_type)
			{
			case "section":
				if(con.childNodes[node].conState != false)
				{
					var title = escape(con.childNodes[node].title);
					this.nav_xml += "<section title='" + title + "'>";
					this.saveLayout(con.childNodes[node]);
					this.nav_xml += "</section>";
				}
				break;
			case "item":
				if(con.childNodes[node].conState != false)
				{
					/**
					* Get name and type
					*/		
					var name = " name='" + escape(con.childNodes[node].name) + "'";
					var type = " type='" + con.childNodes[node].type + "'";
					var obj_type = "";
					var browseby = "";
					var calendar_id = "";
					var folder_id = "";
					var tooltip = "";
					var title = "";
					var icon = "";
					var url = "";
					
					if(con.childNodes[node].type == "object" || con.childNodes[node].type == "browse")
					{
						/**
						* Get obj_type (required)
						*/		
						if(con.childNodes[node].obj_type != null)
							var obj_type = " obj_type='" + con.childNodes[node].obj_type + "'";
							
						/**
						* Check if browseby (optional)
						*/		
						if(con.childNodes[node].type == "browse")
						{
							if(con.childNodes[node].browseby != null)
								var browseby = " browseby='" + con.childNodes[node].browseby + "'";
						}
					}
					
					if(con.childNodes[node].type == "calendar")
					{
						/**
						* Get calendar_id (required)
						*/		
						if(con.childNodes[node].calendar_id != null)
							var calendar_id = " id='" + con.childNodes[node].calendar_id + "'";
					}
					
					/**
					* If type == folder, check for folder_id (optional)
					*/		
					if(con.childNodes[node].type == "folder")
					{
						if(con.childNodes[node].folder_id != null)
							var folder_id = " folder_id='" + con.childNodes[node].folder_id + "'";
					}
					
					/**
					* Check if title is set (optional)
					*/		
					if(con.childNodes[node].title != null)
						var title = " title='" + escape(con.childNodes[node].title) + "'";
					
					/**
					* Check if icon is set (optional)
					*/		
					if(con.childNodes[node].icon != null)
						var icon = " icon='" + escape(con.childNodes[node].icon) + "'";
						
					/**
					* Check if tooltip is set (optional)
					*/		
					if(con.childNodes[node].tooltip != null)
						var tooltip = " tooltip='" + escape(con.childNodes[node].tooltip) + "'";
					
					/**
					* Check if url is set (optional)
					*/		
					if(con.childNodes[node].type == "link" && con.childNodes[node].url != null)
						var url = " url='" + escape(con.childNodes[node].url) + "'";
					
					/**
					* Check for filter, or for new condition
					*/		
					if((con.childNodes[node].type == "browse" && con.childNodes[node].childNodes[2]) || (con.childNodes[node].type == "browse" && con.childNodes[node].conditions != null))
					{
						/**
						* If new condition set, ignore original conditions
						*/		
						if(con.childNodes[node].conditions != null && con.childNodes[node].conditions.getNumConditions() > 0)
						{
							this.nav_xml += "<item" + type + name + title + obj_type + icon + url + browseby + calendar_id + folder_id + tooltip + ">";
							this.nav_xml += "<filter>";
							
							/**
							* Add all new conditions					
							*/		
							for (var i = 0; i < con.childNodes[node].conditions.getNumConditions(); i++)
							{
								var cond = con.childNodes[node].conditions.getCondition(i);
								var blogic = " blogic='" + cond.blogic + "'";
								var field = " field='" + cond.fieldName + "'";
								var operator = " operator='" + cond.operator + "'";
								var value = " value='" + cond.condValue + "'";
								this.nav_xml += "<condition" + blogic + field + operator + value + " />";
							}

							this.nav_xml += "</filter>";
							this.nav_xml += "</item>";
							this.saveLayout(con.childNodes[node]);
						}
						else
						{
							this.nav_xml += "<item" + type + name + title + obj_type + icon + url + browseby + calendar_id + folder_id + tooltip + ">";
							this.saveLayout(con.childNodes[node]);
							this.nav_xml += "</item>";
						}
					}
					else
					{
						this.nav_xml += "<item" + type + name + title + obj_type + icon + url + browseby + calendar_id + folder_id + tooltip + " />";
						this.saveLayout(con.childNodes[node]);
					}
				}
				break;
			case "filter":
				/**
				* Filter tags will be added under condition case
				*/		
				this.saveLayout(con.childNodes[node]);
				break;
			case "condition":
				/**
				* Check if new conditions were set, if so original conditions were ignored
				*/		
				if(con.childNodes[node].parentNode.parentNode.conditions != null)
				{
					/**
					* Check if any new conditions were added
					*/		
					if(con.childNodes[node].parentNode.parentNode.conditions.getNumConditions() == 0)
					{
						/**
						* No new conditions, but original conditions exist
						*/		
						if(con.childNodes[node].parentNode.conditions != null && con.childNodes[node].parentNode.parentNode.type == "browse")
						{
							this.nav_xml += "<filter>";
							for(var i = 0; i < con.childNodes[node].parentNode.conditions.length; i++)
							{
								var cond_obj = con.childNodes[node].parentNode.conditions[i];
								var blogic = " blogic='" + cond_obj.blogic + "'";
								var field = " field='" + cond_obj.field + "'";
								var operator = " operator='" + cond_obj.operator + "'";
								var value = " value='" + cond_obj.value + "'";
								var cond = blogic + field + operator + value;
								this.nav_xml += "<condition" + cond + " />";
							}
							this.nav_xml += "</filter>";
						}
					}
				}
				else
				{
					/**
					* Add original conditions
					*/		
					if(con.childNodes[node].parentNode.conditions != null)
					{
						this.nav_xml += "<filter>";
						for(var i = 0; i < con.childNodes[node].parentNode.conditions.length; i++)
						{
							var cond_obj = con.childNodes[node].parentNode.conditions[i];
							var blogic = " blogic='" + cond_obj.blogic + "'";
							var field = " field='" + cond_obj.field + "'";
							var operator = " operator='" + cond_obj.operator + "'";
							var value = " value='" + cond_obj.value + "'";
							var cond = blogic + field + operator + value;
							this.nav_xml += "<condition" + cond + " />";
						}
						this.nav_xml += "</filter>";
					}
				}
				break;
			}
		}
		else
		{

			/**
			* If a non-navigation node has children, check children for navigation nodes
			*/		
			if(con.childNodes[node].childNodes != null)
				this.saveLayout(con.childNodes[node]);
			
			/**
			* Done, save xml
			*/		
			if(con.childNodes[node].id == "end_nav")
			{
				/**
				* Check if default type is set
				*/		
				if(this.default_type != "")
				{
					var xml = "<navigation default='"+this.default_type+"'>"+this.nav_xml+"</navigation>"
					this.saveLayoutXml(xml);
				}
				else
				{
					var xml = "<navigation>"+this.nav_xml+"</navigation>";
					this.saveLayoutXml(xml);
				}
			}
		}
	}
}

/**
* Save navigation xml for layout
* @param {string} xml Navigation xml
*/
AntAppSettings.prototype.saveLayoutXml = function(xml)
{
	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);
	
	var args = [["name", this.app.name], ["title", this.app.title], ["layout_xml", xml]];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret['error'])
        {
            dlg.hide();
            this.cls.checkDefault();
            ALib.statusShowAlert(this.cls.app.title + " Saved!", 3000, "bottom", "right");            
        }
        else
        {
            dlg.hide();
            ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
        }
    };
    ajax.exec("/controller/Application/saveLayout", args);
}

/**
* Displays the elements to select user
*/
AntAppSettings.prototype.loadCurrentUser = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {        
        this.cbData.cls.userDetails = ret;
        this.cbData.cls.selectUser(ret);
    };
    
    var args = new Array();    
    
    if(this.app.userId)
        args[args.length] = ["userId", this.app.userId];
        
    ajax.exec("/controller/User/getUserDetails", args);
}

/**
* Displays the elements to select user
*/
AntAppSettings.prototype.selectUser = function()
{
    if(!this.userDetails)
        return;
    
    this.divScopeUser.innerHTML = "";
    
    // Select Manager
    var userBtn = alib.dom.setElementAttr(alib.dom.createElement("input", this.divScopeUser), [["type", "button"], ["value", "Select User"]]);
    
    // set user label style
    var userLabel = alib.dom.setElementAttr(alib.dom.createElement("label", this.divScopeUser), [["innerHTML", this.userDetails.name]]);
    alib.dom.styleSet(userLabel, "fontWeight", "bold");
    alib.dom.styleSet(userLabel, "fontSize", "12px");
    alib.dom.styleSet(userLabel, "margin", "0 5px");
    
    // add select user button feature    
    userBtn.userDetails = this.userDetails;
    userBtn.onclick = function()
    {
        var cbrowser = new CUserBrowser();
        cbrowser.cls = this;
        cbrowser.userDetails = this.userDetails;
        cbrowser.onSelect = function(cid, name) 
        {
            this.userDetails.id = cid;
            this.userDetails.name = name;
            this.cls.parentNode.childNodes[1].innerHTML = " " + name;
        }
        cbrowser.showDialog();
    }
}

/**
* Displays the dropdown of team
*/
AntAppSettings.prototype.teamDropdown = function()
{
    var userObject = new CAntObject("user")
    userObject.teamId = this.app.teamId;
    userObject.cls = this;
    userObject.onteamsloaded = function(ret)
    {
        this.cls.divScopeTeam.innerHTML = "";
        this.cls.teamDropdown = alib.dom.createElement("select", this.cls.divScopeTeam);
        buildDropdown(this.cls.teamDropdown, [["", "Select Team"]]);
        
        this.teamDropdown = this.cls.teamDropdown;
        
        var teamData = ret;        
        delete ret['teamCount'];
        this.populateTeam(ret, ret[0].parentId);
        this.addSpacedPrefix(teamData);
    }
    userObject.loadTeam();
}

/**
* Displays the elements to select user
*/
AntAppSettings.prototype.toggleScope = function(scope)
{
    alib.dom.styleSet(this.divScopeUser, "display", "none");
    alib.dom.styleSet(this.divScopeTeam, "display", "none");
            
    switch(scope)
    {
        case "user":
            alib.dom.styleSet(this.divScopeUser, "display", "inline-block");
            break;
        case "team":
            alib.dom.styleSet(this.divScopeTeam, "display", "inline-block");
            break;
    }
}

/**
 * Check navigation is default
 *
 * @public
 * @this {class}
 */
AntAppSettings.prototype.checkDefault = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
                                        
        if(ret)
            alib.dom.styleSet(this.cbData.cls.resetDefault, "display", "block");
    };
    
    var args = new Array();
    args[args.length] = ['app', this.app.appName];
    ajax.exec("/controller/Application/checkNav", args);
}

/**
* @fileOverview AntAppDash: Main application for the page dashboard
* @depricated This has been removed, the object dashboard loader now handles all dashboards, both custom and application. -joe
*
* @author: Marl Tumulak, marl.tumulak@aereus.com Copyright (c) 2011 Aereus Corporation. All rights reserved.
* @constructor: AntAppDash
* @param {string} con Required parameter.
*
*/
function AntAppDash(con)
{
	/**
	* Basic Variables 
	*/
    this.mainCon = con;
    this.m_document = null;     // Application Document - set by ant
    this.m_processid = null;    // Process id - set by Ant
    this.m_container = alib.dom.createElement("div", con);    // Handle to application container - set by Ant
    this.appNavname = null; // name of appname.navname
    this.dbDropdownCon = null;
}

/**
* Entry point for application
*/
AntAppDash.prototype.main = function()
{
    this.m_widgets = new Array();
    this.m_cols = new Array();
    this.m_menus = new Array();
    this.loadWidgets(this.m_container);
    this.mainCon.id = "appDashMainCon";
    this.m_container.id = "appDashCon";
    this.resize();
}

/**
* Resize UI
*/
AntAppDash.prototype.resize = function()
{
	alib.dom.styleSet(this.mainCon, "height", (getWorkspaceHeight() - 10) + "px");
}

/**
* Perform needed clean-up on app exit
*/
AntAppDash.prototype.exit = function()
{
	// Clear Menus
    for (var i = 0; i < this.m_menus.length; i++)
        {
        this.m_menus[i].destroyMenu();
    }

	// Unload widget contents
    this.unloadAllWidgets();
    this.m_container.innerHTML = "";
    this.m_cols = null;
    this.m_menus = null;
    this.m_widgets = null;
}

/**
* To be over-ridden by calling process to detect when definition is finished loading.
*
* @public
* @this {AntAppDash} 
* @param {Object} ret   Object that is a result from ajax
*/
AntAppDash.prototype.onload = function(ret)
{
}

AntAppDash.prototype.loadWidgets = function(con)
{
    con.innerHTML = "<div class='loading'></div>";    
    var ajax = new CAjax();
    ajax.m_con = con;
    ajax.m_dashclass = this;
    ajax.onload = function(root)
    {   
        var total_width = root.getAttribute('width');
        var spcon = new CSplitContainer("verticle", total_width);

        this.m_con.innerHTML = "";    
        this.m_dashclass.addWidgetSettings(this.m_con, total_width);

        spcon.m_dashclass = this.m_dashclass;
        spcon.onPanelResizeStart = function() { this.m_dashclass.onColResizeStart(); };
        spcon.onPanelResize = function() { this.m_dashclass.onColResize(); };
        spcon.resizable = true;
        spcon.print(this.m_con);

        var num = root.getNumChildren();
        for (i = 0; i < num; i++)
       	{
            var child = root.getChildNode(i);
            if (child.m_name == "column")
            {
                var width = child.getAttribute("width");                
                var col = spcon.addPanel(width);
                if (!this.m_dashclass.m_cols)
                    this.m_dashclass.m_cols = new Array();
                this.m_dashclass.m_cols[this.m_dashclass.m_cols.length] = col;

				/**
				* Always add blank resize box at the end of each col
				*/
                var wbox = new CWidgetBox("dz_home", "100px");
                wbox.m_cls = this.m_dashclass;
                wbox.onMoved = function(newcon) 
                { 
                    this.m_cls.saveLayout(); 
                    //this.m_cls.loadGraph(newcon.m_con, newcon.m_gid);
                }
                wbox.onBeforeMove = function(from, to) 
                { 
                    //from.parentNode.m_con.innerHTML = "";    
                }
                wbox.print(col);

				/**
				* Get Widgets
				*/
                var num_wids = child.getNumChildren();
                for (w = 0; w < num_wids; w++)
				{
                    var wid = child.getChildNode(w);
                    if (wid.m_name == "widget")
					{
                        var className = "";
                        var title = "";
                        var id = "";
                        var removable = "";
                        var data = "";

                        var num_vars = wid.getNumChildren();
                        for (j = 0; j < num_vars; j++)
						{
                            var dbattr = wid.getChildNode(j);
                            switch (dbattr.m_name)
                            {
                                case "class":
                                    className = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break;
                                case "title":
                                    title = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "id":
                                    id = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "removable":
                                    removable = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "data":
                                    data = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                            }
                        }
                        this.m_dashclass.addWidget(col, id, title, className, removable, false, data, width);    
                    }
                }
            }    
        }
        /**
		* Add buffer column
		*/
        var tmpcon = spcon.addPanel("*");

        this.m_dashclass.loadAllWidgets();
    };

    ajax.exec("/applications/xml_getwidgets.awp?appNavname=" + this.appNavname);
}

AntAppDash.prototype.loadWidget = function(eid, col)
{    
    var ajax = new CAjax();
    ajax.m_col = this.m_cols[col];
    ajax.m_dashclass = this;
    ajax.onload = function(root)
    {
        var num = root.getNumChildren();
        for (i = 0; i < num; i++)
            {
            var child = root.getChildNode(i);
            if (child.m_name == "column")
                {
                var width = child.getAttribute("width");

                var num_wids = child.getNumChildren();
                for (w = 0; w < num_wids; w++)
                    {
                    var wid = child.getChildNode(w);
                    if (wid.m_name == "widget")
                        {
                        var className = "";
                        var title = "";
                        var id = "";
                        var removable = "";
                        var data = "";

                        var num_vars = wid.getNumChildren();
                        for (j = 0; j < num_vars; j++)
                            {
                            var dbattr = wid.getChildNode(j);
                            switch (dbattr.m_name)
                            {
                                case "class":
                                    className = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break;
                                case "title":
                                    title = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "id":
                                    id = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "removable":
                                    removable = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                                case "data":
                                    data = (dbattr.m_text) ? unescape(dbattr.m_text) : "";
                                    break
                            }
                        }

                        this.m_dashclass.addWidget(this.m_col, id, title, className, removable, true, data, width);
                    }
                }
            }    
        }
    };    
    ajax.exec("/applications/xml_getwidgets.awp?eid=" + eid + "&appNavname=" + this.appNavname);
}
/**
* Append a widget to the dashboard 
*/
AntAppDash.prototype.addWidgetNew = function(col, id, title, className, removable, exec, data, width)
{
	/**
	* Get last widgetbox to insert before
	*/
    var lastbox = col.childNodes[col.childNodes.length - 1];

	/**
	* Create container (handles drag and drop)
	*/
    var wid_index = this.m_widgets.length;
    var wbox = new CWidgetBox("dz_home");
    wbox.m_cls = this;
    wbox.m_wind = wid_index;
    wbox.onMoved = function(newcon) 
    {
        this.m_cls.saveLayout(); 
        this.m_cls.m_widgets[this.m_wind].main();
    }
    wbox.onBeforeMove = function(from, to) 
    { 
        this.m_cls.m_widgets[this.m_wind].exit();
        //from.parentNode.m_con.innerHTML = "";    
    }
    var w_con = wbox.getCon();

 	/**
	* Used to determine what item is in container
	*/
    w_con.m_id = id; 
    wbox.printBefore(col, lastbox);

 	/**
	* Create content table
	*/
	var widgetCon = alib.dom.createElement("div", w_con);
	alib.dom.styleSetClass(widgetCon, "dbWidget");

	var widgetConHeader = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConHeader, "dbWidgetHeader");

	var widgetConOpt = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConOpt, "dbWidgetOpt");

	var widgetConTitle = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConTitle, "dbWidgetTitle");

	var widgetConBody = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConBody, "dbWidgetBody");
    
 	/**
	* Create widget application class    
	*/
	widgetConTitle.innerHTML = title;
    var widapp = eval("new " + className + "()");
    
    if(className = 'CWidReport')
        widapp.widgetWidth = width.replace('px', '');
        
    if (typeof data != "undefined")
        widapp.m_data = data;

 	/**
    * Add dropdown context menu
	*/
    var dm = new CDropdownMenu();
    dm.handleDuplicates = true;
	/*
    widapp.m_dm = dm;
	*/
    if (removable == 't')
  	{
        dm.addEntry('Remove Widget', function(cls, id) { cls.unloadWidget(id);}, null, null, [this, id]);
    }
    //cct.get_ctitle().appendChild(dm.createImageMenu());
	widgetConOpt.appendChild(dm.createImageMenu("/images/icons/gear_16.png", "/images/icons/gear_16.png", "/images/icons/gear_16.png"));

 	/**
    * Make dragable and print
	*/
    DragAndDrop.registerDragable(widgetConTitle, widgetCon, "dz_home");
    var drag_icon = ALib.m_document.createElement("div");
    drag_icon.innerHTML = "Move: " + widgetConTitle.innerHTML;
    DragAndDrop.setDragGuiCon(widgetConTitle, drag_icon, 15, 15);

 	/**
	* Execute widget
	*/
	/*
    if (typeof exec == "undefined" || exec == true)
        widapp.main();
	*/
}

/**
* Append widget to a column
*/
AntAppDash.prototype.addWidget = function(col, id, title, className, removable, exec, data, width)
{
	/**
	* Get last widgetbox to insert before
	*/
    var lastbox = col.childNodes[col.childNodes.length - 1];

	/**
	* Create contianer (handles drag and drop)
	*/
    var wid_index = this.m_widgets.length;
    var wbox = new CWidgetBox("dz_home");
    wbox.m_cls = this;
    wbox.m_wind = wid_index;
    wbox.onMoved = function(newcon) 
    {
        this.m_cls.saveLayout(); 
        this.m_cls.m_widgets[this.m_wind].main();
    }
    wbox.onBeforeMove = function(from, to) 
    { 
        this.m_cls.m_widgets[this.m_wind].exit();
        //from.parentNode.m_con.innerHTML = "";    
    }
    var w_con = wbox.getCon();
 	/**
	* Used to determine what item is in container
	*/
    w_con.m_id = id; 
    wbox.printBefore(col, lastbox);

	// Create content table
	// ---------------------------------------------
	var widgetCon = alib.dom.createElement("div", w_con);
	alib.dom.styleSetClass(widgetCon, "dbWidget");

	var widgetConHeader = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConHeader, "dbWidgetHeader");

	var widgetConOpt = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConOpt, "dbWidgetOpt");

	var widgetConTitle = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConTitle, "dbWidgetTitle");

	var widgetConBody = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConBody, "dbWidgetBody");

	widgetConTitle.innerHTML = title;
    
    var cct_con = widgetConBody;
    w_con.m_con = cct_con;    
 	/**
	* Create widget application class    
	*/
    var widapp = eval("new " + className + "()");
    widapp.m_wbox = wbox;
    widapp.m_dashclass = this;
    widapp.m_container = cct_con;
    widapp.m_widTitle = widgetConTitle;
    widapp.m_id = id;    
    widapp.appNavname = this.appNavname;
    
    if(className = 'CWidReport')
        widapp.widgetWidth = width.replace('px', '');
        
    if (typeof data != "undefined")
        widapp.m_data = data;

 	/**
    * Add dropdown context menu
	*/
    var dm = new CDropdownMenu();
    dm.handleDuplicates = true;
    
    this.m_menus.push(dm);
    widapp.m_dm = dm;
    if (removable == 't')
  	{
        dm.addEntry('Remove Widget', function(cls, id) { cls.unloadWidget(id);}, null, null, [this, id]);
    }
    widgetConOpt.appendChild(dm.createImageMenu("/images/icons/gear_16.png", "/images/icons/gear_16.png", "/images/icons/gear_16.png"));

 	/**
    * Make dragable and print
	*/
    DragAndDrop.registerDragable(widgetConTitle, widgetCon, "dz_home");
    var drag_icon = ALib.m_document.createElement("div");
    drag_icon.innerHTML = "Move: " + widgetConTitle.innerHTML;
    DragAndDrop.setDragGuiCon(widgetConTitle, drag_icon, 15, 15);

 	/**
	* Execute widget
	*/
    if (typeof exec == "undefined" || exec == true)
        widapp.main();
        
    this.m_widgets[wid_index] = widapp;
}

/**
* Execute main function for all widgets once loaded
*/
AntAppDash.prototype.loadAllWidgets = function()
{
    for (var i = 0; i < this.m_widgets.length; i++)
    {
        this.m_widgets[i].main();
    }
}


/**
* Execuate exit function for all widgets to close out
*/
AntAppDash.prototype.unloadAllWidgets = function()
{
    for (var i = 0; i < this.m_widgets.length; i++)
        {
        this.m_widgets[i].exit();
        if (this.m_widgets[i].m_dm)
            this.m_widgets[i].m_dm.destroyMenu();
    }
}

/**
* Col has been resized
*
* @event onColResize
*/
AntAppDash.prototype.onColResize = function()
{
    this.loadAllWidgets();

    var args = new Array();

    args[0] = ['num_cols', this.m_cols.length];

    // Set appNavename argument to identify which dashboard to be updated
    args[1] = ['appNavname', this.appNavname];

    for (var i = 0; i < this.m_cols.length; i++)
	{
        args[args.length] = ["col_"+i, this.m_cols[i].offsetWidth + "px"];
    }
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Application/dashboardSaveLayoutResize", args);
}


/**
* Col is being resized
*
* @event onColResizeStart
*/
AntAppDash.prototype.onColResizeStart = function()
{
    this.unloadAllWidgets();

    for (var i = 0; i < this.m_cols.length; i++)
        {
        for (var j = 0; j < this.m_cols[i].childNodes.length; j++)
            {
            if (this.m_cols[i].childNodes[j].m_id)
                {
                this.m_cols[i].childNodes[j].m_con.innerHTML = "";
            }
        }
    }
}


/**
* Send modified layout to server
*/
AntAppDash.prototype.saveLayout = function()
{
    var args = new Array();

    args[0] = ['num_cols', this.m_cols.length];

    /**
	* Set appNavename argument to identify which dashboard to be updated
	*/
    args[1] = ['appNavname', this.appNavname];
    for (var i = 0; i < this.m_cols.length; i++)
        {
        var col_ws = "";

        for (var j = 0; j < this.m_cols[i].childNodes.length; j++)
            {
            if (this.m_cols[i].childNodes[j].m_id)
                {
                col_ws += (col_ws) ? ':' : '';
                col_ws += this.m_cols[i].childNodes[j].m_id;
            }
        }

        args[args.length] = ["col_"+i, col_ws];
    }
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Application/dashboardSaveLayout", args);
}

/**
* Remove a widget from the dashboard
*/
AntAppDash.prototype.unloadWidget = function(id)
{
    var args = new Array();

    args[0] = ['eid', id];
    args[1] = ['appNavname', this.appNavname];

    for (var i = 0; i < this.m_widgets.length; i++)
        {
        if (this.m_widgets[i].m_id == id)
        {            
            ajax = new CAjax('json');
            ajax.cls = this;
            ajax.wid = this.m_widgets[i];
            ajax.onload = function(ret)
            {
                this.cls.unloadWidgetCb(ret, this.wid);
            };
            ajax.exec("/controller/Application/dashboardDelWidget", args);

            break;
        }
    }
}
AntAppDash.prototype.unloadWidgetCb = function(retval, wid)
{
    wid.m_wbox.getCon().parentNode.removeChild(wid.m_wbox.getCon());
    wid.exit();
    delete wid;
}

AntAppDash.prototype.addWidgetSettings = function(con, total_width)
{    
    var table = ALib.m_document.createElement("table");
    var tbody = ALib.m_document.createElement("tbody");
    table.style.cssFloat = "right";
    table.style.marginRight = "20px";
    table.style.width = "total_width";
    table.appendChild(tbody);
	/**
	* Widgets Row
	*/
    var row = ALib.m_document.createElement("tr");
    tbody.appendChild(row);

    var td = ALib.m_document.createElement("td");
    row.appendChild(td);
    //td.innerHTML = "<img src='/images/icons/settings_16.png' border='0' />";

    this.dbDropdownCon = ALib.m_document.createElement("td");
    row.appendChild(this.dbDropdownCon);
    
    var td = ALib.m_document.createElement("td");
    row.appendChild(td);
    var aAddWidget = ALib.m_document.createElement("a");    
    aAddWidget.href="javascript: void(0)";
    aAddWidget.innerHTML = "+Add Widget";
    aAddWidget.cls = this;
    aAddWidget.onclick = function()
    {
        var browser = new CWidgetBrowser();
        browser.appNavname = this.cls.appNavname;
        browser.m_cls = this.cls;
        browser.onSelect = function(widget_id)
        {
            var appcls = this.m_cls;
            var args = new Array();

            args[0] = ['wid', widget_id];
            args[1] = ['appNavname', appcls.appNavname];
            
            ajax = new CAjax('json');
            ajax.cls = appcls;
            ajax.onload = function(ret)
            {
                this.cls.loadWidget(ret, 0);
            };
            ajax.exec("/controller/Application/addWidget", args);
        }
        browser.showDialog();

    }
    td.appendChild(aAddWidget);

  	/**
	* Dashboard width row
	*/
    var td = ALib.m_document.createElement("td");
    row.appendChild(td);
    //td.innerHTML = "<img src='/images/icons/settings_16.png' border='0' />";

	/* NOTE: for now all dashboards have a static width of 100%
    var td = ALib.m_document.createElement("td");
    row.appendChild(td);
    td.innerHTML = "| &nbsp; ";

    var td = ALib.m_document.createElement("td");
    row.appendChild(td);
    var dm = new CDropdownMenu();
    
    this.m_menus.push(dm);
    var funct = function(width, appcls)
    {
        var args = new Array();

        args[0] = ['width', width];
        args[1] = ['appNavname', appcls.appNavname];
        
        ajax = new CAjax('json');
        ajax.cls = appcls;
        ajax.onload = function(ret)
        {
            this.cls.exit();
            this.cls.main();
        };
        ajax.exec("/controller/Application/dashboardSetTotalWidth", args);
    }    

    dm.addEntry("100%", funct, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ['100%', this]);
	// Add range

    for (var i = 800; i <= 1600; i+=25)
        dm.addEntry(i + "px", funct, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, [i, this])

    td.appendChild(dm.createLinkMenu("Width"));
	*/

    con.appendChild(table);

    var divClear = ALib.m_document.createElement("div");
    divClear.style.clear = "both";
    con.appendChild(divClear);
    
    this.onload();
}

/**
 * @fileoverview Notification manager class used to handle notification objects in netric
 */

/**
 * Constructor
 */
function NotificationMan()
{
	/**
	 * Array of notifications
	 *
	 * @var {CAntObject[]}
	 */
	this.notifications = new Array();

	/**
	 * Timer for automatic refresh
	 *
	 * @var {DOMTimer}
	 */
	this.refreshTimer = null;

	/**
	 * Icon container
	 *
	 * @var {DOMElement}
	 */
	this.iconCon = null;

	/**
	 * Outer container
	 *
	 * @var {DOMElement}
	 */
	this.outerCon = null;

	/**
	 * Container that will render the list of notifications
	 *
	 * @var {DOMElement}
	 */
	this.listCon = null;

	/**
	 * Handle to popup
	 *
	 * @var {alib.ui.Popup}
	 */
	this.popup = null;

	/**
	 * If renderd inline then an antView will be provided
	 *
	 * @var {AntView}
	 */
	this.antView = null;

	// Load current notifications
	this.getNotifications();
}

/**
 * Render into an AntView
 *
 * @param {AntView} antView Render this into an antview rather than a popup
 */
NotificationMan.prototype.renderView = function(antView)
{
	this.antView = antView;
	this.listCon = antView.con;

	this.renderList();
}

/**
 * Render into to dom tree
 *
 * @param {DOMElement} con The container to print the notifications icon into
 */
NotificationMan.prototype.anchorToEl = function(con)
{
	this.iconCon = alib.dom.createElement("a", con, "<img src='/images/icons/notification_24_off.png' style='vertical-align:middle;'>");
	this.iconCon.href = "javascript:void(0);";

	// Setup Container
	this.outerCon = alib.dom.createElement("div", document.body);
    alib.dom.styleSet(this.outerCon, "position", "absolute");
    alib.dom.styleSet(this.outerCon, "display", "none");
	alib.dom.styleSetClass(this.outerCon, "chatMessenger");

	// header container
    var header = alib.dom.createElement("div", this.outerCon);
	alib.dom.styleSetClass(header, "chatMessengerTitle");
	header.innerHTML = "Notifications";

	// List container
	this.listCon = alib.dom.createElement("div", this.outerCon);
	alib.dom.styleSetClass(this.listCon, "chatMessengerList");

	// Create Popup
	var popup = new alib.ui.Popup(this.outerCon);
	popup.anchorToEl(this.iconCon, "down");
	con.onclick = function() { popup.setVisible(); }
	this.popup = popup;

	alib.events.listen(popup, "onShow", {context:this, method:"renderList"});
}

/**
 * Render the list into the ui
 */
NotificationMan.prototype.renderList = function()
{
	if (this.listCon == null)
		return;

	this.listCon.innerHTML = "";

	if (this.notifications.length == 0)
		this.listCon.innerHTML = "There are no notifications at this time";

	for (var i in this.notifications)
	{
		var notif = this.notifications[i];

		var notRow = alib.dom.createElement("div", this.listCon);
		alib.dom.styleSetClass(notRow, "actListRow");

		if (notif.getValue('f_seen') === false)
			alib.dom.styleAddClass(notRow, "unread");
		
		notRow.not = notif;
		notRow.cls = this;
		notRow.onclick = function() {

			if (this.not.getValue("obj_reference"))
			{
				var refParts = this.not.getValue("obj_reference").split(":");
				if (refParts.length == 2)
					this.cls.loadObject(refParts[0], refParts[1]);
			}
			else
			{
				this.cls.showPopup(this.not);
			}

			// Hide popup
			if (this.cls.popup)
				this.cls.popup.setVisible();

			this.not.setValue("f_seen", true);
			this.not.save();
		}

		var buf = "";

		// If creator was not owner then add user image
		if (notif.getValue('owner_id') != notif.getValue('creator_id') && notif.getValue('creator_id'))
		{
			var path = "/files/userimages/" + notif.getValue('creator_id');
			path += "/48/48";	
			buf += "<div class='mainImage'><img src='" + path + "' style='width:48px;' /></div>";
		}

		buf += notif.getValue("description") + "<br />";
		buf += notif.getValue("ts_execute");
		buf += "<div style='clear:both;'></div>";
		notRow.innerHTML = buf;

		// Add onclick to mark notifications as read
		alib.events.listen(notRow, "click", function(evt) {
			if (evt.data.objNot.getValue("f_seen") == false)
			{
				// Refresh in two seconds to clear all notifications for this object
				// after the object form has loaded
				evt.data.cls.setRefresh(2000);

				/*
				evt.data.objNot.setValue("f_seen", true);
				evt.data.objNot.cbData.cls = evt.data.cls;
				evt.data.objNot.onsave = function() {
					this.cbData.cls.updateDisplays(); // Make sure title gets updated
				}
				evt.data.objNot.save();

				alib.dom.styleRemoveClass(evt.data.row, "unread");
				*/
			}
		}, {objNot:notif, row:notRow, cls:this});
	}
}

/**
 * Get notifications from server
 */
NotificationMan.prototype.getNotifications = function(onlyNew)
{
	if (!onlyNew)
		this.notifications = new Array();

	var list = new AntObjectList("notification");
	list.addCondition("and", "owner_id", "is_equal", -3);
	list.addCondition("and", "ts_execute", "is_less_or_equal", "now");
	//if (onlyNew)
		//list.addCondition("and", "f_seen", "is_equal", "f");
	list.cbData.cls = this;
	list.cbData.updateMode = onlyNew || false;

	list.addSortOrder("ts_execute", "desc");

	// Get notifications and store in array
	list.onLoad = function() {
		for (var i = 0; i < this.getNumObjects(); i++)
		{
			var notification = this.getObject(i);
			this.cbData.cls.addNotification(notification, this.cbData.updateMode);
		}

		// If we are rendered into an antView and the view is active
		if (this.cbData.cls.antView)
		{
			if (this.cbData.cls.antView.isActive)
				this.cbData.cls.renderList();
		}

		// Update titles and counters
		this.cbData.cls.updateDisplays();
	};

	list.getObjects(0, 25);

	// Queue next refresh in 60 seconds
	this.setRefresh();
}

/**
 * Add notification
 *
 * @param {CAntObject} notification The notification object to display
 * @param {bool} updateMode If true new items should be put at the top of the list
 */
NotificationMan.prototype.addNotification = function(notification, updateMode)
{
	// Make sure we have not already added this notification
	for (var i in this.notifications)
	{
		var not = this.notifications[i];

		if (not.id == notification.id)
		{
			if (not.getValue("f_seen") != notification.getValue("f_seen"))
				this.notifications[i] = notification; // replace with updated notification

			return; // Do not add again, already in the queue
		}
	}

	if (updateMode)
		this.notifications.unshift(notification);
	else
		this.notifications.push(notification);


	if (notification.getValue('f_popup') == true && notification.getValue("f_seen") == false)
		this.showPopup(notification);
}

/**
 * Display notification popup
 *
 * @param {CAntObject} notification The notification object to display
 */
NotificationMan.prototype.showPopup = function(notification)
{
 	var dlg = new CDialog("Notificaiton");

	var con = alib.dom.createElement("div");

	var header = alib.dom.createElement("h2", con);
	header.innerHTML = notification.getValue("name");

	// Add description
	var descCon = alib.dom.createElement("p", con);
	var desc = notification.getValue("description");
	descCon.innerHTML = desc.replace(/\n/g, "<br />");

	// Print object reference link
	var objReference = notification.getValue("obj_reference");
	if (objReference)
	{
		var refParts = objReference.split(":");
		if (refParts.length == 2)
		{
			var linkCon = alib.dom.createElement("p", con);
			var lnk = alib.dom.createElement("a", linkCon);
			lnk.href = "javascript:void(0);";
			lnk.dlg = dlg;
			lnk.objType = refParts[0];
			lnk.oid = refParts[1];
			lnk.cls = this;
			lnk.notification = notification;
			lnk.onclick = function() {
				loadObjectForm(this.objType, this.oid);
				this.cls.dismiss(this.notification);
				this.dlg.hide();
			};
			lnk.innerHTML = "Click for more information";
		}
	}

	// Print buttons bar
	// ------------------------------------------------
	var btnCon = alib.dom.createElement("div", con);
    var btn = alib.ui.Button("Dismiss", {
		className:"b1", tooltip:"Dismiss this notice", dlg:dlg, 
		cls:this, notification:notification,
		onclick:function() {
			this.dlg.hide();
			this.cls.dismiss(this.notification);
		}
	});
    btn.print(btnCon);

	dlg.customDialog(con, 500);
}

/**
 * Dismiss a notification and set it as seen
 *
 * @param {CAntObject} notification The notification object to display
 */
NotificationMan.prototype.dismiss = function(notification)
{
	notification.setValue("f_seen", true);
	notification.save();
}

/**
 * Set refresh in 60 seconds
 */
NotificationMan.prototype.setRefresh = function(inMs)
{
	if (this.refreshTimer)
	{
		if (inMs)
			window.clearTimeout(this.refreshTimer); // Push an update
		else
			return; // Already queued - no useless overlaps here
	}

	var delay = inMs || 1000 * 10;

	var cls = this;
	this.refreshTimer = window.setTimeout(function() {
		cls.refreshTimer = null;
		cls.getNotifications(true);
	}, delay); // Refresh in one minute
}


/**
 * Update UI elements based on the number of unseen notifications
 */
NotificationMan.prototype.updateDisplays = function()
{
	var unseen = 0;
	for (var i in this.notifications)
	{
		if (this.notifications[i].getValue("f_seen") != true)
			unseen++;
	}

	if (unseen)
	{
		if (this.iconCon)
			this.iconCon.innerHTML = "<img src='/images/icons/notification_24_on.png' style='vertical-align:middle;'> (" + unseen + ")";
	}
	else
	{
		if (this.iconCon)
			this.iconCon.innerHTML = "<img src='/images/icons/notification_24_off.png' style='vertical-align:middle;'>";
	}

	if (typeof Ant != "undefined")
		Ant.updateAppTitle(unseen, "notifications");
}


/**
 * Load an object
 */
NotificationMan.prototype.loadObject = function(objType, oid)
{
	if (!this.antView)
	{
		loadObjectForm(objType, oid);
		return;
	}

	// See if we need to setup the view for this object type
	if (!this.antView.getView(objType + ":" + oid))
	{
		var viewItem = this.antView.addView(objType+":[id]", {obj_type:objType});
		viewItem.render = function() { }
		viewItem.onshow = function()  // draws in onshow so that it redraws every time
		{ 
			// Do not reload if this object id is already loaded
			if (this.options.lastLoaded == this.variable)
				return true;
				
			this.con.innerHTML = "";
			this.title = ""; // because objects are loaded in the same view, clear last title
			var ol = new AntObjectLoader(this.options.obj_type, this.variable);
			ol.setAntView(this);
			ol.print(this.con);
			ol.cbData.antView = this;
			ol.onClose = function() 
			{ 
				this.cbData.antView.goup(); 
			}
			ol.onRemove = function() { }

			this.options.lastLoaded = this.variable;
		};
	}

	// Load object into view
	this.antView.navigate(objType + ":" + oid);
}

/**
 * @fileOverview Use this for the header search box
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of Ant.Searcher
 *
 * @constructor
 */
Ant.Searcher = function()
{
	/**
	 * The container that will house the search input
	 *
	 * @var {DOMElement}
	 */
	this.inpt = null;

	/**
	 * The 'Go' button
	 *
	 * @var {button}
	 */
	this.button = null;

	/**
	 * Popup reference
	 *
	 * @var {alib.ui.Popup}
	 */
	this.popup = null;

	/**
	 * Handle to net xhr
	 *
	 * @var {alib.net.Xhr}
	 */
	this.xhr = null;
}

/**
 * Render into to dom tree
 *
 * @param DOMElement con The container that will house the rendered tool
 */
Ant.Searcher.prototype.render = function(con)
{
	this.inpt = alib.dom.createElement("input", con);
	this.inpt.placeholder = "Search";

	this.button = alib.dom.createElement("button", con, "Go");

	this.resultsCon = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(this.resultsCon, "searcherPopup");

	this.popup = new alib.ui.Popup(this.resultsCon);
	this.popup.anchorToEl(this.inpt, "down", "left");

	// Setup Listeners
	alib.events.listen(this.inpt, "keyup", function(evt) { evt.data.cls.showResults() }, {cls:this});
	alib.events.listen(this.inpt, "focus", function(evt) { evt.data.cls.showResults() }, {cls:this});
}

/**
 * Show results pane
 */
Ant.Searcher.prototype.showResults = function()
{
	var searchString = this.inpt.value;

	if (!searchString)
	{
		this.popup.setVisible(false);
		return;
	}

	// Resize to match input
	alib.dom.styleSet(this.resultsCon, "width", (alib.dom.getElementWidth(this.inpt) - 10) + "px");

	this.popup.setVisible(true);

	// Do not query the same value
	if (this.inpt.value != this.lastQuery)
	{
		this.resultsCon.innerHTML = "Searching...";
		this.getResults();
	}
}

/**
 * Get query results and print
 */
Ant.Searcher.prototype.getResults = function()
{
	// Do not query the same value
	if (this.inpt.value == this.lastQuery)
		return;

	// Abort past xhr if in progress
	if (this.xhr != null)
	{
		if (this.xhr.isInProgress())
			this.xhr.abort();
	}

	// Poll the server until we get data or timeout
	this.xhr = new alib.net.Xhr();

	// Retrieve results
	alib.events.listen(this.xhr, "load", function(evt) { 

		evt.data.searchCls.resultsCon.innerHTML = "";

		var resp = this.getResponse();

		// Loop through all types
		for (var i in resp)
		{
			var objects = resp[i];

			if (objects.length > 0)
			{
				var row = alib.dom.createElement("div", evt.data.searchCls.resultsCon, i);
				alib.dom.styleSetClass(row, "searcherGroupHeader");
			}

			for (var j in objects)
			{
				var obj = objects[j];
				var row = alib.dom.createElement("div", evt.data.searchCls.resultsCon);
				alib.dom.styleSetClass(row, "searcherItemRow");

				row.innerHTML = "<img src='/images/icons/objects/" + obj.iconName + "_16.png' /> " + obj.title;
				row.oid = obj.id;
				row.objType = obj.objType;
				row.onclick = function() {
					loadObjectForm(this.objType, this.oid);
					evt.data.searchCls.popup.setVisible(false);
				}
			}
		}

	}, {searchCls:this});

	// Timed out
	alib.events.listen(this.xhr, "error", function(evt) { 
	}, {searchCls:this});

	this.xhr.send("/controller/Search/query", "GET", {q:this.inpt.value});

	this.lastQuery = this.inpt.value;
}

/**
* @fileOverview AntChatMessenger: Messenger controller for netric
*
* Usage var messenger = new AntChatMessenger();
* var messenger = new AntChatMessenger();
*
* @author:  Marl Jay Tumulak, marl.tumulak@aereus.com; Copyright (c) 2011 Aereus Corporation. All rights reserved.
* @constructor AntChatMessenger
*/

function AntChatMessenger()
{
    // div containers used to build chat client
    this.outerCon = null;               // contains the outer div
    this.mainCon = null;                // contains the main div
    this.headerCon = null;              // containes the header div
    this.bodyCon = null;                // contains the body div
    this.conChatList = null;            // contains the chat list div
    this.conFriendList = null;          // contains the friend list div
    this.conTeamList = null;            // contains the team list div
    this.conFriendListLoading = null;
    this.conTeamListLoading = null;
    this.conFriendAdd = null;
        
    this.icon_online = "<img src='/images/icons/available.png' border='0' />";
    this.icon_offline = "<img src='/images/icons/offline.png' border='0' />";    
    
    // chat client variables    
    this.chatCloseState = false;
    this.chatFloatType = "right";
    this.chatFloatMargin = "0px";
    this.chatHeight = "300";
    this.chatPopup = false;
    this.chatPopup = false;
    this.friendLoaded = false;
    
    this.teamName = null;
    this.teamId = null;
    this.onlineCount = 0;
    
    this.g_chatTimer = new Array();
    this.g_timerCount = new Array();
    this.g_friendList = new Array();
    
    this.userLoggedIn = true;

	/**
	 * Handle to popup
	 *
	 * @var {alib.ui.Popup}
	 */
	this.popup = null;

	/**
	 * Container used to print inline chats
	 *
	 * @var {DOMElement}
	 */
	this.chatsCon = null;

	/**
	 * Link con where we will print status updates like number of people online
	 *
	 * @var {DOMElement}
	 */
	this.linkCon = null;

	/**
	 * Last sound played in ms
	 *
	 * @var {int}
	 */
	this.lastSoundPlayed = 0;

	/**
	 * Loaded audio tag
	 *
	 * @var {audio}
	 */
	this.audio = null;

	/**
	 * Array of clients / sessions
	 *
	 * @var {Array}
	 */
	this.clientSessions = new Array();

	/**
	 * If renderd inline then an antView will be provided
	 *
	 * @var {AntView}
	 */
	this.antView = null;
}

/**
 * Render into an AntView
 *
 * @param {AntView} antView Render this into an antview rather than a popup
 */
AntChatMessenger.prototype.renderView = function(antView)
{
	this.antView = antView;
	this.print(antView.con);
}

/** 
* Run application and build interface
* @param {object} con  DOM element container for settings
*/
AntChatMessenger.prototype.print = function(con)
{
	this.linkCon = con;

	// Setup Container
	if (this.antView)
		this.outerCon = alib.dom.createElement("div", con);
	else 
		this.outerCon = alib.dom.createElement("div", document.body);

    // start the styling of div container for Ant Chat
    this.outerCon.setAttribute("id", "antChatCon");
	if (!this.antView)
	{
		alib.dom.styleSet(this.outerCon, "position", "absolute");
		alib.dom.styleSet(this.outerCon, "display", "none");
		alib.dom.styleSet(this.outerCon, "z-index", "10000");
	}

	var width = alib.dom.getClientWidth() - 260;
	// Add inline chats container
	this.chatsCon = alib.dom.createElement("div", this.outerCon);
	if (!this.antView)
	{
		alib.dom.styleSet(this.chatsCon, "position", "absolute");
		alib.dom.styleSet(this.chatsCon, "left", "-" + (width) + "px");
		alib.dom.styleSet(this.chatsCon, "width", width + "px");
		alib.dom.styleSet(this.chatsCon, "margin-right", "260px");
		alib.dom.styleSet(this.chatsCon, "height", "1px"); // hide it so it does not block page clicks
	}

	// Create Popup
	if (!this.antView)
	{
		var popup = new alib.ui.Popup(this.outerCon);
		popup.anchorToEl(con, "down");
		con.onclick = function() { popup.setVisible(); }
		this.popup = popup;

		// Capture hide event to set flag of clients to indicate state
		alib.events.listen(this.popup, "onHide", function(evt) {
			for (var ind in evt.data.msngr.clientSessions)
				evt.data.msngr.clientSessions[ind].isVisible = false;
		}, {msngr:this});
		alib.events.listen(this.popup, "onShow", function(evt) {
			for (var ind in evt.data.msngr.clientSessions)
			{
				if (evt.data.msngr.clientSessions[ind].isRendered)
					evt.data.msngr.clientSessions[ind].isVisible = true;
			}
		}, {msngr:this});
	}

    this.mainCon = alib.dom.createElement("div");    
    this.mainCon.setAttribute("id", "chatMessengerCon");
	if (!this.antView)
	{
		alib.dom.styleSet(this.mainCon, "float", this.chatFloatType);
		alib.dom.styleSet(this.mainCon, "margin" + this.chatFloatType.capitalize(), this.chatFloatMargin);        
		alib.dom.styleSetClass(this.mainCon, "chatMessenger");
	}
    
    this.bodyCon = alib.dom.createElement("div", this.mainCon);
    this.bodyCon.setAttribute("id", "chatMessengerBody");
	if (!this.antView)
    	alib.dom.styleSet(this.bodyCon, "width", "250px");
    
    if(!this.chatPopup && !this.antView)
    {
        this.buildHeader();
    }
    
    this.conChatList = alib.dom.createElement("div", this.bodyCon);    
    this.conChatList.setAttribute("id", "chatMessengerList");
	if (!this.antView)
	{
		alib.dom.styleSet(this.conChatList, "height", this.chatHeight + "px");
		alib.dom.styleSet(this.conChatList, "margin", "5px");
		alib.dom.styleSet(this.conChatList, "overflow-y", "scroll");    
	}
    
    this.conFriendList = alib.dom.createElement("div", this.conChatList);
    this.conFriendList.setAttribute("id", "chatMessengerFriendList");
    
    this.conTeamList = alib.dom.createElement("div", this.conChatList);
    this.conTeamList.setAttribute("id", "chatMessengerTeamList");
    alib.dom.styleSet(this.conTeamList, "marginBottom", "15px");
    
    this.conFriendListLoading = alib.dom.createElement("div", this.conFriendList);
    this.conFriendListLoading.setAttribute("id", "chatMessengerFriendLoading");
    this.conFriendListLoading.innerHTML = " <div class='loading'></div>";    
    
    this.conFriendAdd = alib.dom.createElement("div", this.bodyCon);
    alib.dom.styleSet(this.conFriendAdd, "margin", "5px");    

	// Add HTML5 audio notification
	this.audio = alib.dom.createElement("audio", this.outerCon);
	this.audio.innerHTML = '<source src="/media/audio/ding.mp3" type="audio/mpeg">'
					+ '<source src="/media/audio/ding.wav" type="audio/wav">';
	///$('<audio id="chatAudio"><source src="notify.ogg" type="audio/ogg">
		///</audio>').appendTo('body');
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret.retVal != "-1")
        {            
            this.cls.teamName = ret.team_name;
            this.cls.teamId = ret.team_id;            
            this.cls.buildInterface();
        }
    };
    ajax.exec("/controller/Chat/getUserDetails");
    
    // For testing the logout user (session timeout)
    /*var endSession = alib.dom.setElementAttr(alib.dom.createElement("button", con.parentNode), [["innerHTML", "End User Session"]]);
    endSession.cls = this;
    endSession.onclick = function()
    {
        this.cls.userLoggedIn = false;
    }
    
    var startSession = alib.dom.setElementAttr(alib.dom.createElement("button", con.parentNode), [["innerHTML", "Start User Session"]]);
    startSession.cls = this;
    startSession.onclick = function()
    {
        this.cls.userLoggedIn = true;
    }*/
}

/** 
* Create or print interface 
*/
AntChatMessenger.prototype.buildInterface = function()
{   
    // chat friends list    
    if(this.teamId>0)
    {
        var divFriendRow = alib.dom.createElement("div", this.conTeamList);
        alib.dom.styleSet(divFriendRow, "marginTop", "5px");
        alib.dom.styleSet(divFriendRow, "fontWeight", "bold");
        divFriendRow.innerHTML = this.teamName;
        
        this.conTeamListLoading = alib.dom.createElement("div", this.conTeamList);
        this.conTeamListLoading.setAttribute("id", "chatMessengerTeamLoading");
        this.conTeamListLoading.innerHTML = " <div class='loading'></div>";
    }
    
    
    this.updateFriends();
        
	/*
    // chat text box
    var divFriendText = alib.dom.createElement("div", this.conFriendAdd);
    alib.dom.styleSet(divFriendText, "marginTop", "5px");
    var inputFriendAdd = alib.dom.createElement("input", divFriendText);
    var t = new CTextBoxList(inputFriendAdd, { bitsOptions:{editable:{addKeys: [188, 13, 186, 59], addOnBlur:true }}, plugins: {autocomplete: { placeholder: false, minLength: 2, queryRemote: true, remote: {url:"/users/json_autocomplete.php"}}}});
    
    var divFriendButton = alib.dom.createElement("div", this.conFriendAdd);
    alib.dom.styleSet(divFriendButton, "float", "right");
    
    // add friend button
    var btnFriendAdd = alib.dom.createElement("button", divFriendButton);    
    btnFriendAdd.innerHTML = "Add Contact";
    btnFriendAdd.m_textBoxList = t;
    btnFriendAdd.m_cls = this;
    btnFriendAdd.onclick = function()
    {        
        this.m_cls.submitAddFriend (this.m_textBoxList);
    }
    
    this.divClear(this.conFriendAdd);
	*/
    
    // check for new messages    
    this.getNewMessages();    
    //this.checkFriendsOnline();
    this.checkTimeout();
    
    // sets the user's status to online
    this.setStatus(true);
    
    this.outerCon.insertBefore(this.mainCon, this.outerCon.firstChild);    
}

/** 
* build the header with title and buttons
*/
AntChatMessenger.prototype.buildHeader = function()
{
    // header container
    this.headerCon = alib.dom.createElement("div", this.bodyCon);
	alib.dom.styleSetClass(this.headerCon, "chatMessengerTitle");
    
    // header title
    var divHeaderTitle = alib.dom.createElement("div", this.headerCon);
    alib.dom.styleSet(divHeaderTitle, "float", "left");
    alib.dom.styleSet(divHeaderTitle, "width", "150px");
    divHeaderTitle.innerHTML = "Netric Chat";
    
    var divHeaderIcons = alib.dom.createElement("div", this.headerCon);
    alib.dom.styleSet(divHeaderIcons, "float", "right");    
    
    // image - minimize
	/*
    var imgMinimize = alib.dom.createElement("img", divHeaderIcons);        
    alib.dom.styleSet(imgMinimize, "cursor", "pointer");
    imgMinimize.setAttribute("src", "/images/icons/min.gif");
    alib.dom.styleSet(imgMinimize, "marginRight", "2px");
    imgMinimize.m_cls = this;
    imgMinimize.onclick = function()
    {
        // check if there's no any ant client open inline
        // if true, then hide the antChatCon (dropdown window) too
        if(this.m_cls.outerCon.childNodes.length==1)
            alib.dom.styleSet(this.m_cls.outerCon, "visibility", "hidden");
            
        alib.dom.styleSet(this.m_cls.mainCon, "display", "none");
    }
	*/
    
    // image - maximize
    var imgMaximize = alib.dom.createElement("img", divHeaderIcons);        
    alib.dom.styleSet(imgMaximize, "cursor", "pointer");
    imgMaximize.setAttribute("src", "/images/icons/new_window_16.png");                
    alib.dom.styleSet(imgMaximize, "marginRight", "2px");
    imgMaximize.m_cls = this;
    imgMaximize.onclick = function()
    {
		this.m_cls.popup.setVisible(false);
                
        this.m_cls.popupMessenger();        
    }
    
    /**
    * image - close
    */
    var imgClose = alib.dom.createElement("img", divHeaderIcons);
    alib.dom.styleSet(imgClose, "cursor", "pointer");
    imgClose.setAttribute("src", "/images/icons/close_16.png");
    imgClose.m_cls = this;
    imgClose.onclick = function()
    {        
		this.m_cls.popup.setVisible(false);
    }
    
    this.divClear(this.bodyCon);
}

/** 
 * closes the window/client and clears all the timeout functions
 */
AntChatMessenger.prototype.closeWindow = function(message)
{
    // clears all the timeout functions
    for(var x=0; x<this.g_chatTimer; x++)
        clearTimeout(this.g_chatTimer[x]);
    
    // check if there's no any ant client open inline
    // if true, then hide the antChatCon (dropdown window) too
    //if(this.outerCon.childNodes.length==1)        
        //alib.dom.styleSet(this.outerCon, "visibility", "hidden");
    
    this.outerCon.removeChild(this.mainCon);
    this.chatCloseState = true;
    
    // sets the user's status to offline
    this.setStatus(false);
}

/** 
* Loops thru the list of friend name
*/
AntChatMessenger.prototype.submitAddFriend = function(textBoxList)
{
    var values = textBoxList.getValues();
    for (var i = 0; i < values.length; i++)
    {
        if (values[i][0] || values[i][1])
        {
            var parts = values[i][1].split(" ");
            this.addFriend(parts[0]);
        }
    }
    textBoxList.clear();
}


/** 
* Submits the friend name to the AntChat_SvrJson::addFriend
*/
AntChatMessenger.prototype.addFriend = function(friendName)
{
    var args = [["friendName", friendName], ["teamId", this.teamId]];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret.retVal != "-1")
        {
            this.cls.updateFriends();            
        }
        else
            alert(ret.retError);
    };
    ajax.exec("/controller/Chat/addFriend", args);
}

/** 
* Retrieves the json encoded data from AntChat_SvrJson::getFriendList
*/
AntChatMessenger.prototype.updateFriends = function()
{
    var ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        this.cls.updateFriendsTimer();
        
        if(!this.cls.friendLoaded)
        {
            if(this.cls.conTeamListLoading)
                this.cls.conTeamListLoading.innerHTML = "";
                
            this.cls.conFriendListLoading.innerHTML = "";
            this.cls.friendLoaded = true;
        }
        
        if(!ret)
            return;
        
        if(ret)
        {
            var onlineCount = 0;
            // Get all friends
            for (i = 0; i < ret.length; i++)
            {
                var friend = ret[i];
                this.cls.buildFriendList(friend);
                
                onlineCount += friend.online;
            }

			var ico = (onlineCount > 0 ) ? "chat_24_on.png" : "chat_24_off.png";

			var buf = "<img src='/images/icons/" + ico + "'  style='vertical-align:middle;'>";
            
			if (!this.cls.antView)
				this.cls.linkCon.innerHTML =  buf;
        }
    };
    var args = [["teamId", this.teamId]];
    ajax.exec("/controller/Chat/getFriendList", args);
}

/** 
* Builds the chat friends list. Either Friend List or Team List
*/
AntChatMessenger.prototype.buildFriendList = function(friend)
{    
    // chat friend info
    var friendId = friend.id;
    var friendTeamId = friend.teamId;
    var friendName = friend.friend_name;
    var friendServer = friend.friendServer;
    var friendFullName = friend.fullName;
    var friendImage = friend.image;
    var friendOnline = friend.online;
    
    var statusCon = this.buildFriendStatus(friend);
    
    // store all friends inside the array
    // this array is used on getting friend's info using friendName
    this.g_friendList[friendName] = friend;
    
    // Look for this user in a row
    var divFriendRowId = ALib.m_document.getElementById("divFriend_" + friendId);
    if (divFriendRowId)
    {
        ALib.m_document.getElementById("divRowFriendStatus_" + friendId).innerHTML = (friendOnline == 1) ? this.icon_online : this.icon_offline;
        ALib.m_document.getElementById("divRowFriendStatusText_" + friendId).innerHTML = "";
        ALib.m_document.getElementById("divRowFriendStatusText_" + friendId).appendChild(statusCon);
    }
    else
    {
        var divFriendRow;
        if(friendTeamId==this.teamId)
            divFriendRow = alib.dom.createElement("div", this.conTeamList);
        else
            divFriendRow = alib.dom.createElement("div", this.conFriendList);
            
        alib.dom.styleSet(divFriendRow, "marginTop", "10px");
        divFriendRow.setAttribute("id", "divFriend_" + friendId);        
        var divFriendImage = alib.dom.createElement("div", divFriendRow);        
        alib.dom.styleSet(divFriendImage, "width", "45px");
        alib.dom.styleSet(divFriendImage, "marginRight", "5px");
        alib.dom.styleSet(divFriendImage, "float", "left");
        divFriendImage.innerHTML = "&nbsp;";
        
        var imgFriendImage = alib.dom.createElement("img", divFriendImage);        
        imgFriendImage.setAttribute("id", "imgFriend_" + friendId);
        alib.dom.styleSet(imgFriendImage, "width", "40px");
        imgFriendImage.setAttribute("src", friendImage);                
        
        var divFriendNameStatus = alib.dom.createElement("div", divFriendRow);
        alib.dom.styleSet(divFriendNameStatus, "width", "135px");
        alib.dom.styleSet(divFriendNameStatus, "float", "left");
        
        var divFriendServer = alib.dom.createElement("div", divFriendNameStatus);
        divFriendServer.setAttribute("id", "friendServer_" + friendId);
        alib.dom.styleSet(divFriendServer, "display", "none");
        divFriendServer.innerHTML = friendServer;
        
        var divFriendName = alib.dom.createElement("div", divFriendNameStatus);
        divFriendName.setAttribute("id", "friendName_" + friendId);
        divFriendName.setAttribute("title", friendName);
        
        var aFriendName = alib.dom.createElement("a", divFriendName);
        alib.dom.styleSet(aFriendName, "cursor", "pointer");
        aFriendName.innerHTML = friendFullName;
        aFriendName.m_cls = this;        
        aFriendName.m_friend = friend;
        aFriendName.onclick = function()
        {            
            var friendName = this.m_friend.friend_name;
            var friendChatClient = document.getElementById('chatClient_'+friendName);
            var friendClientPopup = document.getElementById('divChatInfo_'+friendName);
            
            if(this.m_cls.chatPopup)
            {
                this.m_cls.chatFriendPopup(this.m_friend);
            }
            else if(friendClientPopup)
            {                
            }
            else if(this.m_cls.antView)
            {                
                this.m_cls.chatFriendView(this.m_friend);
			}
            else
            {
                if(friendChatClient)
                    alib.dom.styleSet(friendChatClient, "display", "block");
                else
                    this.m_cls.chatFriend(this.m_friend, true);
            }            
        }
                        
        var divFriendStatusText = alib.dom.createElement("div", divFriendNameStatus);
        divFriendStatusText.setAttribute("id", "divRowFriendStatusText_" + friendId)
        divFriendStatusText.innerHTML = "";
        divFriendStatusText.appendChild(statusCon);
        
        var divFriendStatus = alib.dom.createElement("div", divFriendRow);
        alib.dom.styleSet(divFriendStatus, "float", "left");
        divFriendStatus.setAttribute("id", "divRowFriendStatus_" + friendId)
        divFriendStatus.innerHTML = (friendOnline == 1) ? this.icon_online : this.icon_offline;
        
        if(friendTeamId!=this.teamId || this.teamId==0)
        {
            var divFriendDelete = alib.dom.createElement("div", divFriendRow);
            alib.dom.styleSet(divFriendDelete, "float", "left");
            
            var imgFriendDelete = alib.dom.createElement("img", divFriendDelete);
            alib.dom.styleSet(imgFriendDelete, "cursor", "pointer");
            alib.dom.styleSet(imgFriendDelete, "marginTop", "2px");
            imgFriendDelete.setAttribute("src", "/images/themes/softblue/icons/deleteTask.gif");
            imgFriendDelete.m_friendRow = divFriendRow;
            imgFriendDelete.m_friendId = friendId;
            imgFriendDelete.m_cls = this;
            imgFriendDelete.onclick = function()
            {
                this.m_cls.removeFriend(this.m_friendId, this.m_friendRow);
            }
        }
        
        this.divClear(divFriendRow);        
    }    
}

/** 
* Builds the friends status
*/
AntChatMessenger.prototype.buildFriendStatus = function(friend)
{
    var friendId = friend.id;    
    var friendName = friend.friend_name;
    var statusText = friend.statusText;
    var inviteStatus = friend.inviteStatus;
    
    // Setup Status
    var statusCon = alib.dom.createElement("div");
    alib.dom.styleSet(statusCon, "width", "160px"); 
    
    var cancelLink = alib.dom.setElementAttr(alib.dom.createElement("a"), [["innerHTML", "[Cancel]"]]);
    alib.dom.styleSet(cancelLink, "cursor", "pointer"); 
    alib.dom.styleSet(cancelLink, "color", "#0000FF"); 
    
    var approveLink = alib.dom.setElementAttr(alib.dom.createElement("a"), [["innerHTML", "[Accept]"]]);
    alib.dom.styleSet(approveLink, "cursor", "pointer"); 
    alib.dom.styleSet(approveLink, "color", "#0000FF"); 
    
    var spacer = alib.dom.setElementAttr(alib.dom.createElement("span"), [["innerHTML", " | "]]);
    
    // Link Actions
    cancelLink.cls = this;
    cancelLink.friendId = friendId;
    cancelLink.friendName = friendName;
    cancelLink.onclick = function()
    {
        this.cls.processStatus(this.friendId, this.friendName, 0);
    }
    
    approveLink.cls = this;
    approveLink.friendId = friendId;
    approveLink.friendName = friendName;
    approveLink.statusCon = statusCon;
    approveLink.onclick = function()
    {
        this.cls.processStatus(this.friendId, this.friendName, 1, statusCon);
    }
    
    switch(inviteStatus)
    {
        case "1": // Pending Request
            statusCon.innerHTML = "Pending Request "
            statusCon.appendChild(cancelLink);
            break;
        case "2": // Friend Invite
            cancelLink.innerHTML = "[Decline]";
            statusCon.innerHTML = "Friend Invite "
            statusCon.appendChild(approveLink);
            statusCon.appendChild(spacer);
            statusCon.appendChild(cancelLink);
            break;
        default:
            statusCon.innerHTML = statusText;
            break;
    }
    
    return statusCon;
}
    
/** 
* get the friend usernames of the user that sent new messages
* Status:   0 = Cancel; 1 = Approve
*/
AntChatMessenger.prototype.processStatus = function(friendId, friendName, status, statusCon)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.friendId = friendId;
    ajax.cbData.status = status;
    ajax.cbData.statusCon = statusCon;
    ajax.onload = function(ret)
    {
        if(this.cbData.status == 0)
        {
            var friendCon = document.getElementById("divFriend_" + this.cbData.friendId);            
            friendCon.parentNode.removeChild(friendCon);
        }
        else
        {
            this.cbData.statusCon.innerHTML = "Friend successfully added.";
            this.cbData.cls.updateFriends();
        }
    };
    var args = new Array();
    args[args.length] = ['friendName', friendName];
    args[args.length] = ['status', status];
    ajax.exec("/controller/Chat/processStatus", args);
}
    
/** 
* get the friend usernames of the user that sent new messages
*/
AntChatMessenger.prototype.getNewMessages = function()
{
	/**
	 * joe: I updated the listener to use the new Ant.UpdateStream which 
	 * provides a long poll for near real-time updates without a billion requests.
	 */
	Ant.getUpdateStream().listen("chat", function(evt) {
		if (evt.data.friendName)
		{
			var friendName = evt.data.friendName;
			var friendServer = "";

			// Send notification
			var now = new Date();
			if ((alib.dom.windowVisible == false || alib.dom.userActive == false) && evt.data.messenger.lastSoundPlayed < (now.getTime()-1000))
			{
				evt.data.messenger.audio.play();
				evt.data.messenger.lastSoundPlayed = now;
			}

			var friendInfo = evt.data.messenger.g_friendList[friendName];
			var friendChatClient = document.getElementById('chatClient_'+friendName);
			var friendClientPopup = document.getElementById('divChatInfo_'+friendName);
			
			if(friendClientPopup)
			{
			}
			else if(friendChatClient)
			{                
				evt.data.messenger.popup.setVisible(true);
			}            
			else if (friendInfo && evt.data.messenger.popup != null)
			{
				evt.data.messenger.popup.setVisible(true);
				evt.data.messenger.chatFriend(friendInfo, false);
			}
			
			evt.data.messenger.updateNewMessage(friendName, friendServer);
		}
	}, {messenger:this});


	/**
	 * This is the old poll system that pinged the server every couple seconds
	 *
    var ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        this.cls.newMessageTimer();
        
        if(!ret)
            return;
        
        if(ret)
        {
            // Get the friend usernames
            for(friend in ret)
            {
                var currentFriend = ret[friend];
                var friendName = currentFriend.friendName;
                var friendServer = currentFriend.friendServer;

                if(currentFriend.isNewMessage == 0)
                    continue;

				// Send notification
				var now = new Date();
				if ((alib.dom.windowVisible == false || alib.dom.userActive == false) && this.cls.lastSoundPlayed < (now.getTime()-1000))
				{
					this.cls.audio.play();
					this.cls.lastSoundPlayed = now;
				}

                var friendInfo = this.cls.g_friendList[friendName];
                var friendChatClient = document.getElementById('chatClient_'+friendName);
                var friendClientPopup = document.getElementById('divChatInfo_'+friendName);
                
                if(friendClientPopup)
                {
                }
                else if(friendChatClient)
                {                
					this.cls.popup.setVisible(true);
                }            
                else
                {
                    if(friendInfo)
                    {
						this.cls.popup.setVisible(true);
                        this.cls.chatFriend(friendInfo, false);
                    }                    
                }
                
                this.cls.updateNewMessage(friendName, friendServer);
            }
        }
    };
    var args = [["calledFrom", "antChatMessenger"]];    
    ajax.exec("/controller/Chat/getChatSession", args);
	*/
}

/**
* updates the new message session
*/ 
AntChatMessenger.prototype.updateNewMessage = function(friendName, friendServer)
{
	// Update is still running
	if (this.ajaxClear)
		return;
	
    this.ajaxClear = new CAjax('json');
	this.ajaxClear.cbData.cls = this;
	this.ajaxClear.onload = function() { this.cbData.cls.ajaxClear = null }

    var args = [["type", "isNewMessage"], ["value", 0], ["friendName", friendName], ["friendServer", friendServer]];
    this.ajaxClear.exec("/controller/Chat/clearChatSession", args);
}

/** 
 * Builds the chat client. 
 */
AntChatMessenger.prototype.chatFriend = function(friend, chatFocus)
{    
    var friendName = friend.friend_name;
    var friendServer = friend.friendServer;
    var friendFullName = friend.fullName;
    var friendImage = friend.image;    

    var divChatFriend = alib.dom.createElement("div", this.chatsCon);
    divChatFriend.setAttribute("id", "chatClient_"+friendName);
    alib.dom.styleSet(divChatFriend, "float", this.chatFloatType);
    alib.dom.styleSet(divChatFriend, "width", "275px");
    alib.dom.styleSet(divChatFriend, "margin" + this.chatFloatType.capitalize(), "2px");
    
    var chatClient = new AntChatClient();
    chatClient.chatFriendName = friendName;
    chatClient.chatFriendFullName = friendFullName;
    chatClient.chatFriendServer = friendServer;
    chatClient.chatFriendImage = friendImage;    
    chatClient.chatFocus = chatFocus;
    chatClient.print(divChatFriend);    
	this.clientSessions[friendName] = chatClient;
}

/** 
* Builds the chat client in new popup window
*/
AntChatMessenger.prototype.chatFriendPopup = function(friend)
{    
    var chatFriendName = friend.friend_name;
    var chatFriendServer = friend.friendServer;
    var chatFriendFullName = friend.fullName;
    var chatFriendImage = friend.image;
    
    // sets div chat info id
    var chatDivInfoId = "divChatInfo_" + chatFriendName;
    var divChatInfo = document.getElementById(chatDivInfoId);
    
    // removes the existing div
    if(divChatInfo)
        document.body.removeChild(divChatInfo);
    
    // create div inside body element to hold the chat friend info
    var divInfo = alib.dom.createElement("div");    
    divInfo.setAttribute("id", chatDivInfoId);
    alib.dom.styleSet(divInfo, "display", "none");
    
    // dynamic form sent to new window
    var form = alib.dom.createElement("form", divInfo);
    form.setAttribute("method", "post");        

    form.setAttribute("target", "formChatInfo_"+chatFriendName);
    
    // form inputs for chat friend info
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendName");
    hiddenField.setAttribute("value", chatFriendName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendFullName");
    hiddenField.setAttribute("value", chatFriendFullName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendServer");
    hiddenField.setAttribute("value", chatFriendServer);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendImage");
    hiddenField.setAttribute("value", chatFriendImage);
    
    // open new window if messenger in popup window
    if(this.chatPopup)
    {        
        document.body.appendChild(divInfo);
        
        var url = "/chatloader/client";
        form.setAttribute("action", url);
                
        var params = 'width=285,height=360,toolbar=no,menubar=no,scrollbars=no,location=no,directories=no,status=no,resizable=yes';    

        window.open(url, "popupClient", params);
        form.submit();
    }
}

/** 
 * Load a chat client into an antView
 */
AntChatMessenger.prototype.chatFriendView = function(friend)
{    
    var friendName = friend.friend_name;
    var friendServer = friend.friendServer;
    var friendFullName = friend.fullName;
    var friendImage = friend.image;    

	var chatView = this.antView.getView(friendName);
	if (!chatView)
	{
		chatView = this.antView.addView(friendName, {cls:this});
		chatView.render = function() {
			var chatClient = new AntChatClient();
			chatClient.chatFriendName = friendName;
			chatClient.chatFriendFullName = friendFullName;
			chatClient.chatFriendServer = friendServer;
			chatClient.chatFriendImage = friendImage;
			chatClient.antView = this;
			chatClient.print(this.con);    
	
			this.options.cls.clientSessions[friendName] = chatClient;
		}
	}

	// Load the view
	this.antView.navigate(friendName);
}

/** 
* saves the user status (online or not)
*/
AntChatMessenger.prototype.setStatus = function(isOnline)
{
    var args = [["type", "isOnline"], ["value", isOnline], ["friendName", "[all]"]];    
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Chat/saveChatSession", args);
}


/** 
* Get number of chat friends that are currently online
*/
/*AntChatMessenger.prototype.checkFriendsOnline = function(count)
{
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if(ret)
        {
            // Get all friends
            var spanFriendOnline = document.getElementById('chatFriendOnline');
            
            // reload friend list
            if(this.cls.friendLoaded && this.cls.onlineCount !== ret.onlineCount)
            {
                this.cls.updateFriends();            
            }
            
            this.cls.onlineCount = ret.onlineCount;
            
            if(spanFriendOnline)
                spanFriendOnline.innerHTML = ret.onlineCount;
                
            this.cls.friendOnlineTimer();
        }
    };
    ajax.exec("/controller/Chat/countFriendOnline");
}*/

/** 
* Removes a friend in the chat list
*/
AntChatMessenger.prototype.removeFriend = function(friendId, cell)
{
    if (confirm("Are you sure you want to permanantly remove this friend?"))
    {
        var args = [["friendId", friendId]];
        
        ajax = new CAjax('json');
        ajax.cell = cell;
        ajax.onload = function(ret)
        {
            if (ret.retVal != "-1")
            {
                this.cell.parentNode.removeChild(cell);
            }
        };
        ajax.exec("/controller/Chat/deleteFriend", args);
    }
}

/** 
* creates a new window for the popup chat messenger
*/
AntChatMessenger.prototype.popupMessenger = function()
{        
    var height = parseInt(this.chatHeight) + 90;
    var params = 'width=270,height='+height+',toolbar=no,menubar=no,scrollbars=no,location=no,directories=no,status=no,resizable=no';
    
    var url = "/chatloader/messenger";    
    window.open(url, "popupMessenger", params);
}

/** 
* creates a div element that will clear floats
*/
AntChatMessenger.prototype.divClear = function(parentDiv)
{
    var divClear = alib.dom.createElement("div", parentDiv);
    alib.dom.styleSet(divClear, "clear", "both");
}

/** 
* Checks the setTimeout functions if still in the loop
*/
AntChatMessenger.prototype.checkTimeout = function()
{
    if(this.g_chatTimer)
    {
        if(this.g_chatTimer["getNewMessages"]==null)
        {
            clearTimeout(this.g_chatTimer["getNewMessages"]);
            clearTimeout(this.g_chatTimer["updateFriends"]);
            this.updateFriendsTimer();
            this.newMessageTimer();
        }
        
        this.g_chatTimer["getNewMessages"] = null;
    }
    
    var functCls = this;
    var callback = function()
    {            
        functCls.checkTimeout();
    }
    
    clearTimeout(this.g_chatTimer["checkTimeout"]);    
    this.g_chatTimer["checkTimeout"] = window.setTimeout(callback, 60000);
}

/**
 * Timer for friends online
 *
 * @public
 * @this {AntChatMessenger} 
 */
/*AntChatMessenger.prototype.friendOnlineTimer = function()
{
    clearTimeout(this.g_chatTimer["checkFriendsOnline"]);
    if(alib.dom.userActive)
    {
        var functCls = this;
        var callback = function()
        {            
            functCls.checkFriendsOnline();
        }
        
        this.g_chatTimer["checkFriendsOnline"] = window.setTimeout(callback, 5000);
    }
    else
        this.g_chatTimer["checkFriendsOnline"] = null;
}*/

/**
 * Timer for update friends
 *
 * @public
 * @this {AntChatMessenger} 
 */
AntChatMessenger.prototype.updateFriendsTimer = function()
{
    var functCls = this;        
    var callback = function()
    {            
        functCls.updateFriends();
    }

    this.g_chatTimer["updateFriends"] = window.setTimeout(callback, 50000);
}

/**
 * Timer for new messages
 *
 * @public
 * @this {AntChatMessenger} 
 */
AntChatMessenger.prototype.newMessageTimer = function()
{
    var functCls = this;        
    var callback = function()
    {
        functCls.getNewMessages();            
    }
    
    this.g_chatTimer["getNewMessages"] = window.setTimeout(callback, 3000);
}

/**
* @fileOverview	Main chat client in ANT
*
* Usage
* var chatClient = new AntChatClient();
* chatClient.chatFriendName = friendName;
* chatClient.chatFriendServer = friendServer;
* chatClient.chatFriendImage = friendImage;
* chatClient.print(divContainer);
*
* @author: 	Marl Jay Tumulak, marl.tumulak@aereus.com; 
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*
*/

/**
 * Creates an instance of AntChatClient
 *
 * @constructor
 */
function AntChatClient()
{
	/**
	* div containers used to build chat client
	*/
    this.outerCon = null;
    this.mainCon = null;
    this.headerCon = null;
    this.bodyCon = null;    
    this.contPrevChat = null;    
    this.conChatConv = null;    
    this.conChatMessage = null;
    this.conChatNotification = null;
    this.conChatSound = null;
        
    this.userImage = "/images/icons/objects/user_48.png";
    this.chatSound = null;

	/**
	* @param {boolean} userIsTyping if user is typing or not    
	*/
    this.userIsTyping = false;
    

	/**
    * chat friend variables
	*/
    this.chatFriendName = null;
    this.chatFriendFullName = null;
    this.chatFriendServer = null;
    this.chatFriendImage = "/images/icons/objects/user_48.png";
	/**
	* @param {boolean} userIsTyping if friend is typing or not    
	*/
    this.chatFriendIsTyping = false;                // 
    this.chatFriendList = null;
        
	/**
	* @param {boolean} chatPopup determines if the client is inline or popup
	*/
    this.chatPopup = false;
    this.chatPopupClient = null;
    
	/**
    * variables used on setting id attribute of divs
	*/
    this.chatDivConId = null;
    this.chatDivInfoId = null;
    this.chatDivLastMessageId = null;    
    
	/**
    * variables used for message info
	*/
    this.chatLastMessage = null;                    // will hold the last message timestamp    
    this.chatLastMessageCount = 0;                  // a counter that will check when to display the last message timestamp
    this.chatLastMessageTs = 0;                     // will hold the last message timestamp and will be used to check if current message is new or not
    this.chatFirstMessageTs = 0;                   // will hold the first message timestamp and will passed to the new popup window
    this.chatCurrentDay = 0;
    
    this.chatClientHeight = "250";
    this.messageLimit = 10;
    
	/**
    * contains array of setTimeout functions
	*/
    this.g_chatClientTimer = new Array();
    this.g_timerCount = new Array();
    this.prevChatChecked = false;
    this.firstLoad = true;
    this.chatFocus = false;

	/**
	 * Flag to indicate if client is visible
	 *
	 * @type {bool}
	 */
	this.isVisible = false;

	/**
	 * Flag to indicate if client has been rendered or printed
	 *
	 * @type {bool}
	 */
	this.isRendered = false;

	/**
	 * Handle to xhr to get new messages
	 *
	 * Keep to redice overlapping requests
	 *
	 * @type {CAjax}
	 */
	this.ajaxGetMessages = false;

	/**
	 * If renderd inline then an antView will be provided
	 *
	 * @var {AntView}
	 */
	this.antView = null;
}

/**
 * Run application and build interface
 *
 * @param {object} con DOM element container for settings
 */
AntChatClient.prototype.print = function(con)
{    
    this.outerCon = con;
    this.mainCon = alib.dom.createElement("div", this.outerCon);
	alib.dom.styleSetClass(this.mainCon, "chatClient");
    
    this.conChatSound = alib.dom.createElement("div", this.mainCon);
    alib.dom.styleSet(this.conChatSound, "display", "none");
    
    this.bodyCon = alib.dom.createElement("div", this.mainCon);    
    
    if(!this.chatPopup && !this.antView)
    {
        this.buildHeader();
    }

    this.chatDivInfoId = "divChatInfo_" + this.chatFriendName;
    this.chatDivConId = "divChatCon_" + this.chatFriendName;
    
    this.conTopTools = alib.dom.createElement("div", this.bodyCon);

    this.conPrevChat = alib.dom.createElement("span", this.conTopTools);
    alib.dom.createElement("span", this.conTopTools, "&nbsp;");
    this.conClearChat = alib.dom.createElement("span", this.conTopTools);
	var clrHref = alib.dom.createElement("a", this.conClearChat, "Clear Messages");
	clrHref.href = "javascript: void(0);";
	clrHref.cls = this;
	clrHref.onclick = function() {
		this.cls.clearMessages();
	}
    
    this.conChatConv = alib.dom.createElement("div", this.bodyCon);
    this.conChatConv.setAttribute("id", this.chatDivConId);
    alib.dom.styleSet(this.conChatConv, "height", this.chatClientHeight + "px");
    alib.dom.styleSet(this.conChatConv, "overflow-y", "scroll");
    alib.dom.styleSet(this.conChatConv, "margin", "5px");
    this.conChatConv.innerHTML = "<div class='loading'></div>";
    
    this.conChatNotification = alib.dom.createElement("div", this.bodyCon);    
    alib.dom.styleSet(this.conChatNotification, "height", "15px");
    alib.dom.styleSet(this.conChatNotification, "marginLeft", "5px");
    
    this.conChatMessage = alib.dom.createElement("div", this.bodyCon);    
    alib.dom.styleSet(this.conChatMessage, "margin", "5px");
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {

        if (ret.retVal != "-1")
        {            
            this.cls.userImage = ret.userImage;
            this.cls.chatSound = ret.chatSound;
            this.cls.buildInterface();
        }
    };
    ajax.exec("/controller/Chat/getUserDetails");
}

/**
* Create or print interface
*/
AntChatClient.prototype.buildInterface = function()
{    
    this.getMessage();
    this.getIsTyping();
    this.saveIsTyping(0);
    //this.checkTimeout();
    
    var inputChatText = alib.dom.createElement("textarea", this.conChatMessage);    
    alib.dom.styleSet(inputChatText, "width", "97%");
    alib.dom.styleSet(inputChatText, "height", "50px");
    
    inputChatText.m_cls = this;
    
    inputChatText.onblur = function()
    {
        this.m_cls.chatFocus = false;
    }
    
    inputChatText.onfocus = function()
    {
        this.m_cls.chatFocus = true;
    }
    
    inputChatText.onclick = function()
    {
        this.m_cls.chatFocus = true;
    }
    
    inputChatText.onkeypress = function(evnt)
    {
        this.m_cls.chatFocus = true;
        evnt=evnt || window.event;
        
        this.m_cls.checkIsTyping(false);        
        if(evnt.shiftKey && evnt.keyCode==13)
        {            
            var lineBreak = document.createTextNode("line break");
            if(navigator.appName == 'Microsoft Internet Explorer')
                this.innerHTML = this.innerHTML + lineBreak.outerHTML;
            else
                this.appendChild(lineBreak);
            
            return;
        }
        
        switch (evnt.keyCode)
        {
            case 13: // Enter
                var message = this.value;                
                if((/\S/.test(message)))
                {
                    message = message.replace(/(\r\n|\r|\n)/g, "<br />");
                    this.m_cls.saveMessage(message);
                    this.value = '';
                    this.m_cls.saveIsTyping(0);
                }
                if(evnt.preventDefault)
                    evnt.preventDefault()
                else
                    evnt.returnValue = false;
                break;
        }
    }    

	// Begin last message timestamp check - if no messages for 5 seconds then print last message timestamp
	this.lastMessageCheck();

	// Assume visible when first rendered
	this.isVisible = true;
	this.isRendered = true;

	// Begin listening for messages
	this.messageTimer();
}

/**
* Build the header with title and buttons
*/
AntChatClient.prototype.buildHeader = function()
{
	/**
     * header container
	 */
    this.headerCon = alib.dom.createElement("div", this.bodyCon);
	alib.dom.styleSetClass(this.headerCon, "chatClientTitle");
	/*
    alib.dom.styleSet(this.headerCon, "backgroundColor", "#e5e5e5");
    alib.dom.styleSet(this.headerCon, "height", "15px");
    alib.dom.styleSet(this.headerCon, "padding", "5px");
    alib.dom.styleSet(this.headerCon, "borderBottom", "1px solid");
	*/
    
	/**
     * header title
	 */
    var divHeaderTitle = alib.dom.createElement("div", this.headerCon);
    alib.dom.styleSet(divHeaderTitle, "float", "left");
    alib.dom.styleSet(divHeaderTitle, "width", "150px");
    divHeaderTitle.innerHTML = this.chatFriendFullName ;
    
    var divHeaderIcons = alib.dom.createElement("div", this.headerCon);
    alib.dom.styleSet(divHeaderIcons, "float", "right");    
    
	/**
     * image - maximize
	 */
    var imgMaximize = alib.dom.createElement("img", divHeaderIcons);        
    alib.dom.styleSet(imgMaximize, "cursor", "pointer");
    imgMaximize.setAttribute("src", "/images/icons/new_window_16.png");                
    alib.dom.styleSet(imgMaximize, "marginRight", "2px");
    imgMaximize.m_cls = this;
    imgMaximize.onclick = function()
    {        
        this.m_cls.savePopupState(true);
        this.m_cls.popupChatClient();
        alib.dom.styleSet(this.m_cls.outerCon, "display", "none");
    }
    
	/**
     * image - close
	 */
    var imgClose = alib.dom.createElement("img", divHeaderIcons);
    alib.dom.styleSet(imgClose, "cursor", "pointer");
    imgClose.setAttribute("src", "/images/icons/close_16.png");
    imgClose.m_cls = this;
    imgClose.onclick = function()
    {        
        this.m_cls.closeWindow();
        this.m_cls.outerCon.parentNode.removeChild(this.m_cls.outerCon);
    }
        
    this.divClear(this.conFriendAdd);
}

/**
 * closes the window/client and clears all the timeout functions
 */
AntChatClient.prototype.closeWindow = function(message)
{
	// Clear all timeouts
    for(var x in this.g_chatClientTimer)
        clearTimeout(this.g_chatClientTimer[x]);
    
	this.isVisible = false;
	this.isRendered = false;
}

/**
* sends/saves message to the database
*/
AntChatClient.prototype.saveMessage = function(message)
{
    var args = [["message", message], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret.retVal != "-1")
        {
            this.cls.chatLastMessage = ret.timestamp;
            this.cls.chatDivLastMessageId = "divLastMessage_" + ret.messageTimestamp;
            ret.inline = true;
            
            var addDate = false;
            if(this.cls.chatCurrentDay > 0 && this.cls.chatCurrentDay !== ret.day)
                addDate = true;
            
            this.cls.chatCurrentDay = ret.day
            
            this.cls.buildChatInterface(ret, true, this.cls.conChatConv, addDate);
            
            /**
            * check if there's a popup client
            */
            if(this.cls.chatPopup)
            {
                var parentChatCon = window.opener.document.getElementById(this.cls.chatDivConId);
                
                if(parentChatCon)
                {
                    /**
                    * if browser is IE, use the function library (clientLib) - non-object literal notation
                    * these functions can be found at the bottom of the page
                    */
                    if(navigator.appName == 'Microsoft Internet Explorer')
                    {
                        var chatDetails = new Object();
                        chatDetails.userImage = this.cls.userImage;
                        chatDetails.chatFriendName = this.cls.chatFriendName;
                        window.opener.clientLib.buildChatInterface(ret, chatDetails, addDate);
                    }                        
                    else
                    {
                        ret.inline = false;
                        this.cls.buildChatInterface(ret, true, parentChatCon, addDate);
                    }
                }                    
            }
        }
    };
    ajax.exec("/controller/Chat/saveMessage", args);
}

/**
* get the count of previous message in chat server
*/
AntChatClient.prototype.getPrevChat = function()
{
    if(this.chatFirstMessageTs==0)                        
        return;
        
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if(ret.prevChatNum > 0)
        {
            this.cls.conPrevChat.innerHTML = "";
            var divPrevChat = alib.dom.createElement("element", this.cls.conPrevChat);
            alib.dom.styleSet(divPrevChat, "margin", "5px");
            
            var prevChatLink = alib.dom.createElement("a", divPrevChat);
            prevChatLink.setAttribute("href", "javascript: void(0);");
            prevChatLink.innerHTML = "Show Previous Message";
            prevChatLink.cls = this.cls;
            prevChatLink.onclick = function()
            {
                this.cls.conPrevChat.innerHTML = "";
                this.cls.conChatConv.innerHTML = "<div class='loading'></div>"
                this.cls.chatLastMessageTs = 0;
                this.cls.chatFirstMessageTs = 0;
                this.cls.firstLoad = true;
                this.cls.getMessage(0);
            }            
        }        
    };
    var args = [["chatFirstMessageTs", this.chatFirstMessageTs], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
    ajax.exec("/controller/Chat/getPrevChat", args);
    
    this.prevChatChecked = true;
}

/**
* get messages to the database
*/
AntChatClient.prototype.getMessage = function(limit)
{
	// Check if get is already running
	if (this.ajaxGetMessages == true)
	{
		return;
	}
	//this.ajaxGetMessages = true;


	/**
	 * set tsLastMessage to get new chat messages
	 */ 
    if(this.chatPopup && !this.g_chatClientTimer["getMessage"])
        var lastMessageTs = this.chatFirstMessageTs;
    else
        var lastMessageTs = this.chatLastMessageTs;
    
    var ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
		this.cls.ajaxGetMessages = false;
        
        if(this.cls.firstLoad)
        {            
            this.cls.conChatConv.innerHTML = "";
            this.cls.firstLoad = false;
        }            
        
        if(!ret)
            return;
        
        if (ret.retVal != "-1")
        {
            if(ret.retVal!=1)
            {                
                for (i = ret.length; i > 0; i--)
                {
                    var objMessage = ret[i-1];
                    
                    /**
                    * check if current message is new/latest 
                    */ 
                    if(objMessage.messageTimestamp > this.cls.chatLastMessageTs)
                    {
                        this.cls.buildChatSound();
                        
                        /**
                         * store the first/last message timestamp 
                         * this will be used by chat client only if in new popup window
                         */ 
                        if(this.cls.chatFirstMessageTs==0)
                        {
                            this.cls.chatFirstMessageTs = objMessage.messageTimestamp;                            
                        }                            

                        /**
                         * this will be used as chat last message sent
                         */ 
                        this.cls.chatLastMessage = objMessage.timestamp;                        
                        
                        /**
                         * this will be used to query new messages
                         */ 
                        this.cls.chatLastMessageTs = objMessage.messageTimestamp
                        this.cls.chatDivLastMessageId = "divLastMessage_" + objMessage.messageTimestamp;
                                                
                        var userChat = (objMessage.friend_message=="t") ? false:true;
                        objMessage.inline = true;
                        
                        var addDate = false;
                        if(this.cls.chatCurrentDay !== objMessage.day)
                            addDate = true;
                        
                        this.cls.chatCurrentDay = objMessage.day
                        
                        this.cls.buildChatInterface(objMessage, userChat, this.cls.conChatConv, addDate);
                    }
                }
            }
                
            if(!this.cls.prevChatChecked)
                this.cls.getPrevChat();
		
        }	
    };
    
    if(typeof limit == 'undefined')
        limit = this.messageLimit;
    
    var args = [["limit", limit], ["lastMessageTs", lastMessageTs], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
    ajax.exec("/controller/Chat/getMessage", args);

}


/**
 * Check to see if we have received a message in the last 6 seconds and print timestamp if not
 */ 
AntChatClient.prototype.lastMessageCheck = function()
{
	// Clear timeout
	if (this.g_chatClientTimer["lastMessageTimestamp"])
	{
		clearTimeout(this.g_chatClientTimer["lastMessageTimestamp"]);
		this.g_chatClientTimer["lastMessageTimestamp"] = null;
	}

    this.chatLastMessageCount++;
        
    if(this.chatLastMessageCount>=6 && this.chatLastMessage)
    {
        this.lastMessageNotification(this.conChatConv);
                            
		/**
         * check if there's a popup client        
		 */ 
        if(this.chatPopup)
        {        
            var parentChatCon = window.opener.document.getElementById(this.chatDivConId);        
            var parentChatLastMessage = window.opener.document.getElementById(this.chatDivLastMessageId);
            
            if(!parentChatLastMessage && parentChatCon)
            {                
				/**
                 * if browser is IE, use the function library (clientLib) - non-object literal notation
                 * these functions can be found at the bottom of the page                
				 */ 
                if(navigator.appName == 'Microsoft Internet Explorer')
                {                    
                    var notificationDetails = new Object();
                    notificationDetails.chatDivLastMessageId = this.chatDivLastMessageId;
                    notificationDetails.chatLastMessage = this.chatLastMessage;
                    notificationDetails.chatFriendName = this.chatFriendName;
                    
                    window.opener.clientLib.lastMessageNotification(notificationDetails);
                }                    
                else
                    this.lastMessageNotification(parentChatCon);
            }   
        }
        
        this.chatLastMessageCount = 0;
        this.chatLastMessage = null;
    }

        
	var functCls = this;
	var callback = function() {
		functCls.lastMessageCheck();
	}
	this.g_chatClientTimer["lastMessageTimestamp"] = window.setTimeout(callback, 5000);
}
    
/**
 * displays last message timestamp
 */ 
AntChatClient.prototype.lastMessageNotification = function(divChatCon)
{    
    if (typeof divChatCon == 'undefined')     
        return;
    
    var popupChatLastMessage = document.getElementById(this.chatDivLastMessageId);
    
    if(popupChatLastMessage)
        return;
    
	/**
	* add last message
	*/ 
    var divChatLastMessage = alib.dom.createElement("div", divChatCon);
    divChatLastMessage.setAttribute("id", this.chatDivLastMessageId);
    alib.dom.styleSet(divChatLastMessage, "textAlign", "center");
    alib.dom.styleSet(divChatLastMessage, "width", "200px");
    alib.dom.styleSet(divChatLastMessage, "marginBottom", "10px");
    alib.dom.styleSet(divChatLastMessage, "padding", "5px");
    alib.dom.styleSet(divChatLastMessage, "fontStyle", "italic");
    
    divChatLastMessage.innerHTML = this.chatLastMessage;
    divChatCon.scrollTop = divChatCon.scrollHeight;
}
    
/**
* builds and styles the chat interface
*/ 
AntChatClient.prototype.buildChatInterface = function(objMessage, userChat, divChatCon, addDate)
{
    if (typeof divChatCon == 'undefined')     
        return;
    
    if(userChat)
    {
        var divChatAlign = "left";
        var divImageAlign = "right";
        var chatImage = this.userImage;
        var chatMarginRight = "0px";
        var imageMarginLeft = "5px";
        var imageMarginRight = "5px";
        var divChatEntryId = "myMessage_" + objMessage.messageTimestamp;
    }
    else
    {
        var divChatAlign = "right";
        var divImageAlign = "left";
        var chatImage = this.chatFriendImage;
        var chatMarginRight = "5px";
        var imageMarginLeft = "0px";
        var imageMarginRight = "0px";
        var divChatEntryId = "friendMessage_" + objMessage.messageTimestamp;
    }
    
    
    if(objMessage.inline)
        var divChatEntry = document.getElementById(divChatEntryId)
    else
        var divChatEntry = window.opener.document.getElementById(divChatEntryId)

    if(!divChatEntry)
    {
        if(addDate)
        {
            var divDateId = "dateId_" + objMessage.currentTimestamp;
            var divDate = document.getElementById(divChatEntryId);
            
            if(!divDate)
            {
                divDate = alib.dom.createElement("div", divChatCon);
                divDate.id = divDateId;
                alib.dom.styleSet(divDate, "margin", "10px 0");
                alib.dom.styleSet(divDate, "padding", "5px 0");
                alib.dom.styleSet(divDate, "borderTop", "solid 1px");
                alib.dom.styleSet(divDate, "borderBottom", "solid 1px");
                alib.dom.styleSet(divDate, "fontWeight", "bold");
                divDate.innerHTML = objMessage.date
            }
        }
        
        var divChatEntry = alib.dom.createElement("div", divChatCon);
        
        divChatEntry.setAttribute("id", divChatEntryId);
        alib.dom.styleSet(divChatEntry, "width", "240px");    
        alib.dom.styleSet(divChatEntry, "marginBottom", "10px");
        
        var divChatMessage = alib.dom.createElement("div", divChatEntry);
		alib.dom.styleSetClass(divChatMessage, "chatClientMessage")
        alib.dom.styleSet(divChatMessage, "float", divChatAlign);
        alib.dom.styleSet(divChatMessage, "marginRight", chatMarginRight);
                       
        divChatMessage.innerHTML = this.processMessage(objMessage.message);
        
        var divChatImage = alib.dom.createElement("div", divChatEntry);
        alib.dom.styleSet(divChatImage, "float", divImageAlign);
        alib.dom.styleSet(divChatImage, "width", "40px");
        alib.dom.styleSet(divChatImage, "marginLeft", imageMarginLeft);
        alib.dom.styleSet(divChatImage, "marginRight", imageMarginRight);
        
        var imgChatImage = alib.dom.createElement("img", divChatImage);                
        alib.dom.styleSet(imgChatImage, "width", "40px");
        imgChatImage.setAttribute("src", chatImage);
        imgChatImage.setAttribute("title", objMessage.timestamp);
            
        divChatCon.scrollTop = divChatCon.scrollHeight;
            
        this.divClear(divChatEntry);
        
        this.conChatNotification.innerHTML = "";
        this.chatLastMessageCount = 0;
        
        var friendClientPopup = document.getElementById(this.chatDivInfoId);
        if(!this.chatPopup && !friendClientPopup)
        {        
            alib.dom.styleSet(this.outerCon, "display", "block");
            alib.dom.styleSet(this.outerCon.parentNode, "opacity", "100");
            alib.dom.styleSet(this.outerCon.parentNode, "visibility", "visible");
        }
    }
}


/**
* checks and sets the isTyping state
*/ 
AntChatClient.prototype.checkIsTyping = function(fromCallback)
{
    if(fromCallback)
    {
        this.userIsTyping = false;
        this.saveIsTyping(0);
        clearTimeout(this.g_typingTimer);
    }
    else if(!this.userIsTyping)
    {
        this.userIsTyping = true;
        this.saveIsTyping(1);
        
		/**
		* set timer check for isTyping state
		*/ 
        var functCls = this;            
        var callback = function()
        {
            functCls.checkIsTyping(true);
        }
        clearTimeout(this.g_chatClientTimer["checkIsTyping"]);
        
        if(this.isVisible)
            this.g_chatClientTimer["checkIsTyping"] = window.setTimeout(callback, 15000);
    }    
}

/**
* saves the isTyping state
*/ 
AntChatClient.prototype.saveIsTyping = function(isTyping)
{
    ajax = new CAjax('json');
    
    var args = [["type", "isTyping"], ["value", isTyping], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
    ajax.exec("/controller/Chat/saveChatSession", args);
    
    /*if(isTyping)
    {
        var args = [["type", "isTyping"], ["value", 1], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
        ajax.exec("/controller/Chat/saveChatSession", args);
    }
    else
    {
        var args = [["type", "isTyping"], ["value", 0], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];
        ajax.exec("/controller/Chat/clearChatSession", args);
    }*/
}

/**
* gets the isTyping state
* @returns {boolean}
*/ 
AntChatClient.prototype.getIsTyping = function()
{
	// If chat is not visible then don't make this request
	if (!this.isVisible)
	{
		var cls = this;
        this.g_chatClientTimer["getIsTyping"] = window.setTimeout(function() { cls.getIsTyping(); }, 3000);
		return;
	}

    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        clearTimeout(this.cls.g_chatClientTimer["getIsTyping"]);
        
        var functCls = this.cls;
        var callback = function()
        {
            functCls.getIsTyping();
        }
        
        if(this.cls.isVisible)
            this.cls.g_chatClientTimer["getIsTyping"] = window.setTimeout(callback, 3000);
            
        if(!ret)
            return;
            
        if(ret.isTyping==1)
            this.cls.conChatNotification.innerHTML = this.cls.chatFriendName + " is typing...";
        else
            this.cls.conChatNotification.innerHTML = "";
        
    };
    var args = [["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer], ["calledFrom", "antChatClient"]];    
    ajax.exec("/controller/Chat/getChatSession", args);
}

/**
* creates a new window for the popup chat client
*/   
AntChatClient.prototype.popupChatClient = function()
{
    if(this.chatPopup)
    {        
        var divChatInfo = window.opener.document.getElementById(this.chatDivInfoId);
        
		/**
        * check if chat friend info already created
        * if true delete the existing
		*/   
        if(divChatInfo)
            window.opener.document.body.removeChild(divChatInfo);

		/**
        * create a div chat friend info        
		*/   
        var divInfo = alib.dom.createElement("div", window.opener.document.body);        
    }
    else
    {
        var divChatInfo = document.getElementById(this.chatDivInfoId);
        
		/**
        * removes the existing div info
		*/   
        if(divChatInfo)
            document.body.removeChild(divChatInfo);
            
		/**
        * creates the div info and input form
		*/   
        var divInfo = alib.dom.createElement("div", document.body);
    }    
        
    divInfo.setAttribute("id", this.chatDivInfoId);
    alib.dom.styleSet(divInfo, "display", "none");
    
	/**
    * dynamic form sent to new window    
	*/   
    var form = alib.dom.createElement("form", divInfo);
    form.setAttribute("method", "post");        

    var popupClientName = "popupClient_"+this.chatFriendName;
    form.setAttribute("target", "popupClient");
    
	/**
    * form inputs for chat friend info
	*/   
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendName");
    hiddenField.setAttribute("value", this.chatFriendName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendFullName");
    hiddenField.setAttribute("value", this.chatFriendFullName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendServer");
    hiddenField.setAttribute("value", this.chatFriendServer);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendImage");
    hiddenField.setAttribute("value", this.chatFriendImage);
    
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFirstMessageTs");
    hiddenField.setAttribute("value", this.chatFirstMessageTs);
    
	/**
    * do not open new window if client already in popup window
	*/   
    if(!this.chatPopup)    
    {
        var url = "/chatloader/client";
        form.setAttribute("action", url);

        var height = parseInt(this.chatClientHeight) + 110;
        var params = 'width=285,height='+height+',toolbar=no,menubar=no,scrollbars=no,location=no,directories=no,status=no,resizable=yes';    

        this.chatPopupClient = window.open(url, "popupClient", params);     
        form.submit();
    }
}

/**
* saves the popup state to the database
*/   
AntChatClient.prototype.savePopupState = function(chatPopup)
{
    ajax = new CAjax('json');    
    var args = [["type", "isPopup"], ["value", chatPopup], ["friendName", this.chatFriendName], ["friendServer", this.chatFriendServer]];    
    ajax.exec("/controller/Chat/saveChatSession", args);
}

/**
* creates a div element that will clear floats
*/   
AntChatClient.prototype.divClear = function(parentDiv)
{
    var divClear = alib.dom.createElement("div", parentDiv);
    alib.dom.styleSet(divClear, "clear", "both");
}

/**
* saves the popup state to the database
*/   
AntChatClient.prototype.buildDayDiv = function(divChatCon, divDate)
{
    var divDay = alib.dom.createElement("div", divChatCon);
    alib.dom.styleSet(divDay, "margin", "10px");
    divDay.innerHTML = divDate;
}

/**
* Builds sound for chat notification
*/   
AntChatClient.prototype.buildChatSound = function()
{
	/*
    if(this.chatFocus)
        return;
    

    this.conChatSound.innerHTML = "";
    var sound = alib.dom.createElement("embed", this.conChatSound);    
    sound.setAttribute("src", this.chatSound);
    sound.setAttribute("autostart", true);
    sound.setAttribute("width", 1);
    sound.setAttribute("height", 1);
    sound.setAttribute("enablejavascript", true);


	if (alib.dom.windowVisible == false || alib.dom.userActive == false)
	{
		/*
		 * This is pretty broken turn on logging to test
		//$('<audio id="chatAudio"><source src="notify.ogg" type="audio/ogg">
		/<source src="notify.mp3" type="audio/mpeg"><source src="notify.wav" type="audio/wav"></audio>').appendTo('body');
		* TODO /
	}
	*/
}

/** 
 * @depricated We now use UpdateStream to notify us of new chats
 *
 * Checks the setTimeout functions if still in the loop
 */
AntChatClient.prototype.checkTimeout = function()
{
    if(this.g_chatClientTimer)
    {
        if(this.g_chatClientTimer["getMessage"]==null)
        {
            clearTimeout(this.g_chatClientTimer["getMessage"]);
            this.messageTimer();
        }
        
        this.g_chatClientTimer["getMessage"] = null;
    }
    
    var functCls = this;
    var callback = function()
    {
        functCls.checkTimeout();
    }
    
    clearTimeout(this.g_chatClientTimer["checkTimeout"]);
    this.g_chatClientTimer["checkTimeout"] = window.setTimeout(callback, 60000);
}

/**
 * timer for getting new message
 *
 * @public
 * @this {AntChatClient} 
 */
AntChatClient.prototype.messageTimer = function()
{
	/**
	 * joe: I updated the listener to use the new Ant.UpdateStream which 
	 * provides a long poll for near real-time updates without a billion requests.
	 */
	Ant.getUpdateStream().listen("chat", function(evt) {
		if (evt.data.friendName && evt.data.friendName == evt.data.messenger.chatFriendName)
		{
			evt.data.messenger.getMessage();
		}
	}, {messenger:this});

	/*
    var functCls = this;
    var callback = function()
    {
        functCls.getMessage();
    }        
    
    if(!this.chatEndSession)
        this.g_chatClientTimer["getMessage"] = window.setTimeout(callback, 3000);
	*/
}

/**
 * Clear all current and past messages
 */
AntChatClient.prototype.clearMessages = function()
{
	var xhr = new alib.net.Xhr();
	xhr.send("/controller/Chat/removeOldMessage?friend_name=" + this.chatFriendName);
	this.conChatConv.innerHTML = "";
}

/**
 * Activate links and replace emoticons
 *
 * @param {string} message The text to process
 * @return {string} Processed message
 */ 
AntChatClient.prototype.processMessage = function(message)
{
	/**
	 * Emoticons
	 */
	var emoticons = [
		{ text: ":)", image: "smile.png" },
		{ text: ":-)", image: "smile.png" },
		{ text: ":D", image: "smile_big.png" },
		{ text: ":$", image: "blush.png" },
		{ text: ":*", image: "kiss.png" },
		{ text: ":(", image: "sad.png" },
		{ text: ";(", image: "cry.png" },
		{ text: ";)", image: "wink.png" },
		{ text: "<3", image: "heart.png" },
		{ text: "</3", image: "heartbreak.png" },
		{ text: ":O", image: "surprise.png" },
		{ text: ":o", image: "surprise.png" },
		{ text: ":P", image: "tongue.png" }
	];

	// Convert to regular expression
	for (var i in emoticons)
	{
		var escStr = emoticons[i].text.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
		message = message.replace(new RegExp(escStr, 'g'), "<img src='/images/icons/emoticons/" + emoticons[i].image + "' />");
	}

	// Handle links
	//var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
    //message = message.replace(exp,"<a href='$1' target='_blank'>$1</a>");

	//URLs starting with http://, https://, or ftp://
    var exp = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    message = message.replace(exp, '<a href="$1" target="_blank">$1</a>');

    //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
    exp = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    message = message.replace(exp, '$1<a href="http://$2" target="_blank">$2</a>');

    //Change email addresses to mailto:: links.
    exp = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
    message = message.replace(exp, '<a href="mailto:$1">$1</a>');

	return message;
}

var clientLib = {};
/**
* A non-object literal notation that will be called by 
* child (client popup window) to create a user chat message 
* in the parent window
*/   
clientLib.buildChatInterface = function(objMessage, chatDetails, addDate)
{
	/**
	* create variables from the argument object
	*/  
    var userImage = chatDetails.userImage;
    var chatFriendName = chatDetails.chatFriendName
    
    var divChatAlign = "left";
    var divImageAlign = "right";    
    var chatMarginRight = "0px";
    var imageMarginLeft = "5px";
    var imageMarginRight = "5px";    
    
    var divChatEntryId = "myMessage_" + objMessage.messageTimestamp;    
    var divChatEntry = document.getElementById(divChatEntryId)
    
    var chatDivConId = "divChatCon_" + chatFriendName;
    var divChatCon = document.getElementById(chatDivConId)
    
    if(!divChatEntry && divChatCon)
    {
        if(addDate)
        {
            var divDateId = "dateId_" + objMessage.currentTimestamp;
            var divDate = document.getElementById(divChatEntryId);
            
            if(!divDate)
            {
                divDate = alib.dom.createElement("div", divChatCon);
                divDate.id = divDateId;
                alib.dom.styleSet(divDate, "margin", "10px");
                divDate.innerHTML = objMessage.date
            }
        }
        
        var divChatEntry = alib.dom.createElement("div", divChatCon);
        
        divChatEntry.setAttribute("id", divChatEntryId);
        alib.dom.styleSet(divChatEntry, "width", "240px");    
        alib.dom.styleSet(divChatEntry, "marginBottom", "10px");
        
        var divChatMessage = alib.dom.createElement("div", divChatEntry);
		alib.dom.styleSetClass(divChatMessage, "chatClientMessage")
        alib.dom.styleSet(divChatMessage, "float", divChatAlign);
        alib.dom.styleSet(divChatMessage, "margin-right", chatMarginRight);
                       
        divChatMessage.innerHTML = objMessage.message;
        
        var divChatImage = alib.dom.createElement("div", divChatEntry);
        alib.dom.styleSet(divChatImage, "float", divImageAlign);
        alib.dom.styleSet(divChatImage, "width", "40px");
        alib.dom.styleSet(divChatImage, "marginLeft", imageMarginLeft);
        alib.dom.styleSet(divChatImage, "marginRight", imageMarginRight);
        
        var imgChatImage = alib.dom.createElement("img", divChatImage);                
        alib.dom.styleSet(imgChatImage, "width", "40px");
        imgChatImage.setAttribute("src", userImage);
        imgChatImage.setAttribute("title", objMessage.timestamp);
            
        divChatCon.scrollTop = divChatCon.scrollHeight;
        
        var divClear = alib.dom.createElement("div", divChatEntry);
        alib.dom.styleSet(divClear, "clear", "both");
    }
}

/**
* A non-object literal notation that will be called by 
* child (client popup window) to create the last message timestamp
*/  
clientLib.lastMessageNotification = function(notificationDetails)
{
	/**
	* create variables from the argument object
	*/  
    var chatDivLastMessageId = notificationDetails.chatDivLastMessageId;
    var chatLastMessage = notificationDetails.chatLastMessage;
    var chatFriendName = notificationDetails.chatFriendName;
    
    var popupChatLastMessage = document.getElementById(chatDivLastMessageId);
    
    if(popupChatLastMessage)
        return;
    
    var chatDivConId = "divChatCon_" + chatFriendName;
    var divChatCon = document.getElementById(chatDivConId)
    
	/**
    * add last message
	*/  
    var divChatLastMessage = alib.dom.createElement("div", divChatCon);
    divChatLastMessage.setAttribute("id", chatDivLastMessageId);
    alib.dom.styleSet(divChatLastMessage, "textAlign", "center");
    alib.dom.styleSet(divChatLastMessage, "width", "200px");
    alib.dom.styleSet(divChatLastMessage, "marginBottom", "10px");
    alib.dom.styleSet(divChatLastMessage, "padding", "5px");
    alib.dom.styleSet(divChatLastMessage, "fontStyle", "italic");
    
    divChatLastMessage.innerHTML = chatLastMessage;
    divChatCon.scrollTop = divChatCon.scrollHeight;    
}

/**
*A non-object literal notation that will be called by 
*child (client popup window) to recreate the div info of the friend.
*/  
clientLib.buildDivInfo = function(friend)
{
	/**
    * create variables from the argument object
	*/  

    var chatFriendName = friend.chatFriendName;
    var chatFriendServer = friend.chatFriendServer;
    var chatFriendFullName = friend.chatFriendFullName;
    var chatFriendImage = friend.chatFriendImage;
    
	/**
    * sets div chat info id
	*/  
    var chatDivInfoId = "divChatInfo_" + chatFriendName;
    var divChatInfo = document.getElementById(chatDivInfoId);
    
	/**
    * removes the existing div
	*/  
    if(divChatInfo)
        document.body.removeChild(divChatInfo);
    
	/**
    * creates and div info and input form
	*/  
    var divInfo = alib.dom.createElement("div", document.body);
        
    divInfo.setAttribute("id", chatDivInfoId);
    alib.dom.styleSet(divInfo, "display", "none");
    
	/**
    * dynamic form sent to new window    
	*/  
    var form = alib.dom.createElement("form", divInfo);
    form.setAttribute("method", "post");        

    var popupClientName = "popupClient_"+chatFriendName;
    form.setAttribute("target", "popupClient");
    
	/**
    * form inputs for chat friend info
	*/  
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendName");
    hiddenField.setAttribute("value", chatFriendName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendFullName");
    hiddenField.setAttribute("value", chatFriendFullName);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendServer");
    hiddenField.setAttribute("value", chatFriendServer);
        
    var hiddenField = alib.dom.createElement("input", form);
    hiddenField.setAttribute("name", "chatFriendImage");
    hiddenField.setAttribute("value", chatFriendImage);    
}

/**
 * @fileOverview HelpTour is used to give people an inline tour
 *
 * To use just add "data-tour='tour/item/id'" to any rendered element
 *
 * <example>
 * 	Ant.HelpTour(document.body);
 * </example>
 *
 * @author:	joe, sky.stebnicki@aereus.com; 
 * 			Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Create namespace
 */
Ant.HelpTour = {}

/**
 * Tour items queue
 *
 * We only display one item at a time through this queue
 *
 * @private
 * @type {Array}
 */
Ant.HelpTour.itemQueue_ = new Array();

/**
 * Keep track of which tours have alraedy been displayed so we don't load them twice
 *
 * @private
 * @type {Array}
 */
Ant.HelpTour.itemsDisplayed_ = new Array();

/**
 * Load a tour for any matching objects that are children of 'el'
 *
 * @public
 * @param {DOMElement} el The parent element to check (including all children elements) for data-tour attributes
 * @param {string} namespace If set, only load tours that begin with namespace
 */
Ant.HelpTour.loadTours = function(el, namespace)
{
	var tours = new Array();
	var namespace = namespace || false;

	alib.dom.query('[data-tour]', el).each(function() {

		var tourId = this.getAttribute("data-tour");

		if (namespace)
		{
			// skip if namespace does not match
			if (tourId.substring(0, namespace.length) != namespace)
				return; 
		}

		if (!Ant.HelpTour.isInQueue(tourId))
			tours.push(tourId);
	});

	// If we have any tours queued up then load them
	if (tours.length > 0)
		this.getTourItemsData(tours);
}

/**
 * Load a tour for any matching objects that are children of 'el'
 *
 * @private
 * @param {string[]} tours Array of tours by id to get data for
 */
Ant.HelpTour.getTourItemsData = function(tours)
{
	var xhr = new alib.net.Xhr();

	// Setup callback
	alib.events.listen(xhr, "load", function(evt) { 
		var tourItems = this.getResponse();

		// Add to the display queue
		for (var i in tourItems)
			Ant.HelpTour.itemQueue_.push(tourItems[i]);

		Ant.HelpTour.displayQueue();
	});

	// Timed out, try again in a few sconds
	alib.events.listen(xhr, "error", function(evt) { 
	}, {helpClass:this});


	var ret = xhr.send("/controller/Help/getTourItems", "POST", {tourIds:tours});
}

/**
 * Check if an item is in the queue already
 *
 * @private
 * @param {string} tourId The unique id of the tour itme
 * @return {bool} If item is already in queue in return true
 */
Ant.HelpTour.isInQueue = function(tourId)
{
	for (var i in this.itemQueue_)
	{
		if (this.itemQueue_[i].id == tourId)
			return true;
	}

	return false;
}

/**
 * Check if an item has already been displayed by id
 *
 * @private
 * @param {string} tourId The unique id of the tour itme
 * @return {bool} If item is already in queue in return true
 */
Ant.HelpTour.wasDisplayed = function(tourId)
{
	for (var i in this.itemsDisplayed_)
	{
		if (this.itemsDisplayed_[i] == tourId)
			return true;
	}

	return false;
}

/**
 * Go through queue item by item and display
 *
 * @public
 */
Ant.HelpTour.displayQueue = function()
{
	var item = this.itemQueue_.shift();

	if (item)
	{
		var displayed = false;
		
		if (!Ant.HelpTour.wasDisplayed(item.id))
			displayed = this.display(item);

		// If there was a problem with this item, move to the next
		if (!displayed)
			this.displayQueue();
		else
			this.itemsDisplayed_.push(item.id);
	}
}

/**
 * Display a tour item from the queue
 *
 * @private
 * @param {Object} tourItem Object returned from server with id and html properties
 * @return {bool} true if displayed, false if there was a problem
 */
Ant.HelpTour.display = function(tourItem)
{
	// Get element to attach tour item to
	var ele = alib.dom.query("[data-tour='" + tourItem.id + "']");

	if (ele)
	{
		// Get first match from query results
		ele = ele[0];

		// Get the type of tour - popup (default), inline, dialog
		var type = (ele.getAttribute("data-tour-type")) ? ele.getAttribute("data-tour-type") : "popup";

		switch (type)
		{
		case "inline":
			this.displayInline(tourItem);
			break;
		case "dialog":
			this.displayDialog(tourItem);
			break;
		case "popup":
		default:
			this.displayPopup(tourItem);
			break;
		}

		return true;
	}
	else
	{
		// Tour element was not found
		return false;
	}
}

/**
 * Display a tour item as a popup
 *
 * @private
 * @param {Object} tourItem Object returned from server with id and html properties
 * @return {bool} true if displayed, false if there was a problem
 */
Ant.HelpTour.displayPopup = function(tourItem)
{
	var info = alib.dom.createElement("div", document.body, tourItem.html);
	alib.dom.styleSetClass(info, "helpTourCon");
	alib.dom.styleAddClass(info, "popup");

	var popup = new alib.ui.Popup(info, {autoClose:false});

	// Add the dismiss button
	var buttonCon = alib.dom.createElement("div", info);
	alib.dom.styleSetClass(buttonCon, "helpTourConButtons");

    var btn = alib.ui.Button("Okay, got it!",  {
		className:"b1", popup:popup, tourId:tourItem.id,
		onclick:function() 
		{
			this.popup.setVisible(false);
			Ant.HelpTour.dismiss(this.tourId);
		}
	});                            
	btn.print(buttonCon);

	// Get element to attach tour item to
	var ele = alib.dom.query("[data-tour='" + tourItem.id + "']");

	if (ele)
	{
		// Get first match from query results
		ele = ele[0];

		// Attach popup to element
		popup.anchorToEl(ele, "down");

		// Show popup
		popup.setVisible();

		return true;
	}
	else
	{
		// Tour element was not found
		return false;
	}
}

/**
 * Display a tour item as a popup
 *
 * @private
 * @param {Object} tourItem Object returned from server with id and html properties
 * @return {bool} true if displayed, false if there was a problem
 */
Ant.HelpTour.displayInline = function(tourItem)
{
	// Get element to print tour content into
	var ele = alib.dom.query("[data-tour='" + tourItem.id + "']");

	if (ele)
	{
		// Get first match from query results
		ele = ele[0];
		alib.dom.styleSet(ele, "display", "none");

		ele.innerHTML = tourItem.html;
		alib.fx.slideDown(ele);

		// Add the dismiss button
		var buttonCon = alib.dom.createElement("div", ele);

		var lnk = alib.dom.createElement("a", buttonCon, "hide");
		lnk.href = "javascript:void(0);";
		lnk.ele = ele;
		lnk.tourId = tourItem.id;
		lnk.onclick = function() {
			//alib.dom.styleSet(this.ele, "display", "none");
			alib.fx.slideUp(this.ele);
			Ant.HelpTour.dismiss(this.tourId);
		}

		return true;
	}
	else
	{
		// Tour element was not found
		return false;
	}
}

/**
 * Display a tour item as a dialog
 *
 * @private
 * @param {Object} tourItem Object returned from server with id and html properties
 * @return {bool} true if displayed, false if there was a problem
 */
Ant.HelpTour.displayDialog = function(tourItem)
{
	var dlg = new CDialog("");

	var con = alib.dom.createElement("div");
	alib.dom.styleSetClass(con, "helpTourCon");
	alib.dom.styleAddClass(con, "dialog");
	con.innerHTML = tourItem.html;

	// Add the dismiss button
	var buttonCon = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(buttonCon, "helpTourConButtons");

	var chk = alib.dom.createElement("input");
	chk.type = "checkbox";
	chk.checked = true;

    var btn = alib.ui.Button("Okay, got it!",  {
		className:"b1", dlg:dlg, tourId:tourItem.id, noShowAgain:chk,
		onclick:function() 
		{
			this.dlg.hide();
			
			Ant.HelpTour.dismiss(this.tourId, this.noShowAgain.checked);
		}
	});                            
	btn.print(buttonCon);

	buttonCon.appendChild(chk);
	alib.dom.createElement("span", buttonCon, " Do not show me this again");

	dlg.customDialog(con, 500);

	// Get first match from query results
	return true;
}

/**
 * Dismiss a tour
 *
 * @public
 * @param {string} tourId The id of the tour to dismiss
 * @param {bool} noShowAgain Default to no longer showing this again, but leave option open
 */
Ant.HelpTour.dismiss = function(tourId, noShowAgain)
{
	// Go for the next item in the queue
	this.displayQueue();

	// Set items as seen so we don't show it again
	var nosh = (typeof noShowAgain != "undefined") ? noShowAgain : true;
	
	if (nosh)
	{
		var xhr = new alib.net.Xhr();
		var ret = xhr.send("/controller/Help/setTourItemDismissed", "POST", {tour_id:tourId});
	}
}

/**
 * @fileoverview This class is responsible for loading all objects for both viewing and editing
 *
 * AntObjectLoader is used to load all types of objets in ANT. This class should not be responsible
 * for printing any ui elements, but rather loading the appropriate forms for each object type.
 *
 * Below is an example:
 * <code>
 * 	var objLoader = new AntObjectLoader("customer");
 * 	objLoader.onclose = function() { // do something when the object is closed  }
 * 	objLoader.print(document.getElementById("body"));
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectLoader.
 *
 * @constructor
 * @param {string} obj_type The name of the object type to load
 * @param {number} oid The optional unique id of an object instance to load
 * @param {CAntObject} objInst Optional existing of the object
 */
function AntObjectLoader(obj_type, oid, objInst)
{
	/**
	 * Instance of CAntObject of type obj_type - loads object data if oid is defined
	 *
	 * @type {CAntObject}
	 * @public
	 */
	this.mainObject = new CAntObject(obj_type, oid);

	/**
	 * Unique object id
	 *
	 * This will be set to a number when saving a new object.
	 *
	 * @type {number}
	 * @public
	 */
    this.oid = oid;
    
    this.objType = obj_type;
    this.cloneObject = false;

	this.outerCon = null; // Outer container
	this.mainCon = null; // Inside outcon and holds the outer table
	this.titleCon = null; // Content table used for frame when printed inline
	this.toolbarCon = null; // Div that holds the toolbar if any
	this.noticeCon = null; // Usually hidden but sometimes used for inline notices and browsers (like duplicate dedection)
	this.formCon = null; // inner container where form will be printed
	this.tabs = null; // Can optionally be set by sub-loader, if set then resize will resize the tab rather than the formCon

	this.plugins = new Array();
	this.inline = false; // Can be used to exclude outer content table (usually used for preview)
	this.fEnableClose = true; // Set to false to disable "close" and "save and close"
	this.antView = null; // optional AntView reference
	this.isMobile = (typeof Ant != "undefined" && Ant.isMobile) ? true : false;    
	this.subLoader = null; // The subloader used to build the actual UI form
    
    // arguments for forms opened in new window
    this.newWindowArgs = null;
    
    // arguments for email
    this.emailArgs = new Array();
    
    this.subLoaderParams = new Object(); // Force the Object Loader to load a sub loader

    // Object for storing callback variables
    this.cbData = new Object();

	/**
	 * Additional toolbar entries from plugins
	 *
	 * @var {Object[]} Object with .label, icon, .cb (function)
	 */
	this.pluginToolbarEntries = new Array();

	/**
	 * Form scope
	 *
	 * @protected
	 * @type {string}
	 */
	this.formScope = (this.isMobile) ? "mobile" : "default";

	/**
	 * Hide the toolbar
	 *
	 * @public
	 * @type {bool}
	 */
	this.hideToolbar = false;
}

/**
 * Print the form onto con
 *
 * @this {AntObjectLoader}
 * @param {DOMElement} con The container to print this object loader into - usually a div
 * @param {bool} popup Set to true if we are operating in a new window popup. Hides "Open In New Window" link.
 * @param {string} scope Optionally override the automatic form scope like 'mobile' or 'infobox'
 * @public
 */
AntObjectLoader.prototype.print = function(con, popup, scope)
{
	// Override scope
	if (scope)
		this.formScope = scope;

	this.isPopup = (popup) ? true : false;
	this.outerCon = con;
	this.mainCon = alib.dom.createElement("div", con);
	this.mainCon.className = "objectLoader";

	// Print title
    this.titleCon = alib.dom.createElement("div", this.mainCon);
    if (!this.inline)
    {
        this.titleCon.className = "objectLoaderHeader";
		this.setTitle("Loading");
    }
	else
	{
		// Hide it for all inline usage
		alib.dom.styleSet(this.titleCon, "display", "none");
	}

	// Toolbar container
	this.toolbarCon = alib.dom.createElement("div", this.mainCon);
    if (this.hideToolbar)
		alib.dom.styleSet(this.toolbarCon, "display", "none");

	// Notice container
	this.noticeCon = alib.dom.createElement("div", this.mainCon);

	// Form container
    this.formCon = alib.dom.createElement("div", this.mainCon);
	this.formCon.className = "objectLoaderBody";
	this.formCon.innerHTML = " <div class='loading'></div>";
    
	if (this.oid)
	{
		this.mainObject.frmCls = this;
        this.mainObject.newWindowArgs = this.newWindowArgs;
		this.mainObject.onload = function()
		{
			this.frmCls.onObjectLoaded();
			this.frmCls.loadPlugins(); // this will call buildInterface when done
			this.frmCls.showNotices();
		}

		this.mainObject.load();
	}
	else
	{
        this.loadNewWindowValues();
        this.loadPlugins(); // this will call buildInterface when done
	}
}

/**
 * Print the form onto con in inline mode meaning no full height, toolbar, or header
 *
 * @this {AntObjectLoader}
 * @param {DOMElement} con The container to print this object loader into - usually a div
 * @param {bool} popup Set to true if we are operating in a new window popup. Hides "Open In New Window" link.
 * @param {string} scope Optionally override the automatic form scope like 'mobile' or 'infobox'
 * @public
 */
AntObjectLoader.prototype.printInline = function(con, popup, scope)
{
	this.inline = true;
	this.print(con, popup, scope);
}

/**
 * Resize the visual elements of this object loader
 *
 * @this {AntObjectLoader}
 * @public
 */
AntObjectLoader.prototype.resize = function()
{
	// Do not resize if we are inline
	if (this.inline || this.isMobile)
		return;


	// Default loader processing
	var height = getWorkspaceHeight();
	this.setHeight(height);

	if (this.subLoader)
	{
		if (this.subLoader.resize)
			this.subLoader.resize();
	}
}

/**
 * Set the height of this loader
 *
 * @this {AntObjectLoader}
 * @public
 * @param {integer} height The number pixels to set height to (max)
 */
AntObjectLoader.prototype.setHeight = function(height)
{
	// Check to see if subloader has overridden the setHeight function
	if (this.subLoader)
	{
		if (this.subLoader.setHeight)
			return this.subLoader.setHeight();
	}

	height -= alib.dom.getContentHeight(this.titleCon);
	height -= alib.dom.getContentHeight(this.toolbarCon);
	height -= alib.dom.getContentHeight(this.noticeCon);

	height -= 10; // Added for bug with CToolBar class adding 5 unaccounted for 5x

	if (this.tabs)
	{
		this.tabs.setHeight(height);
		alib.dom.styleSet(this.formCon, "height", "auto");
	}
	else
	{
		alib.dom.styleSet(this.formCon, "height", height + "px");
		alib.dom.styleSet(this.formCon, "overflow", "auto");
	}
}

/**
 * Set the header title
 *
 * @public
 * @this {AntObjectBrowser}
 * @param {string} title The title string
 */
AntObjectLoader.prototype.setTitle = function(title)
{
	this.titleCon.innerHTML = "";

	if (this.isPopup)
	{
		document.title = title;
	}
	else if (this.titleCon)
	{
		if (this.antView)
			this.setTitleParentPath();

		var ttl = alib.dom.createElement("div", this.titleCon, title);

		if (this.antView)
			this.antView.getTitle(ttl);
	}
}

/**
* Used to create application breadcrumbs
*/
AntObjectLoader.prototype.setTitleParentPath = function()
{
	// Create breadcrumbs container because it is cleared each time in setTitle
	var bcCon = alib.dom.createElement("div", this.titleCon);
	alib.dom.styleSetClass(bcCon, "breadCrumbs");

	var views = new Array();
	// Traverse backwards over parent views
	if (this.antView.getParentView())
	{
		var currentView = this.antView.getParentView();

		while (currentView)
		{
			views.push(currentView);
			currentView = currentView.getParentView();
		}
	}

	// Loop backwards skipping over the root/application view
	for (var i = (views.length - 2); i >= 0; i--)
	{
		var view = views[i];

		var lnk = alib.dom.createElement("a", bcCon);
		lnk.href = "#"+view.getPath();
		view.getTitle(lnk); // passing the element will bind it to be updated on title change

        var sp = alib.dom.createElement("span", bcCon);
        sp.innerHTML = " / ";
	}

	/*
    if (childView)
	{
    }

    var view = (childView) ? childView : this.antView;
	console.log(view.getPath());

	if (!remPath)
		remPath = view.getPath();


	// Now load active child views into title
    var nextViewName = remPath;
    var postFix = "";
    if (remPath.indexOf("/")!=-1)
  	{
        var parts = remPath.split("/");
        var nextViewName = parts[0];
        if (parts.length > 1)
        {
			// Skip of first which is current view
            for (var i = 1; i < parts.length; i++) 
                {
                if (postFix != "")
                    postFix += "/";
                postFix += parts[i];
            }
        }
    }
	*/
}

/**
 * Print subloader in collapsed mode. Only if subloader class has a method called printCollapsed.
 *
 * @this {AntObjectLoader}
 * @param {DOMElement} con The container to print this object loader into - usually a div
 * @param {bool} popup Set to true if we are operating in a new window popup. Hides "Open In New Window" link.
 * @param {Object} data Properties to forward to collapsed view
 * @public
 */
AntObjectLoader.prototype.printCollapsed = function(con, popup, data)
{    
	this.isPopup = (popup) ? true : false;

	var subLoader = this.getSubloader();

	if (subLoader.printCollapsed)
	{
		subLoader.printCollapsed(con, this.isPopup, data);
	}
}

/**
 * Get the subloader/form
 */
AntObjectLoader.prototype.getSubloader = function()
{
	if (this.subLoader)
		return this.subLoader;
        
	switch (this.mainObject.obj_type)
	{
	case 'email_message':
		this.subLoader = new AntObjectLoader_EmailMessage(this.mainObject, this);
        this.subLoader.emailArgs = this.emailArgs;
		break;
	case 'email_thread':
		this.subLoader = new AntObjectLoader_EmailThread(this.mainObject, this);
		break;
    //case 'user':
        //this.subLoader = new AntObjectLoader_User(this.mainObject, this);
        //break;
    case 'report':        
        this.subLoader = new AntObjectLoader_Report(this.mainObject, this);
        break;
    //case 'dashboard':        
        //this.subLoader = new AntObjectLoader_Dashboard(this.mainObject, this);
        //break;
    //case 'calendar':        
        //this.subLoader = new AntObjectLoader_Calendar(this.mainObject, this);
        //break;
	// Default is to use the UIML forms
	default:
		this.subLoader = new AntObjectLoader_Form(this.mainObject, this);
		break;
	}

	// TODO: This is a temporary hack until subloaders are moved to plugins
	if (this.inline && this.objType=="user")
		this.subLoader = new AntObjectLoader_Form(this.mainObject, this);
	
	this.subLoader.onNameChange = function(name)
	{
		if (this.loaderCls.antView)
			this.loaderCls.antView.setTitle(name);

		this.loaderCls.setTitle(name);
	}

	// Set value change callbacks with subloader
	this.mainObject.loaderCls = this;
	this.mainObject.onValueChange = function(name, value, valueName)
	{
		this.loaderCls.onValueChange(name, value);
		if (this.loaderCls.subLoader)
			this.loaderCls.subLoader.onValueChange(name, value);

		for (var i = 0; i < this.loaderCls.plugins.length; i++)
		{
			if (typeof this.loaderCls.plugins[i].onMainObjectValueChange != "undefined")
			{
				this.loaderCls.plugins[i].onMainObjectValueChange(name, value, valueName);
			}
		}
	}
    
    // Set the toggle edit for plugins
    this.mainObject.loaderCls = this;
    this.mainObject.onToggleEdit = function(setmode)
    {
        for (var i = 0; i < this.loaderCls.plugins.length; i++)
        {
            if (typeof this.loaderCls.plugins[i].onMainObjectToggleEdit != "undefined")
            {
                this.loaderCls.plugins[i].onMainObjectToggleEdit(setmode);
            }
        }
    }

	return this.subLoader;
}

/**
 * Display notices such as deleted status
 */
AntObjectLoader.prototype.showNotices = function()
{
	if (this.mainObject.getValue("f_deleted"))
	{
		var dv = alib.dom.createElement("div", this.noticeCon);
		alib.dom.styleSetClass(dv, "error");
		dv.innerHTML = "This "+this.mainObject.title+" has been deleted. ";

		var undelete = alib.dom.createElement("a", dv);
		undelete.href = 'javascript:void(0)';
		undelete.onclick = function() {}
		undelete.innerHTML = "[undelete]";
		undelete.oid= this.mainObject.id;
		undelete.cls = this;
		undelete.onclick = function()
		{
			this.cls.undeleteObject(this.oid, dv);
		}
	}
}

/**
 * Load available plugings for the object type
 *
 * @this {AntObjectLoader}
 * @private
 */
AntObjectLoader.prototype.loadPlugins = function()
{
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {
            try
            {                
                for (plugin in ret)
                {
                    var currentPlugin = ret[plugin];
                    this.cls.plugins[this.cls.plugins.length] = eval("("+unescape(currentPlugin)+")");                    
                }
            }
            catch(e)
            {
                alert("Error loading plugin: " + e + " - " + JSON.stringify(ret));
            }
        }
        //this.cls.buildInterface();            
		this.cls.loadForm();
    };
    ajax.exec("/controller/Object/getPlugins", 
                [["obj_type", this.mainObject.name]]);
}

/**
 * Preload the scopped form
 *
 * @this {AntObjectLoader}
 * @private
 */
AntObjectLoader.prototype.loadForm = function()
{
	AntObjectForms.loadForm(this.objType, {context:this, method:"buildInterface"}, null, this.formScope);
}

/**
 * Build interface for object
 *
 * @this {AntObjectLoader}
 * @private
 */
AntObjectLoader.prototype.buildInterface = function()
{
	/* We are now using views to handle title changes in this.setTitle
	if (this.antView)
	{
		if (this.antView)
			this.antView.getTitle(this.titleCon);
	}
	else
	{
		if (this.oid)
		{
			this.setTitle("Edit " + this.mainObject.title);
		}
		else
		{
			this.setTitle("New " + this.mainObject.title);
		}
	}
	*/

	if (this.oid)
	{
		this.setTitle("Edit " + this.mainObject.title);
	}
	else
	{
		this.setTitle("New " + this.mainObject.title);
	}

	var sl = this.getSubloader();
	this.formCon.innerHTML = "";
	sl.print(this.formCon, this.plugins);

	if(this.newWindowArgs)
    {
        sl.toggleEdit(this.newWindowArgs['editMode'][0]);        
    }        
    else
    {
        // if the object is being cloned, set the editmode to always true
        if(this.cloneObject)
        {
            sl.toggleEdit(true);
            this.setTitle("Copied " + this.mainObject.title);
        }
        else
            sl.toggleEdit((this.oid)?false:true);
    }
    
    this.subLoader = sl;

	this.resize();

	// Now that this has been rendered, mark as seen
	this.markSeen();
}

/**
 * Open this object in a new window
 *
 * @this {AntObjectLoader}
 * @public
 */
AntObjectLoader.prototype.openInNewWindow = function()
{
	var dv = alib.dom.createElement("div");
	alib.dom.styleSet(dv, "display", "none");
	
	// dynamic form sent to new window
	var form = alib.dom.createElement("form", dv);
	form.setAttribute("method", "post");        

	// setting form target to a window named 'ObjectWindow'
	form.setAttribute("target", this.mainObject.obj_type + this.oid);
	
	// browse all mainObject properties
	var fields = this.mainObject.getFields();        
	for (var i = 0; i < fields.length; i++)
	{
		var currField = fields[i];
		var objFieldType = currField.type;
		var objFieldName = currField.name;            
		var objFieldValue = this.mainObject.getValue(objFieldName);
		
        if(!objFieldName)
            continue;
        
		switch(objFieldType)
		{
			case "fkey":
			case "object":
				// input field for fkey text value
				objFieldValue = this.mainObject.getValueStr(objFieldName)
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName + "Fkey");
				hiddenField.setAttribute("value", objFieldValue);
				
				
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName + "FkeyType");
				hiddenField.setAttribute("value", objFieldType + "_reference");
				
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName);
				hiddenField.setAttribute("value", rawurlencode(objFieldValue));
				break;
			case "object_multi":
			case "fkey_multi":
				// if the type of input is multi, then we need to get the text values                        
				objFieldValue = this.mainObject.getMultiValues(objFieldName);
				var multiValueArr = objFieldValue.toString().split(",");                    
				var multiValue = "";
				for (var multiX = 0; multiX < multiValueArr.length; multiX++)
				{
					// loop thru optional_vals to get the text values
					for (var n = 0; n < currField.optional_vals.length; n++)
					{
						if (currField.optional_vals[n][0] == multiValueArr[multiX])
						{       
							if(multiValue.length)
								multiValue += ",";
								
							multiValue += currField.optional_vals[n][1];
							break;
						}
					}
				}
				
				// input field for multi text values
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName + "Multi");
				hiddenField.setAttribute("value", rawurlencode(multiValue));
				
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName + "MultiType");
				hiddenField.setAttribute("value", objFieldType + "_reference");
				
				// input field for multi value
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName);
				hiddenField.setAttribute("value", objFieldValue);
				
				break;
			default:
				var hiddenField = alib.dom.createElement("input", form);
				hiddenField.setAttribute("name", objFieldName);
				hiddenField.setAttribute("value", objFieldValue);
				break;
		}
		
		var hiddenField = alib.dom.createElement("input", form);
		hiddenField.setAttribute("name", objFieldName + "Type");
		hiddenField.setAttribute("value", objFieldType);
	}
	
	// set that the new window is clicked
	var hiddenField = alib.dom.createElement("input", form);
	hiddenField.setAttribute("name", "fromInlineForm");
	hiddenField.setAttribute("value", "true");
	
	var hiddenField = alib.dom.createElement("input", form);
	hiddenField.setAttribute("name", "fromInlineFormType");
	hiddenField.setAttribute("value", "bool");
	
	// set if whats the current state of the inline form
	var hiddenField = alib.dom.createElement("input", form);
	hiddenField.setAttribute("name", "editMode");
	hiddenField.setAttribute("value", this.subLoader.editMode);
	
	var hiddenField = alib.dom.createElement("input", form);
	hiddenField.setAttribute("name", "editModeType");
	hiddenField.setAttribute("value", "bool");

	if (this.oid)
		var url = "/obj/"+this.mainObject.name+"/"+this.oid;
	else         
		var url = "/obj/"+this.mainObject.name;
	
	form.setAttribute("action", url);
	document.body.appendChild(dv);
	
 	var params = 'width=1024,height=768,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
	window.open(url, this.mainObject.obj_type + this.oid, params); 
	
	form.submit();
}

/**
 * Add a toolbar entry for a plugin
 *
 * @public
 * @param {string} lbl              The text label to use
 * @param {function} cb             Callback function to be called when the toolbar button is clicked
 * @param {Object} cbdat Optional   data object to be passed as the first argument when button is clicked
 * @param {string} pos Optional     Will determine where to display the toolbar button - Default Value: last
 *                                  Possible Values: first, last
 */
AntObjectLoader.prototype.pluginAddToolbarEntry = function(lbl, cb, cbdat, pos)
{
	var cbdat = cbdat || {};
    
    if(typeof pos == "undefined")
        pos = "last";
    
	this.pluginToolbarEntries.push({label:lbl, callback:cb, cbData:cbdat, pos:pos});
}

/**
 * Save object being edited
 *
 * @public
 * @param {bool} close If set to true close after saving is finished
 * @param {string} recur_stype Optional recur save type to indicate all in series or only this object
 */
AntObjectLoader.prototype.saveObject = function(close, recur_stype)
{
	var close = (typeof close != "undefined") ? close : false;

	// "This [oname] only" and "This And All Future [oname]" and "Cancel" dialog if event is recurring
	if (this.mainObject.recurrencePattern != null && this.mainObject.recurrencePattern.id && !recur_stype)
	{
		var dlg = new CDialog("Save Recurring Series");

		var dv = alib.dom.createElement("div");

		var dv_lbl = alib.dom.createElement("div", dv);
		dv_lbl.innerHTML = "Would you like to save changes to this "+this.mainObject.title+" only or this and future "+this.mainObject.titlePl+"?";
		alib.dom.styleSet(dv_lbl, "padding-bottom", "5px");
		var dv_btn = alib.dom.createElement("div", dv);
		// This object only
		var btn = new CButton("This "+this.mainObject.title+" Only", 
								function(dlg, close, cls) {  dlg.hide(); cls.saveObject(close, "exception"); }, 
								[dlg, close, this], "b1");
		btn.print(dv_btn);
		// This and future
		var btn = new CButton("This &amp; Future "+this.mainObject.titlePl, 
								function(dlg, close, cls) {  dlg.hide(); cls.saveObject(close, "all"); }, 
								[dlg, close, this], "b2");
		btn.print(dv_btn);
		// Don't do anything
		var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg], "b3");
		btn.print(dv_btn);
		alib.dom.styleSet(alib.dom.createElement("div", dv), "clear", "both");

		dlg.customDialog(dv, 400, 50);

		return;
	}
	else if (recur_stype && this.mainObject.recurrencePattern)
		this.mainObject.recurrencePattern.save_type = recur_stype;

	// Fire before save event in plugins
	for (var i = 0; i < this.plugins.length; i++)
	{
		if (typeof this.plugins[i].beforesaved != "undefined")
			this.plugins[i].beforesaved();
	}
	
	// Check if a comment needs to be saved in a comments browser
	if (this.subLoader.objectBrowsers)
	{
		for (var i = 0; i < this.subLoader.objectBrowsers.length; i++)
		{
			if (this.subLoader.objectBrowsers[i].commentObj)
			{
				if (this.subLoader.objectBrowsers[i].commentObj.ta_comment.value)
				{
					var cobj = this.subLoader.objectBrowsers[i].commentObj;
					this.subLoader.objectBrowsers[i].saveComment(cobj.ta_comment.value, cobj.t, cobj.con);
				}
			}
		}
	}

	// Create loading div
	var dlg = new CDialog();
	var dv_load = alib.dom.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);
	this.plugin_saved_processed = 0; // Used to keep track of how many plugins have been processed

	this.mainObject.m_dlg = dlg;
	this.mainObject.m_close = close;
	this.mainObject.olCls = this;
	this.mainObject.onsave = function()
	{
		// Reload values - often times values will update on server save
		this.onload = function() { }
		this.load();

		if (this.olCls.plugins.length)
		{
			for (var i = 0; i < this.olCls.plugins.length; i++)
			{
				if (this.olCls.plugins[i].frmLoaded) // Only save changes for plugins that have been loaded in the form
				{
					this.olCls.plugins[i].statusDlg = this.m_dlg;
					this.olCls.plugins[i].frmClose = this.m_close;
					this.olCls.plugins[i].olCls = this.olCls;
					this.olCls.plugins[i].onsave = function()
					{
						this.olCls.pluginSaved(this.statusDlg, this.frmClose);
					}
					this.olCls.plugins[i].save();
				}
				else
				{
					this.olCls.pluginSaved(this.m_dlg, this.m_close);
				}
			}
		}
		else
		{
			this.olCls.saveDone(this.m_dlg, this.m_close);
		}
        this.olCls.oid = this.id;

		// If object was cloned then copy references and clear
		if (this.olCls.cloneObject)
		{
			var ajax = new CAjax("json");
			ajax.exec("controller/Object/cloneObjectReferences", [
					["obj_type", this.obj_type], ["oid", this.id], ["from_id", this.olCls.cloneObject]
			]);

			this.olCls.cloneObject = false; // Clone is done
		}
	}

	this.mainObject.onsaveError = function(msg)
	{
		this.m_dlg.hide();
		if (msg)
		{
			alert(msg);
			//ALib.statusShowAlert(msg, 3000, "middle", "center");
		}
		else
			ALib.statusShowAlert("ERROR SAVING CHANGES!", 3000, "bottom", "right");
	}
    
    // If this is a cloned object, reset the this.mainObject class
    if(this.cloneObject)
	{
        this.mainObject.id = null;
		this.mainObject.setValue("id", "");
	}
    
	this.mainObject.save();
    this.setTitle(this.mainObject.getValue("name"));
}

/**
 * Callback function called once the object has been saved
 *
 * @param {CDialog} dlg Passed if browser is in modular(dialog) mode
 * @param {bool} close If true then we can close this object window
 */
AntObjectLoader.prototype.pluginSaved = function(dlg, close)
{
	this.plugin_saved_processed++;
	if (this.plugin_saved_processed == this.plugins.length)
		this.saveDone(dlg, close);
}

/**
 * Initiate object deletion
 */
AntObjectLoader.prototype.deleteObject = function(recur_stype)
{
	// "This [oname] only" and "This And All Future [oname]" and "Cancel" dialog if event is recurring
	if (this.mainObject.recurrencePattern != null && this.mainObject.recurrencePattern.id && !recur_stype)
	{
		var dlg = new CDialog("Recurring Series");

		var dv = alib.dom.createElement("div");

		var dv_lbl = alib.dom.createElement("div", dv);
		dv_lbl.innerHTML = "Would you like to delete this "+this.mainObject.title+" only or this and future "+this.mainObject.titlePl+"?";
		alib.dom.styleSet(dv_lbl, "padding-bottom", "5px");
		var dv_btn = alib.dom.createElement("div", dv);
		// This object only
		var btn = new CButton("This "+this.mainObject.title+" Only", 
								function(dlg, close, cls) {  dlg.hide(); cls.deleteObject("exception"); }, 
								[dlg, close, this], "b1");
		btn.print(dv_btn);
		// This and future
		var btn = new CButton("This &amp; Future "+this.mainObject.titlePl, 
								function(dlg, close, cls) {  dlg.hide(); cls.deleteObject("all"); }, 
								[dlg, close, this], "b2");
		btn.print(dv_btn);
		// Don't do anything
		var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [dlg], "b3");
		btn.print(dv_btn);
		alib.dom.styleSet(alib.dom.createElement("div", dv), "clear", "both");

		dlg.customDialog(dv, 400, 50);

		return;
	}
	else if (recur_stype && this.mainObject.recurrencePattern)
	{
		this.mainObject.recurrencePattern.save_type = recur_stype;
		this.deleteObjectDo();
		// User already indicated what they would like to delete so no need to ask them again
		return;
	}

	// Standard delete
	ALib.Dlg.confirmBox("Are you sure you want to delete this "+this.mainObject.title+"?", "Delete " + this.mainObject.title, [this]);
	ALib.Dlg.onConfirmOk = function(cls)
	{
		cls.deleteObjectDo();
	}
}

/**
 * Perform object deletion
 */
AntObjectLoader.prototype.deleteObjectDo = function()
{
	var close = (typeof close != "undefined") ? close : false;

	// Create loading div
	var dlg = new CDialog();
	var dv_load = alib.dom.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Deleting, please wait...";
	dlg.statusDialog(dv_load, 150, 100);

	this.plugin_delete_processed = 0; // Used to keep track of how many plugins have been processed
	this.mainObject.m_dlg = dlg;
	this.mainObject.m_close = close;
	this.mainObject.olCls = this;
	this.mainObject.onremove = function()
	{
		if (this.olCls.plugins.length)
		{
			for (var i = 0; i < this.olCls.plugins.length; i++)
			{
				if (this.olCls.plugins[i].remove) // Only call if remove function exists
				{
					this.olCls.plugins[i].statusDlg = this.m_dlg;
					this.olCls.plugins[i].olCls = this.olCls;
					this.olCls.plugins[i].onremove = function()
					{
						this.olCls.pluginDeleted(this.statusDlg);
					}
					this.olCls.plugins[i].remove();
				}
				else
				{
					this.olCls.pluginDeleted(this.m_dlg);
				}
			}
		}
		else
		{
			this.olCls.deleteDone(this.m_dlg);
		}
	}
	this.mainObject.onremoveError = function()
	{
		this.m_dlg.hide();
		ALib.statusShowAlert("ERROR DELETING OBJECT!", 3000, "bottom", "right");
	}
	this.mainObject.remove();
}

/**
 * Set pluging deletion processing as complete
 *
 * @param CDialog dlg the "Please wait" dialog to be closed 
 */
AntObjectLoader.prototype.pluginDeleted = function(dlg)
{
	this.plugin_delete_processed++;
	if (this.plugin_delete_processed == this.plugins.length)
		this.deleteDone(dlg);
}

/**
 * All deletion is finalized
 *
 * @param CDialog dlg the "Please wait" dialog to be closed 
 */
AntObjectLoader.prototype.deleteDone = function(dlg)
{
	dlg.hide();
	this.close();
	this.onRemove();
	alib.events.triggerEvent(this, "remove");
}

/**
 * Remove the deleted flag for this object
 */
AntObjectLoader.prototype.undeleteObject = function(oid, dv)
{                          
    ajax = new CAjax('json');
    ajax.cbData.con = this.noticeCon;
    ajax.onload = function(ret)
    {
        ALib.statusShowAlert("Item has been restored!", 3000, "bottom", "right");
        this.cbData.con.removeChild(dv);
    };
    ajax.exec("/controller/Object/undeleteObject",
                [["obj_type", this.mainObject.obj_type], ["oid", oid]]);
}

AntObjectLoader.prototype.hide = function()
{
	this.mainCon.style.display = "none";
}

AntObjectLoader.prototype.show = function()
{
	this.mainCon.style.display = "block";
}

AntObjectLoader.prototype.close = function()
{
	// Cancel all auto-refresh
	if (this.subLoader)
	{
		for (var i in this.subLoader.objectBrowsers)
			this.subLoader.objectBrowsers[i].setAutoRefresh(0);
	}

	alib.events.triggerEvent(this, "close");
	this.onClose();
}

// This function can be over-ridden
AntObjectLoader.prototype.onClose = function()
{
	if (this.isPopup)
		window.close();
}
// This function can be over-ridden
AntObjectLoader.prototype.onSave = function()
{
}
// This function can be over-ridden
AntObjectLoader.prototype.onRemove = function()
{
}

AntObjectLoader.prototype.saveDone = function(dlg, close)
{
	var close = (typeof close != "undefined") ? close : false;

	dlg.hide();

	ALib.statusShowAlert(this.mainObject.title + " Saved!", 3000, "bottom", "right");

	if (!this.oid)
		this.oid = this.mainObject.id;

	if (close)
	{
		this.close();
	}
	else
	{
		var sl = this.getSubloader();
		if (sl)
			sl.toggleEdit(false);
	}
	
	alib.events.triggerEvent(this, "save");
	this.onSave();
}

AntObjectLoader.prototype.onValueChange = function(name, value, valueName)
{
	var field = this.mainObject.getFieldByName(name);
	// Check for duplicates
	if (!this.mainObject.id && field.type == "text")
	{
		this.noticeCon.innerHTML = "";
		var dupdiv = alib.dom.createElement("div", this.noticeCon);
		dupdiv.style.display = "none";

		var fValIsSet = false; // Make sure we do not run query on empty object
		var ob = new AntObjectBrowser(this.mainObject.name);
		ob.limit = 3;
		ob.cbData.antobjloaderDupDiv = dupdiv;
		ob.onLoad = function(numobjs)
		{
			this.cbData.antobjloaderDupDiv.style.display = (numobjs) ? "block" : "none";
		}

		var fields = this.mainObject.getFields();
		for (var i = 0; i < fields.length; i++)
		{
			var field = fields[i];
			var val = this.mainObject.getValue(field.name);
			if (val && val!='Untitled' && val!='New Contact' && field.type == "text" && field.system && field.name !='address_default')
			{
				ob.addCondition('and', field.name, 'contains', val);
				fValIsSet = true;
			}
			else if (val && field.type == "timestamp" && !field.readonly)
			{
				ob.addCondition('and', field.name, 'is_equal', val);
			}
		}

		if (fValIsSet)
		{
			ob.printInline(dupdiv, true, "Possible Duplicates");
			ob.loaderCls = this.loaderCls;
			var closeLnk = alib.dom.createElement("div", dupdiv);
			alib.dom.styleSet(closeLnk, "text-align", "center");
			alib.dom.styleSet(closeLnk, "margin-bottom", "5px");
			var a = alib.dom.createElement("a", closeLnk);
			a.href = "javascript:void(0)";
			a.dupdiv = dupdiv;
			a.onclick = function() { this.dupdiv.style.display = "none"; };
			a.innerHTML = "close";
		}
	}
}

/**
 * Set the value of mainObject or queue it if the object has not finished loading
 *
 * @param {string} feild The name of the field to set
 * @param {mixed} value The value to set the field to
 */
AntObjectLoader.prototype.setValue = function(field, value)
{
	var fdef = this.mainObject.getFieldByName(field);
	if (fdef)
	{
		if (fdef.type == "bool")
		{
			switch (value)
			{
			case "false":
			case "f":
			case "0":
			case "no":
				value = false;
				break;
			case "true":
			case "t":
			case "1":
			case "yes":
				value = true;
			}
		}
	}

	if (this.oid && !this.mainObject.loaded)
	{
		if (!this.queueValues)
			this.queueValues = new Array();

		this.queueValues[this.queueValues.length] = {field:field, value:value};
	}
	else
	{
		this.mainObject.setValue(field, value);
		if (this.subLoader)
			this.subLoader.toggleEdit(this.subLoader.editMode); // refresh values
	}
}

/**
 * Get the value of mainObject or queue it if the object has not finished loading
 *
 * @param {string} feild The name of the field to get
 */
AntObjectLoader.prototype.getValue = function(field)
{
	var fdef = this.mainObject.getFieldByName(field);

	if (this.oid && !this.mainObject.loaded)
	{
		if (!this.queueValues)
			this.queueValues = new Array();

		for (var i in this.queueValues)
			if (this.queueValues[i].field == field)
				return this.queueValues[i].value;
	}
	else
	{
		return this.mainObject.getValue(field);
	}

	return null;
}

/*************************************************************************
*	Function:	refreshReferences
*
*	Purpose:	Reload/refresh referenced object of type if inline browser
**************************************************************************/
AntObjectLoader.prototype.refreshReferences = function(otype)
{
}

/*************************************************************************
*	Function:	refreshField
*
*	Purpose:	Reload/refresh value for a field
**************************************************************************/
AntObjectLoader.prototype.refreshField = function(fname)
{
	// 1. get value
	// 2. call this.setValue(fname, value)
}

AntObjectLoader.prototype.onObjectLoaded = function()
{
	console.log(this.mainObject.getValue("groups"));
	if (this.queueValues && this.queueValues.length)
	{
		for (var i = 0; i < this.queueValues.length; i++)
		{
			console.log(this.queueValues[i].field);
			this.mainObject.setValue(this.queueValues[i].field, this.queueValues[i].value);
		}

		if (this.subLoader)
			this.form.toggleEdit(this.subLoader.editMode); // refresh values
	}
}

/**
 * Refresh the form values
 */
AntObjectLoader.prototype.refresh = function()
{
	if (this.subLoader)
		this.form.toggleEdit(this.subLoader.editMode); // refresh field values
}

/*************************************************************************
*	Function:	setAntView
*
*	Purpose:	Set AntView for loading objects
**************************************************************************/
AntObjectLoader.prototype.setAntView = function(parentView)
{
	this.antView = parentView;
	this.antView.options.ldrcls = this;
	this.antView.onresize = function()
	{
		this.options.ldrcls.resize();
	}

    this.antView.fromClone = false;
    if(typeof this.antView.options.cloneId != "undefined" && this.antView.options.cloneId != null && this.oid == "")
    {
        this.oid = this.antView.options.cloneId;
        this.mainObject = new CAntObject(this.objType, this.oid);
        
        this.cloneObject = this.antView.options.cloneId;
        this.antView.options.cloneId = null;
        this.antView.fromClone = true;
    }
}

/*************************************************************************
*    Function:    loadNewWindowValues
*
*    Purpose:    Loads the posted values from inline form to new window form
*                This function is only executed if there's now oid specified
**************************************************************************/
AntObjectLoader.prototype.loadNewWindowValues = function()
{
    if(this.newWindowArgs)
    {
        this.mainObject.newWindowArgs = this.newWindowArgs;            
        for(fieldName in this.newWindowArgs)
        {
            var invalidFieldName = false;
            switch(fieldName)                
            {
                case "fromInlineForm":
                case "editMode":
                    invalidFieldName = true;
                    break;
                default:
                    break;
            }
            
            if(invalidFieldName)
                break;
            
            var fieldType = this.newWindowArgs[fieldName][1];
            var fieldValue = this.newWindowArgs[fieldName][0];            
            switch(fieldType)
            {
                case "fkey_reference":
                case "object_reference":
                case "object_multi_reference":                        
                case "fkey_multi_reference":                        
                    break;                    
                case "fkey":
                case "obj":                        
                    var fieldKey = this.newWindowArgs[fieldName][0];
                    var fieldVal = this.newWindowArgs[fieldName + "Fkey"][0];                            
                    this.mainObject.setValue(fieldName, fieldKey, unescape_utf8(fieldVal));
                    break;
                    
                case "fkey_multi":                        
                case "object_multi":                        
                    var multiKey = unescape_utf8(this.newWindowArgs[fieldName][0]).split(",");
                    var multiTitle = unescape_utf8(this.newWindowArgs[fieldName + "Multi"][0]).split(",");
                    for(var multiArg = 0; multiArg < multiKey.length; multiArg++)
                    {
                        if(multiKey[multiArg])
                            this.mainObject.setMultiValue(fieldName, multiKey[multiArg], multiTitle[multiArg]);
                    }                        
                break;
                
                case "bool":                        
                    if(fieldValue=="t")
                        fieldValue = true;
                    else if(fieldValue=="f")
                        fieldValue = false;
                        
                    this.mainObject.setValue(fieldName, fieldValue);
                break;
                
                default:                        
                    this.mainObject.setValue(fieldName, unescape(fieldValue));
                    break;
            }                                
        }
    }
}

/*************************************************************************
*    Function:    buildFormInput
* 
*    Purpose:    Build form inputs inside table
**************************************************************************/
AntObjectLoader.prototype.buildFormInput = function(inputFormData, tbody)
{    
    for(formData in inputFormData)
    {
        // Row Label
        var rowInput = inputFormData[formData];
        
        if(!rowInput)
            continue;
        
        var tr = alib.dom.buildTdLabel(tbody, rowInput.label, rowInput.labelWidth);
        switch(rowInput.type)
        {            
            case "checkbox":
                var td = tr.firstChild;
                td.innerHTML = "";
                td.setAttribute("colspan", 2);
                alib.dom.styleSetClass(td, "formValue");
                td.appendChild(rowInput);
                if(rowInput.label)
                {
                    var label = alib.dom.createElement("label", td);
                    label.innerHTML = rowInput.label;
                }
                break;            
            case "hidden":
                alib.dom.styleSet(tr, "display", "none");
                var td = tr.firstChild;
                td.setAttribute("colspan", 2);
                td.appendChild(rowInput);
                break;            
            default:
                var td = alib.dom.createElement("td", tr);        
                alib.dom.styleSetClass(td, "formValue");                        
                try
                {
                    td.appendChild(rowInput);
                }
                catch(e)
                {
                    continue;
                }
                break;
        }
        
        if(rowInput.inputLabel)
        {
            var label = alib.dom.createElement("label", td);
            label.innerHTML = rowInput.inputLabel;
            alib.dom.styleSet(label, "fontSize", "11px");
        }
    }
    
    // return the last tr
    return tr;
}

/*************************************************************************
*    Function:    buildFormInputDiv
* 
*    Purpose:    Build form inputs inside div
**************************************************************************/
AntObjectLoader.prototype.buildFormInputDiv = function(inputFormData, con, setClear, marginRight)
{
    if(typeof marginRight == "undefined")
        marginRight = "3px";
        
    con.innerHTML = "";
    for(formData in inputFormData)
    {
        // Row Label
        var rowInput = inputFormData[formData];
        
        if(!rowInput)
            continue;
        
        switch(rowInput.type)
        {            
            default:
                var divCon = alib.dom.createElement("div", con);
                alib.dom.styleSet(divCon, "float", "left");
                alib.dom.styleSet(divCon, "marginRight", marginRight);
                try
                {
                    divCon.appendChild(rowInput);
                }
                catch(e)
                {
                    continue;
                }
                
                if(rowInput.label)
                {
                    var label = alib.dom.createElement("label", divCon);                    
                    alib.dom.styleSet(label, "fontSize", "11px");
                    label.innerHTML = rowInput.label;
                    
                    if(rowInput.floatDir)
                        alib.dom.styleSet(label, "float", rowInput.floatDir);
                    else
                        alib.dom.styleSet(label, "float", "right");
                        
                    if(rowInput.labelWidth)
                        alib.dom.styleSet(label, "width", rowInput.labelWidth);
                }
                break;
        }
        
        if(setClear)
        {
            alib.dom.styleSet(divCon, "marginBottom", "5px");
            alib.dom.divClear(con);
        }            
            
    }
    
    // return the last tr
    return divCon;
}

/*************************************************************************
*    Function:    buildDropdown
* 
*    Purpose:    builds the dropdown using the array
**************************************************************************/
AntObjectLoader.prototype.buildDropdown = function(objElement, dataArray, currentValue)
{
    for(data in dataArray)
    {
        var currentData = dataArray[data];
        var objLen = objElement.length;
        var selected = false;
        
        if(typeof currentData == "object")
        {
            var value = currentData[0];
            var text = currentData[1];
        }        
        else
        {
            var value = currentData;
            var text = currentData;
        }
        
        if(currentValue == value)
            selected = true;
        
        objElement[objLen] = new Option(text, value, false, selected);
    }
}

/**
 * Open an object form by id
 *
 * If view is avaiable then a view will be used to load the form
 *
 * @param {string} obj_type Optional manual object type to load. By default this.obj_type is used.
 * @param {int} id The id of the object to load
 * @param {Array} param_fwd Array of array of params [['pname', 'pvalue']]
 */
AntObjectLoader.prototype.loadObjectForm = function(obj_type, id, param_fwd)
{
	var params = (param_fwd) ? param_fwd : new Array();

	var dlg = new CDialog("");

	/*
	for (var i = 0; i < params.length; i++)
	{
		if (params[i][0] == "associations")
			params[params.length] = ["associations[]", params[i][1]];
		else
			params[params.length] = [params[i][0], params[i][1]];
	}
	*/

	var oid = (id) ? id : "";

	var url = '/obj/' + obj_type;
	if (oid)
		url += '/' + oid;

	/*
	var oldScrollTop = alib.dom.getScrollPosTop();
	this.hide();
	*/

	var objfrmCon = alib.dom.createElement("div", this.outerCon);
	alib.dom.styleSet(objfrmCon, "height", "100%");
	alib.dom.styleSet(objfrmCon, "overflow", "auto");
	objfrmCon.cls = this;
	objfrmCon.dlg = dlg;
	//objfrmCon.oldScrollTop = oldScrollTop;
	objfrmCon.close = function()
	{                    
		/*
		this.style.display = "none";
		objfrmCon.cls.show();
		objfrmCon.cls.outerCon.removeChild(this);
		alib.dom.setScrollPosTop(this.oldScrollTop);
		*/
		this.dlg.hide();
	}

	// Print object loader 
	var ol = new AntObjectLoader(obj_type, oid);

	// Set params
	for (var i = 0; i < params.length; i++)
	{
		if (params[i][0] == "associations")
			ol.mainObject.setMultiValue('associations', params[i][1]);
		else
			ol.setValue(params[i][0], params[i][1]);
	}
			
	ol.print(objfrmCon, this.isPopup);
		
	ol.objfrmCon = objfrmCon;
	ol.objBrwsrCls = this;
	ol.onClose = function()
	{
		this.objfrmCon.close();
	}
	ol.onSave = function()
	{
		// TODO: trigger form event to refresh browsers with this type
	}
	ol.onRemove = function()
	{
		// TODO: trigger form event to refresh browsers with this type
	}

	dlg.customDialog(objfrmCon, 900, getWorkspaceHeight());
}

/**
 * Mark this object as seen
 */
AntObjectLoader.prototype.markSeen = function()
{
	if (this.mainObject.id)
	{
		var ajax = new CAjax("json");
		ajax.exec("/controller/Object/markSeen", 
					[["obj_type", this.mainObject.name], ["oid", this.mainObject.id]]);
	}
}

/**
 * @fileoverview This is the default sub-loader for object loaders
 *
 * This call parses UIXML definition for object forms. If no xml
 * definition exists, then the class will just list an editable form
 * with basic input elements based on the object field types.
 *
 * @author    joe, sky.stebnicki@aereus.com
 *             Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectLoader_Form.
 *
 * @constructor
 * @param {CAntObject} obj Handle to object that is being viewed or edited
 * @param {AntObjectLoader} loader Handle to base loader class
 */
function AntObjectLoader_Form(obj, loader)
{
    this.inputs = new Array();
    this.editMode = (obj.id) ? false : true;
    this.mainObject = obj;
    this.curFieldTbl = null; // Changes to the current col/span
    this.loaderCls = (loader) ? loader : null;    
	/*
    this.tabs = new CTabs();
    this.loaderCls.tabs = this.tabs;
	*/
	this.tabs = null;
    this.loadReports = new Array(); // Used to spool reports to load after form is built
    this.membersObject = null; // Set if members are being managed for this project
    this.attachmentObject = null; // Set if attachment are being managed for this project
    this.toolbar = null; // CToolbar

    this.xmlFormLayout = AntObjectForms.getFormXml(obj.name, loader.formScope); //obj.xmlFormLayout; 
    this.plugins = new Array();

    this.watchChanges = new Array(); // watch for changes and perform an optional action in obj{field, condval, onchange:function)
    
    /**
     * Generic callback properties buffer
     *
     * @var {Object}
     */
    this.cbData = new Object();

	/**
	 * Array of object lists referenced in this form
	 *
	 * @private
	 * @var {Array}
	 */
	this.objectBrowsers = new Array();

	/**
	 * Objects that are refernced by an id in this form
	 *
	 * @private
	 * @var {Array}
	 */
	this.objectsRef = new Array();
}

/**
 * Refresh the form
 */
AntObjectLoader_Form.prototype.refresh = function()
{
    this.toggleEdit(this.editMode);
}

/**
 * Resize form portion
 */
AntObjectLoader_Form.prototype.resize = function()
{
	var parentHeight = alib.dom.getElementHeight(this.loaderCls.formCon);
	var formHeight = alib.dom.getElementHeight(this.formCon);

	// Look for any text areas that have the fillAvailableHeight set to true if in edit mode
	if ((parentHeight - formHeight) == 0 || !this.editMode)
		return;

	for (var i = 0; i < this.inputs.length; i++)
	{
		var inputObj = this.inputs[i];

		if (typeof inputObj.inp != "undefined" && 
			inputObj.ftype == "text" && (inputObj.options.rich == true || inputObj.options.multiLine == true))
		{
			var inpHeight = alib.dom.getElementHeight(inputObj.dv_inp);
			var ret = inputObj.inp.setHeight((inpHeight + (parentHeight - formHeight) - 10) + "px"); // -10 for margins
			if (ret)
				return true;
		}
	}

}

/**
 * Enable to disable edit mode for this loader
 *
 * @param {bool} setmode True for edit mode, false for read mode
 */
AntObjectLoader_Form.prototype.toggleEdit = function(setmode)
{
    if (typeof setmode != "undefined")
        this.editMode = setmode;
    else
        this.editMode = (this.editMode) ? false : true;

	/* NOTE: We now rebuild the toolbar with each toggle
    if (this.editMode)
        this.btnEdit.setText("Finished Editing");
    else
        this.btnEdit.setText("Edit");
	*/

	alib.events.triggerEvent(this, "changemode");

    var lbl = this.mainObject.getLabel();
    if (!lbl)
        lbl = "New " + this.mainObject.title;
    else
        lbl = lbl;
    this.onNameChange(lbl);
    
    // Set ANT View title
    if (this.loaderCls.antView)
        this.loaderCls.antView.setTitle(lbl);

	// Rebuild toolbar
	this.buildToolbar();

    // Rerfresh all the values in the input boxes
    for (var i = 0; i<this.inputs.length; i++)
    {
        if (this.editMode)
        {
            if(this.inputs[i].fieldRow)
                this.inputs[i].fieldRow.setAttribute("style", "");
                
            this.inputs[i].dv_text.style.display = "none";
            this.inputs[i].dv_inp.style.display = "block";

            if (this.inputs[i].dv_inp.inpRef && this.inputs[i].dv_inp.inptType == "input")
            {
                this.inputs[i].dv_inp.inpRef.skiponchange = true; // Prevent loops

                if (this.inputs[i].dv_inp.inpRef.part)
                {
                    this.inputs[i].dv_inp.inpRef.value = this.mainObject.getInputPartValue(this.inputs[i].fname, 
                                                                                           this.mainObject.getValue(this.inputs[i].fname),
                                                                                           this.inputs[i].dv_inp.inpRef.part);
                }
                else
                {
                    this.inputs[i].dv_inp.inpRef.value = this.mainObject.getValue(this.inputs[i].fname);
                }

                this.inputs[i].dv_inp.inpRef.skiponchange = false;
            }

			// Show all hidden fieldsets
			if (this.inputs[i].fieldSet)
				this.inputs[i].fieldSet.show();
        }
        else
        {
            this.inputs[i].dv_inp.style.display = "none";
            this.inputs[i].dv_text.style.display = "block";
            this.setFieldTextDisplay(this.inputs[i].fname, null, this.inputs[i].fieldRow);
        }
    }
    
    // Trigger the edit mode for main object plugins
    this.mainObject.toggleEdit(this.editMode);
    
	// Refresh all object browsers embedded inline
	for (var i = 0; i < this.objectBrowsers.length; i++)
	{
		this.objectBrowsers[i].refresh();
	}
}

/**
 * Print form on 'con'
 *
 * @param {DOMElement} con A dom container where the form will be printed
 * @param {array} plugis List of plugins that have been loaded for this form
 */
AntObjectLoader_Form.prototype.print = function(con, plugins)
{
    if (plugins)
        this.plugins = plugins;

    con.innerHTML = "";
    
    // Set the page title
    this.pageTitle = alib.dom.createElement("div", this.loaderCls.toolbarCon);
    
    // Create a container for form inputes
    this.formCon = alib.dom.createElement("div", con);
    
    // Create Toolbar Buttons
    this.buildToolbar();
    
    //alib.dom.styleSetClass(this.pageTitle, "formTitle");
    this.onNameChange = function(name)
    {
        //this.pageTitle.innerHTML = name;
        if (this.loaderCls && this.loaderCls.ctbl)
            this.loaderCls.ctbl.setTitle(name);
    }    

	// Clear object browsers list
	this.objectBrowsers = new Array();

    var lbl = this.mainObject.getLabel();
    if (!lbl)
        lbl = "New " + this.mainObject.title;
    this.onNameChange(lbl);

    // Set ANT View title
    if (this.loaderCls.antView)
        this.loaderCls.antView.setTitle(lbl);
    
    if (this.xmlFormLayout.m_text == "*")
    {
        var tbl = alib.dom.createElement("table", this.formCon);
        alib.dom.styleSet(tbl, "width", "100%");
        var tbody = alib.dom.createElement("tbody", tbl);

        var fields = this.mainObject.getFields();
        for (var i = 0; i < fields.length; i++)
        {
            var field = fields[i];
            var row = alib.dom.createElement("tr", tbody);
            row.vAlign = "top";

            if (field.name == "account_id") // hidden
                continue;

            this.printField(field, row);
        }
    }
    else
    {
        // Print before form is created because CRte cannot handle being hidden
        if (this.formHasTabs(this.xmlFormLayout))
            this.tabs.print(this.formCon);

        try
        {            
            this.buildForm(this.formCon, this.xmlFormLayout);
            this.formLoaded();
        }
        catch (e)
        {
            alert(e.message+"\n"+"Line: " + e.lineNumber);
        }
    }
    
	// Set viewed
	this.mainObject.setViewed();
}

/**
 * Build toolbar
 */
AntObjectLoader_Form.prototype.buildToolbar = function()
{
	this.loaderCls.toolbarCon.innerHTML = "";

    var tb = new CToolbar();
    this.toolbar = tb;
    
    // Add plugin buttons - position: first
    if (this.loaderCls.pluginToolbarEntries.length)
    {
        for (var i = 0; i < this.loaderCls.pluginToolbarEntries.length; i++)
        {
            var entry = this.loaderCls.pluginToolbarEntries[i];

            if(entry.pos == "first")
            {
                var button = alib.ui.Button(entry.label, {
                    className:"b1", tooltip:entry.label, callback:entry.callback, cbData:entry.cbData,
                    onclick:function() { if (this.callback) this.callback(this.cbData); }
                });
                tb.AddItem(button.getButton(), "left");
            }
        }
    }
    
	// Close button
	var btn = alib.ui.Button("<img src='/images/icons/return_16.png' />", {
		className:"b1", tooltip:"Go back and close this " + this.mainObject.title.toLowerCase(), 
		ldr:this.loaderCls, obj:this.mainObject,
		onclick:function() {
			var close = true;

			if (this.obj.isDirty())
			{
				var close = confirm("Close without saving changes?");
			}

			if (close)
				this.ldr.close();
		}
	});
	if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile) // If mobile version the top back button will serve as a cancel
		tb.AddItem(btn.getButton(), "left");

    if (this.mainObject.security.edit && this.editMode)
    {
		var btn = new CButton("Save &amp; Close", function(cls, close){ cls.saveObject(close); }, [this.loaderCls, true], "b1 grLeft");
		if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile) // If mobile preserve space
			tb.AddItem(btn.getButton(), "left");
        
		// No save and close so don't group
		var saveClass = (!this.loaderCls.fEnableClose || this.loaderCls.isMobile) ? "b2" : "b1 grRight";

        var btn = new CButton("Save Changes", function(cls){ cls.saveObject(false); }, [this.loaderCls], saveClass);
        tb.AddItem(btn.getButton(), "left");

		// Only add cancel edit if this is a new object
		if (this.mainObject.id)
		{
        	this.btnEdit = new CButton("Cancel Edit", function(form) { /* TODO: check for dirty & prompt */ form.toggleEdit(); }, [this], "b1");
        	tb.AddItem(this.btnEdit.getButton(), "left");
		}
    }

    if (this.mainObject.security.edit && !this.editMode)
    {
        this.btnEdit = new CButton("Edit", function(form) { form.toggleEdit(); }, [this], "b2");
        tb.AddItem(this.btnEdit.getButton(), "left");
	}

    if (this.mainObject.id)
    {
        if (this.mainObject.security.del && this.editMode)
        {
            var btn = new CButton("Delete", function(cls, oid){ cls.deleteObject(); }, [this.loaderCls, this.mainObject.id], "b3");
            tb.AddItem(btn.getButton(), "left");
        }
    }    

	// Add print button
	var btn = alib.ui.Button("<img src='/images/icons/print_16.png' />", {
		className:"b1", tooltip:"Print this " + this.mainObject.title, mObject:this.mainObject,
		onclick:function() {
			if (!this.mObject.id)
			{
				alert("Please save changes before printing");
				return;
			}

			window.open("/print/engine.php?obj_type=" + this.mObject.obj_type + "&objects[]=" + this.mObject.id);
		}
	});
    if (!this.loaderCls.isMobile && this.mainObject.name!="dashboard" && this.mainObject.id) // only in desktop mode and no printing dashboards yet
		tb.AddItem(btn.getButton());

	// If user has access to edit this object, and the object is not prive, then add security dropdown
    if (this.mainObject.security.edit && this.editMode && !this.mainObject.def.isPrivate)
    {
        this.ddPermissions = new CDropdownMenu();
        this.ddPermissions.addEntry("Edit Permissions for all " + this.mainObject.titlePl, 
                                    function(cls, form){ loadDacl(null, "/objects/"+cls.mainObject.name); }, 
                                    "/images/icons/permissions_16.png", null, [this.loaderCls, this]);        

		if (this.mainObject.id)
		{
			this.ddPermissions.addEntry("Edit Permissions for this " + this.mainObject.title, 
										function(cls, form){ loadDacl(null, "/objects/"+cls.mainObject.name+"/"+cls.mainObject.id, "/objects/"+cls.mainObject.name); }, 
										"/images/icons/permissions_16.png", null, [this.loaderCls, this]);        
		}

        for (var i = 0; i < this.mainObject.security.childObjects.length; i++)
        {
            var cldobj = new CAntObject(this.mainObject.security.childObjects[i]);
            this.ddPermissions.addEntry("Edit " + cldobj.title + " Permissions", 
                                        function(cls, form, objname){ loadDacl(null, "/objects/"+cls.mainObject.name+"/"+cls.mainObject.id+"/"+objname, "/objects/"+objname); }, 
                                        "/images/icons/permissions_16.png", null, [this.loaderCls, this, this.mainObject.security.childObjects[i]]);
        }

        if (!this.loaderCls.isMobile) // Preserve space
            tb.AddItem(this.ddPermissions.createButtonMenu("Permissions"), "left");

		// Clone Button
		if(this.loaderCls.antView && this.mainObject.id > 0)
		{
			var btn = alib.ui.Button("<img src='/images/icons/merge_10.png' /> Clone", {
				className:"b1", tooltip:"Clone this " + this.mainObject.title, callback:this.loaderCls, mObject:this.mainObject,
				onclick:function() 
				{
					this.callback.antView.options.cloneId = this.mObject.id;
					document.location.hash = "#" + this.callback.cbData.parentPath + "/" + this.mObject.name + ":";
				}
			});
			tb.AddItem(btn.getButton());
		}
    }
    
    // Display the next/prev arrows objects
    var arrowsCon = alib.dom.createElement("div");
    tb.AddItem(arrowsCon, "right");
    this.displayObjectArrows(arrowsCon);
    
    if(!this.loaderCls.isMobile)
    {
        // If we are inline, then display "Open In New Window" button
        if(!this.loaderCls.isPopup)
        {
            var params = 'width=1024,height=768,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
            var btn = new CButton("", function(loaderCls) { loaderCls.openInNewWindow(); }, [this.loaderCls], "b1");
            
            var btn = alib.ui.Button("<img src='/images/icons/new_window_16.png' />", 
                        {
                            className:"b1", tooltip:"Click to open this in a new window", callback:this.loaderCls,
                            onclick:function() 
                            {
                                this.callback.openInNewWindow();
                                this.callback.close();
                            }
                        });
            
            tb.AddItem(btn.getButton(), "right");
            
            if(this.mainObject.objectList && this.mainObject.objectList.length > 0)
            {
                for(object in this.mainObject.objectList)
                {
                    var currentObject = this.mainObject.objectList[object];
                }
            }
        }    
    }
    
	// Add plugin buttons - position: last
	if (this.loaderCls.pluginToolbarEntries.length)
	{
		for (var i = 0; i < this.loaderCls.pluginToolbarEntries.length; i++)
		{
			var entry = this.loaderCls.pluginToolbarEntries[i];

            if(entry.pos == "last")
            {
                var button = alib.ui.Button(entry.label, {
                    className:"b1", tooltip:entry.label, callback:entry.callback, cbData:entry.cbData,
                    onclick:function() { if (this.callback) this.callback(this.cbData); }
                });
                tb.AddItem(button.getButton(), "left");
            }
		}
	}
    
    // Print the toolbar inside this.toolbarCon
    tb.print(this.loaderCls.toolbarCon);
}

/**
 * Displays the arrows for next/prev objects
 *
 * @private
 */
AntObjectLoader_Form.prototype.displayObjectArrows = function(con)
{
	if (typeof this.loaderCls.cbData.bwserCls == "undefined" || typeof this.mainObject.id == "undefined" || this.mainObject.id == null || this.mainObject.id == "")
		return;

    var clsObjectList = this.loaderCls.cbData.bwserCls.objectList;
    var clsAntView = this.loaderCls.cbData.antView;
    var clsParentPath = this.loaderCls.cbData.parentPath;
    
    var prevObjectId = null;
    var nextObjectId = null;
    if(clsObjectList && clsObjectList.length > 0)
    {
        for(obj in clsObjectList)
        {
            var currentObject = clsObjectList[obj];
            
            if(nextObjectId)
            {
                nextObjectId = currentObject.id;
                break;
            }
            
            if(this.mainObject.id == currentObject.id)
                nextObjectId = true;
            else
                prevObjectId = currentObject.id;
        }
    }
    
    if(!prevObjectId && !nextObjectId)
        return;
        
    var loadObject = function(objectId, objectType, parentPath)
    {
        if(!objectId)
            return;
        
        document.location.hash = "#" + parentPath + "/" + objectType + ":" + objectId;
    }
    
    // Previous Object
	var btn = alib.ui.Button("<img src='/images/icons/arrow_left_16.png' />", {
				className:"b1 grLeft", tooltip:"Load previous object", cls:this,
				poid:prevObjectId, otype:this.mainObject.name, pPath:clsParentPath,
				onclick:function() 
				{
					if(!this.poid)
						return;
					
					document.location.hash = "#" + this.pPath + "/" + this.otype + ":" + this.poid;
				}
			});
	btn.print(con);

    if(!prevObjectId)
		btn.disable();
	/*
    var btn = new CButton("", loadObject, [prevObjectId, this.mainObject.name, clsParentPath], "b1");
    var btnElem = btn.getButton();
    alib.dom.styleSet(btnElem, "background-image", "url(/images/icons/arrow_back_12.png)");
    alib.dom.styleSet(btnElem, "background-repeat", "no-repeat");
    alib.dom.styleSet(btnElem, "background-position", "center");
    con.appendChild(btnElem);
    
    if(!prevObjectId)
        alib.dom.styleSet(btnElem, "cursor", "no-drop");
	*/
    
    // Next Object
	var btn = alib.ui.Button("<img src='/images/icons/arrow_right_16.png' />", {
				className:"b1 grRight", tooltip:"Load next object", cls:this,
				noid:nextObjectId, otype:this.mainObject.name, pPath:clsParentPath,
				onclick:function() 
				{
					if(!this.noid)
						return;
					
					document.location.hash = "#" + this.pPath + "/" + this.otype + ":" + this.noid;
				}
			});
	btn.print(con);

    if(!nextObjectId)
		btn.disable();

	/*
    var btn = new CButton("", loadObject, [nextObjectId, this.mainObject.name, clsParentPath], "b1");
    var btnElem = btn.getButton();
    alib.dom.styleSet(btnElem, "background-image", "url(/images/icons/arrow_next_12.png)");
    alib.dom.styleSet(btnElem, "background-repeat", "no-repeat");
    alib.dom.styleSet(btnElem, "background-position", "center");    
    con.appendChild(btnElem);
    
    if(!nextObjectId)
        alib.dom.styleSet(btnElem, "cursor", "no-drop");
	*/
}

/**
 * Check if tabs should be printed for this form
 *
 * @private
 */
AntObjectLoader_Form.prototype.formHasTabs = function(node)
{
	var hasTabs = false;
    for (var i = 0; i < node.getNumChildren(); i++)
    {
        var child = node.getChildNode(i);
        if (child.m_name == "tab")
			hasTabs = true;
    }

	if (hasTabs && this.tabs == null)
	{
		this.tabs = new CTabs();
		this.loaderCls.tabs = this.tabs;
	}

    return hasTabs;
}

/**
 * Callback is fired any time a value changes for the mainObject 
 */
AntObjectLoader_Form.prototype.onValueChange = function(name, value, valueName)
{    
    for (var i = 0; i < this.watchChanges.length; i++)
    {
        if (this.watchChanges[i].field == name)
        {
            try
            {
                this.watchChanges[i].onchange(value);
            }
            catch (e)
            {
                //alert("AntObjectLoader_Form.prototype.onValueChange : " + e);
            }
        }
    }
    

    // Notifty plugins that the object has been saved
    if (name == "id" && value)
    {
        for (var i = 0; i < this.plugins.length; i++)
        {
			try
			{
				if (this.plugins[i].objectsaved)
					this.plugins[i].objectsaved();
			}
			catch (e)
			{
				alert("Problem calling objectsaved for " + this.plugins[i].name);
			}
        }
    }

    // If zipcode then set remaining fields
    var field = this.mainObject.getFieldByName(name);
    if (!field)
        return false;

    if (field.subtype == "zipcode")
    {
        var pre = "";
        var code_parts = name.split("_");
        if (code_parts.length == 2)
            pre = code_parts[0];

        this.loadAddressCityStateFromZip(value, pre);
    }
}

/**
 * Get city/state from zipcode if applicable
 */
AntObjectLoader_Form.prototype.loadAddressCityStateFromZip = function(zip, pre)
{
    /*var funct = function(ret, cls, pre)
    {
        if (!ret['error'])
        {               
            if (ret['state'])
                cls.loaderCls.setValue(((pre)?pre+"_state":"state"), ret['state']);
            if (ret['city'])
                cls.loaderCls.setValue(((pre)?pre+"_city":"city"), ret['city']);
        }
    }    
    var rpc = new CAjaxRpc("/controller/Customer/custGetZipData", "custGetZipData", [["zipcode", zip]], funct, [this, pre], AJAX_POST, true, "json");*/
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.pre = pre;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {               
            if (ret['state'])
                this.cbData.cls.loaderCls.setValue(((this.cbData.pre)?this.cbData.pre+"_state":"state"), ret['state']);
            if (ret['city'])
                this.cbData.cls.loaderCls.setValue(((this.cbData.pre)?this.cbData.pre+"_city":"city"), ret['city']);
        }
    };
    ajax.exec("/controller/Customer/custGetZipData",
                [["zipcode", zip]]);
}

AntObjectLoader_Form.prototype.buildForm = function(con, node)
{
    // NOTE:  if a tag type is added then also add to "buildForm" in aereus.lib.php/CAntObjectApi
    // -----------------------------------------------------------------------------------------
    
    // Build table for grid
    var tbl = alib.dom.createElement("table", con);
    alib.dom.styleSet(tbl, "width", "100%");
    //tbl.cellPadding = 0;
    tbl.cellSpacing = 0;
    var tbody = alib.dom.createElement("tbody", tbl);
    var curRow = null;

    // First find out how many columns we are working with this at this level
    var numcols = 0;
    for (var i = 0; i < node.getNumChildren(); i++)
    {
        var child = node.getChildNode(i);
        if (child.m_name == "column")
            numcols++;
    }
    if (!numcols)
        numcols = 1;

    var curcol = 0;

    // Create form elements
    for (var i = 0; i < node.getNumChildren(); i++)
    {
        var child = node.getChildNode(i);

        var showif = unescape(child.getAttribute("showif"));
        var show = true;
        var onchangeobj = null;
        if (showif)
        {
            var parts = showif.split("=");
            if (parts.length == 2)
            {
                var field = this.mainObject.getFieldByName(parts[0]);
                if (field.type == "bool")
                    parts[1] = (parts[1] == 't') ? true : false;

                var val = this.mainObject.getValue(parts[0]);
                var valName = this.mainObject.getValueName(parts[0]);
                if ((parts[1] == "*" && !val) || ((val != parts[1] && valName != parts[1]) && parts[1]!="*"))
                    show = false;

                onchangeobj = new Object();
                onchangeobj.field = parts[0];
                onchangeobj.condval = parts[1];
                this.watchChanges[this.watchChanges.length] = onchangeobj; 
            }
        }

 
        switch (child.m_name)
        {
        case "tab":
            var tabcon = this.tabs.addTab(unescape(child.getAttribute("name")), function(cls) { cls.refresh(); }, [this]);
            this.buildForm(tabcon, child);
            break;

        case "plugin":
            var pname = unescape(child.getAttribute("name"));
            this.loadPlugin(pname, con);
            break;

        case "helptour":
            var type = child.getAttribute("type");
            var tourId = child.getAttribute("id");

			if (tourId)
			{
				var tourDiv = alib.dom.createElement("div", con);
				tourDiv.setAttribute("data-tour", tourId);
				if (type)
					tourDiv.setAttribute("data-tour-type", type);
			}
			
            break;

        case "recurrence":
            var options = new Object();
            options.hidelabel = (unescape(child.getAttribute("hidelabel"))=='t')?true:false;
            this.loadRecurrence(con, options);
            break;

        case "members":
            var mem = new AntObjectLoader_FormMem();
            this.plugins[this.plugins.length] = mem;
            mem.field = unescape(child.getAttribute("field"));
            this.loadPlugin("members", con); // "members" should be the same as this.name in Mem.js
            break;

        case "reminders":
            var rem = new AntObjectLoader_Reminders();
            this.plugins[this.plugins.length] = rem;
            rem.fieldName = child.getAttribute("field_name");
            rem.addDefault = (child.getAttribute("add_default") == 't') ? true : false;
            this.loadPlugin("reminders", con);
            break;
            
        case "attachments":            
            var objAttachments = new AntObjectLoader_FormAttachments();
            objAttachments.mainObject = this.mainObject;
            this.plugins[this.plugins.length] = objAttachments;            
            this.loadPlugin("attachments", con); // "attachments" should be the same as this.name in Attachment.js
            break;

        case "status_update":            
            var statusUpdate = new AntObjectLoader_StatusUpdate();
            statusUpdate.mainObject = this.mainObject;
            this.plugins[this.plugins.length] = statusUpdate;            
            this.loadPlugin("status_update", con); // "status_update" should be the same as this.name in StatusUpdate.js
            break;

        case "icon":            
            var imgCon = alib.dom.createElement("span", con);
            var width = (child.getAttribute("width")) ? child.getAttribute("width") : 48;
			var icon = this.mainObject.getIcon(48);
			if (icon)
				imgCon.innerHTML = "<img src=\"" + icon + "\" style='width:" + width + "px;' />";
            break;
            
        case "uname":
            var objUname = new AntObjectLoader_Uname();            
            objUname.mainObject = this.mainObject;
            this.plugins[this.plugins.length] = objUname;
            this.loadPlugin("uname", con); // "uname" should be the same as this.name in uname.js
            break;

        case "report":
            var rid = unescape(child.getAttribute("id"));
            var filterby = unescape(child.getAttribute("filterby"));

            if (this.mainObject.id)
            {
                this.loadReports[this.loadReports.length] = {rid:rid, filterby:filterby, con: con};
                //this.loadReport(rid, filterby, con);
            }
            else
            {
                con.innerHTML = "";
                onchangeobj = new Object();
                this.watchChanges[this.watchChanges.length] = onchangeobj; 
                onchangeobj.field = "id";
                onchangeobj.condval = null;
                onchangeobj.cls = this;
                onchangeobj.rid = rid;
                onchangeobj.filterby = filterby;
                onchangeobj.con = con;
                onchangeobj.onchange = function(val)
                {
                    if (val) // is a valid id
                    {
                        this.cls.loadReport(this.rid, this.filterby, this.con);
                    }
                }
            }
            break;

        case "fieldset":
            var titleCon = alib.dom.setElementAttr(alib.dom.createElement("div"), [["innerHTML", unescape(child.getAttribute("name"))]]);
            
            if (child && child.getAttribute("tooltip"))
            {
                var tooltipStr = unescape(child.getAttribute("tooltip"));
                
                var imageCon = alib.dom.setElementAttr(alib.dom.createElement("img", titleCon), [["src", "/images/icons/help_12.png"]]);                
                alib.dom.styleSet(imageCon, "marginLeft", "10px"); 
                alib.dom.styleSet(imageCon, "cursor", "help"); 
                
                // Set Tooltip
                alib.ui.Tooltip(imageCon, tooltipStr);
            }
            
            var frm = new CWindowFrame(titleCon);
            var frmcon = frm.getCon();
            frm.print(con);

			frmcon.fieldsetRef = frm;
            this.buildForm(frmcon, child);
            break;        

        case "objectsref":
            var obj_type = unescape(child.getAttribute("obj_type"));
            var ref_field = unescape(child.getAttribute("ref_field"));
            var ref_this = unescape(child.getAttribute("ref_this"));
            var name = unescape(child.getAttribute("name"));            
            if (!name) name = "View " + obj_type;

            if (obj_type)
            {
				this.objectsRef.push({
					objType: obj_type,
					refField: ref_field
				});

                if (this.mainObject.id && !this.loaderCls.cloneObject)
                {
                    var objb = null;
                    var objb = new AntObjectBrowser(obj_type);
					objb.setObjectContext(this.mainObject); // Load browser in context of this object
		
					this.objectBrowsers[this.objectBrowsers.length] = objb; // store reference for refreshing
                    
                    
                    if (this.loaderCls.antView)
                        objb.setAntView(this.loaderCls.antView);
                        
                    if (ref_field)
                    {
                        objb.setViewsFilter(this.mainObject.name);
                        
                        if(ref_this)
                            objb.setFilter(ref_field, this.mainObject.getValue(ref_this));
                        else                        
                            objb.setFilter(ref_field, this.mainObject.id);
                    }
                    else
                    {
                        objb.setFilter('associations', this.mainObject.name+":"+this.mainObject.id);                       
                    }

					// Add additional filters
					var filter = child.getChildNodeByName("filter")
					if (filter)
					{
						for (var i = 0; i < filter.getNumChildren(); i++)
						{
							var cond = filter.getChildNode(i);
							var blogic = cond.getAttribute("blogic");
							var field = cond.getAttribute("field");
							var operator = cond.getAttribute("operator");
							var value = cond.getAttribute("value");
							objb.addCondition(blogic, field, operator, value);
						}
					}

                    objb.obj_reference = this.mainObject.name+":"+this.mainObject.id;
                    objb.loaderCls = this.loaderCls;

                    if (this.loaderCls.isMobile && this.loaderCls.antView)
                    {
                        var viewRefObjects = this.loaderCls.antView.addView("ref-"+obj_type, {ob:objb});
                        viewRefObjects.render = function()
                        {
                            this.con.innerHTML = "";
                            this.options.ob.setAntView(this);
                            this.options.ob.print(this.con);
                        }
                        viewRefObjects.onshow = function() {  };

                        // Create browse button
                        var entry = alib.dom.createElement("article", con);
                        alib.dom.styleSetClass(entry, "nav");
                        var btn = alib.dom.createElement("a", entry);
                        btn.setAttribute("behavior", "selectable");
                        btn.href = "#" + this.loaderCls.antView.getPath() + "/" + "ref-"+obj_type;
                        btn.innerHTML = "<span class='icon'></span><h2><span class='more'></span>"+name+"</h2>";
                    }
                    else
                    {
                        objb.printInline(con);
                    }
                }
                else
                {
                    this.loaderCls.subLoaderParams.fromFormLoader;
                    if (!this.loaderCls.isMobile)
                        con.innerHTML = "Please save changes to view more details";
                    onchangeobj = new Object();
                    this.watchChanges[this.watchChanges.length] = onchangeobj; 
                    onchangeobj.field = "id";
                    onchangeobj.condval = null;
                    onchangeobj.cls = this;
                    onchangeobj.obj_type = obj_type;
                    onchangeobj.ref_field = ref_field;
                    onchangeobj.con = con;
                    onchangeobj.onchange = function(val)
                    {
                        if (val) // is a valid id
                        {
                            con.innerHTML = "";
                            if (this.ref_field)
                            {
                                var objb = new AntObjectBrowser(this.obj_type);
								this.cls.objectBrowsers[this.cls.objectBrowsers.length] = objb; // store reference for refreshing
                                if (this.cls.loaderCls.antView)
                                    objb.setAntView(this.cls.loaderCls.antView);
                                objb.setFilter(this.ref_field, this.cls.mainObject.id);
                                objb.setViewsFilter(this.cls.mainObject.name);
                                objb.obj_reference = this.cls.mainObject.name+":"+this.cls.mainObject.id;
                                objb.loaderCls = this.cls.loaderCls;
                                objb.printInline(this.con);
                            }
                            else
                            {
                                var objb = new AntObjectBrowser(this.obj_type);
								this.cls.objectBrowsers[this.cls.objectBrowsers.length] = objb; // store reference for refreshing
                                if (this.cls.loaderCls.antView)
                                    objb.setAntView(this.cls.loaderCls.antView);
                                objb.setFilter('associations', this.cls.mainObject.name+":"+this.cls.mainObject.id);
                                objb.obj_reference = this.cls.mainObject.name+":"+this.cls.mainObject.id;
                                objb.loaderCls = this.cls.loaderCls;
                                objb.printInline(this.con);
                            }
                        }
                    }
                }
            }
            break;

        case "spacer":
            var row = alib.dom.createElement("div", con);
            alib.dom.styleSet(row, "height", "5px");
            break;

        case "row":
            var row = alib.dom.createElement("div", con);
            
            var width = unescape(child.getAttribute("width"));
            if (width)
                alib.dom.styleSet(row, "width", width);
            
            if (!show)
            {
                alib.dom.styleSet(row, "display", "none");
            }
            if (onchangeobj)
            {
                onchangeobj.con = row;
                onchangeobj.onchange = function(val)
                {
                    if (val == this.condval)
                        this.con.style.display = "block";
                    else
                        this.con.style.display = "none";
                }
            }

			// Determine if contianer is only visible in edit mode
			var editmodeonly = unescape(child.getAttribute("editmodeonly"));
			if (editmodeonly == 't')
			{
				if (this.editMode == false)
                	alib.dom.styleSet(row, "display", "none");

				alib.events.listen(this, "changemode", function(evnt){ 
					evnt.data.rowCon.style.display = (evnt.data.cls.editMode) ? "block" : "none";
				}, {rowCon:row, cls:this});
			}

            this.buildForm(row, child);
            break;

        case "column":
            if (!curRow)
            {
                curRow = alib.dom.createElement("tr", tbody);
                curRow.vAlign = "top";
            }
            curcol++; // current column index
            var td = alib.dom.createElement("td", curRow);
            var width = unescape(child.getAttribute("width"));
            if (width)
                alib.dom.styleSet(td, "width", width);
            
            if (curcol > 1)
			{
            	var padding = unescape(child.getAttribute("padding"));

				if (padding)
                	alib.dom.styleSet(td, "padding-left", padding);
				else	
                	alib.dom.styleSet(td, "padding-left", "20px");
			}
            if (!show)
            {    
                alib.dom.styleSet(td, "display", "none");
            }
            if (onchangeobj)
            {
                onchangeobj.con = td;
                onchangeobj.onchange = function(val)
                {
                    if (val == this.condval)
                        this.con.style.display = "table-cell";
                    else
                        this.con.style.display = "none";
                }
            }
            
            var colStyle = unescape(child.getAttribute("style"));
            if (colStyle)
            {
                var styleParts = colStyle.split(";");
                for(cStyle in styleParts)
                {
                    var parts = styleParts[cStyle].split(":");
                    alib.dom.styleSet(td, parts[0], parts[1]);
                }
            }
            
            this.buildForm(td, child);
            break;

        case "label":
            var row = alib.dom.createElement("tr", tbody);
            row.vAlign = "top";
            var lbl = alib.dom.createElement("td", row);
            alib.dom.styleSetClass(lbl, "formLabel");

            var fieldName = child.getAttribute("field");
			if (fieldName)
			{
				alib.events.listen(this.mainObject, "fieldchange", function(evnt) { 
					if (evnt.data.fieldName == evnt.data.lblFieldName)
						evnt.data.labelCon.innerHTML = (evnt.data.valueName) ? evnt.data.valueName : evnt.data.value; 
				}, {labelCon:lbl, lblFieldName:fieldName});
				lbl.innerHTML = this.mainObject.getValueName(fieldName);
			}
			else
			{
            	lbl.innerHTML = child.text();
			}
            break;

        case "header":
            var lbl = alib.dom.createElement("div", con);
            alib.dom.styleSetClass(lbl, "headerLabel");

            var fieldName = child.getAttribute("field");
			if (fieldName)
			{
				alib.events.listen(this.mainObject, "fieldchange", function(evnt) { 
					if (evnt.data.fieldName == evnt.data.lblFieldName)
						evnt.data.labelCon.innerHTML = (evnt.data.valueName) ? evnt.data.valueName : evnt.data.value; 
				}, {labelCon:lbl, lblFieldName:fieldName});
				lbl.innerHTML = this.mainObject.getValueName(fieldName);
			}
			else
			{
            	lbl.innerHTML = child.text();
			}
            break;
        
        case "text":
            var textCon = alib.dom.createElement("span", con);
            alib.dom.styleSet(textCon, "marginBottom", "5px");
            
            if(child.getAttribute("class"))
                alib.dom.styleSetClass(textCon, child.getAttribute("class"));

            if (!show)
                alib.dom.styleSet(textCon, "display", "none");

            var fieldName = child.getAttribute("field");
			if (fieldName)
			{
				alib.events.listen(this.mainObject, "fieldchange", function(evnt) { 
					if (evnt.data.fieldName == evnt.data.lblFieldName)
						evnt.data.labelCon.innerHTML = (evnt.data.valueName) ? evnt.data.valueName : evnt.data.value; 
				}, {labelCon:textCon, lblFieldName:fieldName});
				textCon.innerHTML = this.mainObject.getValueName(fieldName);
			}
			else
			{
            	textCon.innerHTML = child.text();
			}
            break;
            
        case "field":
            if(unescape(child.getAttribute("name")) == "uname")
            {
                var objUname = new AntObjectLoader_Uname();            
                objUname.mainObject = this.mainObject;
                this.plugins[this.plugins.length] = objUname;
                this.loadPlugin("uname", con); // "uname" should be the same as this.name in uname.js
                break;
            }
            
            var row = alib.dom.createElement("tr", tbody);
			alib.dom.styleSetClass(row, "formRow");
            row.vAlign = "top";

            var fname = unescape(child.getAttribute("name"));
            var field = this.mainObject.getFieldByName(fname);            
            var options = new Object();
            options.className = child.getAttribute("class");
            options.hidelabel = (unescape(child.getAttribute("hidelabel"))=='t')?true:false;
            options.multiLine = (unescape(child.getAttribute("multiline"))=='t')?true:false;
            options.rich = (unescape(child.getAttribute("rich"))=='t')?true:false;
            options.profileImage = (unescape(child.getAttribute("profile_image"))=='t')?true:false;
			options.mode = "form"; // Can be either input (default) or form
            options.icon = child.getAttribute("icon");
            options.editmodeonly = (child.getAttribute("editmodeonly")=='t') ? true : false;
            options.plugins = child.getAttribute("plugins");

			// Object references can filter browser options based on a value in this field
            options.refField= child.getAttribute("ref_field"); // field in the referenced object
            options.refThis = child.getAttribute("ref_this"); // The field in this object to get value from
            options.refValue = child.getAttribute("ref_value"); // Optional manual set value to query for rather than refThis
			options.refRequired = (child.getAttribute("ref_required")=='t')?true:false; // Do not show "Browse" button untin value in this ref
            
            var labelAttr = unescape(child.getAttribute("label"));
            if(labelAttr)
                field.title = labelAttr;

             if (child.getAttribute("validator"))
				 options.validator = child.getAttribute("validator");
                
            if (child.getAttribute("part"))
                options.part = unescape(child.getAttribute("part"));
            if (child.getAttribute("view")) // if type='object_multi' for alternate default view
                options.viewId = unescape(child.getAttribute("view_id"));

            if (field)
            {
				// Get the direct parent fieldset if available to link to input object
				var currentFieldset = (con.fieldsetRef) ? con.fieldsetRef : null;
                try 
                {
                    this.printField(field, row, options, child, currentFieldset);
                }
                catch (e)
                {
                    alert("There was a problem loading " + field.name + "\n\n" + e);
                }
            }
            break;

        // Print all additional fields
        case "all_additional":
            var fields = this.mainObject.getFields();
            var fieldsPrinted = false;

            
            for (var i = 0; i < fields.length; i++)
            {
                var field = fields[i];
                if (!field.system) // hidden
                {
                    var row = alib.dom.createElement("tr", tbody);
                    row.vAlign = "top";

                    this.printField(field, row, {}, null, (con.fieldsetRef) ? con.fieldsetRef : null);
                    fieldsPrinted = true;
                }                
            }

			// If now additional fields where printed then hide
			if (con.fieldsetRef && fieldsPrinted == false)
				con.fieldsetRef.hide();
            
			/*
            if(!fieldsPrinted)
            {
                var count = 0;
                var currentNode = con;                
                while(currentNode.className !== "CWindowFrameContent")
                {
                    count++;
                    currentNode = currentNode.parentNode;
                    
                    if(count == 10)
                        break;
                }
                
                if(currentNode.className = "CWindowFrameContent")
                {
                    //alib.dom.styleSet(currentNode, "display", "none");
                    //alib.dom.styleSet(currentNode.previousSibling, "display", "none");
                }
            }
			*/
            
            break;
        }
    }
}

/**
 * Reder a field into the form
 *
 * @param {Object} field The field we are working with
 * @param {DOMElement} row The fieldset current row (fields are always printed in a table)
 * @param {Object} options Optional additional parameters for this field
 * @param {CXmlNode} child The current xml node of the UIML form
 * @param {CWindowFrame} currentFieldset The parent fieldset if available
 */
AntObjectLoader_Form.prototype.printField = function(field, row, options, child, currentFieldset)
{
    var input_obj = null;

    var opts = (options) ? options : new Object();

    // Look for default
    var def = (child) ? unescape(child.getAttribute("default")) : null;
    
    if (!def)
        def = field.default_value;
    
	// Set default values
	// ----------------------------------
    if (!this.mainObject.id && def && !this.mainObject.getValue(field.name))
    {
        // Check for 'now' defaults for timestamps
        if (field.type == 'timestamp' && def == "now")
        {
            var ts = new Date();
            def = (ts.getMonth()+1)+"/"+ts.getDate()+"/"+ts.getFullYear() + " " + calGetClockTime(ts);
        }

        // Check for 'now' defaults for dates
        if (field.type == 'date' && def == "now")
        {
            var ts = new Date();
            def = (ts.getMonth()+1)+"/"+ts.getDate()+"/"+ts.getFullYear();
        }
        
        // check if form is opened in new window and has post variables passed
        if(this.loaderCls.newWindowArgs)
        {
            // change the default values of the input field. The values displayed is not from inline form
            def = unescape_utf8(this.loaderCls.newWindowArgs[field.name][0]);
        }        
        this.mainObject.setValue(field.name, def);
    }
    
    // look for image
    if (field.type == "object" && field.subtype == "user" && child)
    {
        if (unescape(child.getAttribute("showimage"))=='t')
            field.showimage = true;
        else
            field.showimage = false;
    }

	// Hide label if object_multi
    if (field.type == "object_multi" && !opts.hidelabel)
		opts.hidelabel = true;

    var createInputCon = false;
    
    // Print label
    // ------------------------------------        
    if (field.type == "object" && field.subtype == "folder")
    {
        // TD Label
        var td_label = alib.dom.createElement("td", row);
        alib.dom.styleSetClass(td_label, "formLabel");
        
        if(opts.hidelabel=='t' || opts.hidelabel==true)
        {
            td_label.innerHTML = "";
            alib.dom.styleSet(td_label, "width", "0px");
        }
        else
            td_label.innerHTML = field.title;
        
        // TD Input
        var val_td = alib.dom.createElement("td", row);
        val_con = alib.dom.createElement("div", val_td);
        alib.dom.styleSetClass(val_con, "formValue");
        
        var input_obj = new Object();
        
         // Create containers
        input_obj.dv_inp = alib.dom.createElement("div", val_con);
        alib.dom.styleSet(input_obj.dv_inp, "display", (this.editMode)?"block":"none");
        
        input_obj.dv_text = alib.dom.createElement("input", val_con);
        input_obj.dv_text.type = "hidden";
        
        // Input
        var setPathLink = alib.dom.createElement("a", input_obj.dv_inp);
        
        var folderPathCon = alib.dom.createElement("span", input_obj.dv_inp);
        var folderCon = alib.dom.createElement("div", val_con);
        alib.dom.styleSet(folderPathCon, "margin-left", "3px");
        
        var cbrowser = new AntFsOpen();        
        cbrowser.filterType = "folder";
        cbrowser.cbData.field_name = field.name;
        cbrowser.cbData.frmcls = this;
        cbrowser.cbData.folderCon = folderCon;
        cbrowser.cbData.folderPathCon = folderPathCon;
        cbrowser.onSelect = function(folder_id, name, path) 
        {
            this.cbData.frmcls.displayInlineFolder(this.cbData.field_name, folder_id, this.cbData.folderCon);
            this.cbData.frmcls.mainObject.setValue(this.cbData.field_name, folder_id);
            this.cbData.folderPathCon.innerHTML = "Current Folder: " + path;
        }
        
        if(this.mainObject.getValue(field.name))
        {
            cbrowser.setPathById(this.mainObject.getValue(field.name));
            cbrowser.onSetPath = function(path)
            {
                this.cbData.folderPathCon.innerHTML = "Current Folder: " + path;
            }
        }
        
        setPathLink.innerHTML = "[set path]";
        setPathLink.href = "javascript:void(0);";
        setPathLink.cbrowser = cbrowser;
        setPathLink.onclick = function() { this.cbrowser.showDialog(); }
    }
	/*
    else if (field.type == "object_multi" || (field.subtype == "file" && opts.profileImage))
    {
        var val_con = alib.dom.createElement("td", row);
        alib.dom.styleSet(val_con, "vertical-align", "top");
        val_con.colSpan = "2";
        
        createInputCon = true;
    }
	*/
    else
    {
        if (!opts.hidelabel)
        {
            var td_label = alib.dom.createElement("td", row);
            alib.dom.styleSetClass(td_label, "formLabel");
			if (opts.className)
				alib.dom.styleAddClass(td_label, opts.className);
            
            var labelCon = alib.dom.createElement("div", td_label);

			var htm = field.title;

			// Add icon
			if (opts.icon)
				htm = "<img src='" + opts.icon + "' />&nbsp;" + htm;

			// Add label html
			labelCon.innerHTML = htm;
            
			// Add required
            if (field.required)
            {
                var reqsp = alib.dom.createElement("a", labelCon);
                alib.dom.styleSet(reqsp, "color", "red");
                alib.dom.styleSet(reqsp, "font-size", "16px");
                alib.dom.styleSet(reqsp, "text-decoration", "none");
                reqsp.title = "This is a required field";
                reqsp.innerHTML = "*";
            }
            
			// Add tooltip
            if (child && child.m_name == "field" && child.getAttribute("tooltip"))
            {
                var tooltipStr = unescape(child.getAttribute("tooltip"));
                
                var imageCon = alib.dom.setElementAttr(alib.dom.createElement("img", labelCon), [["src", "/images/icons/help_12.png"]]);                
                alib.dom.styleSet(imageCon, "marginLeft", "5px"); 
                alib.dom.styleSet(imageCon, "cursor", "help");
                alib.ui.Tooltip(imageCon, tooltipStr);
            }
        }
        
        var val_td = alib.dom.createElement("td", row);
        val_con = alib.dom.createElement("div", val_td);
        alib.dom.styleSetClass(val_con, "formValue");
		if (opts.className)
			alib.dom.styleAddClass(val_con, opts.className);
        
        createInputCon = true;
    }
    
    if(createInputCon)
    {
        var input_obj = new Object();
        input_obj.options = opts;
        
         // Create containers
        input_obj.dv_label = alib.dom.createElement("div", val_con); // Special Purpose Con
        alib.dom.styleSet(input_obj.dv_label, "display", "none");
        
        input_obj.dv_text = alib.dom.createElement("div", val_con);
        alib.dom.styleSet(input_obj.dv_text, "display", (this.editMode)?"none":"block");

        input_obj.dv_inp = alib.dom.createElement("div", val_con);
        alib.dom.styleSet(input_obj.dv_inp, "display", (this.editMode)?"block":"none");

        
        // Clear Div
        divClear(val_con);
    }

    if (input_obj)
    {
        // Field vars
        input_obj.fname = field.name;
        input_obj.ftype = field.type;
        input_obj.fstype = field.subtype;
		input_obj.options = opts;
		input_obj.fieldSet = (currentFieldset) ? currentFieldset : null;
        this.inputs[this.inputs.length] = input_obj;
    }

    // Print Value
    // ------------------------------------
    if (field.readonly || field.auto)
    {
        if (input_obj) // readonly object_multi needs to be handleded elsewhere
        {
            input_obj.dv_inp.innerHTML = this.mainObject.getValueName(field.name);
            input_obj.dv_text.innerHTML = "";
            this.setFieldTextDisplay(field.name, null, row);
        }
    }
    else if ("object_multi" == field.type)
    {
        if (this.mainObject.id && !this.loaderCls.cloneObject)
        {
            val_con.innerHTML = "";
            this.printFieldObjectMulti(field.name, val_con, opts);
        }
        else
        {
            if (!this.loaderCls.isMobile)
                val_con.innerHTML = "Please save changes to view more details";
            onchangeobj = new Object();
            this.watchChanges[this.watchChanges.length] = onchangeobj; 
            onchangeobj.field = "id";
            onchangeobj.condval = null;
            onchangeobj.cls = this;
            onchangeobj.val_con = val_con;
            onchangeobj.ref_field_name = field.name;
            onchangeobj.opts = opts;
            onchangeobj.onchange = function(val)
            {
                val_con.innerHTML = "";
                if (val) // is a valid id
                {
                    this.val_con.innerHTML = "";
                    this.cls.mainObject.id = val;                    
                    this.cls.printFieldObjectMulti(this.ref_field_name, this.val_con, this.opts);
                }                    
            }
        }
    }
    else if ("object" == field.type && "folder" == field.subtype)
    {
        if (this.mainObject.id)
        {            
            if (this.mainObject.getValue(field.name))
            {
                this.displayInlineFolder(field.name, this.mainObject.getValue(field.name), folderCon);
            }
            else
            {
                ajax = new CAjax('json');
                ajax.cbData.cls = this;
                ajax.cbData.field_name = name;
                ajax.cbData.val_con = val_con;
                ajax.onload = function(ret)
                {
                    if (!ret['error'])
                    {
                        this.cbData.cls.displayInlineFolder(this.cbData.field_name, ret, this.cbData.val_con);
                        this.cbData.cls.mainObject.setValue(this.cbData.field_name, ret);
                    }
                };
                ajax.exec("/controller/Object/getFolderId",
                            [["obj_type", this.mainObject.name], ["field", field.name], ["oid", this.mainObject.id]]);
            }
        }
        else
        {
            setPathLink.innerHTML = "";
            folderPathCon.innerHTML = "Please save changes before editing files";

            onchangeobj = new Object();
            this.watchChanges[this.watchChanges.length] = onchangeobj; 
            onchangeobj.field = "id";
            onchangeobj.condval = null;
            onchangeobj.cls = this;
            onchangeobj.fname = field.name;
            onchangeobj.folderCon = folderCon;
            onchangeobj.setPathLink = setPathLink;            
            onchangeobj.folderPathCon = folderPathCon;            
            onchangeobj.onchange = function(val)
            {
                if (val) // is a valid id
                {
                    this.folderPathCon.innerHTML = "";
                    if(this.cls.editMode)
                        this.setPathLink.innerHTML = "[set path]";

                    ajax = new CAjax('json');
                    ajax.cbData.cls = this.cls;                    
                    ajax.cbData.fname = this.fname;                    
                    ajax.cbData.folderCon = this.folderCon;                    
                    ajax.onload = function(ret)
                    {
                        if (!ret['error'])
                        {
                            this.cbData.cls.displayInlineFolder(this.cbData.field_name, ret, this.cbData.folderCon);
                            this.cbData.cls.mainObject.setValue(this.cbData.field_name, ret);
                        }
                    };
                    ajax.exec("/controller/Object/getFolderId",
                                [["obj_type", this.cls.mainObject.name], ["field", this.fname], ["oid", val]]);
                    
                }
            }
        }
    }
    else if ("fkey" == field.type && "user_files" == field.subtype)
    {
        var selfl = function(field_name, cls, opts, lbl)
        {
            var cbrowser = new AntFsOpen();
            cbrowser.cbData.field = field;
            cbrowser.cbData.field_name = field_name;
            cbrowser.cbData.frmcls = cls;
            cbrowser.cbData.opts = opts;
            cbrowser.cbData.lbl = lbl;
            // Look for folder variable for this object and set if exists
            var fldr = cls.lookForFolderRoot();
            if (fldr != -1)
            {
                cbrowser.setPathById(fldr);
            }
            cbrowser.onSelect = function(fid, name, path) 
            {
                this.cbData.frmcls.mainObject.setValue(this.cbData.field_name, fid);

                var lbl = this.cbData.lbl;

                if (this.cbData.opts.profileImage)
                    lbl.innerHTML = "<img src=\"/files/images/"+fid+"/48\" border='0' />";
                else
                    lbl.innerHTML = "<a href=\"/files/"+fid+"\">"+name+"</a>";
                
                // Add "clear" button
                if (!this.cbData.field.required)
                {
                    var sp = alib.dom.createElement("span", this.cbData.lbl);
                    sp.innerHTML = "&nbsp;";

                    var aclear = alib.dom.createElement("a", this.cbData.lbl);
                    aclear.href = 'javascript:void(0);';
                    aclear.mainObject = this.cbData.frmcls.mainObject;
                    aclear.fname = this.cbData.field.name;
                    aclear.lbl = this.cbData.lbl;
                    aclear.onclick = function() { this.lbl.innerHTML = "None Selected&nbsp;&nbsp;&nbsp;"; this.mainObject.setValue(this.fname, ""); }
                    aclear.innerHTML = "<img src='/images/icons/delete_10.png' />";
                }

                var sp = alib.dom.createElement("span", lbl);
                sp.innerHTML = "&nbsp;&nbsp;&nbsp;";
            }
            cbrowser.showDialog(); 
        }
        
        var fid = this.mainObject.getValue(field.name);
        if (fid)
        {
            if (opts.profileImage)
                input_obj.dv_label.innerHTML = "<img src=\"/files/images/"+fid+"/48\" border='0' />";
            else
                input_obj.dv_label.innerHTML = "<a href=\"/files/"+fid+"\">"+this.mainObject.getValueName(field.name)+"</a>&nbsp;";
                                          
            if (!field.required)
            {
                var aclear = alib.dom.createElement("a", input_obj.dv_inp);
                aclear.href = 'javascript:void(0);';
                aclear.mainObject = this.mainObject;
                aclear.fname = field.name;
                aclear.lbl = input_obj.dv_label;
                aclear.onclick = function() { this.lbl.innerHTML = "None Selected&nbsp;&nbsp;&nbsp;"; this.mainObject.setValue(this.fname, ""); }
                aclear.innerHTML = "<img src='/images/icons/delete_10.png' />";
                var sp = alib.dom.createElement("span", input_obj.dv_inp);
                sp.innerHTML = "&nbsp;&nbsp;&nbsp;";
            }
        }
        else
        {
            input_obj.dv_label.innerHTML = "None Selected&nbsp;&nbsp;&nbsp;";            
        }
            
            
        var btn = new CButton("Select File", selfl, [field.name, this, opts, input_obj.dv_label], "b1");
        btn.print(input_obj.dv_inp);
            
        if (opts.profileImage)
        {
            alib.dom.styleSet(val_con, "text-align", "center");
        }
        
        // Update the style set
        alib.dom.styleSet(input_obj.dv_label, "display", "block");
        
        alib.dom.styleSet(input_obj.dv_label, "float", "left");
        alib.dom.styleSet(input_obj.dv_text, "float", "left");
        alib.dom.styleSet(input_obj.dv_inp, "float", "left");
        
        alib.dom.styleSet(input_obj.dv_inp, "width", "90%px");
        alib.dom.styleSet(input_obj.dv_inp, "margin-top", "-5px");
    }
    else
    {        
        var rich = (opts.rich) ? true : false;
        
        var wdth;
        switch(field.type)
        {
		case "date":
			wdth = "100px";
			break;
		case "bool":
			wdth = "15px";
			break;
		default:
			wdth = "99%";
			break;
        }

		// Look for folder variable for this if a file and set if exists
		if (field.type == "object" && field.subtype == "file")
			opts.folderRoot = this.lookForFolderRoot();
        
        //this.mainObject.fieldGetValueInput(input_obj.dv_inp, field.name, {multiLine:multiLine, width:wdth, rich:rich, part:opts.part});
		var inp = new AntObject_FieldInput(this.mainObject, field.name);
		inp.render(input_obj.dv_inp, opts);
		input_obj.inp = inp;
        this.setFieldTextDisplay(field.name, opts, row);        
    }
}

/**
 * Print field where type = object_multi
 *
 * @param string fname the name of the field to print
 * @param DOMElement con the container where this field is to be printed
 * @param {Object} options Optional object with options properties for this field
 */
AntObjectLoader_Form.prototype.printFieldObjectMulti = function(fname, con, options)
{
    var field = this.mainObject.getFieldByName(fname);
    if (!field)
        return false;

    var opts = (options) ? options : new Object();

    // Print inline browser because all types are the same
    if (field.subtype)
    {
        var objb = new AntObjectBrowser(field.subtype);
		objb.setObjectContext(this.mainObject); // Load browser in context of this object
		this.objectBrowsers[this.objectBrowsers.length] = objb; // store reference for refreshing

        if (this.loaderCls.antView)
            objb.setAntView(this.loaderCls.antView);
		else
            objb.setAutoRefresh(10000);

        objb.loaderCls = this.loaderCls;
        objb.obj_reference = this.mainObject.name+":"+this.mainObject.id;
        if (field.subtype == "comment" || field.subtype == "activity")
        {
			objb.limit = 50;
            objb.setViewsFilter(this.mainObject.name);

			if (field.subtype == "comment")
            	objb.setFilter('obj_reference', this.mainObject.name+":"+this.mainObject.id);
			else
            	objb.setFilter('associations', this.mainObject.name+":"+this.mainObject.id);

            objb.printComments(con, this.mainObject.name+":"+this.mainObject.id, this.mainObject);
        }
        else
        {
            // Add "Add Exsiting"
            objb.addToolbarAction(function(tb, bcls, options) { options.cls.objectMultiAddExisting(tb, bcls, options); }, 
                                  [{cls:this, fname:field.name, subtype:field.subtype}]);

            // Put "Remove" custom action - will not delete object
            objb.addToolbarAction(function(tb, bcls, options) { options.cls.objectMultiRemove(tb, bcls, options); }, 
                                  [{cls:this, fname:field.name, subtype:field.subtype}]);

            // Hide toolbar actrion
            objb.optCreateNew = false;
            objb.optDelete = false;
            objb.optActions = false;

            // Check to see if we have any values set for this field
            var vals = this.mainObject.getMultiValues(fname);

            if (vals.length)
            {
                for (i = 0; i < vals.length; i++)
                {
                    objb.setFilter('id', vals[i], (i) ? "or" : "and");
                }
            }
            else
            {
                objb.skipLoad = true;
            }

            objb.printInline(con);

        }
    }
    else
    {
        // Print associations
    }
}

/**
 * Add "Add Existing" toolbar button to AntObjectBrowser for object_multi
 *
 * @param CToolbar tb pointer to CToolbar in the object browser
 * @param AntObjectBrowser bcls a reference to the browser class
 * @param object options various options
 */
AntObjectLoader_Form.prototype.objectMultiAddExisting = function(tb, bcls, options)
{
    // Inline function to select a new object
    var selobj = function(cls, browsercls, options)
    {
        var ob = new AntObjectBrowser(options.subtype);
        ob.options.field_name = options.fname;
        ob.options.obj_type = options.subtype;
        ob.options.frmcls = cls;
        ob.options.browsercls = browsercls;
        ob.onSelect = function(oid) 
        {
            this.options.frmcls.mainObject.setMultiValue(this.options.field_name, oid);
            this.options.browsercls.setFilter('id', oid, "or");
            this.options.browsercls.refresh();
        }
        ob.displaySelect();
    }

    var btn = new CButton("Add Existing", selobj, [this, bcls, options], "b2");
    tb.AddItem(btn.getButton());
}

/**
 * Add "Remove" toolbar button to AntObjectBrowser for object_multi
 *
 * @param CToolbar tb pointer to CToolbar in the object browser
 * @param AntObjectBrowser bcls a reference to the browser class
 * @param object options various options
 */
AntObjectLoader_Form.prototype.objectMultiRemove = function(tb, bcls, options)
{
    // Inline function to select a new object
    var selobj = function(cls, browsercls, options)
    {
        var ob = new AntObjectBrowser(options.subtype);
        ob.options.field_name = options.fname;
        ob.options.obj_type = options.subtype;
        ob.options.frmcls = cls;
        ob.options.browsercls = browsercls;
        ob.onSelect = function(oid) 
        {
            this.options.frmcls.mainObject.delMultiValue(this.options.field_name, oid);
            this.options.browsercls.removeFilter("id", oid);
            this.options.browsercls.refresh();
        }
        ob.displaySelect();
    }

    var btn = new CButton("Remove", selobj, [this, bcls, options], "b3");
    tb.AddItem(btn.getButton());
}

/**
 * Render the non-edit mode display for each field
 *
 * @param {string} fname The field name we are displaying
 * @param {Object} options Object containing form options
 * @param {DOMElement} row  Row element of the input field
 */
AntObjectLoader_Form.prototype.setFieldTextDisplay = function(fname, options, row)
{
    var input_obj = null;
    var opts = (options) ? options : new Object();
    var field = this.mainObject.getFieldByName(fname);

    if (!field)
        return;
        
    for (var i = 0; i < this.inputs.length; i++)
    {
        if (this.inputs[i].fname == fname)
        {
            input_obj = this.inputs[i];
            
            if(row)
                input_obj.fieldRow = row;
            
            if ("object" == field.type && "file" == field.subtype) 
			{
                input_obj.dv_text.innerHTML = "";
				input_obj.dv_text.id = "myfiletextdiv";
				
				var value = this.mainObject.getValue(fname);
				var valueName = this.mainObject.getValueName(fname);
				if (value)
				{
					if (input_obj.options.profileImage)
						input_obj.dv_text.innerHTML = "<img src='/antfs/images/" + value + "/48' />";
					else
						input_obj.dv_text.innerHTML = "<a href='/files/" + value + "'>" + valueName + "</a>";
				}
				else
				{
					if (input_obj.options.profileImage)
						input_obj.dv_text.innerHTML = "<img src='/images/icons/objects/files/image_48.png' />";
					else
						input_obj.dv_text.innerHTML = "Not Set";
				}
			}
            else if ("fkey" == field.type || "object" == field.type)
            {
                input_obj.dv_text.innerHTML = "";
                // Show user image
                if (field.subtype=='user' && field.showimage)
                {
                    var imgCon = alib.dom.createElement("span", input_obj.dv_text)
                    // Get id
                    var val = this.mainObject.getValue(field.name)
                    
                    if (val)
                    {                        
                        /*var funct = function(ret, con)
                        {
                            if (!ret['error'])
                                con.innerHTML = "<img src='/files/images/"+ret+"/48/48' align='left' />&nbsp;";
                        }
                        var rpc = new CAjaxRpc("/controller/User/userGetImage", "userGetImage", [["uid", val]], funct, [imgCon], AJAX_POST, true, "json");*/
                        
                        ajax = new CAjax('json');
                        ajax.cbData.imgCon = imgCon;
                        ajax.onload = function(ret)
                        {
                            if (!ret['error'])
                                this.cbData.con.innerHTML = "<img src='/antfs/images/"+ret+"/48' align='left' />&nbsp;";
                        };
                        ajax.exec("/controller/User/userGetImage",
                                    [["uid", val]]);
                    }
                }

                var tmpCon = alib.dom.createElement("span", input_obj.dv_text)
                if ("object" == field.type)
                {
					var fkeyVal = this.mainObject.getValue(field.name);
					var subType = "";

					if (field.subtype)
					{
						subType = field.subtype;
					}
					else
					{
						var refParts = fkeyVal.split(":");
							
						if (refParts.length == 2)
						{
							subType = refParts[0];
							fkeyVal = refParts[1];
						}
					}

					var buf = "";
                    if(fkeyVal && subType)
                    {
						if (!field.subtype)
						{
							var refObj = new CAntObject(subType);

							if (refObj.getIcon(16, 16))
								buf = "<img src='" + refObj.getIcon(16, 16) + "'> ";
							else
								buf = refObj.title + ": ";
						}

                        buf += "<a href=\"javascript:void(0);\" onclick=\"loadObjectForm('" + subType + "', "
                                             + "'" + fkeyVal + "');\">"
                                             + this.mainObject.getValueName(field.name) + "</a>";

						AntObjectInfobox.attach(subType, fkeyVal, tmpCon);
                    }
                    else
                    {
                        buf = "None Selected";
                    }

                	tmpCon.innerHTML = buf;
                }
                else
                {
                    var fkeyVal = this.mainObject.getValueName(field.name);
                    tmpCon.innerHTML = fkeyVal;
                }
            }
            else if ("fkey_multi" == field.type)
            {
                input_obj.dv_text.innerHTML = this.mainObject.getMultiValueStr(field.name);
            }
            else if ("alias" == field.type)
            {
                var buf = "";
                var val = this.mainObject.getValue(field.name);
                if (val)
                {
                    var tmpfld = this.mainObject.getFieldByName(val);
                    if (tmpfld)
                        buf = tmpfld.title;
                }
                input_obj.dv_text.innerHTML = buf;
            }
            else if ("bool" == field.type || "boolean" == field.type)
            {
                var val = this.mainObject.getValue(field.name);
                var buf = (val) ? "Yes" : "No";
                input_obj.dv_text.innerHTML = buf;
            }
            else
            {
                var val = this.mainObject.getValueStr(field.name);                
                if (typeof val == "string" && field.subtype!="html" && !input_obj.options.rich)
                {
                    var re = new RegExp ("\n", 'gi') ;
                    val = val.replace(re, "<br />");
                }

                if (typeof val == "string" && (field.subtype=="html" || input_obj.options.rich))
					alib.dom.styleAddClass(input_obj.dv_text, "formHtmlBody");

                // Check if we are only displaying part of the value for some reason (like times)
                switch (input_obj.options.part)
                {
                case 'time':
                    if (field.type == "timestamp")
                        val = this.mainObject.getInputPartValue(field.name, val, "time");
                    break;
                case 'date':
                    if (field.type == "timestamp")
                        val = this.mainObject.getInputPartValue(field.name, val, "date");
                    break;
                }

                // Activate infocenter_document wikilinks                
                if (this.mainObject.obj_type == "infocenter_document" && field.type == "text")
                    val = this.textActiveWikiLink(val);

				// Convert email addresses into mailto links
				val = this.textActivateLinks(val);

              	input_obj.dv_text.innerHTML = val;
            }
            
			/**
			 * The below code hides fields that are empty
			 */
            if(input_obj.fieldRow && field.type != "object_multi")
            {
                if(!this.editMode &&
				   (input_obj.dv_text.innerHTML.length == 0 || (field.type == "fkey" && fkeyVal.length == 0) || input_obj.options.editmodeonly))
				{
                    alib.dom.styleSet(input_obj.fieldRow, "display", "none");
				}
                else
				{
                    input_obj.fieldRow.setAttribute("style","");
					
					// Set values present because if not set the parent fieldset will be hidden
					if (input_obj.fieldSet)
						input_obj.fieldSet.valuesPresent = true;
				}
            }
			else if (field.type == "object_multi" && input_obj.fieldSet)
				input_obj.fieldSet.valuesPresent = true; // show comments always


			if (input_obj.fieldSet)
			{
				if (typeof input_obj.fieldSet.valuesPresent == "undefined" || input_obj.fieldSet.valuesPresent == false)
					input_obj.fieldSet.hide();
				else
					input_obj.fieldSet.show();
			}
        }
    }
}

/**
 * Look for wiki links and convert them to clickable links
 *
 * @param {string} val The value to convert
 */
AntObjectLoader_Form.prototype.textActiveWikiLink = function(val)
{
    var buf = val;

	if (!buf || typeof buf != "string")
		return buf;

    // Convert [[id|Title]]
    //var re=/\[\[(.*?)\|(.*?)\]\]/gi
    var re=/\[\[([^|\]]*)?\|(.*?)\]\]/gi
    buf = buf.replace(re, "<a href=\"/obj/infocenter_document/$1\" target=\"_blank\">$2</a>");

    // Convert [[id]] with id
    //var re=/\[\[(.*?)]\]/gi
    var re=/\[\[([0-9]+)]\]/gi
    buf = buf.replace(re, "<a href=\"/obj/infocenter_document/$1$1\" target=\"_blank\">$1</a>");

    // Convert [[id]] with uname
    //var re=/\[\[(.*?)]\]/gi
    var re=/\[\[([a-zA-Z0-9_-]+)]\]/gi
    buf = buf.replace(re, "<a href=\"/obj/infocenter_document/uname:$1\" target=\"_blank\">$1</a>");

    return buf;
}

/**
 * Look for email addresses and convert them to clickable mailto links
 *
 * @param {string} val The value to convert
 */
AntObjectLoader_Form.prototype.textActivateLinks = function(val)
{
    var buf = val;

	if (!buf || typeof buf != "string")
		return buf;

	// Repalce all existing link swith target=blank
    var exp = /(^|>|\s)(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    buf = buf.replace(/<a\s+href=/gi, '<a target="_blank" href=');
		
	//URLs starting with http://, https://, or ftp://
    //var exp = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    var exp = /(^|>|\s)(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
    buf = buf.replace(exp, '<a href="$2" target="_blank">$2</a>');

    //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
    exp = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    buf = buf.replace(exp, '$1<a href="http://$2" target="_blank">$2</a>');

    //Change email addresses to mailto:: links.
    exp = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
	var repWith = "<a href=\"javascript:Ant.Emailer.compose('$1', {obj_type:'" 
					+ this.mainObject.obj_type + "', oid:'" + this.mainObject.id + "'});\">$1</a>"
    buf = buf.replace(exp, repWith);
    //buf = buf.replace(exp, '<a href="mailto:$1">$1</a>');

	// Activate email addresses -- this is what we used before
	//var regEx = /(\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)/;
	//buf = buf.replace(regEx, "<a href=\"mailto:$1\">$1</a>");

    return buf;
}

/**
 * Called once the form has finished rendering
 */
AntObjectLoader_Form.prototype.formLoaded = function()
{
    for (var i = 0; i < this.loadReports.length; i++)
    {
        this.loadReport(this.loadReports[i].rid, this.loadReports[i].filterby, this.loadReports[i].con);
    }

    this.loaderCls.resize();

	// Load any help tours
	Ant.HelpTour.loadTours(this.formCon);
}

AntObjectLoader_Form.prototype.lookForFolderRoot = function()
{
    var fields = this.mainObject.getFields();
    for (var i = 0; i < fields.length; i++)
    {
        var field = fields[i];
        if (field.type == "object"  && field.subtype == "folder")
        {
            var val = this.mainObject.getValue(field.name);
            if (val)
            {
                return val;
            }
        }
    }
    return -1;
}

AntObjectLoader_Form.prototype.loadPlugin = function(pname, con)
{
    var plugin = null;

    for (var i = 0; i < this.plugins.length; i++)
    {
        if (this.plugins[i].name == pname) // pname should be the same as this.name in the plugin
            plugin = this.plugins[i];
    }
    
    if (plugin)
    {
        plugin.formObj = this;
        plugin.mainObject = this.mainObject;
        plugin.olCls = this.loaderCls;
        if (this.loaderCls)
            plugin.toolbar = this.toolbar;
        
        plugin.main(con);
        plugin.frmLoaded = true;
    }
    else
    {
        con.innerHTML = "Plugin not found: " + pname;
    }
}

/**************************************************************************
* Function:     loadRecurrence    
*
* Purpose:        Load recurrence form.
*
* Params:        (element) con : the dom element to print to
**************************************************************************/
AntObjectLoader_Form.prototype.loadRecurrence = function(con, options)
{
    if (!options.hidelabel)
    {
        var lbl = alib.dom.createElement("div", con);
        alib.dom.styleSetClass(lbl, "formLabel");
        alib.dom.styleSet(lbl, "width", "100px");
        alib.dom.styleSet(lbl, "display", "inline-block");
        lbl.innerHTML = "Repeats";
    }

    var link = alib.dom.createElement("a", con);
    link.href = 'javascript:void(0);';
    if (this.mainObject.getRecurrencePattern(false))
    {
        link.innerHTML = this.mainObject.recurrencePattern.getHumanDesc();
    }
    else
    {
        // Set callback to change this label if the recurrencePattern does finally load
        var onchangeobj = new Object();
        this.watchChanges[this.watchChanges.length] = onchangeobj; 
        onchangeobj.link = link;
        onchangeobj.onchange = function(val)
        {
            if (this.mainObject.getRecurrencePattern(false))
                this.link.innerHTML = this.mainObject.recurrencePattern.getHumanDesc();
        }

        link.innerHTML = "Does not repeat";
    }
    link.obj = this.mainObject;
    link.descDiv = link;
    link.onclick = function()
    {
        var rp = this.obj.getRecurrencePattern(true);
        rp.descDiv = this;
        if (rp.fieldDateStart && rp.dateStart == "")
        {
            var field = this.obj.getFieldByName(rp.fieldDateStart);
            if (field)
            {
                var val = this.obj.getValue(rp.fieldDateStart);
                rp.dateStart = this.obj.getInputPartValue(rp.fieldDateStart, val, "date");
            }
        }
            

        rp.onchange = function() 
        { 
            this.descDiv.innerHTML = this.getHumanDesc(); 
        }
        rp.showDialog();
    }
}

/**************************************************************************
* Function:     loadReport    
*
* Purpose:        Load inline report into the object form
**************************************************************************/
AntObjectLoader_Form.prototype.loadReport = function(rid, filterby, con)
{    
    /*var rtp = new CReport();
    rtp.chart_width = (con.offsetWidth < 800) ? con.offsetWidth : 800;
    rtp.con = con;
    rtp.hideloading = true;
    rtp.clswid = this;
    rtp.addFilterCondition("and", filterby, "is_equal", this.mainObject.id);
    rtp.onload = function()
    {
        if (!this.cube)
            return;

        //var div_frm = alib.dom.createElement("div", this.con);
        //this.printCubeMicroForm(div_frm, true);
        var div_chart = alib.dom.createElement("div", this.con);
        this.cube.printChart(div_chart);
    }
    rtp.load(rid);*/
    
    var reportObject = new Report(rid);
    reportObject.cls = this;
    reportObject.displayReportName = false;
    reportObject.cbData.con = con;
    reportObject.cbData.filterby = filterby;    
    reportObject.chartWidth = (con.offsetWidth < 800) ? con.offsetWidth : 800;
    var height = (reportObject.chartWidth / 4) * 3;    
    reportObject.chartHeight = height;
    
    // over-ride the onload function
    reportObject.onload = function(ret)
    {        
        if (this.cbData.filterby)
        {
            if(!this.filterData)
                this.filterData = new Array();
            
            var filterLength = this.filterData.length;
            this.filterData[filterLength] = new Object();
            var reportFilter = this.filterData[filterLength];
            
            reportFilter.blogic = "and";
            reportFilter.fieldName = filterby;
            reportFilter.operator = "is_equal";
            reportFilter.condValue = this.cls.mainObject.id;
        }
        
        var chartCon = alib.dom.createElement("div", this.cbData.con);
        this.print(chartCon);
    }
    
    reportObject.loadReport();
}

AntObjectLoader_Form.prototype.displayInlineFolder = function(field_name, folder_id, con)
{
    if (folder_id && con)
    {
        con.innerHTML = "";
        var browser = new AntObjectBrowser("file");
        browser.setBrowseBy("folder_id", ".", folder_id);
        browser.printInline(con);

		this.objectBrowsers[this.objectBrowsers.length] = browser; // store reference for refreshing
    }
}

AntObjectLoader_Form.prototype.onNameChange = function(name)
{
}

/**
 * @fileoverview This class is a global object form plugin for managing membership
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 */
function AntObjectLoader_FormMem()
{
	this.data = new Object();

	this.name = "members";
	this.title = "Members";
	this.mainObject = null;
	this.newinvitations = false; // Flag set to true if new attendee has been added

	this.members = new Array(); // List of current attendees
	this.field = ""; // Field in mainObject that contains the list of members
	this.saveParentObject = false; // Flag used when saving. If set to true, then parent object will need to be saved when all done

	// Containers
	this.confirmedCon = null;
	this.confirmedTable = null;
	this.declinedCon = null;
	this.declinedTable = null;
	this.awaitingCon = null;
	this.awaitingTable = null;
}

/**
 * Required plugin main function
 */
AntObjectLoader_FormMem.prototype.main = function(con)
{
	this.buildInterface(con);
}

/**
 * Called from object loader when object is saved.
 *
 * This should take care of saving new members, sending invitations, and alerting existing members of changes.
 * Of course, each of the actions will usually require feedback from the end-user so the bindCallback function should 
 * be utilized by the calling class to continue processing once finished.
 */
AntObjectLoader_FormMem.prototype.save = function()
{
	for (var i = 0; i < this.members.length; i++)
	{
		this.members[i].processed = false;
	}
	
	// If no members just skip to onsave so plugin can close
	if (this.members.length < 1)
		this.onsave();
	else
		this.saveMembers();
}

/**
 * This is a recurrsive function used to process each member. When done onsave is called.
 */
AntObjectLoader_FormMem.prototype.saveMembers = function()
{
	var memtoProcess = null;

	// Loop through and look for unprocessed members
	for (var i = 0; i < this.members.length; i++)
	{
		if (!this.members[i].processed)
		{
			if ((this.members[i].obj.id && this.members[i].obj.dirty) || !this.members[i].obj.id)
			{
				memtoProcess = this.members[i];
				break;
			}
		}
	}

	if (memtoProcess)
	{
		memtoProcess.obj.cbProps.memCls = this;
		memtoProcess.obj.cbProps.memObj = memtoProcess;
		memtoProcess.wasnew = (memtoProcess.obj.id) ? false : true;

		if (memtoProcess.action == "delete")
		{
			memtoProcess.obj.onremove = function()
			{
				this.cbProps.memObj.processed = true; // set processed flag

				// Remove the member record referene into the parent object
				this.cbProps.memCls.mainObject.delMultiValue(this.cbProps.memCls.field, this.id);
				this.cbProps.memCls.saveParentObject = true;

				// Continue processing through members
				this.cbProps.memCls.saveMembers();
			}

			memtoProcess.obj.remove();
		}
		else
		{
			memtoProcess.obj.setValue("obj_reference", this.mainObject.name+":"+this.mainObject.id);
			memtoProcess.obj.onsave = function()
			{
				this.cbProps.memObj.processed = true; // set processed flag

				if (this.cbProps.memObj.wasnew)
				{
					// Save the new member record reference into the parent object
					this.cbProps.memCls.mainObject.setMultiValue(this.cbProps.memCls.field, this.id);
					this.cbProps.memCls.saveParentObject = true;
				}
				
				// Continue processing through members
				this.cbProps.memCls.saveMembers();
			}
			memtoProcess.obj.onsaveError = function()
			{
				this.cbProps.memObj.processed = true; // set processed flag
				this.cbProps.memCls.saveMembers();
			}

			memtoProcess.obj.save();
		}
	}
	else // All done
	{
		// If new members were created, then they were added to the parent object 'field' and should be saved.

		if (this.saveParentObject)
		{
			// This is causing an infinate loop because the main form calls pulugs onload.
			// Settings repressOnSave to true bypassed the onsave for this call only
			this.mainObject.save({repressOnSave:true});
		}

		// Send notifications will be responsible for calling onsave
		this.checkSendNotifications();
	}
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_FormMem.prototype.onsave = function()
{
}

/**
 * As the user if notifactions should be sent
 * 
 * Currently only invitations are sent for calendar_events. In the future this could easily be
 * expaneded to a more generic interface, but for now calendar_events will get special treatment.
 */
AntObjectLoader_FormMem.prototype.checkSendNotifications = function()
{
	if (this.members.length>0)
	{
		var ttl = "Send Updates &amp; Invitations";
		var dlg = new CDialog(ttl);

		var dv = alib.dom.createElement("div");

		var dv_lbl = alib.dom.createElement("div", dv);
		dv_lbl.innerHTML = "Would you like to send updates and/or invitations?"
		alib.dom.styleSet(dv_lbl, "padding-bottom", "5px");
		var dv_btn = alib.dom.createElement("div", dv);
		var btn = new CButton("Yes, Send", function(dlg, cls) { dlg.hide(); cls.sendNotifications(); }, [dlg, this], "b2");
		btn.print(dv_btn);
		var btn = new CButton("Yes, Only Send New Invites", function(dlg, cls) { dlg.hide(); cls.sendNotifications(true); }, [dlg, this], "b1");
		btn.print(dv_btn);
		var btn = new CButton("No, Don't Send", function(dlg, cls) { dlg.hide(); cls.onsave(); }, [dlg, this], "b1");
		btn.print(dv_btn);
		alib.dom.styleSet(alib.dom.createElement("div", dv), "clear", "both");

		dlg.customDialog(dv, 400);
	}
	else
	{
		this.onsave();
	}
}

/**
 * Send notifications to members when event is saved
 *
 * @param bool onbynew	true if only sending new invitations and no updates
 */
AntObjectLoader_FormMem.prototype.sendNotifications = function(onlynew)
{
	var xhr = new alib.net.Xhr();

	// Force return of data immediately
	alib.events.listen(xhr, "load", function(evt) { 
		var data = this.getResponse();
		console.log(data);
		evt.data.defCls.onsave();
	}, {defCls:this});

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
		evt.data.defCls.onsave();
	}, {defCls:this});

	var ret = xhr.send("/controller/Object/sendInvitations", "POST", {
		obj_type: this.mainObject.obj_type, 
		oid: this.mainObject.id, 
		field: this.field,
		onlynew: (onlynew) ? 't' : 'f'
	});
}

/**
 * Print form
 *
 * @param DOMElement con	The container where the members form will reside
 */
AntObjectLoader_FormMem.prototype.buildInterface = function(con)
{
	var frmDiv = alib.dom.createElement("div", con);

	// Will float this right
	var btn_div = alib.dom.createElement("div", frmDiv);

	var inp_div = alib.dom.createElement("div", frmDiv);
	var inp_notify = alib.dom.createElement("input", inp_div);
	var t = new CTextBoxList(inp_notify, { bitsOptions:{editable:{addKeys: [188, 13, 186, 59], addOnBlur:true }}, 
							 plugins: {autocomplete: { placeholder: false, minLength: 2, queryRemote: true, 
							 							remote: {url:"/users/json_autocomplete.php"}}}});
	var btn = new alib.ui.Button("Add", {
		className:"b1 grRight", 
		tooltip:"Add", 
		cls: this,
		t: t,
		onclick:function(evt) {
			this.cls.submitAddAttendee(this.t);
		}
	});
	btn.print(btn_div);

	// Set widths and floats
	alib.dom.styleSet(inp_div, "margin-right", (btn.getWidth()) + "px");
	alib.dom.styleSet(btn_div, "float", "right");

	// Confirmed 
	var subcon = alib.dom.createElement("div", con);
	subcon.style.display = "none";
	var hdr = alib.dom.createElement("h3", subcon);
	hdr.innerHTML = "Confirmed";
	this.confirmedCon = subcon;

	// Awaiting Reply
	var subcon = alib.dom.createElement("div", con);
	subcon.style.display = "none";
	var hdr = alib.dom.createElement("h3", subcon);
	hdr.innerHTML = "Awaiting Reply";
	this.awaitingCon = subcon;

	// Declined
	var subcon = alib.dom.createElement("div", con);
	subcon.style.display = "none";
	var hdr = alib.dom.createElement("h3", subcon);
	hdr.innerHTML = "Declined";
	this.declinedCon = subcon;


	// Load existing members
	if (this.field)
	{
		var vals = this.mainObject.getMultiValues(this.field);

		for (var i = 0; i < vals.length; i++)
		{
			if (!vals[i] || vals[i] == 0)
				continue;

			var member = new Object();
			member.id 			= vals[i];
			member.obj 			= new CAntObject("member", vals[i]);
			member.action 		= 'save';

			member.obj.cbProps.cls = this;
			member.obj.onload = function()
			{
				this.cbProps.cls.addAttendee(this.id, this.getValue("name"), this.getValue("role"), this.getValue("f_accepted"));
			}
			member.obj.load(vals[i]);

			this.members[this.members.length] = member;
		}
	}
}

/**
 * Print form
 *
 * @param CTextBoxList textBoxList The list of items to add
 */
AntObjectLoader_FormMem.prototype.submitAddAttendee = function(textBoxList)
{
	var values = textBoxList.getValues();
	for (var i = 0; i < values.length; i++)
	{
		if (values[i][0] || values[i][1])
		{
			var att_obj = (values[i][0]) ? values[i][0] : values[i][1];

			var member = new Object();
			member.id 			= "new"+this.members.length;
			member.obj 			= new CAntObject("member");
			member.action 		= 'save';

			member.obj.setValue("name", (values[i][2]) ? values[i][2] : att_obj);

			// If there is an object reference for this member then save
			if (values[i][0])
			{
				var parts = values[i][0].split(":");
				if (parts.length > 1)
					member.obj.setValue("obj_member", values[i][0]);
			}

			this.members[this.members.length] = member;

			this.addAttendee(member.id, member.obj.getValue("name"), member.obj.getValue("role"), '');

			// Set send invitation flag
			this.newinvitations = true;
		}
	}
	textBoxList.clear();
}

/**
 * Add an attendee to the UI
 *
 * @param CTextBoxList textBoxList The list of items to add
 */
AntObjectLoader_FormMem.prototype.addAttendee = function(id, email_name, position, accepted)
{
	var f_newtbl = false;
	
	// Clean up position a bit
	if (position == null)
		position = "";

	switch (accepted)
	{
	case 't':
		if (!this.confirmedTable)
		{
			this.confirmedTable = new CToolTable("100%");
			f_newtbl = true;
		}
		var tbl = this.confirmedTable;
		var con = this.confirmedCon;
		break;
	case 'f':
		if (!this.declinedTable)
		{
			this.declinedTable = new CToolTable("100%");
			f_newtbl = true;
		}
		var tbl = this.declinedTable;
		var con = this.declinedCon;
		break;
	default:
		if (!this.awaitingTable)
		{
			this.awaitingTable = new CToolTable("100%");
			f_newtbl = true;
		}
		var tbl = this.awaitingTable;
		var con = this.awaitingCon;
		break;
	}

	if (f_newtbl)
	{
		tbl.addHeader("User/Email");
		tbl.addHeader("Role/Position");
		tbl.addHeader("Delete", "center", "50px");
		tbl.print(con);

		con.style.display = "block";
	}

	var inp = alib.dom.createElement("input");
	alib.dom.styleSet(inp, "width", "96%");
	inp.aid = id;
	inp.value = position;
	inp.cls = this;
	inp.onchange = function()
	{
		for (var i = 0; i < this.cls.members.length; i++)
		{
			if (this.cls.members[i].id == this.aid)
				this.cls.members[i].obj.setValue("role", this.value);
		}
		
	}

	var rw = tbl.addRow();
	rw.addCell(email_name, null, null, "30%");
	rw.addCell(inp);
	var del_dv = alib.dom.createElement("div");
	rw.addCell(del_dv, true, "center");
	del_dv.innerHTML = "<img border='0' src='/images/icons/delete_16.png' />";
	alib.dom.styleSet(del_dv, "cursor", "pointer");
	del_dv.m_rw = rw;
	del_dv.m_id = id;
	del_dv.cls = this;
	del_dv.onclick = function()
	{
		ALib.Dlg.confirmBox("Are you sure you want to remove this attendee?", "Remove Attendee", [this.m_rw, this.cls]);
		ALib.Dlg.onConfirmOk = function(row, cls)
		{
			row.deleteRow();

			// Remove attendee
			for (var i = 0; i < cls.members.length; i++)
			{
				if (cls.members[i].id == id)
				{
					if (!cls.members[i].obj.id)
						cls.members.splice(i, 1);
					else
						cls.members[i].action = "delete"; // Set deletion flag for save
				}
			}
		}
	}	
}

/**
 * @fileoverview This class is a global object form plugin for managing attachments
 *
 * @author     Marl Tumulak, marl.tumulak@aereus.com.
 *             Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 */
function AntObjectLoader_FormAttachments()
{
    this.data = new Object();

    this.name = "attachments";  // should be the same, when calling the plugin
    this.title = "Attachments";
    this.mainObject = null;    
    this.formObj = null;
    
    this.attachedFiles = new Array();    
    this.saveParentObject = false; // Flag used when saving. If set to true, then parent object will need to be saved when all done
    this.attachmentUploading = false;
    this.loaded = false;

    // Containers
    this.mainCon = null;
    this.uploadCon = null;    
    this.resultCon = null;    
    this.filesCon = null;    
}

/**
 * Required plugin main function
 */
AntObjectLoader_FormAttachments.prototype.main = function(con)
{
    this.mainCon = con;    
    this.uploadCon = alib.dom.createElement("div", this.mainCon);
    this.filesCon = alib.dom.createElement("div", this.mainCon);    
    
    this.buildInterface();
}

/**
 * Print form 
 */
AntObjectLoader_FormAttachments.prototype.buildInterface = function()
{
    if (!this.loaded)
    {
        this.uploadCon.innerHTML = "";
        
        // Build Attachments
        var divAttachment = alib.dom.createElement("div", this.uploadCon);
        var divButton = alib.dom.createElement("div", divAttachment);
        this.resultCon = alib.dom.createElement("div", divAttachment);

        var cfupload = new AntFsUpload('%tmp%');
        cfupload.cbData.cls = this;
        
        cfupload.onRemoveUpload = function (fid) 
        {
            this.cbData.cls.attachedFiles = new Array();
            
            for(file in this.m_uploadedFiles)
            {
                var currentFile = this.m_uploadedFiles[file];
                var ind = this.cls.attachedFiles.length;
                var fileId = currentFile['id'];
                
                if(fileId !== fid)
                    this.cbData.cls.attachedFiles[ind] = fileId;
            }
        }

        cfupload.onUploadStarted = function () 
        { 
            this.cls.attachmentUploading = true;         
        }

        cfupload.onQueueComplete = function () 
        { 
            this.cbData.cls.attachmentUploading = false;
            
            this.cbData.cls.attachedFiles = new Array();
            
            for(file in this.m_uploadedFiles)
            {
                var currentFile = this.m_uploadedFiles[file];
                var ind = this.cbData.cls.attachedFiles.length;
                
                this.cbData.cls.attachedFiles[ind] = currentFile['id'];
            }
            
            this.cbData.cls.formObj.toggleEdit(true);
        }
        
        cfupload.showTmpUpload(divButton, this.resultCon, 'Add Attachment');
        
        this.loaded = true;
    }
    
    this.loadSavedFiles();
}

/**
 * Called from object loader when object is saved.
 *
 * This should take care of saving attached file
 */
AntObjectLoader_FormAttachments.prototype.save = function()
{
    
    if(this.attachmentUploading) // uploading files still in progress
    {
        alert('There are still file(s) being uploaded. Only the files that have been finished are saved.')
    }
    
    var args = new Array();    
    args[args.length] = ['attachedFiles', this.attachedFiles];
    args[args.length] = ['id', this.mainObject.id];
    args[args.length] = ['typeName', this.mainObject.obj_type];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        this.cls.attachedFiles = new Array();
        this.cls.resultCon.innerHTML = "";
        this.cls.loadSavedFiles();
    };
    ajax.exec("/controller/AntFs/saveAttachment", args);
    
    this.onsave();
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_FormAttachments.prototype.onsave = function()
{
}

/**
 * This will load the saved attachment files
 */
AntObjectLoader_FormAttachments.prototype.loadSavedFiles = function()
{
    this.filesCon.innerHTML = "<div class='loading'></div>";
    
    var args = new Array();    
    args[args.length] = ['id', this.mainObject.id];
    args[args.length] = ['typeName', this.mainObject.obj_type];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        this.cls.filesCon.innerHTML = "";
        if(!ret)
            return;
            
        if(!ret.error)
        {
            this.cls.buildFilesRow(ret);
        }        
    };
    ajax.exec("/controller/AntFs/getAttachment", args);
}

/**
 * This will build the attached files table row
 */
AntObjectLoader_FormAttachments.prototype.buildFilesRow = function(files)
{    
    var fileTable = new CToolTable();
    fileTable.print(this.filesCon);
    
    for(file in files)
    {
        var currentFile = files[file];
        
        var rw = fileTable.addRow();
        
        var nameLink = alib.dom.createElement("a");
        nameLink.href = "javascript:void(0);";
        nameLink.id = currentFile.id;
        nameLink.onclick = function() 
        { 
            window.open("/antfs/"+this.id); 
        }
        nameLink.innerHTML = currentFile.name;
        rw.addCell(nameLink);
        
        var removeLink = alib.dom.createElement("a");
        removeLink.href = "javascript:void(0);";
        removeLink.cls = this;
        removeLink.id = currentFile.id;
        removeLink.name = currentFile.name;
        removeLink.rw = rw;
        removeLink.onclick = function() 
        {
            if(confirm("Are you sure to removed " + this.name + "?"))
                this.cls.removeSavedFile(this.rw, this.id, this.name);
        }
        removeLink.innerHTML = "<img src='/images/icons/deleteTask.gif' border='0'>";
        rw.addCell(removeLink);
    }
}

/**
 * This will remove the saved attached file
 */
AntObjectLoader_FormAttachments.prototype.removeSavedFile = function(rw, id, name)
{
    var args = new Array();    
    args[args.length] = ['id', id];
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.name = name;
    ajax.rw = rw;
    ajax.dlg = showDialog("Deleting " + name + ", please wait...");
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        else
        {
            this.dlg.hide();
            ALib.statusShowAlert(this.name + " has been deleted!", 3000, "bottom", "right");
            this.rw.deleteRow();
        }
    };
    ajax.exec("/controller/AntFs/removeAttachment", args);
}

/**
 * @fileoverview This class is a global object form plugin for managing the uname
 *
 * @author     Marl Tumulak, marl.tumulak@aereus.com.
 *             Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */
 
 /**
 * Class constructor
 */
function AntObjectLoader_Uname()
{
    this.data = new Object();
    this.uname = null;
    this.editMode = false;
    
    this.name = "uname";  // should be the same, when calling the plugin
    this.title = "Uname";
    this.mainObject = null;
    
    this.saveParentObject = false; // Flag used when saving. If set to true, then parent object will need to be saved when all done

    // Containers
    this.mainCon = null;
    this.ajax = new CAjax('json'); // This will be used to check the uname as the user types. This will enable us to abort the previous ajax request
    this.ajax.cbData.cls = this;
}

/**
 * Required plugin main function
 */
AntObjectLoader_Uname.prototype.main = function(con)
{
    this.mainCon = con;
    
    if(this.mainObject.id)
    {
        this.editMode = false;
        this.getUname();
    }        
}

/**
 * Print form 
 */
AntObjectLoader_Uname.prototype.buildInterface = function()
{
    this.mainCon.innerHTML = "";
    var unameCon = alib.dom.createElement("div", this.mainCon);
    
    this.data.label = alib.dom.setElementAttr(alib.dom.createElement("span", unameCon), [["innerHTML", "URI: "]]);
    this.data.tooltip = alib.dom.setElementAttr(alib.dom.createElement("img", unameCon), [["src", "/images/icons/help_12.png"]]);
    this.data.input = alib.dom.setElementAttr(alib.dom.createElement("input", unameCon), [["value", this.uname]]);
    this.data.display = alib.dom.setElementAttr(alib.dom.createElement("span", unameCon), [["innerHTML", this.uname]]);
    this.data.status = alib.dom.setElementAttr(alib.dom.createElement("span", unameCon));
    
    // Set the classes
    alib.dom.styleSetClass(this.data.label, "formLabel");
    alib.dom.styleSetClass(this.data.display, "formValue");
    
    // Set inline style
    alib.dom.styleSet(this.data.status, "margin-left", "10px");
    alib.dom.styleSet(this.data.display, "padding-bottom", "0px");
    alib.dom.styleSet(this.data.input, "width", "250px");
    alib.dom.styleSet(this.data.tooltip, "margin-right", "10px");
    alib.dom.styleSet(this.data.tooltip, "cursor", "help"); 
    
    alib.ui.Tooltip(this.data.tooltip, "Each object has a unique name in addition to the unique id. This name is often used in the API to load objects by human readable names rather than by an id. This will be automatically generated by default but you can also manually edit it here.");
    
    // Set input events
    this.data.input.cls = this;
    this.data.input.onchange = function()
    {
        this.cls.checkUname(true);
    }
    
    this.data.input.onkeyup = function()
    {
        this.cls.checkUname(false);
    }
    
    // Trigger the toggle edit
    this.onMainObjectToggleEdit();
}

/**
 * Called from object loader when object is saved.
 *
 * This should take care of saving attached file
 */
AntObjectLoader_Uname.prototype.save = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.onsave();
        if(!ret)
        {
            ALib.statusShowAlert("Error occurred while saving uname!", 3000, "bottom", "right");
            return;
        }
        
        if(ret.error)
        {
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");            
            this.cbData.cls.data.status.innerHTML = "";
        }
        
        if(ret.currentName)
        {
            this.cbData.cls.data.input.value = ret.currentName;
            this.cbData.cls.uname = ret.currentName;
        }
    };
    
    var args = new Array();
    
    if(this.data.input)
    {
        args[args.length] = ['objId', this.mainObject.id];
        args[args.length] = ['objType', this.mainObject.obj_type];
        args[args.length] = ['uniqueName', this.data.input.value];
        args[args.length] = ['currentName', this.uname];

		// Pass object current values for namespaces
		var fields = this.mainObject.getFields();
		for (var i in fields)
		{
			if (fields[i].name != "uname" && fields[i].name != "id" && fields[i].type != "fkey_multi" && fields[i].type != "object_multi")
				args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name)];
		}

        ajax.exec("/controller/Object/saveUniqueName", args);
    }
    else
        this.onsave();
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_Uname.prototype.onsave = function()
{
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_Uname.prototype.getUname = function()
{
    var args = new Array();    
    args[args.length] = ['objId', this.mainObject.id];
    args[args.length] = ['objType', this.mainObject.obj_type];
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(ret)
        {
            if(ret.error)
                ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
            else
                this.cbData.cls.uname = ret.uniqueName;
        }
            
        this.cbData.cls.buildInterface();
    };

	// Pass object current values for namespaces
	var fields = this.mainObject.getFields();
	for (var i in fields)
	{
		if (fields[i].name != "uname" && fields[i].name != "id" && fields[i].type != "fkey_multi" && fields[i].type != "object_multi")
    		args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name)];
	}

    ajax.exec("/controller/Object/getUniqueName", args);
}

 /**
  * onToggleEdit callback - should be overridden by parent form
  *
  * @public
  * @this {class}
  * @param {boolean} setmode        Determines whether the form is in edit mode or not
  */
AntObjectLoader_Uname.prototype.onMainObjectToggleEdit = function(setmode)
{
    if(!this.data)
        return;
        
    if(typeof setmode == "undefined")
        setmode = this.editMode;
        
    if(setmode)
    {
        alib.dom.styleSet(this.data.input, "display", "inline-block");
        alib.dom.styleSet(this.data.display, "display", "none");
    }
    else
    {
        alib.dom.styleSet(this.data.input, "display", "none");
        alib.dom.styleSet(this.data.display, "display", "inline-block");
    }
}

/**
  * Checks the uname
  *
  * @public
  * @this {class}
  * @param {boolean} onBlur     Determine wheter the function is triggered on blur or not
  */
AntObjectLoader_Uname.prototype.checkUname = function(onBlur)
{
    this.ajax.abort(); // Abort any existing ajax request
    this.ajax.onload = function(ret)
    {
        if(ret['error'])
            ALib.statusShowAlert(ret['error'], 3000, "bottom", "right");
        
        if(onBlur && ret['value'] == -1)
        {
            this.cbData.cls.data.input.value = this.cbData.cls.uname;
            this.cbData.cls.data.status.innerHTML = "";
        }
        else
            this.cbData.cls.data.status.innerHTML = ret['message'];
            
    };
    
    var args = new Array();    
    args[args.length] = ['objId', this.mainObject.id];
    args[args.length] = ['objType', this.mainObject.obj_type];
    args[args.length] = ['uniqueName', this.data.input.value];

	// Pass object current values for namespaces
	var fields = this.mainObject.getFields();
	for (var i in fields)
	{
		if (fields[i].type == "fkey" || fields[i].type == "object")
    		args[args.length] = [fields[i].name, this.mainObject.getValue(fields[i].name, true)];
	}

    this.ajax.exec("/controller/Object/verifyUniqueName", args);
}

/**
 * @fileoverview This is a global plugin to create a new status_update object in relation to the current object
 *
 * @author     joe, sky.stebnicki@aereus.com
 *             Copyright (c) 2013 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 */
function AntObjectLoader_StatusUpdate()
{
    this.data = new Object();

    this.name = "status_update";  // should be the same, when calling the plugin
    this.title = "Status Update";
    this.mainObject = null;    
    this.formObj = null;
    
    // Containers
    this.con = null;
}

/**
 * Required plugin main function
 */
AntObjectLoader_StatusUpdate.prototype.main = function(con)
{
    this.con = con;    
    
	if (this.mainObject.id)
	{
		this.buildInterface();
	}
	else
	{
		con.innerHTML = "";
	}
}

/**
 * Called after the main object has been saved
 */
AntObjectLoader_StatusUpdate.prototype.objectsaved = function()
{
	if (this.mainObject.id)
		this.buildInterface();
}

/**
 * Print form 
 */
AntObjectLoader_StatusUpdate.prototype.buildInterface = function()
{
    this.con.innerHTML = "";
	
	// Add title
	// -----------------------------------------
	var titleCon = alib.dom.createElement("h4", this.con);
	titleCon.innerHTML = "Add status update for this " + this.mainObject.title.toLowerCase() + ":";

	// Add comment form
	// -----------------------------------------
	var commentCon = alib.dom.createElement("div", this.con);
	this.buildCommentForm(commentCon);


	//this.con.innerHTML = "Add Comment, Add Task, Add Event, Add Phone Call";
	// Loop through and refresh comments and activity types of this.formObj.objectBrowsers
	//
}

/**
 * Called from object loader when object is saved.
 *
 * This should take care of saving attached file
 */
AntObjectLoader_StatusUpdate.prototype.save = function()
{
    this.onsave();
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_StatusUpdate.prototype.onsave = function()
{
}

/**
 * Add comment form
 *
 * @private
 * @param {DOMElement} con The container where the form will printed
 */
AntObjectLoader_StatusUpdate.prototype.buildCommentForm = function(con)
{
	con.innerHTML = "";

	// Image
	var imagecon = alib.dom.createElement("div", con);
	alib.dom.styleSet(imagecon, "float", "left");
	alib.dom.styleSet(imagecon, "width", "48px");
	imagecon.innerHTML = "<img src='/files/userimages/current/48/48' style='width:48px;' />";

	// Add input
	var inputDiv = alib.dom.createElement("div", con);
	alib.dom.styleSet(inputDiv, "margin-bottom", "5px");
		alib.dom.styleSet(inputDiv, "margin-left", "51px");
	var ta_comment = alib.dom.createElement("textarea", inputDiv);
	alib.dom.styleSet(ta_comment, "width", "100%");
	alib.dom.styleSet(ta_comment, "height", "25px");
	alib.dom.textAreaAutoResizeHeight(ta_comment, 48);

	// Clear floats
	var clear = alib.dom.createElement("div", con);
	alib.dom.styleSet(clear, "clear", "both");

	// Notification
	var lbl = alib.dom.createElement("div", con);
	alib.dom.styleSet(lbl, "float", "left");
	alib.dom.styleSet(lbl, "width", "48px");
	alib.dom.styleSet(lbl, "padding-top", "5px");
	lbl.innerHTML = "Notify:";
	var inpdv = alib.dom.createElement("div", con);
	alib.dom.styleSet(inpdv, "margin-left", "51px");
	alib.dom.styleSet(inpdv, "margin-bottom", "5px");
	var inp_notify = alib.dom.createElement("input", inpdv);
	var t = new CTextBoxList(inp_notify, { bitsOptions:{editable:{addKeys: [188, 13, 186, 59], addOnBlur:true }}, plugins: {autocomplete: { placeholder: false, minLength: 2, queryRemote: true, remote: {url:"/users/json_autocomplete.php"}}}});
	this.findNotifyCandidates(t);

	// Add submit
	var button = alib.ui.Button("Update Status", {
		className:"b1 nomargin", tooltip:"Click to save and send your status update", cls:this, textarea:ta_comment, notify:t,
		onclick:function() { 
			alib.dom.styleAddClass(this, "working");
			this.cls.saveStatusUpdate(this.textarea, this.notify, this); 
		}
	});
	var btnsp = alib.dom.createElement("div", con); // use for dynamic width
	alib.dom.styleSet(btnsp, "text-align", "right");
	button.print(btnsp);
},

/**
 * Save the update
 *
 * @private
 * @param {textarea}
 * @param {TextInputList}
 * @param {alib.ui.Button} btn Handle to button to clear working class when finished
 */
AntObjectLoader_StatusUpdate.prototype.saveStatusUpdate = function(textarea, t_notify, btn)
{
	// Do nothing if the comment box is empty
	if (textarea.value.length == 0)
		return;

	var obj = new CAntObject("status_update");
	obj.setValue("comment", textarea.value);
	obj.setValue("obj_reference", this.mainObject.obj_type + ":" + this.mainObject.id);
	obj.setMultiValue("associations", this.mainObject.obj_type + ":" + this.mainObject.id);

	var notify = "";
	var values = t_notify.getValues();
	for (var i = 0; i < values.length; i++)
	{
		if (notify) notify += ",";
		if (values[i][0])
			 notify += values[i][0];
		else if (values[i][1]) // email, no object
			 notify += values[i][1];
	}
	if (notify)
		obj.setValue("notify", notify);

	obj.setValue("owner_id", "-3");
	//obj.t_notify = t_notify;
	obj.cbData.textarea = textarea;
	obj.cbData.t_notify = t_notify;
	obj.cbData.plCls = this;
	obj.cbData.btn = btn;
	obj.onsave = function() 
	{ 
		this.cbData.textarea.value = ""; // clearn input
		this.cbData.t_notify.clear(); // clearn input
		this.cbData.plCls.refreshBrowsers();

		alib.dom.styleRemoveClass(this.cbData.btn, "working");
	}
	obj.save();
},

/**
 * Refresh all  activity browsers to show new status update
 *
 * @private
 */
AntObjectLoader_StatusUpdate.prototype.refreshBrowsers = function()
{
	// Only run if we are in the context of an object form (which we should always be)
	if (!this.formObj)
		return; 

	// Loop through all form browsers and refresh comments and activity types
	for (var i in this.formObj.objectBrowsers)
	{
		var objb = this.formObj.objectBrowsers[i];
		if (objb.obj_type == "activity")
			objb.refresh();
	}
},

/**
 * Find users that should be in the notify
 *
 * @param {CTextBoxList} textList
 */
AntObjectLoader_StatusUpdate.prototype.findNotifyCandidates = function(textList)
{
	// for now we do nothing, this is for possible future expansion
	/*
	if (this.mainObject)
	{
		var fields = this.mainObject.getFields();
		for (var j = 0; j < fields.length; j++)
		{
			var field = fields[j];
			var field_val = "";
			var field_lbl = "";
			var otype = "";

			if (field.type == "object" && (field.subtype == "user" || field.subtype == "customer"))
			{
				field_val = this.mainObject.getValue(field.name);
				field_lbl = this.mainObject.getValueName(field.name);
				otype = field.subtype;
			}

			if (field_val)
			{
				var bFound = false;
				for (var i = 0; i < this.comment_users.length; i++)
				{
					if (this.comment_users[i].id == otype+":"+field_val)
						bFound = true;
				}

				if (!bFound)
					this.comment_users[this.comment_users.length] = {id:otype+":"+field_val, name:field_lbl};
			}
		}
	}

	// Loop through added users/customers to be notified
	if (this.comment_users)
	{
		for (var i = 0; i < this.comment_users.length; i++)
		{
			if ((g_userid && this.comment_users[i].id != "user:"+g_userid) || !g_userid)
				t.add(this.comment_users[i].id, this.comment_users[i].name);
		}
	}
	*/
}

/**
 * @fileoverview This class is a global object form plugin for managing the uname
 *
 * @author     Marl Tumulak, marl.tumulak@aereus.com.
 *             Copyright (c) 2012 Aereus Corporation. All rights reserved.
 */
 
 /**
 * Class constructor
 */
function AntObjectLoader_Reminders()
{
	/**
	 * The unique name of this plugin
	 *
	 * @var {string}
	 */
    this.name = "reminders";

	/**
	 * The title of this plugin
	 *
	 * @var {string}
	 */
    this.title = "Reminders";

	/**
	 * The object we are handling reminders for
	 *
	 * @var {CAntObject}
	 */
    this.mainObject = null;

	/**
	 * The main container where the reminders will be printed
	 *
	 * @var {DOMElement}
	 */
    this.mainCon = null;

	/**
	 * Reminders table
	 *
	 * @var {tbody}
	 */
	this.remindersTableBody = null;

	/**
	 * Array of reminders
	 *
	 * @var {CAntObject[]}
	 */
	this.reminders = new Array();

	/**
	 * Add default reminders
	 *
	 * @var {bool}
	 */
	this.addDefault = false;

	/**
	 * Get execution from a field name
	 *
	 * @var {string}
	 */
	this.fieldName = "";
}

/**
 * Required plugin main function
 */
AntObjectLoader_Reminders.prototype.main = function(con)
{
    this.mainCon = con;

    if(this.mainObject.id)
    {
		var list = new AntObjectList("reminder");
		list.addCondition("and", "obj_reference", "is_equal", this.mainObject.obj_type + ":" + this.mainObject.id);
		list.cbData.cls = this;

		// Set reminders
		list.onLoad = function() {
			for (var i = 0; i < this.getNumObjects(); i++)
			{
				this.cbData.cls.addReminder(this.getObject(i));
			}

			this.cbData.cls.buildInterface();
		};

		list.getObjects();
    }        
	else
	{
		this.buildInterface();
	}
}

/**
 * Called from object loader when object is saved.
 *
 * Save one reminder at a time until they are all done
 */
AntObjectLoader_Reminders.prototype.save = function()
{
	// Get reminders to save
	var toSave = new Array();
	for (var i in this.reminders)
	{
		if (this.reminders[i].dirty)
		{
			this.reminders[i].setValue("obj_reference", this.mainObject.obj_type + ":" + this.mainObject.id);
			this.reminders[i].setValue("field_name", this.fieldName);
			toSave[toSave.length] = this.reminders[i];
		}
	}

	if (toSave.length)
	{
		// Recurrsively save until finished
		toSave[0].cbData.cls = this;
		toSave[0].onsave = function(){
			// Save will set this.dirty to false
			this.cbData.cls.save();
		}
		toSave[0].save();
	}
	else
	{
		// Finished or none to process
		this.onsave();
	}
}

/**
 * onsave callback - should be overridden by parent form
 */
AntObjectLoader_Reminders.prototype.onsave = function()
{
}

/**
 * Print form 
 */
AntObjectLoader_Reminders.prototype.buildInterface = function()
{
	if (this.addDefault && this.reminders.length==0 && !this.mainObject.id)
	{
		var obj = new CAntObject("reminder");
		obj.setValue("action_type", "sms");
		obj.setValue("interval", "30");
		obj.setValue("interval_unit", "minutes");
		this.addReminder(obj);

		var obj2 = new CAntObject("reminder");
		obj2.setValue("action_type", "popup");
		obj2.setValue("interval", "30");
		obj2.setValue("interval_unit", "minutes");
		this.addReminder(obj2);
	}

	// Show Add Reminder link
	var lnkCon = alib.dom.createElement("div", this.mainCon);
	var lnk = alib.dom.createElement("a", lnkCon);
	lnk.href = "javascript:void(0);";
	lnk.cls = this;
	lnk.onclick = function(e) {
		this.cls.addReminder();
	};
	lnk.innerHTML = "Add Reminder";

}

/**
 * Add reminder entry
 */
AntObjectLoader_Reminders.prototype.addReminder = function(remObj)
{
	// Create default reminder object
	if (typeof remObj == "undefined")
	{
		var remObj = new CAntObject("reminder");
		remObj.setValue("action_type", "email");
		remObj.setValue("interval", "30");
		remObj.setValue("interval_unit", "minutes");
	}

	if (this.fieldName)
		this.renderRowWithField(remObj);
	
	// Add reminder object
	this.reminders[this.reminders.length] = remObj;
}

/**
 * Remove a reminder from the table from the the array of reminders to save
 *
 * @var {CAntObject}
 */
AntObjectLoader_Reminders.prototype.removeReminder = function(remObj)
{
	remObj.cbData.row.parentNode.removeChild(remObj.cbData.row);

	// delete if there is an id
	if (remObj.id)
		remObj.remove();

	// remove from this.reminders
	for (var i in this.reminders)
	{
		if (this.reminders[i] == remObj)
			this.reminders.splice(i, 1);
	}
}


/**
 * Render row for reminders with the field set
 */
AntObjectLoader_Reminders.prototype.renderRowWithField = function(remObj)
{
	var tbody = this.getTable();

	var row = alib.dom.createElement("tr", tbody);
	remObj.cbData.row = row; // Keep for removal

	// Drop-down for type
	var td = alib.dom.createElement("td", row);
	var sel = alib.dom.createElement("select", td);
	sel[sel.length] = new Option("Send Email", "email", false, (remObj.getValue("action_type")=="email") ? true : false);
	sel[sel.length] = new Option("Send Text Message (SMS)", "sms", false, (remObj.getValue("action_type")=="sms") ? true : false);
	sel[sel.length] = new Option("Pop-up Alert", "popup", false, (remObj.getValue("action_type")=="popup") ? true : false);
	sel.obj = remObj;
	sel.onchange = function() {
		this.obj.setValue("action_type", this.value);
	};

	// Interval
	var td = alib.dom.createElement("td", row);
	var intTxt = alib.dom.createElement("input", td);
	intTxt.size = 2;
	intTxt.value = remObj.getValue("interval");
	intTxt.obj = remObj;
	intTxt.onchange = function() {
		if (isNaN(this.value))
			this.value = 30;

		this.obj.setValue("interval", this.value);
	};

	// Interval Unit
	var td = alib.dom.createElement("td", row);
	var timeSel = alib.dom.createElement("select", td);
	timeSel[timeSel.length] = new Option("minute(s)", "minutes", false, (remObj.getValue("interval_unit")=="minutes") ? true : false);
	timeSel[timeSel.length] = new Option("hour(s)", "hours", false, (remObj.getValue("interval_unit")=="hours") ? true : false);
	timeSel[timeSel.length] = new Option("day(s)", "days", false, (remObj.getValue("interval_unit")=="days") ? true : false);
	timeSel[timeSel.length] = new Option("week(s)", "weeks", false, (remObj.getValue("interval_unit")=="weeks") ? true : false);
	timeSel[timeSel.length] = new Option("month(s)", "months", false, (remObj.getValue("interval_unit")=="months") ? true : false);
	timeSel[timeSel.length] = new Option("year(s)", "years", false, (remObj.getValue("interval_unit")=="years") ? true : false);
	timeSel.obj = remObj
	timeSel.onchange = function() {
		this.obj.setValue("interval_unit", this.value);
	};

	// Add remove button
	var td = alib.dom.createElement("td", row);
	var delImg = alib.dom.createElement("img", td);
	alib.dom.styleSet(delImg, "cursor", "pointer");
	delImg.src = "/images/icons/delete_16.png";
	delImg.obj = remObj;
	delImg.cls = this;
	delImg.onclick = function(e) {
		this.cls.removeReminder(this.obj);
	};
}

/**
 * Init & get table body
 *
 * @return {TBODY}
 */
AntObjectLoader_Reminders.prototype.getTable = function()
{
	if (this.remindersTableBody)
		return this.remindersTableBody;

	var tbl = alib.dom.createElement("table", this.mainCon);
	this.remindersTableBody = alib.dom.createElement("tbody", tbl);

	return this.remindersTableBody;
}

/**
 * @fileoverview This loader will display email threads inside an object loader
 *
 * @author	joe, sky.stebnicki@aereus.com
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectLoader_EmailThread.
 *
 * @constructor
 * @param {CAntObject} obj Handle to object that is being viewed or edited
 * @param {AntObjectLoader} loader Handle to base loader class
 */
function AntObjectLoader_EmailThread(obj, loader)
{
	this.mainObject = obj;
	this.loaderCls = loader;
	this.oid = obj.id;
	this.formCon = null; // inner container where form will be printed
	this.ctbl = null; // Content table used for frame when printed inline
	this.customTitleCon = null; // used for inline printing so the subjet is printed above
	this.toolbar = null;
	this.bodyFormCon = null; // Displays the form
	this.bodyGroupCon = null; // Displays the rgoups
	this.plugins = new Array();
	this.printOuterTable = true; // Can be used to exclude outer content table (usually used for preview)
	this.fEnableClose = true; // Set to false to disable "close" and "save and close"
}

/**
 * Refresh the form
 */
AntObjectLoader_EmailThread.prototype.refresh = function()
{
}

/**
 * Enable to disable edit mode for this loader
 *
 * @param {bool} setmode True for edit mode, false for read mode
 */
AntObjectLoader_EmailThread.prototype.toggleEdit = function(setmode)
{
}

/**
 * Print form on 'con'
 *
 * @param {DOMElement} con A dom container where the form will be printed
 * @param {array} plugis List of plugins that have been loaded for this form
 */
AntObjectLoader_EmailThread.prototype.print = function(con, plugins)
{
	con.innerHTML = "";
	this.isPopup = (this.loaderCls.isPopup) ? true : false;
	this.formCon = con;

	// Print title con if we are inline (preview mode)
	if (this.loaderCls.inline)
	{
		this.customTitleCon = alib.dom.createElement("div", this.formCon);
		this.customTitleCon.className = "objectLoaderHeader";

		this.onNameChange = function(name)
		{
			if (this.loaderCls.antView)
				this.loaderCls.antView.setTitle(name);

			this.customTitleCon.innerHTML = name;
		}
	}

	// Groups Con
	this.bodyGroupCon = alib.dom.createElement("div", this.formCon);

	// Form container
	this.bodyFormCon = alib.dom.createElement("div", this.formCon);

	this.buildInterface();
}

/**
 * Callback is fired any time a value changes for the mainObject 
 */
AntObjectLoader_EmailThread.prototype.onValueChange = function(name, value, valueName)
{	
}

/**
 * Callback function used to notify the parent loader if the name of this object has changed
 */
AntObjectLoader_EmailThread.prototype.onNameChange = function(name)
{
}

/**
 * Callback is fired any time a value changes for the mainObject 
 *
 * @private
 */
AntObjectLoader_EmailThread.prototype.buildInterface = function()
{	
	var tb = new CToolbar();
	this.toolbar = tb;
	var btn = new CButton("Close", function(cls) { cls.close(); }, [this.loaderCls], "b1");
	if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile)
		tb.AddItem(btn.getButton(), "left");
	if (this.mainObject.security.edit)
	{
		// Move
		var dv = alib.dom.createElement("div");
		tb.AddItem(dv);
		var dynsel = new AntObjectGroupingSel("Move", "email_thread", 'mailbox_id', null, this.mainObject, {noNull:true, staticLabel:true});
		dynsel.print(dv, "b1 grLeft");
		dynsel.fwdEmailThView = this;
		dynsel.onSelect = function(id, name)
		{
			this.fwdEmailThView.moveThread(id, name, false);
		}
		// Add Groups
		var dv = alib.dom.createElement("div");
		tb.AddItem(dv);
		var dynsel = new AntObjectGroupingSel("Add Group", "email_thread", 'mailbox_id', null, this.mainObject, {noNull:true, staticLabel:true});
		dynsel.print(dv, "b1 grRight");
		dynsel.fwdEmailThView = this;
		dynsel.onSelect = function(id, name)
		{
			this.fwdEmailThView.moveThread(id, name, true);
		}
		
		var btn = new CButton("Print", function(cls){ window.open("/print/engine.php?obj_type=email_thread&objects[]="+cls.oid); }, [this], "b1");
		tb.AddItem(btn.getButton(), "left");
		
		if (!this.isPopup)
		{
			var params = 'width=1024,height=768,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes';
			var btn = new CButton("New Window", function(cls){ window.open("/obj/email_thread/"+cls.oid, null, params); }, [this], "b1");
			tb.AddItem(btn.getButton(), "right");
		}
	}

	if (this.oid)
	{
		if (this.mainObject.security.del)
		{
			var btn = new CButton("Delete", function(cls, oid){ cls.deleteObject(oid); }, [this.loaderCls, this.oid], "b1");
			tb.AddItem(btn.getButton(), "left");
		}
	}
	tb.print(this.loaderCls.toolbarCon);

	// Set subject/title bar
	this.onNameChange(this.mainObject.getLabel());

	// Set ANT View title
	/*
	if (this.loaderCls.antView)
		this.loaderCls.antView.setTitle(this.mainObject.getLabel());
	*/

	// Print email body
	this.getMessages(this.bodyFormCon);
	this.getGroups();
}

/**
 * Get messages for this thread
 *
 * @param {DOMElement} con The container to print messages in
 * @private
 */
AntObjectLoader_EmailThread.prototype.getMessages = function(con)
{
    con.innerHTML = "Loading...";
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.con = con;
    ajax.onload = function(ret)
    {
        this.cbData.con.innerHTML = "";
        if (ret)
        {
            try
            {                
                if (ret.length)
                {
                    for(message in ret)
                    {
                        var currentMessage = ret[message];
                        // Print object loader
                        var ol = new AntObjectLoader("email_message", currentMessage.id);
                        ol.fEnableClose = false;
                        ol.fThreadView = true;
                        ol.inline = true; // Do not resize and hide title
                        ol.printOuterTable = false;
                        if (currentMessage.flag_seen=='t' && message<(ret.length-1))
                            ol.printCollapsed(this.cbData.con, false, currentMessage);
                        else    
                            ol.print(this.cbData.con);
                    }
                }
                else
                {
                    this.cbData.con.innerHTML = "None available";
                }
            }
            catch(e)
            {
                alert(e);
            }
        }
    };
    ajax.exec("/controller/Email/threadGetMessages",
                [["tid", this.oid]]);
}

/**
 * Get groups for this thread
 *
 * @private
 */
AntObjectLoader_EmailThread.prototype.getGroups = function()
{
    alib.dom.styleSet(this.bodyGroupCon, "margin", "3px 0 5px 5px");
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.con = this.bodyGroupCon;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            try
            {
                this.cbData.con.innerHTML = "";
                if (ret.length)
                {
                    for(group in ret)
                    {
                        var currentGroup = ret[group];
                        if (currentGroup.color)
                        {
                            var bg = currentGroup.color;
                            var fg = getColorTextForGroup(currentGroup.color);
                        }
                        else
                        {
                            if (currentGroup.flag_special == 't')
                            {
                                var bg = "e3e3e3";
                                var fg = "000000";
                            }
                            else
                            {
                                var bg = G_GROUP_COLORS[0][1];
                                var fg = getColorTextForGroup(bg);
                            }
                        }

                        var gpdv = alib.dom.createElement("div");
                        alib.dom.styleSet(gpdv, "display", "inline-block");
                        alib.dom.styleSet(gpdv, "zoom", "1");
                        alib.dom.styleSet(gpdv, "*display", "inline");
                        alib.dom.styleSet(gpdv, "padding", "1px 3px 1px 3px");
                        alib.dom.styleSet(gpdv, "margin-right", "5px");
                        alib.dom.styleSet(gpdv, "background-color", '#'+bg);
                        alib.dom.styleSet(gpdv, "color", "#"+fg);
                        alib.dom.styleSet(gpdv, "border-radius", "3px");
                        alib.dom.styleSet(gpdv, "-webkit-border-radius", "3px");
                        alib.dom.styleSet(gpdv, "-moz-border-radius", "3px");

                        //ALib.Effect.round(gpdv, 5);
                        var lbl = alib.dom.createElement("span", gpdv);
                        lbl.innerHTML = currentGroup.name + " | ";
                        var del = alib.dom.createElement("span", gpdv);
                        del.innerHTML = "x";
                        alib.dom.styleSet(del, "cursor", "pointer");
                        del.pdiv = this.cbData.con;
                        del.box = gpdv;
                        del.cls = this.cbData.cls;
                        del.gid = currentGroup.id;
                        del.gname = currentGroup.name;
                        del.onclick = function()
                        {
                            this.cls.removeMailbox(this.gid, this.gname, this.box);
                        }

                        this.cbData.con.appendChild(gpdv);
                    }
                    var gpdv = alib.dom.createElement("div", this.cbData.con);
                }
            }
            catch(e)
            {
                alert(e);
            }
        }
    };
    ajax.exec("/controller/Email/threadGetGroups",
                [["tid", this.oid]]);
}


/**
 * Moves the email message to another thread
 *
 * @public
 * @this {AntObjectLoader_EmailThread}
 * @param {Int} mid     Mailbox Id
 * @param {String} name Mailbox name
 */
AntObjectLoader_EmailThread.prototype.moveThread = function(mid, name, addMailBox)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.name = name;
    ajax.cbData.addMailBox = addMailBox;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        else
        {
            if(this.cbData.addMailBox)
                ALib.statusShowAlert("This message is added to " + this.cbData.name, 3000, "bottom", "right");
            else
                ALib.statusShowAlert("This message is moved to " + this.cbData.name, 3000, "bottom", "right");
        }
            
        this.cbData.cls.getGroups();
    };
    
    var args = new Array();
    args[args.length] = ['obj_type', "email_thread"];
    args[args.length] = ['field_name', "mailbox_id"];
    args[args.length] = ['move_to', mid];
    args[args.length] = ['objects[]', this.oid];
    
    if(addMailBox)
        args[args.length] = ['addMailbox', 1];
    
    ajax.exec("/controller/Object/moveByGrouping", args);
}

/**
 * Remove the associated mailbox
 *
 * @public
 * @this {AntObjectLoader_EmailThread}
 * @param {Int} mid                 Mailbox Id
 * @param {String} name             Mailbox name
 * @param {DOMElement} groupDiv     Group mailbox container
 */
AntObjectLoader_EmailThread.prototype.removeMailbox = function(mailboxId, name, groupDiv)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.name = name;
    ajax.cbData.groupDiv = groupDiv;
    ajax.onload = function(ret)
    {
        if(!ret)
            return;
            
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        else
        {
            this.cbData.groupDiv.parentNode.removeChild(this.cbData.groupDiv);
            ALib.statusShowAlert(this.cbData.name + " is removed to this message.", 3000, "bottom", "right");
        }
    };
    
    var args = new Array();
    args[args.length] = ['gid', mailboxId];
    args[args.length] = ['tid', this.oid];
    ajax.exec("/controller/Email/threadDeleteGroup", args);
}

/**
 * @fileoverview This sub-loader will load email messages for ant object laoder
 *
 * This class is also responsible for creating the compose window for new emails and
 * for editing drafts.
 *
 * @author	joe, sky.stebnicki@aereus.com
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObjectLoader_EmailMessage.
 *
 * @constructor
 * @param {CAntObject} obj Handle to object that is being viewed or edited
 * @param {AntObjectLoader} loader Handle to base loader class
 */
function AntObjectLoader_EmailMessage(obj, loader)
{
	// If we are not loading an email message to view, then load the compose window
	if (!obj.id || obj.getValue("flag_draft") == true)
	{
		return new AntObjectLoader_EmailMessageCmp(obj, loader);
	}

	this.mainObject = obj;
	this.oid = this.mainObject.id;
	this.loaderCls = loader;
	this.outerCon = null; // Outer container
	this.messageBodyCon = null; // The container that will house the actual message body
	this.mainConMin = null; // Minified div for collapsed view
	this.mainCon = null; // Inside outcon and holds the outer table
    this.formCon = null; // inner container where form will be printed
	this.formPopupCon = null;
	this.ctbl = null; // Content table used for frame when printed inline
	this.toolbar = null;
	this.toolbarCon = null;
	this.bodyCon = null;
	this.bodyFormCon = null; // Displays the form
	this.bodyNoticeCon = null; // Right above the form and used for notices and inline duplicate detection
	this.plugins = new Array();
	this.printOuterTable = true; // Can be used to exclude outer content table (usually used for preview)
    this.emailHeaderData = null;
}

/**
 * Refresh the form
 */
AntObjectLoader_EmailMessage.prototype.refresh = function()
{
}

/**
 * Enable to disable edit mode for this loader
 *
 * @param {bool} setmode True for edit mode, false for read mode
 */
AntObjectLoader_EmailMessage.prototype.toggleEdit = function(setmode)
{
}

/**
 * Print form on 'con'
 *
 * @param {DOMElement} con A dom container where the form will be printed
 * @param {array} plugis List of plugins that have been loaded for this form
 */
AntObjectLoader_EmailMessage.prototype.print = function(con, plugins)
{
	if (this.loaderCls.fThreadView)
	{
		this.mainConMin = alib.dom.createElement("div", con);
		alib.dom.styleSet(this.mainConMin, "display", "none");
		alib.dom.styleAddClass(this.mainConMin, "emailThreadMessageCol");
	}

	this.isPopup = (this.loaderCls.isPopup) ? true : false;
	this.outerCon = con;
	this.mainCon = alib.dom.createElement("div", con);
	this.formCon = this.mainCon;

	if (this.loaderCls.fThreadView)
	{
		alib.dom.styleAddClass(this.mainCon, "emailThreadMessageExp");
	}

	this.toolbarCon = alib.dom.createElement("div", this.formCon);
	if (this.isPopup)
		alib.dom.styleSetClass(this.toolbarCon, "popup_toolbar");

	var outer_dv = alib.dom.createElement("div", this.formCon);
	if (this.isPopup)
		outer_dv.setAttribute("id", "bdy_outer");

	this.bodyCon = alib.dom.createElement("div", outer_dv);
	if (this.isPopup)
	{
		this.bodyCon.setAttribute("id", "bdy");
		alib.dom.styleSetClass(this.bodyCon, "popup_body");
	}
	else
		alib.dom.styleSet(this.bodyCon, "margin-top", "5px");
	
	// Notice container
	this.bodyNoticeCon = alib.dom.createElement("div", this.bodyCon);

	// Body container
    this.bodyFormCon = alib.dom.createElement("div", this.bodyCon);
	
    // Con for popup form
    this.formPopupCon = alib.dom.createElement("div", this.bodyCon);

	this.buildInterface();
}

/**
 * Print subloader in collapsed mode. Only if subloader class has a method called printCollapsed.
 *
 * @this {AntObjectLoader_EmailMessage}
 * @param {DOMElement} con The container to print this object loader into - usually a div
 * @param {bool} popup Set to true if we are operating in a new window popup. Hides "Open In New Window" link.
 * @param {Object} data Properties to forward to collapsed view
 * @public
 */
AntObjectLoader_EmailMessage.prototype.printCollapsed = function(con, popup, data)
{    
    if(data)
        this.emailHeaderData = data;
        
	var outerCon = alib.dom.createElement("div", con);
	var colCon = alib.dom.createElement("div", outerCon);
	alib.dom.styleAddClass(colCon, "emailThreadMessageCol");
	colCon.emvCls = this;
	colCon.con = outerCon;
	colCon.popup = popup;
	colCon.onclick = function()
	{
		this.con.innerHTML = "";
		this.emvCls.print(this.con);
	}
	/*var htm = "<div style='float:right;'>"+data.message_date+"</div>"; 
	htm += "<img src='/images/icons/email-add_16.png' /> ";
	htm += data.from;
	htm += " - ";
	htm += data.subject;*/
	colCon.innerHTML = this.emailHeaderCollapse();
}

/**
 * Callback is fired any time a value changes for the mainObject 
 */
AntObjectLoader_EmailMessage.prototype.onValueChange = function(name, value, valueName)
{	
}

/**
 * Callback function used to notify the parent loader if the name of this object has changed
 */
AntObjectLoader_EmailMessage.prototype.onNameChange = function(name)
{
}

/**
 * Displays the header div for email thread - collapse view
 *
 * @this {AntObjectLoader_EmailMessage}
 * @private
 */
AntObjectLoader_EmailMessage.prototype.emailHeaderCollapse = function()
{
    var htm = "";
    if(this.emailHeaderData)
    {
        htm = "<div style='float:right;'>"+this.emailHeaderData.message_date+"</div>"; 
        htm += "<img src='/images/icons/email-add_16.png' /> ";
        htm += this.emailHeaderData.from;
        htm += " - ";
        htm += this.emailHeaderData.subject;
    }
    else
    {            
        htm = "<div style='float:right;'>"+this.mainObject.getValue("message_date")+"</div>"; 
        htm += "<img src='/images/icons/email-add_16.png' /> ";
        htm += this.mainObject.getValue("sent_from");
        htm += " - ";
        htm += this.mainObject.getValue("subject");
    }
    
    return htm;
}

/**
 * Displays the header div for email thread - expand view
 *
 * @this {AntObjectLoader_EmailMessage}
 * @private
 */
AntObjectLoader_EmailMessage.prototype.emailHeaderExpand = function()
{
    var htm = "";
    if(this.emailHeaderData)
    {
        htm = "<div style='float:right;'>"+this.emailHeaderData.message_date+"</div>";         
        htm += this.emailHeaderData.from;
        htm += " - ";
        htm += this.emailHeaderData.subject;
    }
    else
    {            
        htm = "<div style='float:right;'>"+this.mainObject.getValue("message_date")+"</div>";         
        htm += this.mainObject.getValue("sent_from");
        htm += " - ";
        htm += this.mainObject.getValue("subject");
    }
    
    return htm;
        
}

/**
 * Callback is fired any time a value changes for the mainObject 
 *
 * @this {AntObjectLoader_EmailMessage}
 * @private
 */
AntObjectLoader_EmailMessage.prototype.buildInterface = function()
{	
	if (this.loaderCls.fThreadView)
	{
		// Build collapsed View
		// -----------------------------------
		this.mainConMin.emvCls = this;
		this.mainConMin.onclick = function()
		{
			this.emvCls.expandView();
		}
        
        this.mainConMin.innerHTML = this.emailHeaderCollapse();

		// Build header and toolbar for expanded view
		// -----------------------------------
		var tbl = alib.dom.createElement("table", this.toolbarCon);
		var tbody = alib.dom.createElement("tbody", tbl);
		alib.dom.styleSet(tbl, "width", "100%");
		alib.dom.styleSet(tbl, "table-layout", "fixed");

		var row = alib.dom.createElement("tr", tbody);
		var td = alib.dom.createElement("td", row);
		alib.dom.styleSet(td, "width", "50px");
		td.rowSpan = 2;
		td.innerHTML = "<img src='/images/icons/mail_48_short.png' />";
		this.getImage(td);
		var td = alib.dom.createElement("td", row);
        alib.dom.styleSet(td, "width", "100%");
		var fromsub = alib.dom.createElement("div", td);
        alib.dom.styleSet(fromsub, "cursor", "pointer");
		fromsub.appCls = this;
		fromsub.onclick = function() { this.appCls.collapseView(); }
		fromsub.innerHTML = this.emailHeaderExpand();
		var infocon = alib.dom.createElement("div", td);
		alib.dom.styleSet(infocon, "display", "none");
        
        var groupType = this.mainObject.getValueName("mailbox_id");
        
		infocon.innerHTML = "<table>"
						  + "<tr><td>from:</td><td>"+this.mainObject.getValue("sent_from").escapeHTML()+"</td></tr>"
						  + "<tr><td>to:</td><td>"+this.mainObject.getValue("send_to").escapeHTML()+"</td></tr>"
						  + "<tr><td>group:</td><td>"+groupType+"</td></tr>"
						  + "<tr><td>more:</td><td>"
						  + "<a href='/email/message_view_original.awp?mid="+this.oid+"' target='_blank'>original message</a></td></tr>"
						  + "</table>";
		//+ "<tr><td>more:</td><td><a href='/email/message_view_header.awp?mid="+this.oid+"' target='_blank'>full header</a> "

		// Time for the toolbar
		var row = alib.dom.createElement("tr", tbody);
		var td = alib.dom.createElement("td", row);
        
        if(groupType == "Drafts") // email is a draft (saved email)
        {
            var btn = new CButton("Edit", function(cls){ emailComposeOpen(null, [["mid", cls.oid], ["reply_type", 'draft']]); }, [this], "b2 small");
            btn.print(td);
        }
        else
        {
            td.colSpan = 2;
            
            var btn = new CButton("Reply", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'reply']]); }, [this], "b2 small grLeft");
            btn.print(td);

            var btn = new CButton("Reply All", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'reply_all']]); }, [this], "b1 small grCenter");
            btn.print(td);


            var btn = new CButton("Forward", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'forward']]); }, [this], "b1 small grRight");
            btn.print(td);
        }

		var dm_actions = new CDropdownMenu();

		// Create New
		var dm_act = dm_actions.addSubmenu("Create New", null, null, null);
		var dm_sub = dm_act.addEntry("Calendar Event", function(cls){ cls.createObject("calendar_event"); }, "/images/icons/circle_blue.png", null, [this]);
        var dm_sub = dm_act.addEntry("Task", function(cls){ cls.createObject("task"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Case", function(cls){ cls.createObject("case"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Personal Contact", function(cls){ cls.createObject("contact_personal"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Customer", function(cls){ cls.createObject("customer"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Lead", function(cls){ cls.createObject("lead"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Note", function(cls){ cls.createObject("note"); }, "/images/icons/circle_blue.png", null, [this]);
		// Associate With
		var dm_act = dm_actions.addSubmenu("Associate With", null, null, null);
		var dm_sub = dm_act.addEntry("Customer", function(cls){ emailAssocObj(cls.oid, "customer"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Opportunity", function(cls){ emailAssocObj(cls.oid, "opportunity"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Lead", function(cls){ emailAssocObj(cls.oid, "lead"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Project", function(cls){ emailAssocObj(cls.oid, "project"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Task", function(cls){ emailAssocObj(cls.oid, "task"); }, "/images/icons/circle_blue.png", null, [this]);
		var dm_sub = dm_act.addEntry("Case", function(cls){ emailAssocObj(cls.oid, "case"); }, "/images/icons/circle_blue.png", null, [this]);

		td.appendChild(dm_actions.createButtonMenu("Actions",null,null,"b1 small"));

		var btn = new CButton("Print", function(cls){ window.open("/print/engine.php?obj_type=email_message&&format=html&objects[]="+cls.oid); }, [this], "b1 small");
		btn.print(td);

		var btn = new CButton("More Info", function(cls, con) { if (con.style.display=="block") con.style.display = "none"; else con.style.display = "block"; }, [this, infocon], "b1 small");
		btn.print(td);
		//var btn = new CButton("Collapse", function(cls) { cls.collapseView(); }, [this], "b1 small grRight");
		//btn.print(td);
	}
	else
	{
		if (this.isPopup) 
			document.title = "View Message";
		else if (this.ctbl)
			this.ctbl.setTitle("View Message");

		var tb = new CToolbar();
		this.toolbar = tb;
		var btn = new CButton("Close", function(cls) { cls.close(); }, [this.loaderCls], "b1");
		if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile)
			tb.AddItem(btn.getButton(), "left");
		if (this.mainObject.security.edit)
		{
			var btn = new CButton("Reply", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'reply']]); }, [this], "b2");
			tb.AddItem(btn.getButton(), "left");

			var btn = new CButton("Reply All", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'reply_all']]); }, [this], "b1");
			tb.AddItem(btn.getButton(), "left");

			var btn = new CButton("Forward", function(cls){ emailComposeOpen(null, [["reply_mid", cls.oid], ["reply_type", 'forward']]); }, [this], "b1");
			tb.AddItem(btn.getButton(), "left");

			var btn = new CButton("Print", function(cls){ window.print(); }, [this], "b1");
			tb.AddItem(btn.getButton(), "left");

			// Create New
			var dm_act = new CDropdownMenu();
			var dm_sub = dm_act.addEntry("Calendar Event", function(cls){ cls.createObject("calendar_event"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Task", function(cls){ cls.createObject("task"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Case", function(cls){ cls.createObject("case"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Personal Contact", function(cls){ cls.createObject("contact_personal"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Customer", function(cls){ cls.createObject("customer"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Lead", function(cls){ cls.createObject("lead"); }, "/images/icons/circle_blue.png", null, [this]);
			var dm_sub = dm_act.addEntry("Note", function(cls){ cls.createObject("note"); }, "/images/icons/circle_blue.png", null, [this]);
			tb.AddItem(dm_act.createButtonMenu("Create New"));
			// Associate With
			var dm_act = new CDropdownMenu();
			var dm_sub = dm_act.addEntry("Customer", function(cls){ emailAssocCustomer(cls.oid); }, "/images/icons/circle_blue.png", null, [this]);
			tb.AddItem(dm_act.createButtonMenu("Associate With"));
		}

		if (this.oid)
		{
			if (this.mainObject.security.del)
			{
				var btn = new CButton("Delete", function(cls, oid){ cls.deleteObject(oid); }, [this, this.oid], "b3");
				tb.AddItem(btn.getButton(), "left");
			}
		}
		tb.print(this.loaderCls.toolbarCon);

		// Set subject/title bar
		this.onNameChange(this.mainObject.getLabel());

		// Set ANT View title
		if (this.loaderCls.antView)
			this.loaderCls.antView.setTitle(this.mainObject.getLabel());

		var infocon = alib.dom.createElement("div", this.toolbarCon);
		infocon.innerHTML = "<table>"
						  + "<tr><td>From:</td><td>"+this.mainObject.getValue("sent_from").escapeHTML()+"</td></tr>"
						  + "<tr><td>To:</td><td>"+this.mainObject.getValue("send_to").escapeHTML()+"</td></tr>"
						  + "<tr><td>Group:</td><td>"+this.mainObject.getValueName("mailbox_id")+"</td></tr>"
						  + "<tr><td>More:</td><td>"
						  + "	<a href='/email/message_view_original.awp?mid="+this.oid+"' target='_blank'>original message</a></td></tr>"
						  + "</table>";
	}

	this.bodyFormCon.innerHTML = "";

	// Associations
	var assocdv = alib.dom.createElement("div", this.bodyFormCon);
	alib.dom.styleSet(assocdv, "margin-left", "5px");
	this.getAssociations(assocdv);

	// Print email body
	this.messageBodyCon = alib.dom.createElement("div", this.bodyFormCon);
	alib.dom.styleAddClass(this.messageBodyCon, "emailMessageBody");
	alib.dom.styleAddClass(this.messageBodyCon, "formHtmlBody");
	this.getMessageBody();
	//bdiv.innerHTML = "<iframe src='/email/message_body.php?mid="+this.oid+"' id='message_body_"+this.oid+"' name='message_body_"+this.oid+"' "
							   //+ " style='height:20px;width:100%;border:0;' frameborder='0'></iframe>";
}

/**
 * Collapse this message (if in thread view mode)
 */
AntObjectLoader_EmailMessage.prototype.collapseView = function()
{
	this.mainCon.style.display = "none";
	this.mainConMin.style.display = "block";
}

/**
 * Expand this message (if collapsed and in thread view mode)
 */
AntObjectLoader_EmailMessage.prototype.expandView = function()
{
	this.mainCon.style.display = "block";
	this.mainConMin.style.display = "none";
}

/**
 * Craete an object from this message
 *
 * @param {string} tocreate Object type to create
 */
AntObjectLoader_EmailMessage.prototype.createObject = function(objectType)
{
	var ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.dlg = showDialog("please wait...");
	ajax.cbData.objectType = objectType;        
	ajax.onload = function(ret)
	{
        this.cbData.dlg.hide();
        
        if(!ret)
            return;
        
		if (ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        else
		{
			switch(this.cbData.objectType)
			{
			case 'case':
                args[args.length] = ["title", ret.subject];
				args[args.length] = ["description", ret.body_txt];
                args[args.length] = ["customer_id", ret.customer_id];
				break;
			case 'note':
                args[args.length] = ["name", ret.subject];
				args[args.length] = ["body", ret.body_txt];
				break;
            case "calendar_event":
            case "task":
                args[args.length] = ["name", ret.subject];                
                args[args.length] = ["obj_reference", "email_message:" + this.cbData.cls.oid];
			case 'contact_personal':
			case 'lead':
			case 'customer':
			default:                
				args[args.length] = ["notes", ret.body_txt];
				args[args.length] = ["first_name", ret.first_name];
				args[args.length] = ["last_name", ret.last_name];
				args[args.length] = ["email", ret.email];
				break;
			}
		}
        
        this.cbData.cls.popupForm(this.cbData.objectType, args);
	};
    var args = new Array();    
    args[args.length] = ['mid', this.oid];
    ajax.exec("/controller/Email/getConvFields", args);
}

/**
 * Get objects associated with this email
 *
 * @param {DOMElement} con The container to print the associations links into
 */
AntObjectLoader_EmailMessage.prototype.getAssociations = function(con)
{
	/*var funct = function(ret, cls, con)
	{
		if (ret)
		{
			try
			{				
				var buf = "";
				if (ret.length)
					buf += "Associations: ";
				for(association in ret)
				{
                    var currentAssociation = ret[association];
					var parts =  currentAssociation.obj_ref.split(":");
					buf += "<a href='javascript:void(0);' title='Click to open "+unescape(currentAssociation.label)+"' "
						+ "onclick=\"loadObjectForm('"+parts[0]+"', '"+parts[1]+"');\";\">"+currentAssociation.label+"</a> ";
				}
					con.innerHTML = buf;
			}
			catch(e)
			{
				//alert("Error loading associations" + e);
			}
		}
	}	
    var rpc = new CAjaxRpc("/controller/Email/getAssociations", "getAssociations", 
							[["mid", this.oid]], funct, [this, con], AJAX_POST, true, "json");*/
                            
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.con = con;
    ajax.onload = function(ret)
    {
        if (ret)
        {
            try
            {                
                var buf = "";
                if (ret.length)
                    buf += "Associations: ";
                for(association in ret)
                {
                    var currentAssociation = ret[association];
                    var parts =  currentAssociation.obj_ref.split(":");
                    buf += "<a href='javascript:void(0);' title='Click to open "+unescape(currentAssociation.label)+"' "
                        + "onclick=\"loadObjectForm('"+parts[0]+"', '"+parts[1]+"');\";\">"+currentAssociation.label+"</a> ";
                }
                    this.cbData.con.innerHTML = buf;
            }
            catch(e)
            {
                //alert("Error loading associations" + e);
            }
        }
    };
    ajax.exec("/controller/Email/getAssociations",
                [["mid", this.oid]]);
}


/**
 * Get image for the 'from' of this mesage
 *
 * @param {DOMElement} con The container to print the image into
 */
AntObjectLoader_EmailMessage.prototype.getImage = function(con)
{
	/*var funct = function(ret, cls, con)
	{
		if (!ret['error'] && ret != "-1")
		{			
			con.innerHTML = "<img src='/files/images/"+ret+"/48/48' />"
		}
	}	
    var rpc = new CAjaxRpc("/controller/Email/getEmailUserImage", "getEmailUserImage", 
							[["email", this.mainObject.getValue("sent_from")]], funct, [this, con], AJAX_POST, true, "json");*/
                            
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.con = con;
    ajax.onload = function(ret)
    {
        if (!ret['error'] && ret != "-1")
            this.cbData.con.innerHTML = "<img src='/files/images/"+ret+"/48/48' />"
    };
    ajax.exec("/controller/Email/getEmailUserImage",
                [["email", this.mainObject.getValue("sent_from")]]);
}

/**
 * Get and render the message body
 *
 * @param {string} tocreate Object type to create
 */
AntObjectLoader_EmailMessage.prototype.getMessageBody = function()
{
	this.messageBodyCon.innerHTML = "loading...";

	/*
	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.onload = function(msg)
	{
		
	};
	ajax.exec("/controller/Email/getMessageBody", [["mid", this.oid]]);
	*/


	// Poll the server until we get data or timeout
	var xhr = new alib.net.Xhr();

	// Retrieve results
	alib.events.listen(xhr, "load", function(evt) { 

		var reps = this.getResponse();

		evt.data.msgcls.messageBodyCon.innerHTML = "";
		if (reps.body || typeof reps.body == "object")
		{
			// Add body
			// ------------------------------------------------
			var msgPart = alib.dom.createElement("div", evt.data.msgcls.messageBodyCon);
            
            if(typeof reps.body == "object")
                msgPart.innerHTML = reps.cleanBody;
            else
			    msgPart.innerHTML = reps.body;
            
			// Add attachments
			// ------------------------------------------------
			if (reps.attachments.length)
			{
				var attPart = alib.dom.createElement("div", evt.data.msgcls.messageBodyCon);
				attPart.innerHTML = "<br /><br />";

				var tbl = alib.dom.createElement("table", attPart);
				var tbody = alib.dom.createElement("tbody", tbl);

				for (var i = 0; i < reps.attachments.length; i++)
				{
					var tr = alib.dom.createElement("tr", tbody);

					// Preview / icon
					var td = alib.dom.createElement("td", tr);
					td.innerHTML = reps.attachments[i].preview;

					// name
					var td = alib.dom.createElement("td", tr);
					td.innerHTML = reps.attachments[i].name + " ("+reps.attachments[i].size+") ";

					// links
					var td = alib.dom.createElement("td", tr);

					if (reps.attachments[i].link_view)
					{
						var lnk = alib.dom.createElement("a", td);
						lnk.target = "_blank";
						lnk.href = reps.attachments[i].link_view;
						lnk.innerHTML = "view";

						// add spacer
						alib.dom.createElement("span", td, "&nbsp;&nbsp;");
					}

					if (reps.attachments[i].link_download)
					{
						var lnk = alib.dom.createElement("a", td);
						lnk.target = "_blank";
						lnk.href = reps.attachments[i].link_download;
						lnk.innerHTML = "download";
					}
				}
			}
		}
		else
		{
            if(typeof reps == "object")
                evt.data.msgcls.messageBodyCon.innerHTML = "";
            else
			    evt.data.msgcls.messageBodyCon.innerHTML = reps; // will be an error string
		}
	}, {msgcls:this});

	// Timed out
	alib.events.listen(xhr, "error", function(evt) { 
    	evt.data.msgcls.messageBodyCon.innerHTML = "There was a problem loading this message.";
	});

	xhr.send("/controller/Email/getMessageBody?mid=" + this.oid);
}

/**
 * Creates the popup window for actions
 *
 * @param {string} objType  Object type to create
 * @param {array} params    Parameters for created object
 */
AntObjectLoader_EmailMessage.prototype.popupForm = function(objType, params)
{
    this.formPopupCon.innerHTML = "";
    
    var url = '/obj/'+objType;    
    var strWindName = objType + "New";
    var divCon = alib.dom.createElement("div", this.formPopupCon);
    alib.dom.styleSet(divCon, "display", "none");
    alib.dom.styleSet(divCon, "position", "absolute");
    
    var form = alib.dom.createElement("form", divCon);
    form.setAttribute("method", "post");
    form.setAttribute("target", strWindName);
    form.setAttribute("action", url);
    
    if(params)
    {
        for(param in params)
        {
            var currentParam = params[param];
            var hiddenData = [["type", "hidden"], ["name", currentParam[0]], ["value", currentParam[1]]];
            var hiddenField = alib.dom.setElementAttr(alib.dom.createElement("input", form), hiddenData);
        }
    }
    
    window.open(url, strWindName, 'width=950,height=750,toolbar=no,scrollbars=yes');

    try
    {
        form.submit();
    }
    catch(err)
    {
        alert('You must allow popups for this map to work.');
    }
}

/**
* @fileoverview This sub-loader will load email message compose window
*
* @author	joe, sky.stebnicki@aereus.com
* 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
* Creates an instance of AntObjectLoader_EmailMessageCmp.
*
* @constructor
* @param {CAntObject} obj Handle to object that is being viewed or edited
* @param {AntObjectLoader} loader Handle to base loader class
*/
function AntObjectLoader_EmailMessageCmp(obj, loader)
{
    this.mainObject = obj;
    this.loaderCls = loader;
    this.mainConMin = null; // Minified div for collapsed view
    this.formCon = null; // inner container where form will be printed
	this.infoCon = null; // This is where from, to, accounts, and everything but the body is printed
    this.ctbl = null; // Content table used for frame when printed inline
    this.toolbar = null;
    this.plugins = new Array();
    this.printOuterTable = true; // Can be used to exclude outer content table (usually used for preview)    
    this.headerHeight = 90;
    
    this.emailArgs = new Array();
    this.emailFormData = new Object();     // Date and Time form data    
    this.attachmentUploading = false; // Flag when an attachment is uploading
    this.attachedFiles = new Array();
    this.emailAttachments = new Array();
    
    this.emailAccounts = new Object();    
    this.emailAddress = new Object();
    this.messageDetails = new Array();
    this.userId = null; 
    this.messageId = null; 
    this.inReplyTo = null;
	this.sendTo = null;
    this.mid = this.mainObject.id; 
    this.tid = null;
    this.fid = null; 
    this.replyType = null; 
    this.replyMid = null; 
	this.rteBody = null;
    
	/*
    var functCls = this;
    window.onresize = function()
    {
        functCls.resize();
    }
	*/
}

/**
* Refresh the form
*/
AntObjectLoader_EmailMessageCmp.prototype.refresh = function()
{
}

/**
* Enable to disable edit mode for this loader - does nothing
*
* @param {bool} setmode True for edit mode, false for read mode
*/
AntObjectLoader_EmailMessageCmp.prototype.toggleEdit = function(setmode)
{
}

/**
* Print form on 'con'
*
* @param {DOMElement} con A dom container where the form will be printed
* @param {array} plugis List of plugins that have been loaded for this form
*/
AntObjectLoader_EmailMessageCmp.prototype.print = function(con, plugins)
{
    this.isPopup = (this.loaderCls.isPopup) ? true : false;
    
    this.formCon = con;
    
    // set Email Args
    this.replyMid = (this.emailArgs['replyMid']) ? this.emailArgs['replyMid'] : null;
    this.replyType = (this.emailArgs['replyType']) ? this.emailArgs['replyType'] : null;
    this.mid = (this.emailArgs['mid']) ? this.emailArgs['mid'] : null;
    
    if(this.mainObject.getValue("fid"))
        this.fid = this.mainObject.getValue("fid");
    else
        this.fid = (this.emailArgs['fid']) ? this.emailArgs['fid'] : null;

    var args = new Array();
    args[args.length] = ['reply_mid', this.replyMid];
    args[args.length] = ['reply_type', this.replyType];
    args[args.length] = ['mid', this.mid];
    args[args.length] = ['fid', this.fid];
    args[args.length] = ['objects', this.emailArgs['objects']];
    args[args.length] = ['all_selected', this.emailArgs['allSelected']];
    args[args.length] = ['obj_type', this.emailArgs['objType']];
    args[args.length] = ['send_method', this.emailArgs['sendMethod']];
    args[args.length] = ['using', this.emailArgs['using']];
    
    ajax = new CAjax('json');
    ajax.cls = this;    
    ajax.onload = function(ret)
    {
        if(ret)
        {
            this.cls.userId = ret['userId'];
            this.cls.messageId = ret['messageId'];
            this.cls.messageDetails = ret['messageDetails'];
            this.cls.emailAccounts = ret['emailAccounts'];            
            this.cls.emailAddress = ret['emailAddress'];
            this.cls.inReplyTo = this.cls.messageDetails.in_reply_to;
            this.cls.sendTo = this.cls.messageDetails.send_to;
			this.cls.tid = this.cls.messageDetails.tid;
        }

		if (!this.cls.messageDetails['cmp_to'] && this.cls.mainObject.getValue("send_to"))
			this.cls.messageDetails['cmp_to'] = this.cls.mainObject.getValue("send_to");

		if (!this.cls.messageDetails['subject'] && this.cls.mainObject.getValue("subject"))
			this.cls.messageDetails['subject'] = this.cls.mainObject.getValue("subject");

		if (!this.cls.messageDetails['body'] && this.cls.mainObject.getValue("body"))
			this.cls.messageDetails['body'] = this.cls.mainObject.getValue("body");

    	this.cls.buildInterface();
    };    
    ajax.exec("/controller/Email/getEmailDetails", args);
}

/**
* Callback is fired any time a value changes for the mainObject 
*/
AntObjectLoader_EmailMessageCmp.prototype.onValueChange = function(name, value, valueName)
{	
}

/**
* Callback function used to notify the parent loader if the name of this object has changed
*/
AntObjectLoader_EmailMessageCmp.prototype.onNameChange = function(name)
{
}

/**
* Callback is fired any time a value changes for the mainObject 
*
* @this {AntObjectLoader_EmailMessageCmp}
* @private
*/
AntObjectLoader_EmailMessageCmp.prototype.buildInterface = function()
{	
	this.loaderCls.setTitle("Compose Email Message");

    var tb = new CToolbar();
    this.toolbar = tb;
    if (this.mainObject.security.edit)
    {
        var saveText = "Save Draft";
        if(!this.fid)
        {
            var btn = new CButton("Send", 
                                    function(cls)
                                    { 
                                        cls.sendEmail();
                                    }, [this], "b2");
                                    tb.AddItem(btn.getButton(), "left");
        }
        else
            saveText = "Save Template";
        

        var btn = new CButton(saveText, 
                                function(cls)
                                { 
                                    cls.saveEmail();
                                }, [this], "b1");
                                tb.AddItem(btn.getButton(), "left");
    }

    var btn = new CButton("Add CC", 
                function(cls)
                {
                    alib.dom.styleSet(cls.emailFormData.txtCc.parentNode.parentNode, "display", "table-row");                    
                    cls.resize();
                }, [this], "b1");
                tb.AddItem(btn.getButton(), "left");
    
    var btn = new CButton("Add BCC", 
                function(cls)
                {
                    alib.dom.styleSet(cls.emailFormData.txtBcc.parentNode.parentNode, "display", "table-row");                    
                    cls.resize();
                }, [this], "b1");
                tb.AddItem(btn.getButton(), "left");
    
    var btn = new CButton("Discard", function(cls) { cls.close(); }, [this.loaderCls], "b3");
    if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile)
        tb.AddItem(btn.getButton(), "left");

	/*
    var btn = new CButton("Check Spelling", 
                function(cls)
                {
                    spellCheck('composeForm', 'composeBody');
                }, [this], "b1");
                tb.AddItem(btn.getButton(), "left");
	*/

	/*
    var btn = new CButton("Video Email", 
                        function(cls)
                        {                            
                            var wiz = new CVideoWizard(cls.userId); 
                            wiz.onFinished = function(mid, message)
                            {
                                var mid = cls.mid
                                
                                if (message)
                                    message = message.replace(/\n/g, "<br />");
                                    
                                insertHtml(message + "<br /><br /><a href=\"http://"+document.domain+"/videomail/"+mid+"\"><img src=\"http://"+document.domain+"/images/public/vmailbuttons/watch_video_button.jpg\" border=\"0\" /></a><br /><br />Can't see the image above? <a href=\"http://"+document.domain+"/videomail/"+mid+"\">Click here to view your message</a>")
                            }

                            wiz.showDialog();
                            
                        }, [this], "b1");
    tb.AddItem(btn.getButton(), "left");
	*/

	// Apply a template to the current document
    var btn = alib.ui.Button("Use Template", {
		className:"b1", cls:this,
		onclick:function() {
			var antBrowser = new AntObjectBrowser("html_template");
			antBrowser.cbData.clsRef = this.cls;
			antBrowser.onSelect = function(objId, objLabel) {
				var obj = new CAntObject("html_template", objId);
				obj.cbData.clsRef = this.cbData.clsRef;
				obj.onload = function()
				{
					this.cbData.clsRef.rteBody.setValue(this.getValue("body_html"));
				}
				obj.load();
			}
			antBrowser.displaySelect();
		}
	});                            
    tb.AddItem(btn.getButton(), "left");

    if (this.mid)
	{
        if (this.mainObject.security.del)
   		{
            var btn = new CButton("Delete", function(cls, mid){ cls.deleteObject(mid); }, [this, this.mid], "b1");
            tb.AddItem(btn.getButton(), "left");
        }
    }
    tb.print(this.loaderCls.toolbarCon);

    // Set subject/title bar
    this.onNameChange(this.mainObject.getLabel());

    // Set ANT View title
    if (this.loaderCls.antView)
        this.loaderCls.antView.setTitle(this.mainObject.getLabel());

    this.infoCon = alib.dom.createElement("div", this.formCon);
    this.infoCon.id = "infoCon";
    
    this.emailHeaderCon = alib.dom.createElement("div", this.infoCon);
    this.emailHeaderCon.id = "emailHeaderCon";
    
    this.emailCon = alib.dom.createElement("div", this.emailHeaderCon);
    this.emailCon.id = "emailCon";
    
    // From Input
    var defaultSig = "";
    if(this.emailAccounts[0].num > 1)
    {
        this.emailFormData.txtFrom = createInputAttribute(alib.dom.createElement("select"), null, "use_account", "From", "600px");        
        for(account in this.emailAccounts)
        {
            var currentAccount = this.emailAccounts[account];            
            var selected = false;
            var hasSelected = false;
            
            if(currentAccount.id <= 0)
                continue;
            
            if(!hasSelected)
            {
                if(this.sendTo)
                {
                    if(this.sendTo.indexOf(currentAccount.email_address) >= 0)
                        selected = true;
                        hasSelected = true;
                }
                else
                {
                    if(currentAccount.f_default)
                        selected = true;
                }
            }
            
            if(selected)
                defaultSig = currentAccount.signature;
            
            this.emailFormData.txtFrom[this.emailFormData.txtFrom.length] = new Option(currentAccount.name + " (" + currentAccount.email_address+ ")", 
																					   currentAccount.id, false, selected);
        }
        
        this.emailFormData.txtFrom.cls = this;
        this.emailFormData.txtFrom.onchange = function()
        {
            var currentAccount = this.cls.emailAccounts[this.value];
            var accountSig = "";
            
            var iframe = document.getElementById('CRteIframe');
            var innerDoc = iframe.contentDocument || iframe.contentWindow.document;
            
            innerDoc.getElementById('accountSignature').innerHTML = currentAccount.signature;
        }
    }
    else
    {
        for(account in this.emailAccounts)
        {            
            var currentAccount = this.emailAccounts[account];            
            
            this.emailFormData.txtFrom = createInputAttribute(alib.dom.createElement("input"), "hidden", "use_account", null, "600px", currentAccount.id);
            defaultSig = currentAccount.signature;
                
            break;
        }            
    }
    
    
    var ccAddress = ccAddress = this.messageDetails['cmp_cc'];;
    var bccAddress = bccAddress = this.messageDetails['cmp_bcc'];
    
    if(this.emailArgs['sendMethod']==1) // bulk
    {
        this.emailFormData.txtTo = createInputAttribute(alib.dom.createElement("label"), null, null, "To");
        this.emailFormData.txtTo.inputLabel = "Bulk email will be sent to multiple recipients";
    }
    else // standard
    {
        var toAddress = "";
        if(this.messageDetails['cmp_to'])
            toAddress = this.messageDetails['cmp_to'];

        if(this.emailArgs['sendTo'] && !toAddress)
            toAddress = this.emailArgs['sendTo'];
        
        // To Input
        var txtToAttr = [["type", "text"], ["id", "cmp_to"], ["label", "To"], ["width", "600px"], ["value", toAddress], ["labelWidth", "50px"], ["floatDir", "Left"]];
        this.emailFormData.txtTo = setElementAttr(alib.dom.createElement("input"), txtToAttr);
		alib.dom.styleSetClass(this.emailFormData.txtTo, "fancy");
        
        switch(this.emailArgs['inpField'])
        {
            case 'cmp_cc':
                ccAddress = this.emailAddress.join(", ");                
                break;
            case 'cmp_bcc':
                bccAddress = this.emailAddress.join(", ");
                break;
        }
    }
    
    // CC Input
    this.emailFormData.txtCc = createInputAttribute(alib.dom.createElement("input"), "text", "cmp_cc", "CC", "600px", ccAddress, "50px", "Left");
	alib.dom.styleSetClass(this.emailFormData.txtCc, "fancy");
    
    // BCC Input
    this.emailFormData.txtBcc = createInputAttribute(alib.dom.createElement("input"), "text", "cmp_bcc", "BCC", "600px", bccAddress, "50px", "Left");
	alib.dom.styleSetClass(this.emailFormData.txtBcc, "fancy");
    
    // Subject Input
    this.emailFormData.txtSubject = createInputAttribute(alib.dom.createElement("input"), "text", "cmp_subject", "Subject", "600px", this.messageDetails['subject'], "50px", "Left");
    this.emailFormData.txtSubject.label = "Subject";
    this.emailFormData.txtSubject.floatDir = "Left";
	alib.dom.styleSetClass(this.emailFormData.txtSubject, "fancy");

    // build the input form
    buildFormInput(this.emailFormData, this.emailCon, true);
            
    if(typeof bccAddress == "undefined")
        alib.dom.styleSet(this.emailFormData.txtBcc.parentNode.parentNode, "display", "none");
    
    if(typeof ccAddress == "undefined")
        alib.dom.styleSet(this.emailFormData.txtCc.parentNode.parentNode, "display", "none");        
    
    var autoComplete = new alib.ui.AutoComplete(this.emailFormData.txtTo, {url: "/controller/Contact/getUserContactsEmail"});
    var autoCompleteCc = new alib.ui.AutoComplete(this.emailFormData.txtCc, {url: "/controller/Contact/getUserContactsEmail"});
    var autoCompleteBcc = new alib.ui.AutoComplete(this.emailFormData.txtBcc, {url: "/controller/Contact/getUserContactsEmail"});
    
    // Build Attachments
    var divAttachment = alib.dom.createElement("div", this.emailCon);
    var divButton = alib.dom.createElement("div", divAttachment);
    var divResult = alib.dom.createElement("div", divAttachment);

	var uploader = new AntFsUpload('%tmp%', this.m_dlg);
	uploader.cbData.cls = this;

	uploader.onRemoveUpload = function (fid) 
    {
        this.cbData.cls.attachedFiles = new Array();
        
        for(file in this.m_uploadedFiles)
        {
            var currentFile = this.m_uploadedFiles[file];
            var ind = this.cbData.cls.attachedFiles.length;
            var fileId = currentFile['id'];
            
            if(fileId !== fid)
                this.cbData.cls.attachedFiles[ind] = fileId;
        }
        this.cbData.cls.resize();
    }

    uploader.onUploadStarted = function () 
    { 
        this.cbData.cls.attachmentUploading = true;        
        this.cbData.cls.resize();
    }

    uploader.onQueueComplete = function () 
    { 
        this.cbData.cls.attachmentUploading = false;        
        this.cbData.cls.attachedFiles = new Array();
        
        for(file in this.m_uploadedFiles)
        {
            var currentFile = this.m_uploadedFiles[file];
            var ind = this.cbData.cls.attachedFiles.length;
            
            this.cbData.cls.attachedFiles[ind] = currentFile['id'];
        }        
    }

    uploader.showTmpUpload(divButton, divResult, 'Add Attachment');

    var attachmentDiv = alib.dom.createElement("div", this.emailCon);
    attachmentDiv.id = "attachments";
    
    // attachment
    if(this.messageDetails['attachment'])
    {
        for(attachment in this.messageDetails['attachment'])
        {   
            var currentAttachment = this.messageDetails['attachment'][attachment];
            var currentDiv = alib.dom.createElement("div", attachmentDiv);
            
            var attachmentId = currentAttachment.value;
            var attachmentName = currentAttachment.name;
                                                  
            this.emailAttachments[attachmentId] = createInputAttribute(alib.dom.createElement("input", currentDiv), "checkbox", "attachment_" + attachmentId, null, null, currentAttachment.value);
            
            
            if(this.replyType == "forward" || this.replyType == "draft")
                this.emailAttachments[attachmentId].checked = true;
            
            var labelAttachment = alib.dom.createElement("label", currentDiv);
            labelAttachment.innerHTML = " " + attachmentName;            
        }
    }
    
    // Print email body
    
    // set the rich textbox        
    var divBodyRte = alib.dom.createElement("div", this.infoCon);
    divBodyRte.id = "divBodyRte";
    //alib.dom.styleSet(divBodyRte, "width", "98%");
    
    // Spell Form
    var divSpellForm = alib.dom.createElement("div", divBodyRte);
    this.createSpellForm(divSpellForm);
    
    // Form Compose    
    var rteForm = setElementAttr(alib.dom.createElement("form", divBodyRte), [["name", "composeForm"], ["autocomplete", "off"]]);
    rteForm.onsubmit = function(e)
    {        
        e.preventDefault();        
    }
    
    // Div RTE
    var divBody = alib.dom.createElement("div");
    if(!this.mid && defaultSig)
    {
        //alib.dom.createElement("br", divBody);
        //alib.dom.createElement("br", divBody);
        var divSignature = alib.dom.createElement("div", divBody);
        divSignature.innerHTML = "<br /><br />" + defaultSig;
        divSignature.id = "accountSignature";
    }
    
    // Body Message
    var divBodyMessage = alib.dom.createElement("div", divBody);
    
    if(this.messageDetails['body'])
        divBodyMessage.innerHTML = this.messageDetails['body'];
        
    // build Body rich textbox editor    
    this.emailFormData.txtBody = this.buildRte(divBodyRte, "composeBody", divBody.innerHTML);
    this.resize();
}

/*************************************************************************
*    Function:    buildRteInput
* 
*    Purpose:    Build Rich Textbox Editor Input
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.buildRte = function(div, id, value)
{
    formDataRte = createInputAttribute(alib.dom.createElement("input"), "hidden", id, null, null, value);    
    formDataRte.setAttribute("name", id);    

    div.innerHTML = "";
    var height = (alib.dom.getElementHeight(this.formCon) + alib.dom.getElementHeight(this.infoCon) - 10)+"px";
    
    var rte = alib.ui.Editor(formDataRte);
	rte.defaultBlockElement = ""; // No paragraphs when return is pressed
    rte.print(div, '100%', "100%", value);
	this.rteBody = rte;
    
    return formDataRte;
}

/*************************************************************************
*    Function:    createSpellForm
* 
*    Purpose:    Build Rich Textbox Editor Input
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.createSpellForm = function(divSpellForm)
{
    var spellForm = alib.dom.createElement("form", divSpellForm);
    spellForm.id = 'spell_form';
    spellForm.setAttribute("name", "spell_form");
    spellForm.setAttribute("method", "POST");
    spellForm.setAttribute("target", "spellWindow");
    spellForm.setAttribute("action", "/lib/spell/checkspelling.php");    
    
    var formName = alib.dom.createElement("input", spellForm);
    formName.setAttribute("name", "spell_formname");
    formName.setAttribute("type", "hidden");
    
    var formField = alib.dom.createElement("input", spellForm);
    formField.setAttribute("name", "spell_fieldname");
    formField.setAttribute("type", "hidden");
    
    var formString = alib.dom.createElement("input", spellForm);
    formString.setAttribute("name", "spellstring");
    formString.setAttribute("type", "hidden");
}

/*************************************************************************
*    Function:    showDialog
* 
*    Purpose:    Build Rich Textbox Editor Input
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.showDialog = function(message)
{
    var dlg = new CDialog();
    var dv_load = document.createElement('div');
    alib.dom.styleSetClass(dv_load, "statusAlert");
    alib.dom.styleSet(dv_load, "text-align", "center");
    dv_load.innerHTML = message;
    dlg.statusDialog(dv_load, 250, 100);
    
    return dlg;
}

/*************************************************************************
*    Function:    saveEmail
* 
*    Purpose:    Build Rich Textbox Editor Input
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.saveEmail = function()
{
    var emailAttachments = this.filterAttachments();
    var args = new Array();
    args[args.length] = ['message_id', this.messageId];
    args[args.length] = ['mid', this.mid];
    args[args.length] = ['tid', this.tid];
    args[args.length] = ['fid', this.fid];
    args[args.length] = ['cmp_to', this.emailFormData.txtTo.value];
    args[args.length] = ['cmp_subject', this.emailFormData.txtSubject.value];
    args[args.length] = ['cmp_cc', this.emailFormData.txtCc.value];
    args[args.length] = ['cmp_bcc', this.emailFormData.txtBcc.value];
    args[args.length] = ['cmpbody', this.emailFormData.txtBody.value];
    args[args.length] = ['in_reply_to', ""];
    args[args.length] = ['uploaded_file', this.attachedFiles];
    args[args.length] = ['email_attachments', emailAttachments];

    var dlg = this.showDialog("Saving email, please wait...");
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.dlg = dlg;
    ajax.onload = function(ret)
    {
        if(ret)
        {
            this.cls.mid = ret.mid;
            this.cls.tid = ret.tid;
            this.dlg.hide();
        }        
    };
    ajax.exec("/controller/Email/saveEmail", args);
}

/*************************************************************************
*    Function:    sendEmail
* 
*    Purpose:    Build Rich Textbox Editor Input
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.sendEmail = function()
{
    var emailAttachments = this.filterAttachments();
    var args = new Array();
    args[args.length] = ['message_id', this.messageId];
    args[args.length] = ['mid', this.mid];
    args[args.length] = ['use_account', this.emailFormData.txtFrom.value];
    args[args.length] = ['cmp_to', this.emailFormData.txtTo.value];
    args[args.length] = ['cmp_subject', this.emailFormData.txtSubject.value];
    args[args.length] = ['cmp_cc', this.emailFormData.txtCc.value];
    args[args.length] = ['cmp_bcc', this.emailFormData.txtBcc.value];
    args[args.length] = ['cmpbody', this.emailFormData.txtBody.value];
    args[args.length] = ['uploaded_file', this.attachedFiles];
    args[args.length] = ['email_attachments', emailAttachments];
    args[args.length] = ['in_reply_to', this.inReplyTo];
    
    args[args.length] = ['objects', this.emailArgs['objects']];
    args[args.length] = ['all_selected', this.emailArgs['allSelected']];
    args[args.length] = ['obj_type', this.emailArgs['objType']];
    args[args.length] = ['send_method', this.emailArgs['sendMethod']];
    args[args.length] = ['using', this.emailArgs['using']];
    
    var dlg = this.showDialog("Sending email, please wait...");

    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.dlg = dlg;
    ajax.onload = function(ret)
    {
        this.dlg.hide();
        this.cls.loaderCls.close();
    };
    ajax.exec("/controller/Email/sendEmail", args);
}

/*************************************************************************
*    Function:    filterAttachments
* 
*    Purpose:    filter the email attachments
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.filterAttachments = function()
{
    var filteredAttachments = "";
    for(attachment in this.emailAttachments)
    {
        var currentAttachment = this.emailAttachments[attachment];
        
        if(currentAttachment.checked)
        {
            if(filteredAttachments.length > 0)
                filteredAttachments += ",";
                
            filteredAttachments += attachment;
        }
    }
    
    return filteredAttachments;
}

/*************************************************************************
*    Function:    resize
* 
*    Purpose:    Resizes the body messsage
**************************************************************************/
AntObjectLoader_EmailMessageCmp.prototype.resize = function()
{    
    var popupHeight = 0;
    if(this.isPopup)
        popupHeight = 100;

    var iframe = document.getElementById('CRteIframe');
    
    var emailConHeight = alib.dom.getContentHeight(this.emailCon);    
    var headerHeights = getHeaderHeights();    
    var height = (getWorkspaceHeight()-(emailConHeight + headerHeights.totalHeaderHeight + popupHeight));
    alib.dom.styleSet(iframe, "height", height + "px");
    
    var infoConHeight = alib.dom.getContentHeight(this.infoCon);
    var height = infoConHeight + headerHeights.totalHeaderHeight + popupHeight;
	//var height = getWorkspaceHeight();
	//alert(height);
    //alib.dom.styleSet(this.formCon, "height", height + "px");
}

/**
* @fileoverview This sub-loader will load reports
*
* @author    Marl Tumulak, marl.aereus@aereus.com
*             Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

var REPORT_TYPE_OBJECT      = "object";
var REPORT_TYPE_DATAWARE    = "dataware";
var REPORT_TYPE_CUSTOM      = "custom";
var GRAPH_TYPE_SINGLE       = "single";
var GRAPH_TYPE_MULTI        = "multi";
var TABLE_TABULAR           = "tabular";
var TABLE_SUMMARY           = "summary";
var TABLE_PIVOT             = "pivot_matrix";
var MEASURE_COUNT           = "count";

/**
* Creates an instance of AntObjectLoader_Report.
*
* @constructor
* @param {CAntObject} obj Handle to object that is being viewed or edited
* @param {AntObjectLoader} loader Handle to base loader class
*/
function AntObjectLoader_Report(obj, loader)
{
    this.mainObject = obj;
    this.reportId = this.mainObject.id;    
    this.loaderCls = loader;
    this.reportObject = null;
    
    this.outerCon = null; // Outer container
    this.mainConMin = null; // Minified div for collapsed view
    this.mainCon = null; // Inside outcon and holds the outer table
    this.formCon = null; // inner container where form will be printed
    this.bodyCon = null;
    this.bodyFormCon = null; // Displays the form
    this.bodyNoticeCon = null; // Right above the form and used for notices and inline duplicate detection
    this.tableResultCon = null;
    this.graphCon = null;
    
    this.ctbl = null; // Content table used for frame when printed inline
    this.toolbar = null;        
    this.plugins = new Array();
    this.printOuterTable = true; // Can be used to exclude outer content table (usually used for preview)
    this.fEnableClose = true; // Set to false to disable "close" and "save and close"
        
    this.forceEdit = false;
    this.hideToolbar = false;
    this.editMode = false;
    this.measureHasCount = false; // Set true if measure data has count key
    this.finishBuilding = false; 
    this.filterCount = 0; // Current count of filter    
    
    // Report Objects    
    this.reportForm = new Object();    
    this.reportData = new Object();    
    this.reportDimensionData = new Object();
    this.reportMeasureData = new Object();
    this.objectData = new Object();    
    this.measureData = new Object();
    this.dimensionData = new Object();    
    
    this.dimTypeData = new Object();
    this.aggregateData = new Array();
    this.sortData = new Array();
    this.formatData = new Array();
    this.reportFilterData = new Array();
    
    // Report variables    
    this.reportType = REPORT_TYPE_OBJECT; // Default Value: Dataware Cube Report Type
    this.objType = null; // Object used to generate report
    this.tableType = null; // Object used to generate report
    this.customReport = null;
    this.graphType = null;
    this.chartWidth = "800";
    
    this.cube = null;
    this.cubePath = null;
    
    this.deleteImage = null;
}

/**
 * Refresh the form
 */
AntObjectLoader_Report.prototype.refresh = function()
{    
}

/**
 * Enable to disable edit mode for this loader
 *
 * @param {bool} setmode True for edit mode, false for read mode
 */
AntObjectLoader_Report.prototype.toggleEdit = function(setmode)
{
    if(!this.buttonEdit)
        return;
    
    this.editMode = (this.editMode) ? false : true;
    
    var displayEdit = "block";
    var displayInlineEdit = "inline-block";    
    var hideEdit = "none";
    
    if (this.editMode)
        this.buttonEdit.setText("Finished Editing");
    else
    {
        displayEdit = "none";
        displayInlineEdit = "none";
        hideEdit = "inline-block";
        this.buttonEdit.setText("Edit Values");
    }
    
    // Display Elements When Edit Mode
    alib.dom.styleSet(this.reportForm.reportInfo.reportName, "display", displayInlineEdit);
    alib.dom.styleSet(this.fsGraph, "display", displayEdit);
    alib.dom.styleSet(this.fsTableOptions, "display", displayEdit);
    alib.dom.styleSet(this.tableResultCon, "display", displayEdit);
                                                                  
    // Hide Elements When Edit Mode
    alib.dom.styleSet(this.reportForm.reportInfo.lblReportName, "display", hideEdit);    
}

/**
 * Print form on 'con'
 *
 * @param {DOMElement} con A dom container where the form will be printed
 * @param {array} plugis List of plugins that have been loaded for this form
 */
AntObjectLoader_Report.prototype.print = function(con, plugins)
{
    this.outerCon = con;
    this.mainCon = alib.dom.createElement("div", con);
    this.formCon = this.mainCon;

    var outer_dv = alib.dom.createElement("div", this.formCon);
    
    this.bodyCon = alib.dom.createElement("div", outer_dv);    
    alib.dom.styleSet(this.bodyCon, "margin-top", "5px");
    
    // Notice container
    this.bodyNoticeCon = alib.dom.createElement("div", this.bodyCon);

    // Body container
    this.bodyFormCon = alib.dom.createElement("div", this.bodyCon);
    this.bodyFormCon.innerHTML = "<div class='loading'></div>";
    
    this.buildInterface();
}

/**
 * Callback is fired any time a value changes for the mainObject 
 */
AntObjectLoader_Report.prototype.onValueChange = function(name, value, valueName)
{    
}

/**
 * Callback function used to notify the parent loader if the name of this object has changed
 */
AntObjectLoader_Report.prototype.onNameChange = function(name)
{
}

/**
 * Builds the report interface
 *
 * @this {AntObjectLoader_Report}
 * @private
 */
AntObjectLoader_Report.prototype.buildInterface = function()
{
    if(this.reportId > 0) // display existing report [edit mode]
    {
        // Instantiate the report class
        this.reportObject = new Report(this.reportId);
        this.reportObject.cls = this;
        this.reportObject.chartWidth = this.chartWidth;
        
        // over-ride the onload function
        this.reportObject.onload = function(ret)
        {
            this.cls.cube = this.cube;
            
            this.cls.deleteImage = "/images/icons/deleteTask.gif"
            this.cls.tableType = this.tableType;

            this.cls.reportData = this.reportData;
            this.cls.reportFilterData = this.filterData;
            this.cls.reportDimensionData = this.reportDimensionData;
            this.cls.reportMeasureData = this.reportMeasureData;
            
            var objType = ret.reportData['obj_type'];
            var cubePath = ret.reportData['dataware_cube'];
            var customReport = ret.reportData['custom_report'];
            
            if(objType) // Object Report
            {
                this.cls.objType = objType;
                this.cls.reportType = REPORT_TYPE_OBJECT;
            }
            else if(cubePath)   // Dataware
            {
                this.cls.cubePath = cubePath;
                this.cls.reportType = REPORT_TYPE_DATAWARE;
            }
            else if(customReport)
            {
                this.cls.customReport = customReport;
                this.cls.reportType = REPORT_TYPE_CUSTOM;
            }
            
            // Get the data array from the report class that will be used in select dropdowns
            this.cls.aggregateData = this.aggregateData;
            this.cls.sortData = this.sortData;
            this.cls.formatData = this.formatData;
            this.cls.dimTypeData = this.dimTypeData;            
            this.cls.dimensionData = this.dimensionData;
            this.cls.measureData = this.measureData;
            
            // check measureData if it has count key
            for(measure in this.measureData)
            {
                var currentMeasure = this.measureData[measure];
                
                if(currentMeasure.name == MEASURE_COUNT)
                {
                    this.cls.measureHasCount = true;
                    break;
                }
            }
            
            this.cls.buildReport();
            
            if(this.cls.forceEdit)
                this.cls.toggleEdit(true);
        }
        this.reportObject.loadReport();
    }
    else // display new report type
    {
        var newReportType = new AntObjectLoader_Report_Dialog(this);
        newReportType.cls = this;
        newReportType.onsave = function(ret)
        {
            this.cls.forceEdit = true;
            this.cls.reportId = ret;            
            this.cls.buildInterface();            
        }
        newReportType.print();
    }
}

/**
 * Builds the report
 *
 * @public
 * @this {AntObjectLoader_Report}
 */
AntObjectLoader_Report.prototype.buildReport = function()
{
    this.bodyFormCon.innerHTML = "";
    this.reportToolbar();
    
    var tableForm = alib.dom.createElement("table", this.bodyFormCon);
    var tBody = alib.dom.createElement("tbody", tableForm);
    
    // Report Details
    this.reportForm.reportInfo = new Object();
    
    var attrData = [["id", "name"], ["type", "text"], ["width", "430px"], ["label", "Report Name: "], ["value", this.reportData.name]];
    this.reportForm.reportInfo.reportName = alib.dom.setElementAttr(alib.dom.createElement("input"), attrData);
    
    this.loaderCls.buildFormInput(this.reportForm.reportInfo, tBody);
    
    // Create Additional Report Details
    var reportNameTd = this.reportForm.reportInfo.reportName.parentNode;
    this.reportForm.reportInfo.lblReportName = alib.dom.setElementAttr(alib.dom.createElement("div", reportNameTd), [["innerHTML", this.reportForm.reportInfo.reportName.value]]);
    alib.dom.styleSet(this.reportForm.reportInfo.reportName, "display", "none");
    
    // Report Filter
    this.fsFilter = alib.dom.createElement("fieldset", this.bodyFormCon);
    var legendFilter = alib.dom.setElementAttr(alib.dom.createElement("legend", this.fsFilter), [["innerHTML", "Filter"]]);    
    
    var divFilterCon = alib.dom.createElement("div", this.fsFilter);
    
    if(this.objType) // Object Report
    {
        this.buildObjectFilter(divFilterCon);
    }
    else    // Dataware
    {
        this.reportForm.reportFilter = new Array();
    
        // Displays Saved Filters
        this.displaySavedFilter(divFilterCon);    
        
        // Filter links    
        this.reportFilterLinks(this.fsFilter, divFilterCon)
    }
    
    // Graph Options
    this.fsGraph = alib.dom.createElement("fieldset", this.bodyFormCon);
    alib.dom.styleSet(this.fsGraph, "display", "none");
    var legendGraph = alib.dom.setElementAttr(alib.dom.createElement("legend", this.fsGraph), [["innerHTML", "Graph Options"]]);    
    
    var divGraphCon = alib.dom.createElement("div", this.fsGraph);
    this.buildGraphOptions(divGraphCon);
    
    // Display Graph
    this.graphCon = alib.dom.setElementAttr(alib.dom.createElement("div", this.bodyFormCon), [["innerHTML", "<div class='loading'></div>"]]);
    alib.dom.styleSet(this.graphCon, "border", "1px solid");
    alib.dom.styleSet(this.graphCon, "margin", "10px 0px");
    alib.dom.styleSet(this.graphCon, "padding", "10px");
    alib.dom.styleSet(this.graphCon, "height", "50px");
    
    // Table Options
    this.fsTableOptions = alib.dom.createElement("fieldset", this.bodyFormCon);
    alib.dom.styleSet(this.fsTableOptions, "display", "none");
    var legendTable = alib.dom.setElementAttr(alib.dom.createElement("legend", this.fsTableOptions), [["innerHTML", "Table Options"]]);
    
    // Table Results
    this.tableResultCon = alib.dom.createElement("div", this.bodyFormCon);
    alib.dom.styleSet(this.tableResultCon, "display", "none");
    alib.dom.styleSet(this.tableResultCon, "minHeight", "200px");
    
    var divTableCon = alib.dom.createElement("div", this.fsTableOptions);
    this.buildTableOptions(divTableCon);
    
    this.finishBuilding = true;    
    this.loadOlapData();    
}

/**
 * Build the report toolbar
 *
 * @public
 * @this {AntObjectLoader_Report}
 */
AntObjectLoader_Report.prototype.reportToolbar = function()
{
    if(this.hideToolbar)
        return;
    
    var tb = new CToolbar();    
    
    // close button
    //save and close button
    var btn = new CButton("Close", 
    function(cls)
    {
        cls.close();
    },
    [this.loaderCls], "b1");
    if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile)
        tb.AddItem(btn.getButton(), "left");
    
    //save and close button
    var btn = new CButton("Save and Close", 
    function(cls)
    {
        cls.saveReport(true);
    },
    [this], "b1");
    if (this.loaderCls.fEnableClose && !this.loaderCls.isMobile)
        tb.AddItem(btn.getButton(), "left");
    
    // save changes button
    var btn = new CButton("Save Changes", 
    function(cls)
    {
        cls.saveReport(false);
    },
    [this], "b1");
    tb.AddItem(btn.getButton(), "left");
    
    // delete button
    var btn = new CButton("Delete",
    function(cls)
    {
        if(confirm("Are you sure to delete this user?"))
            cls.deleteUser();
    },
    [this], "b3");
    tb.AddItem(btn.getButton(), "left");
    
    // Finished Editing
    this.buttonEdit = new CButton("Edit Values",
    function(cls)
    {
        cls.toggleEdit(cls.editMode);
    },
    [this], "b2");
    tb.AddItem(this.buttonEdit.getButton(), "left");
    
    // Permissions
    var btn = new CButton("Permissions",
    function(cls)
    {        
    },
    [this], "b1");
    tb.AddItem(btn.getButton(), "left");
    
    tb.print(this.loaderCls.toolbarCon);
} 

/**
 * Creates the filter using CAntObject::buildAdvancedQuery()
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {DOMElement} divFilterCon The container where we can the print filter options
 */
AntObjectLoader_Report.prototype.buildObjectFilter = function(divFilterCon)
{
    // Create New CAntObject for current report type    
    //var currentObject = new CAntObject(this.objType);
    var currentObject = new CAntObject(this.objType);
    currentObject.loadQuerySubObjects = false;
    this.reportFilterData = currentObject.buildAdvancedQuery(divFilterCon, this.reportFilterData);
    
    var applyDataCon = alib.dom.createElement("div", divFilterCon);
    var applyData = alib.dom.setElementAttr(alib.dom.createElement("a", applyDataCon), [["innerHTML", "Apply & Refresh Data"], ["href", "javascript: void(0);"]]);
    var addConditionCon = applyData.parentNode.previousSibling;
    
    alib.dom.divClear(divFilterCon);
    
    // Set Element Style
    alib.dom.styleSet(applyDataCon, "float", "left");
    alib.dom.styleSet(applyDataCon, "marginLeft", "15px");
    alib.dom.styleSet(addConditionCon, "float", "left");
    
    // Set Element Events
    applyData.cls = this;
    applyData.onclick = function()
    {        
        this.cls.loadOlapData();
        this.cls.processGraphDisplay();
    }
}

/**
 * Creates the fieldset for filter report
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {DOMElement} divFilterCon The container where we can the print filter options
 */
AntObjectLoader_Report.prototype.buildReportFilter = function(divFilterCon)
{    
    this.reportForm.reportFilter[this.filterCount] = new Object();
        
    var currentReportFilter = this.reportForm.reportFilter[this.filterCount];
    
    var divFilter = alib.dom.createElement("div", divFilterCon);
    alib.dom.styleSet(divFilter, "marginTop", "5px");    
    
    var queryDefault = "Query Value";    
    currentReportFilter.blogic = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "filter_blogic_" + this.filterCount]]);
    currentReportFilter.field = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "filter_field_" + this.filterCount]]);
    currentReportFilter.operator = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "filter_operator_" + this.filterCount]]);
    currentReportFilter.condValue = alib.dom.setElementAttr(alib.dom.createElement("input"), [["type", "text"], ["id", "filter_value_" + this.filterCount], ["value", queryDefault]]);
    currentReportFilter.removeFilter = alib.dom.createElement("img");
    
    this.loaderCls.buildFormInputDiv(currentReportFilter, divFilter, false, "10px");
    alib.dom.divClear(divFilterCon);

    // Set Current Filter Id to null value
    currentReportFilter.id = null;
    
    // Set Element Events
    alib.dom.setInputBlurText(currentReportFilter.condValue, queryDefault, "", "", "");
    currentReportFilter.removeFilter.divFilterCon = divFilterCon;
    currentReportFilter.removeFilter.divFilter = divFilter;
    currentReportFilter.removeFilter.filterCount = this.filterCount;
    currentReportFilter.removeFilter.cls = this;
    currentReportFilter.removeFilter.onclick = function()
    {
        this.divFilterCon.removeChild(this.divFilter);        
        delete this.cls.reportForm.reportFilter[this.filterCount];
        
        this.cls.loadOlapData();
    }

    currentReportFilter.field.cls = this;    
    currentReportFilter.field.operator = currentReportFilter.operator;
    currentReportFilter.field.onchange = function()
    {        
        var currentOperator = this.operator;
        this.dimType = this.cls.dimTypeData[this.value];
        var operatorData = this.cls.getFilterOperator(this.dimType);
        currentOperator.innerHTML = "";
        this.cls.loaderCls.buildDropdown(currentOperator, operatorData);
    }    
    
    // Set Element Data
    currentReportFilter.removeFilter.src = this.deleteImage;
    
    // set element style
    alib.dom.styleSet(currentReportFilter.removeFilter, "cursor", "pointer");
    alib.dom.styleSet(currentReportFilter.removeFilter, "marginTop", "3px");
    alib.dom.styleSet(currentReportFilter.condValue, "height", "20px");
    alib.dom.styleSet(currentReportFilter.condValue, "fontSize", "12px");
    
    // Add Select Options
    var blogicData = [["and", "And"], ["or", "Or"]];    
    this.loaderCls.buildDropdown(currentReportFilter.blogic, blogicData);
    
    var defaultType = null;
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = currentReportFilter.field.length
        
        currentReportFilter.field[dimLen] = new Option(currentDimension.name, currentDimension.name);        
        currentReportFilter.field[dimLen].dimType = currentDimension.type;
        
        // get the first dimension type
        if(defaultType==null)
            defaultType = currentDimension.type;
    }
    
    var operatorData = this.getFilterOperator(defaultType);
    this.loaderCls.buildDropdown(currentReportFilter.operator, operatorData);
    
    this.filterCount++; // increment the filter count to be used for the next index
} 

/**
 * Creates the links for filter (add and apply filter)
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {DOMElement} fsFilter The fieldset container where we can the print the filter links
 * @param {DOMElement} divFilterCon The container where we can the print the filter links
 */
AntObjectLoader_Report.prototype.reportFilterLinks = function(fsFilter, divFilterCon)
{    
    var divFilterLinks = alib.dom.createElement("div", fsFilter);
    alib.dom.styleSet(divFilterLinks, "marginTop", "10px");
    
    var addData = [["href", "javascript: void(0);"], ["innerHTML", "Add Filter"]];
    var addFilter = alib.dom.setElementAttr(alib.dom.createElement("a", divFilterLinks), addData);    
    alib.dom.styleSet(addFilter, "marginRight", "15px");    
    addFilter.cls = this;
    addFilter.divFilterCon = divFilterCon;
    addFilter.onclick = function()
    {
        this.cls.buildReportFilter(this.divFilterCon);        
    }
    
    var applyData = [["href", "javascript: void(0);"], ["innerHTML", "Apply & Refresh Data"]];
    var applyFilter = alib.dom.setElementAttr(alib.dom.createElement("a", divFilterLinks), applyData);    
    applyFilter.cls = this;    
    applyFilter.onclick = function()
    {
        this.cls.loadOlapData();
    }
}

/**
 * Displays the saved report filter
 *
 * @public
 * @this {AntObjectLoader_Report} 
 * @param {DOMElement} divFilterCon The container where we can print the filter options
 */
AntObjectLoader_Report.prototype.displaySavedFilter = function(divFilterCon)
{
    if(this.reportFilterData.length)
    {        
        for(filter in this.reportFilterData)
        {
            var currentFilter = this.reportFilterData[filter];
            this.buildReportFilter(divFilterCon);
            
            var currentReportFilter = this.reportForm.reportFilter[this.filterCount-1];
            
            currentReportFilter.id = currentFilter.id;
            currentReportFilter.blogic.value = currentFilter.blogic;
            currentReportFilter.field.value = currentFilter.fieldName;
            
            currentReportFilter.field.onchange();
            currentReportFilter.operator.value = currentFilter.operator;
            currentReportFilter.condValue.value = currentFilter.condValue;
        }
        
        this.processFilter();
    }
}

/**
 * Process and clean the filter data
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {Integer} tableType The container where we can the print the table options
 */
AntObjectLoader_Report.prototype.processFilter = function()
{
    this.filterData = new Array();
    
    if(this.reportForm.reportFilter)
    {
        for(filter in this.reportForm.reportFilter)
        {
            var currentFilter = this.reportForm.reportFilter[filter];
            
            this.filterData[filter] = new Object;
            this.filterData[filter].id = currentFilter.id;
            this.filterData[filter].blogic = currentFilter.blogic.value;
            this.filterData[filter].fieldName = currentFilter.field.value;
            this.filterData[filter].operator = currentFilter.operator.value;
            this.filterData[filter].condValue = currentFilter.condValue.value;
        }
    }
    else
    {
        for (var i = 0; i < this.reportFilterData.getNumConditions(); i++)
        {
            var currentFilter = this.reportFilterData.getCondition(i);            
            this.filterData[i] = new Object;
            this.filterData[i].id = currentFilter.condId;
            this.filterData[i].blogic = currentFilter.blogic;
            this.filterData[i].fieldName = currentFilter.fieldName;
            this.filterData[i].operator = currentFilter.operator;
            this.filterData[i].condValue = currentFilter.condValue;
        }
    }
}

/**
 * Build the graph options fieldset
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {DOMElement} divGraphCon The container where we can the print the graph options
 */
AntObjectLoader_Report.prototype.buildGraphOptions = function(divGraphCon)
{
    this.reportForm.reportGraph = new Object();
    
    this.reportForm.reportGraph.type = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "chart_type"], ["label", "Type: "]]);
    this.reportForm.reportGraph.measure = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "chart_measure"], ["label", "X-Axis: "]]);
    this.reportForm.reportGraph.dimension = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "chart_dim1"], ["label", "Y-Axis: "]]);
    this.reportForm.reportGraph.grouping = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "chart_dim2"], ["label", "Grouping: "]]);
    
    this.loaderCls.buildFormInput(this.reportForm.reportGraph, divGraphCon);
    
    // create additional elements
    var measureTd = this.reportForm.reportGraph.measure.parentNode;
    this.reportForm.reportGraph.aggregate = alib.dom.setElementAttr(alib.dom.createElement("select", measureTd), [["id", "chart_measure_agg"]]);
    
    var dimensionTd = this.reportForm.reportGraph.dimension.parentNode;    
    var lblDimension = alib.dom.setElementAttr(alib.dom.createElement("label", dimensionTd), [["innerHTML", "By"]]);
    
    this.reportForm.reportGraph.dimensionFormat = alib.dom.setElementAttr(alib.dom.createElement("select", dimensionTd), [["id", "chart_dim1_grp"]]);
    
    var groupingTd = this.reportForm.reportGraph.grouping.parentNode;
    var lblGrouping = alib.dom.setElementAttr(alib.dom.createElement("label", groupingTd), [["innerHTML", "By"]]);
    
    this.reportForm.reportGraph.groupingFormat = alib.dom.setElementAttr(alib.dom.createElement("select", groupingTd), [["id", "chart_dim2_grp"]]);
    
    // set element styles
    alib.dom.styleSet(this.reportForm.reportGraph.aggregate, "marginLeft", "10px");
    alib.dom.styleSet(this.reportForm.reportGraph.aggregate, "display", "none");
    alib.dom.styleSet(lblDimension, "margin", "0px 10px");
    alib.dom.styleSet(lblGrouping, "margin", "0px 10px");
    
    // Set element events
    this.reportForm.reportGraph.type.cls = this;
    this.reportForm.reportGraph.type.onchange = function()
    {
        this.cls.processGraphDisplay();
    }
    
    this.reportForm.reportGraph.measure.cls = this;
    this.reportForm.reportGraph.measure.onchange = function()
    {
        if(this.value=='count')
            alib.dom.styleSet(this.cls.reportForm.reportGraph.aggregate, "display", "none");
        else
            alib.dom.styleSet(this.cls.reportForm.reportGraph.aggregate, "display", "inline-block");
            
        this.cls.processGraphDisplay();
    }

    this.reportForm.reportGraph.dimension.cls = this;
    this.reportForm.reportGraph.dimension.lblDimension = lblDimension;
    this.reportForm.reportGraph.dimension.onchange = function()
    {        
        this.dimType = this.cls.dimTypeData[this.value];
        this.cls.displayFormat(this.dimType, this.lblDimension, this.cls.reportForm.reportGraph.dimensionFormat);
        
        this.cls.getGraphTypes();        
    }
    
    this.reportForm.reportGraph.dimensionFormat.cls = this;
    this.reportForm.reportGraph.dimensionFormat.onchange = function()
    {
        this.cls.processGraphDisplay();
    }
    
    this.reportForm.reportGraph.grouping.cls = this;
    this.reportForm.reportGraph.grouping.lblGrouping = lblGrouping;
    this.reportForm.reportGraph.grouping.onchange = function()
    {        
        this.dimType = this.cls.dimTypeData[this.value];
        this.cls.displayFormat(this.dimType, this.lblGrouping, this.cls.reportForm.reportGraph.groupingFormat);
        
        this.cls.getGraphTypes();        
    }
    
    this.reportForm.reportGraph.groupingFormat.cls = this;
    this.reportForm.reportGraph.groupingFormat.onchange = function()
    {
        this.cls.processGraphDisplay();
    }
    
    this.reportForm.reportGraph.aggregate.cls = this;
    this.reportForm.reportGraph.aggregate.onchange = function()
    {
        this.cls.processGraphDisplay();
    }
    
    // Add select options    
    this.loaderCls.buildDropdown(this.reportForm.reportGraph.aggregate, this.aggregateData, this.reportData.chart_measure_agg);
    
    this.loaderCls.buildDropdown(this.reportForm.reportGraph.dimensionFormat, this.formatData, this.reportData.chart_dim1_grp);
    this.loaderCls.buildDropdown(this.reportForm.reportGraph.groupingFormat, this.formatData, this.reportData.chart_dim2_grp);
    
    this.loaderCls.buildDropdown(this.reportForm.reportGraph.grouping, [["", "none"]]);
    this.loaderCls.buildDropdown(this.reportForm.reportGraph.dimension, [["", "none"]]);
    
    if(!this.measureHasCount)
        this.loaderCls.buildDropdown(this.reportForm.reportGraph.measure, [MEASURE_COUNT]);
    
    for(measure in this.measureData)
    {
        var currentMeasure = this.measureData[measure];
        var dimLen = this.reportForm.reportGraph.measure.length;
        var selected = false;
        
        if(currentMeasure.name == this.reportData.chart_measure)
        {
            alib.dom.styleSet(this.reportForm.reportGraph.aggregate, "display", "inline-block");
            selected = true;
        }
            
        
        this.reportForm.reportGraph.measure[dimLen] = new Option(currentMeasure.name, currentMeasure.name, false, selected);
    }
    
    var dimDefaultType = null;
    var groupDefaultType = null;
    for(dimension in this.dimensionData)
    {
        var currentDimension = this.dimensionData[dimension];
        var dimLen = this.reportForm.reportGraph.dimension.length
        var dimSelected = false;
        
        if(currentDimension.name == this.reportData.chart_dim1)
        {
            dimDefaultType = currentDimension.type;
            dimSelected = true;
        }
        
        this.reportForm.reportGraph.dimension[dimLen] = new Option(currentDimension.name, currentDimension.name, false, dimSelected);
        this.reportForm.reportGraph.dimension[dimLen].dimType = currentDimension.type;
        
        if(dimDefaultType == null)
            dimDefaultType = currentDimension.type;
        
        // Grouping
        var groupLen = this.reportForm.reportGraph.grouping.length
        var groupSelected = false;
        
        if(currentDimension.name == this.reportData.chart_dim2)
        {
            groupDefaultType = currentDimension.type;
            groupSelected = true;
        }
            
            
        this.reportForm.reportGraph.grouping[groupLen] = new Option(currentDimension.name, currentDimension.name, false, groupSelected);
        this.reportForm.reportGraph.grouping[groupLen].dimType = currentDimension.type;        
        
        if(groupDefaultType == null)
            groupDefaultType = currentDimension.type;
    }
    
    this.displayFormat(dimDefaultType, lblDimension, this.reportForm.reportGraph.dimensionFormat);
    this.displayFormat(groupDefaultType, lblGrouping, this.reportForm.reportGraph.groupingFormat);
    
    this.getGraphTypes();
}

/**
 * Displays the Graph
 *
 * @public
 * @this {AntObjectLoader_Report} 
 */
AntObjectLoader_Report.prototype.processGraphDisplay = function()
{    
    if(!this.finishBuilding)
        return; 
        
    this.processFilter();        
    var graphObject = this.reportForm.reportGraph;
    var graphData = new Object;
    graphData.type = graphObject.type.value;
    graphData.dimension = graphObject.dimension.value;
    graphData.dimensionFormat = graphObject.dimensionFormat.value;
    graphData.grouping = graphObject.grouping.value;
    graphData.groupingFormat = graphObject.groupingFormat.value;
    graphData.measure = graphObject.measure.value;
    graphData.aggregate = graphObject.aggregate.value;
    
    this.reportObject.displayGraph(this.graphCon, graphData, this.filterData);
}

/**
 * Get the graph types in Datacenter Controller
 *
 * @public
 * @this {AntObjectLoader_Report} 
 */
AntObjectLoader_Report.prototype.getGraphTypes = function()
{
    var gType = GRAPH_TYPE_SINGLE;
    
    /*if(this.reportForm.reportGraph.dimension.value.length) // X-Axis is set
        gType = GRAPH_TYPE_MULTI;*/
    
    if(this.reportForm.reportGraph.grouping.value.length) // Grouping is set
        gType = GRAPH_TYPE_MULTI;
    
    if(this.graphType == gType)
    {
        this.processGraphDisplay();
        return;
    }
    
    var chartType = this.reportData.chart_type;
    var selectGraphType = this.reportForm.reportGraph.type;
    
    selectGraphType.innerHTML = "";
    this.loaderCls.buildDropdown(selectGraphType, [["", "none"]]);
    
    this.reportObject.onloadGraphs = function(ret)
    {        
        if(ret)
        {
            for(graphType in ret)
            {
                var currentType = ret[graphType];
                var selected = false;
                
                if(currentType.name == chartType)
                    selected = true;
                
                selectGraphType[selectGraphType.length] = new Option(currentType.title, currentType.name, false, selected);
            }
            
            this.cls.processGraphDisplay();
        }
    }
    this.reportObject.getGraphTypes(gType);
    
    this.graphType = gType;
}

/**
 * Displays the table options fieldset
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {DOMElement} divTableCon The container where we can the print the table options
 */
AntObjectLoader_Report.prototype.buildTableOptions = function(divTableCon)
{    
    // Instantiate Table Options Classes
    this.tabularReport = new AntObjectLoader_Report_Tabular(this);
    this.summaryReport = new AntObjectLoader_Report_Summary(this);
    this.pivotReport = new AntObjectLoader_Report_PivotMatrix(this);
    
    this.reportForm.reportTable = new Object();
    
    this.reportForm.reportTable.type = alib.dom.setElementAttr(alib.dom.createElement("select"), [["id", "table_type"], ["label", "Type: "]]);
    this.loaderCls.buildFormInput(this.reportForm.reportTable, divTableCon);
    
    this.tableDataCon = alib.dom.createElement("div", divTableCon);    
    // Set Element Events    
    this.reportForm.reportTable.type.cls = this;    
    this.reportForm.reportTable.type.onchange = function()
    {        
        this.cls.tableDataCon.innerHTML = "";
        this.cls.tableResultCon.innerHTML = "";
        this.cls.tableType = this.value;
        
        switch(this.cls.tableType)
        {            
            case TABLE_TABULAR:
                this.cls.tabularReport.buildTableTabular(this.cls.tableDataCon);                
                break;
            case TABLE_SUMMARY:
                this.cls.summaryReport.buildTableSummary(this.cls.tableDataCon);                
                break;
            case TABLE_PIVOT:
                this.cls.pivotReport.buildTablePivot(this.cls.tableDataCon);                
                break;
        }        
        this.cls.loadOlapData();
    }
    
    // Add select options
    var typeData = [["", "none"], [TABLE_TABULAR, "Tabular"], [TABLE_SUMMARY, "Summary"], [TABLE_PIVOT, "Pivot / Matrix"]];
    this.loaderCls.buildDropdown(this.reportForm.reportTable.type, typeData, this.tableType);    
    this.reportForm.reportTable.type.onchange();
}
   
/**
 * Loads the olap data
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {Integer} tableType The container where we can the print the table options
 */
AntObjectLoader_Report.prototype.loadOlapData = function()
{
    // Apply the filter first before loading the olap data
    this.processFilter();

    if(!this.finishBuilding)
        return;
        
    switch(this.tableType)
    {
        case TABLE_TABULAR:
            this.tabularReport.buildOlapData();
            break;
        case TABLE_SUMMARY:
            this.summaryReport.buildOlapData();
            break;
        case TABLE_PIVOT:
            this.pivotReport.buildOlapData();
            break;
    }
}

/**
 * Checks if when to display the format dimension dropdown
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {String} dimType Determines the type of the dimension
 * @param {lblFormat} dimType Determines the type of the dimension
 * @param {DOMElement} lblFormat The label element with innerHTML "By"
 * @param {DOMElement} objElement The select dropdown element where we populate the display format
 */
AntObjectLoader_Report.prototype.displayFormat = function(dimType, lblFormat, objElement)
{
    switch(dimType)
    {
        case "timestamp":
        case "date":
        case "time":
            alib.dom.styleSet(lblFormat, "display", "inline-block");
            alib.dom.styleSet(objElement, "display", "inline-block");
            break;
        default:
            alib.dom.styleSet(lblFormat, "display", "none");
            alib.dom.styleSet(objElement, "display", "none");
            break;
    }
}

/**
 * Gets the filter operator array
 *
 * @public
 * @this {AntObjectLoader_Report}
 * @param {String} type Determines the type of the filter
 * 
 * @return {Array} operator Returns the array of operators
 */
AntObjectLoader_Report.prototype.getFilterOperator = function(type)
{
    // TO DO: Add fkey and multi_fkey
    
    var operator = new Array();    
    switch(type)
    {
        case 'timestamp':
        case 'time':
        case 'date':
            operator = ["is_equal", "is_not_equal", "is_greater", "is_less", "is_greater_or_equal", "is_less_or_equal",
                        "day_is_equal", "year_is_equal", "last_x_days", "last_x_weeks", "last_x_months", "last_x_years",
                        "next_x_days", "next_x_weeks", "next_x_months", "next_x_years"];            
            break;
        case 'numeric':
        case 'number':
        case 'real':
        case 'integer':
            operator = ["is_equal", "is_not_equal", "is_greater", "is_less", "is_greater_or_equal", "is_less_or_equal"];
            break;
        case 'string':
        case 'text':
        case 'object':
        case 'multi_fkey':
            operator = ["is_equal", "is_not_equal", "begins_with", "contains"];
        default:            
            break;
    }
    
    return operator;
}

/**
 * Saves the report details
 *
 * @public
 * @this {AntObjectLoader_Report} 
 * @param {Boolean} isClose     Determines if the loader will be closed after saving
 */
AntObjectLoader_Report.prototype.saveReport = function(isClose)
{
    var args = new Array();
    
    // Report Details
    args[args.length] = ['id', this.reportId];
    args[args.length] = ['name', this.reportForm.reportInfo.reportName.value];
    args[args.length] = ['table_type', this.tableType];
    
    if(this.reportForm.reportTable.type.value == TABLE_PIVOT)
    {
        // Get the this.reportForm of PivotMatrix.js
        var pivotReportForm = this.pivotReport.getReportForm();
        for(pivot in pivotReportForm.pivotTotals)
        {
            var currentPivot = pivotReportForm.pivotTotals[pivot];
            
            if(currentPivot.type == "checkbox")
                args[args.length] = [currentPivot.id, currentPivot.checked];
        }
    }
    else
    {
        args[args.length] = ['f_row_totals', false];
        args[args.length] = ['f_column_totals', false];
        args[args.length] = ['f_sub_totals', false];
    }
    
    // Graph Data
    for(graph in this.reportForm.reportGraph)
    {
        var currentGraph = this.reportForm.reportGraph[graph];
        
        if(currentGraph.id && currentGraph.style.display !== "none")
            args[args.length] = [currentGraph.id, currentGraph.value];
    }
    
    this.processFilter()
    // Filter Data
    for(filter in this.filterData)
    {
        var currentFilter = this.filterData[filter];
    
        args[args.length] = ["filters[]", filter];
        args[args.length] = ["filter_id_" + filter, currentFilter.id];
        args[args.length] = ["filter_blogic_" + filter, currentFilter.blogic];
        args[args.length] = ["filter_field_" + filter, currentFilter.fieldName];
        args[args.length] = ["filter_operator_" + filter, currentFilter.operator];
        args[args.length] = ["filter_value_" + filter, currentFilter.condValue];
    }
    
    // Table Options Data
    var tableOptionsData = new Array();
    switch(this.tableType)
    {
        case TABLE_TABULAR:
            args = args.concat(this.tabularReport.getTableOptions());
            break;
        case TABLE_SUMMARY:
            args = args.concat(this.summaryReport.getTableOptions());
            break;
        case TABLE_PIVOT:            
            args = args.concat(this.pivotReport.getTableOptions());
            break;
    }
        
    var dlg = showDialog("Saving report...");
    this.reportObject.onsave = function(ret)
    {
        dlg.hide();
        if(isClose)
            this.cls.loaderCls.close();
        
        if(!ret)
        {
            ALib.statusShowAlert("Error occured when saving the report data.", 3000, "bottom", "right");
            return;
        }
            
        if(ret.error)
            ALib.statusShowAlert(ret.error, 3000, "bottom", "right");
        else
            ALib.statusShowAlert("Report was successfully saved!", 3000, "bottom", "right");
    }
    this.reportObject.saveReport(args);
}

/**
* @fileoverview This sub-loader will load Dashboards
* @depriacted We now use the form with a plugin
*
* @author    Marl Tumulak, marl.aereus@aereus.com
*             Copyright (c) 2011 Aereus Corporation. All rights reserved.
*/

/**
* Creates an instance of AntObjectLoader_Dashboard.
*
* @constructor
* @param {CAntObject} obj Handle to object that is being viewed or edited
* @param {AntObjectLoader} loader Handle to base loader class
*/
function AntObjectLoader_Dashboard(obj, loader)
{
    this.mainObject = obj;
    this.dashboardId = this.mainObject.id;    
    this.loaderCls = loader;
    
    this.outerCon = null; // Outer container
    this.mainConMin = null; // Minified div for collapsed view
    this.mainCon = null; // Inside outcon and holds the outer table
    this.formCon = null; // inner container where form will be printed
    this.bodyCon = null;
    this.bodyFormCon = null; // Displays the form
    this.bodyNoticeCon = null; // Right above the form and used for notices and inline duplicate detection
    
    this.ctbl = null; // Content table used for frame when printed inline
    this.toolbar = null;        
    this.plugins = new Array();
    this.printOuterTable = true; // Can be used to exclude outer content table (usually used for preview)
    this.fEnableClose = true; // Set to false to disable "close" and "save and close"
    
    this.dropZone = "dashboardDropZone";    // name for dropzones
    this.appNavname = null;     // used for displaying the application dashboard
    this.dropdownPopulated = false;    
    this.allowEdit = false;
    this.dashboardWidgets = new Array();

	/**
	 * Layout array
	 *
	 * Structure: [ {width:string, widgets: [ {id:, widget:, data:} ] } ]
	 *
	 * @var {Array}
	 */
	this.layout = new Array();

	/**
	 * Current columns array
	 *
	 * @var {Array}
	 */
	this.columns = new Array();
    
    this.columnChange = false;
}

/**
 * Refresh the form
 */
AntObjectLoader_Dashboard.prototype.refresh = function()
{
}

/**
 * Enable to disable edit mode for this loader
 *
 * @param {bool} setmode True for edit mode, false for read mode
 */
AntObjectLoader_Dashboard.prototype.toggleEdit = function(setmode)
{    
}

/**
 * Callback is fired any time a value changes for the mainObject 
 */
AntObjectLoader_Dashboard.prototype.onValueChange = function(name, value, valueName)
{
    if(name=="num_columns")
        this.columnChange = true;
}

/**
 * Callback function used to notify the parent loader if the name of this object has changed
 */
AntObjectLoader_Dashboard.prototype.onNameChange = function(name)
{
}

/**
 * Print form on 'con'
 *
 * @param {DOMElement} con A dom container where the form will be printed
 * @param {array} plugis List of plugins that have been loaded for this form
 */
AntObjectLoader_Dashboard.prototype.print = function(con, plugins)
{
    this.outerCon = con;
    this.mainCon = alib.dom.createElement("div", con);
    this.formCon = this.mainCon;

    var outer_dv = alib.dom.createElement("div", this.formCon);
    
    this.bodyCon = alib.dom.createElement("div", outer_dv);    
    alib.dom.styleSet(this.bodyCon, "margin-top", "5px");
    
    // Notice container
    this.bodyNoticeCon = alib.dom.createElement("div", this.bodyCon);

    // Body container
    this.bodyFormCon = alib.dom.createElement("div", this.bodyCon);    
    
    // Dashboard Container
    this.dashboardFormCon = alib.dom.createElement("div", this.bodyFormCon);        
    this.dashboardHeaderCon = alib.dom.createElement("div", this.bodyFormCon);
    this.dashboardWidgetCon = alib.dom.createElement("div", this.bodyFormCon);

	// Hide title box if not in edit mode
	alib.dom.styleSet(this.loaderCls.titleCon, "display", "none");
    
    this.initDashboard();
    this.loadDashboard();
}

/**
 * Inistialize the dashboard
 */
AntObjectLoader_Dashboard.prototype.initDashboard = function()
{
    if(this.mainObject.security.edit)
        this.allowEdit = true;
        
    this.displayObjectForm();
}

/**
 * Reloads the dashboard
 */
AntObjectLoader_Dashboard.prototype.loadDashboard = function()
{
    // Dashboard Objects
    this.dashboardData = new Object();
    
    // Dashboard variables
    this.dashboardCols = new Array();
    this.dashboardWidgets = new Array();
    this.dashboardMenus = new Array();
    
    // Load saved dashboards
    this.buildInterface();
}

/**
 * Builds the Dashboard interface
 *
 * @this {AntObjectLoader_Dashboard}
 * @private
 */
AntObjectLoader_Dashboard.prototype.buildInterface = function()
{
    this.dashboardWidgetCon.innerHTML = "";
    
    if(this.dashboardId) // Saved Dashboard
        this.loadLayout();

    
    this.refreshWidgets();
}

/**
 * Displays the dashboad form
 *
 * @this {AntObjectLoader_Dashboard} 
 */
AntObjectLoader_Dashboard.prototype.displayObjectForm = function()
{    
    if(this.mainObject.security.edit)
    {
        var formLoader = new AntObjectLoader_Form(this.mainObject, this.loaderCls);
        
        this.loaderCls.pluginAddToolbarEntry("Add Widgets", 
                                            function(cbData) 
                                            {
                                                var widBrowser = new CWidgetBrowser();
                                                widBrowser.cls = cbData.cls;                                                
                                                widBrowser.onSelect = function(widgetId)
                                                {
                                                    this.cls.addWidget(widgetId);
                                                }
                                                widBrowser.showDialog();
                                            }, { cls:this }, "first");
        formLoader.print(this.dashboardFormCon);
        
        this.loaderCls.cbData.cls = this;
        this.loaderCls.onSave = function()
        {
            if(this.cbData.cls.columnChange) // Reload dashboard for new changes in number of column
            {
                this.cbData.cls.loadDashboard();
                this.cbData.cls.columnChange = false;
            }
        }
    }
}

/**
 * Adds the widget in the database
 *
 * @public
 * @this {CAntObject}
 * @param {Integer} widgetId  Widget Id
 */
AntObjectLoader_Dashboard.prototype.addWidget = function(widgetId)
{
    var ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.renderWidget(0, ret);
    };
    var args = new Array();
    args[args.length] = ['dashboardId', this.mainObject.id];
    args[args.length] = ['widgetId', widgetId];
    args[args.length] = ['col', 0];
    ajax.exec("/controller/Dashboard/addWidget", args);
}

/**
 * Remove a widget from the dashboard
 *
 * @this {AntObjectLoader_Dashboard} 
 */
AntObjectLoader_Dashboard.prototype.removeWidget = function(dwid)
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        for(widget in this.cbData.cls.dashboardWidgets)
        {
            var currentWidget = this.cbData.cls.dashboardWidgets[widget];
            
            if(currentWidget.m_id == ret)
            {
                var widgetCon = currentWidget.m_widgetBox.getCon();
                widgetCon.parentNode.removeChild(widgetCon);
                currentWidget.exit();
                delete currentWidget;
            }
        }
    };
    var args = new Array();    
    args[args.length] = ['dwid', dwid];
    args[args.length] = ['dashboardId', this.mainObject.id];
    ajax.exec("/controller/Dashboard/removeWidget", args);
}

/**
 * Load the dashboard layout
 *
 * @public
 * @this {CAntObject}
 */
AntObjectLoader_Dashboard.prototype.loadLayout = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.layout = ret;
        this.cbData.cls.renderDashboard();
    };
    var args = new Array();
    args[args.length] = ['dbid', this.mainObject.id];
    ajax.exec("/controller/Dashboard/getLayout", args);
}

/**
 * Render the dashboard onto a container
 *
 * @private
 */
AntObjectLoader_Dashboard.prototype.renderDashboard = function()
{
	var spCon = new CSplitContainer("verticle", "100%");
    spCon.resizable = true;
	spCon.print(this.dashboardWidgetCon);
    
	// First add columns
    for (col in this.layout)
	{
		var width = (this.layout[col].width) ? this.layout[col].width : null;
		this.columns[col] = spCon.addPanel(width, "hidden");
	}
        
	// Now add all widgets. We do this separately so that the width is accurately 
	// set after all columns have been added.
    for (col in this.layout)
	{
		if (this.layout[col].widgets)
		{
			for (var i in this.layout[col].widgets)
			{
				var con = alib.dom.createElement("div", this.columns[col]);

				this.renderWidget(col, this.layout[col].widgets[i]);
			}
		}

		// Always add blank resize box at the end of each col
		var widgetBox = new CWidgetBox(this.dropZone, "300px");
		widgetBox.wbCls = this;
        widgetBox.onMoved = function(newCon)
        {
            this.wbCls.saveLayout();
        }
		widgetBox.print(this.columns[col]);
	}
    
    spCon.cls = this;
    spCon.onPanelResize = function(sizes)
    {
        this.cls.saveLayout(this.m_columns);
    };
}

/**
 * Render a widget into the specified column
 *
 * @public
 * @param {int} col The column to insert this widget into
 * @param {Object} widget Widget instance to add
 */
AntObjectLoader_Dashboard.prototype.renderWidget = function(col, widget)
{
	// Get last widgetbox to insert before    
    var lastbox = this.columns[col].childNodes[this.columns[col].childNodes.length - 1];

    // Create contianer (handles drag and drop)    
    var wIndex = this.dashboardWidgets.length;
    var widgetBox = new CWidgetBox(this.dropZone);
    widgetBox.cls = this;
    widgetBox.wIndex = wIndex
    widgetBox.onMoved = function(newCon) 
    {
        this.cls.saveLayout(); 
        this.cls.dashboardWidgets[this.wIndex].main()
    }
    widgetBox.onBeforeMove = function(from, to) 
    { 
        //this.cls.dashboardWidgets[this.wIndex].exit();        
    }
    
    var outerCon = widgetBox.getCon();
     
    // Used to determine what item is in container    
    outerCon.m_id = widget.id;
    widgetBox.printBefore(this.columns[col], lastbox);

    // Create content table
	var widgetCon = alib.dom.createElement("div", outerCon);
	alib.dom.styleSetClass(widgetCon, "dbWidget");

	var widgetConHeader = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConHeader, "dbWidgetHeader");

	var widgetConOpt = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConOpt, "dbWidgetOpt");

	var widgetConTitle = alib.dom.createElement("div", widgetConHeader);
	alib.dom.styleSetClass(widgetConTitle, "dbWidgetTitle");

	var widgetConBody = alib.dom.createElement("div", widgetCon);
	alib.dom.styleSetClass(widgetConBody, "dbWidgetBody");
    
    outerCon.m_con = widgetConBody;

    // Create widget application class
    var widgetApp = eval("new " + widget.widget + "()");
	widgetConTitle.innerHTML = widgetApp.title;
    widgetApp.m_widgetBox = widgetBox;
    this.dashboardWidgets[wIndex] = widgetApp;
    widgetApp.dashboardCls = this;
    widgetApp.m_widTitle = widgetConTitle;
    widgetApp.m_container = widgetConBody;
    widgetApp.m_id = widget.id;    
        
    if (typeof widget.data != "undefined")
        widgetApp.m_data = widget.data;
    
    // Add dropdown context menu
    var dm = new CDropdownMenu();
    dm.handleDuplicates = true;
    this.dashboardMenus.push(dm);
    widgetApp.m_dm = dm;

	// Add view
	if (this.loaderCls.antView)
		widgetApp.antView = this.loaderCls.antView;
    
    // If user has permision to change layout
    if(this.allowEdit) 
    {
        dm.addEntry('Remove Widget', function(cls, id) { cls.removeWidget(id);}, null, null, [this, widget.id]);        
        widgetConOpt.appendChild(dm.createImageMenu("/images/icons/gear_16.png", "/images/icons/gear_16.png", "/images/icons/gear_16.png"));
        
        DragAndDrop.registerDragable(widgetConTitle, widgetCon, this.dropZone);
        var drag_icon = ALib.m_document.createElement("div");
        drag_icon.innerHTML = "Move: " + widgetConTitle.innerHTML;
        DragAndDrop.setDragGuiCon(widgetConTitle, drag_icon, 15, 15);
    }
    
    // Execute widget
	widgetApp.main();
}

/**
* Execute main function for all widgets once loaded
* 
* @this {AntObjectLoader_Dashboard} 
* @event onColResize
*/
AntObjectLoader_Dashboard.prototype.executeWidgets = function()
{
    for(widget in this.dashboardWidgets)
    {
        var currentWidget = this.dashboardWidgets[widget];
        currentWidget.main();
    }
}

/**
* Execuate exit function for all widgets to close out
* 
* @this {AntObjectLoader_Dashboard} 
*/
AntObjectLoader_Dashboard.prototype.exitWidgets = function()
{
    for(widget in this.dashboardWidgets)
    {
        var currentWidget = this.dashboardWidgets[widget];
        currentWidget.exit();
        if (currentWidget.m_dm)
            currentWidget.m_dm.destroyMenu();
    }
}

/**
* Save the dashboard layout
* 
* @param {Array} spColumns    Array columns of CSplitContainer
* @this {AntObjectLoader_Dashboard} 
*/
AntObjectLoader_Dashboard.prototype.saveLayout = function(spColumns)
{
    var args = new Array();    
    args[args.length] = ['dashboardId', this.dashboardId];
    args[args.length] = ["columnCount", this.columns.length];
    
    for(col in this.columns)
    {
        var currentCol = this.columns[col];
        
        var colWidgets = "";

        for (var j = 0; j < currentCol.childNodes.length; j++)
        {
            if (currentCol.childNodes[j].m_id)
            {
                colWidgets += (colWidgets) ? ':' : '';
                colWidgets += currentCol.childNodes[j].m_id;
            }
        }

        args[args.length] = ["col_" + col, colWidgets];
    }
    
    if(typeof spColumns !== "undefined")
    {
        for(column in spColumns)
        {
            var currentColumn = spColumns[column];
            args[args.length] = ["columnWidth_" + column, currentColumn.offsetWidth];
        }
    }
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Dashboard/saveLayout", args);
}

/**
* Col has been resized
* 
* @this {AntObjectLoader_Dashboard} 
* @event onColResize
*/
AntObjectLoader_Dashboard.prototype.onColResize = function()
{
    this.executeWidgets();
    var args = new Array();
    args[args.length] = ['dashboardId', this.dashboardId];
    
    for(col in this.dashboardCols)
    {
        var currentCol = this.dashboardCols[col];
        args[args.length] = ["col_" + col, currentCol.offsetWidth + "px"];
    }
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Dashboard/saveLayoutResize", args);
}


/**
* Col is being resized
* 
* @this {AntObjectLoader_Dashboard} 
* @event onColResizeStart
*/
AntObjectLoader_Dashboard.prototype.onColResizeStart = function()
{
    this.exitWidgets();
    for(col in this.dashboardCols)
    {
        var currentCol = this.dashboardCols[col];
        
        for (var j = 0; j < currentCol.childNodes.length; j++)
        {
            if (currentCol.childNodes[j].m_id)
                currentCol.childNodes[j].m_con.innerHTML = "";
        }
    }
}

/**
* Saves the widget data
* @param {integer} dwid     Dashboard Widget Id
* @param {string} data      Widget data
*  
* @this {CAntObject} 
*/
AntObjectLoader_Dashboard.prototype.saveData = function(dwid, data)
{
    var args = new Array();
    args[args.length] = ['dwid', dwid];
    args[args.length] = ['data', data];
    
    ajax = new CAjax('json');
    ajax.exec("/controller/Dashboard/saveData", args);
}

/**
* Refresh all the widgets
*  
* @this {CAntObject} 
*/
AntObjectLoader_Dashboard.prototype.refreshWidgets = function()
{
    for(widget in this.dashboardWidgets)
    {
        var currentWidget = this.dashboardWidgets[widget];
        
        if(typeof(currentWidget.refresh) == "function")
            currentWidget.refresh();
    }
    
    var cls = this;
    var callback = function()
    {
        cls.refreshWidgets();
    }
    
    window.setTimeout(callback, 60000);
}

/**
 * @fileoverview This class handles creating input elements for fields of objects
 *
 * This class is a work in progress. The eventual goal is to replace the following functions of CAntObject.js:
 * fieldGetValueInput
 * fieldCreateValueInput
 * querySetValueInput - maybe working with a new conditions class
 *
 * Example usage
 * <code>
 * var field = new AntObject_FieldInput("customer", "name");
 *
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObject_FieldInput
 *
 * @constructor
 * @param {string|CAntObject} Either a string of the object type or a reference to an object
 * @param {string} fieldName The name of the field in the object definition
 * @param {string} value Value to pupulate the field with
 * @param {Object} options Optional object with additional field options
 */
function AntObject_FieldInput(obj, fieldName, fieldValue, options)
{
	/**
	 * Current field value
	 *
	 * @public
	 * @var {string}
	 */
	this.value = (fieldValue) ? fieldValue : "";

	/**
	 * Current field valueName if type = fkey_, fkey_multi, object, or object_multi
	 *
	 * @public
	 * @var {string}
	 */
	this.valueName = "";

	/**
	 * Object type name
	 *
	 * @private
	 * @var {string}
	 */
	this.objType = (typeof obj == "string") ? obj : obj.obj_type;

	/**
	 * Handle to object definition
	 *
	 * @private
	 * @var {CAntObject}
	 */
	this.obj = (typeof obj == "string") ? new CAntObject(obj) : obj;

	/**
	 * Each field type can have many different options
	 *
	 * @public
	 * @var {Object}
	 */
	this.options = options || {};

	/**
	 * Field name
	 *
	 * @private
	 * @var {string}
	 */
	this.fieldName = fieldName;

	/**
	 * Field definition
	 *
	 * @private
	 * @var {AntObjectField}
	 */
	this.field = this.obj.getFieldByName(fieldName);

	/**
	 * Actual input subclass - one for each type
	 *
	 * @var {AntObject_FieldInput_*}
	 */
	this.input = null;

	/**
	 * Optional validator to load to check values before sending to the server
	 *
	 * @protected
	 * @var {string}
	 */
	this.validator = "";

	// Now bind events to object if set
	if (obj != null && typeof obj != "string")
	{
		alib.events.listen(obj, "fieldchange", {context:this, method:"objectFieldChanged"});
	}
		
	// Generic change event
	alib.events.listen(this, "change", {context:this, method:"onChange"});
}

/**
 * Render the object input element into the dom tree
 *
 * @param {DOMElement} con The parent container
 * @param {Object} options Optional object with additional field options
 */
AntObject_FieldInput.prototype.render = function(con, options)
{
	var opts = (options) ? options : new Object();
    con.innerHTML = "";

	if (!this.value)
		this.value = this.obj.getValue(this.fieldName);

	if (!this.valueName)
		this.valueName = this.obj.getValueName(this.fieldName);

	switch (this.field.type)
	{
	case 'fkey':
	case 'fkey_multi':
		this.input = new AntObject_FieldInput_Grouping(this, con, opts);
		break;
	case 'object':
		this.input = new AntObject_FieldInput_Object(this, con, opts);
		break;
	case 'bool':
		this.input = new AntObject_FieldInput_Bool(this, con, opts);
		break;
	case 'alias':
		this.input = new AntObject_FieldInput_Alias(this, con, opts);
		break;
	case 'date':
		this.input = new AntObject_FieldInput_Date(this, con, opts);
		break;
	case 'timestamp':
		this.input = new AntObject_FieldInput_Timestamp(this, con, opts);
		break;
	case 'number':
	case 'numeric':
	case 'integer':
	case 'float':
		this.input = new AntObject_FieldInput_Number(this, con, opts);
		break;
	case 'text':
	default:
		this.input = new AntObject_FieldInput_Text(this, con, opts);
		break;
	}

	alib.events.listen(this.input, "change", {context:this, method:"checkValidators"});
	
	if (opts.validator)
		this.validator = opts.validator;
}

/**
 * Create a dropdown for values of fkey_multi
 *
 * @depriacted We will be using the grouping select later
 */
AntObject_FieldInput.prototype.buildInputDropDown = function(cbMval, optional_vals, val, pnt, pre)
{
    var value = (val) ? val : null;
    var parent_id = (pnt) ? pnt : "";
    var pre_txt = (pre) ? pre : "";
    var spacer = "\u00A0\u00A0"; // Unicode \u00A0 for space
    for (var n = 0; n < optional_vals.length; n++)
    {
        if (optional_vals[n][3] != parent_id)
        {
            continue;
        }

        cbMval[cbMval.length] = new Option(pre_txt+optional_vals[n][1], optional_vals[n][0], false, (value==optional_vals[n][0])?true:false);
        // Check for heiarchy
        if (optional_vals[n][2])
            this.buildInputDropDown(cbMval, optional_vals, value, optional_vals[n][0], pre_txt+spacer);
    }
}

/**
 * Get an input DOM element to render in the UI
 *
 * @public
 * @param {Object} options 			Object with the following parameters:
 * 									{
 * 										{DOMElement} domElement An optional container to print this input onto
 * 									}
 * @param {bool} updateObjectVal	If true (default) then update this.obj value when changed.
 * 									Most of the time updating the object is fine, but when multiple inputs
 * 									are needed for an object it might be necessary to have the inputs be independent.
 */
AntObject_FieldInput.prototype.getInput = function(options, updateObjectVal)
{
	var updateObj = (typeof updateObjectVal == "undefined") ? true : updateObjectVal;
	var options = options || new Object();
}

/**
 * Get value of this field
 *
 * @public
 * @return {string|int} If foreign reference like an objet the return int, otherwise a string
 */
AntObject_FieldInput.prototype.getValue = function()
{
	return this.value;
}

/**
 * If foreign key field, then get the value name or label
 *
 * @public
 * @return {string}
 */
AntObject_FieldInput.prototype.getValueName = function()
{
	return this.valueName;
}

/**
 * Set the value of this input
 *
 * @public
 * @param {string|int} val The value to set this input to
 * @param {string} valName If a foreign key the valName can be set to store the label reducing requests
 */
AntObject_FieldInput.prototype.setValue = function(val, valName)
{
	var valName = valName || "";
	this.input.setValue(val, valName);

	this.value = val;
	this.valueName = valName;
}

/**
 * Get the name of this field
 *
 * @public
 * @return {string} The unique name of this field
 */
AntObject_FieldInput.prototype.getName = function()
{
	return this.fieldName;
}

/**
 * Check validators on a change and if pass send to fieldInputChanged
 *
 * @param {alib.events.EventWrapper} evnt The event object
 */
AntObject_FieldInput.prototype.checkValidators = function(evt)
{
	if (this.validator)
	{
		var validator = new AntObject_FieldValidator(this.validator, this);
		validator.cbData.cls = this;
		validator.cbData.evt = evt;
		validator.onValid = function() {
			this.cbData.cls.fieldInputChanged(this.cbData.evt);
		};
		validator.onInvalid = function(msg) {
			alert(msg);
		}
		validator.validate(evt.data.value);
	}
	else
	{
		this.fieldInputChanged(evt);
	}
}

/**
 * Callback function to set the value of an object if the user changes the value of this field
 *
 * @param {alib.events.EventWrapper} evnt The event object
 */
AntObject_FieldInput.prototype.fieldInputChanged = function(evt)
{
	this.supressObjChangePush = true; // do not allow infinite loop where fieldInput -> object -> fieldInput...

	if (this.field.type == "fkey_multi" || this.field.type == "object_multi")
	{
		if (evt.data.action == "remove")
			this.obj.delMultiValue(this.fieldName, evt.data.value);
		else
			this.obj.setMultiValue(this.fieldName, evt.data.value, evt.data.valueName);
	}
	else
	{
		this.obj.setValue(this.fieldName, evt.data.value, evt.data.valueName);
	}

	// Set local values so this.getValue returns valid data
	this.value = evt.data.value;
	this.valueName = evt.data.valueName;

	// Fire change event in this object
	alib.events.triggerEvent(this, "change");

}

/**
 * Callback function to handle when an object value changes
 *
 * @param {alib.events.EventWrapper} evnt The event object
 */
AntObject_FieldInput.prototype.objectFieldChanged = function(evt)
{
	// Only capture if the field this input represents changed
	if (evt.data.fieldName != this.fieldName)
		return;

	// Supress sending change event back to object after updating value
	// or we will end up with an infinite loop
	if (this.supressObjChangePush)
	{
		this.supressObjChangePush = false; // only supress once for the udpate
		return;
	}

	this.setValue(evt.data.value, evt.data.valueName);
}

/*----------------------------------------------------------------------
 * Exposed callback functions.
 *
 * We prefer to use alib.events to capture events triggered
 * to keep from overlap, but in the event only a single
 * caller will need to detect certain events the below
 * function can be overridden.
 *---------------------------------------------------------------------*/

/**
 * Called when the value of this input changes
 *
 * If this is a *_mulit field then this will be called each time a value is added or removed with the third param
 *
 * @public
 * @param {alib.events.EventWrapper} evnt The event object
 */
AntObject_FieldInput.prototype.onChange = function(evnt)
{
}

/*----------------------------------------------------------------------
 * Optional modifiers
 *
 * These may or may not be implemented by subclasses
 *---------------------------------------------------------------------*/

AntObject_FieldInput.prototype.setHeight = function(height)
{
	if (this.input)
	{
		if (this.input.setHeight)
			return this.input.setHeight(height);
	}

	return false;
}

/**
 * Input class for handing alias fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Alias(fieldCls, con, options)
{
	var inp = alib.dom.createElement("select", con);

	for (var i = 0; i < fieldCls.obj.fields.length; i++)
	{
		var fldinst = fieldCls.obj.fields[i];
		if (fieldCls.field.subtype == fldinst.subtype && fldinst.type != "alias")
		{
			inp[inp.length] = new Option(fldinst.title, fldinst.name, false, (fieldCls.value == fldinst.name)?true:false);
		}
	}

	con.inptType = "select";
	con.inpRef = inp;

	// Register change event
	inp.clsRef = this;
	inp.onchange = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:null});
	}
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Alias.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Alias.prototype.getValue = function()
{
}

/**
 * Input class for handling boolean fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Bool(fieldCls, con, options)
{
	var inp = alib.dom.createElement("input");
	inp.type = "checkbox";
	inp.checked = (fieldCls.value) ? true : false;
	con.inptType = "checkbox";
	con.inpRef = fieldCls;
	con.appendChild(inp);

	// Register change event
	inp.clsRef = this;
	inp.onclick = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.checked, valueName:null});
	}
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Bool.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Bool.prototype.getValue = function()
{
}


/**
 * Input class for date fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Date(fieldInput, con, options)
{
	var inp = alib.dom.createElement("input");
	inp.type = "text";
	con.inptType = "input";
	alib.dom.styleSetClass(inp, "fancy");

	if (options.width)
		alib.dom.styleSet(inp, "width", options.width);

	if (fieldInput.value)
		inp.value = fieldInput.value;

	con.inpRef = inp;
	con.appendChild(inp);

	// Add date selector
	var start_ac = new CAutoCompleteCal(inp);
	alib.dom.styleSet(inp, "width", "100px");

	// Register change event
	inp.clsRef = this;
	inp.onchange = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:null});
	}
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Date.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Date.prototype.getValue = function()
{
}

/**
 * Render input for a field of type grouping (fkey || fkey_multi)
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Grouping(fieldInput, con, options)
{
	/**
	 * FieldInput class
	 *
	 * @var {AntObject_FieldInput}
	 */
	this.fieldInput = fieldInput;

	// Create the drop-down for selecting groupings
	// -----------------------------------------------
	var sel = new AntObjectGroupingSel("None", fieldInput.objType, fieldInput.field.name, fieldInput.value, fieldInput.obj, options);
	this.sel = sel;
	for (var f = 0; f < fieldInput.obj.m_filters.length; f++)
		sel.setFilter(fieldInput.obj.m_filters[f].fieldName, fieldInput.obj.m_filters[f].value);

	// Show current group values if in form view mode
	// -----------------------------------------------
	var dv_opt_con = null;
	if (options.mode == "form" && fieldInput.field.type=="fkey_multi")
	{
		dv_opt_con = alib.dom.createElement("span", con);

		// Populate existing values
        for (var m = 0; m < fieldInput.value.length; m++)
        {
            var id = fieldInput.value[m];
			var label = id;
            //var label = valParts[m];
			var label = fieldInput.obj.getValueName(fieldInput.field.name, id);
			if (label == "" || label==null)
				label = id;

            // Look for label in optional vals
            for (var n = 0; n < fieldInput.field.optional_vals.length; n++)
            {
                if (fieldInput.field.optional_vals[n][0] == id)
                    label = fieldInput.field.optional_vals[n][1];
            }

			this.addGroupingItem(dv_opt_con, id, label)
        }
	}

	// Print drop-down
	var inp = sel.getInput();
	sel.print(con);
	con.inptType = "dynselect";
	con.inpRef = sel;


	// Register change event
	sel.clsRef = this;
	sel.dv_opt_con = dv_opt_con;
	sel.onSelect = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:this.valueName, action:"add"});

		if (this.dv_opt_con)
			this.clsRef.addGroupingItem(this.dv_opt_con, this.value, this.valueName);
	}
}

AntObject_FieldInput_Grouping.prototype.setValue = function(value, valueName)
{
}

AntObject_FieldInput_Grouping.prototype.getValue = function(value, valueName)
{
}

/**
 * Insert a grouping item into the values div
 *
 * @param {DOMElement} con Where to append the item
 * @param {number} id The unique id of the grouping entry
 * @param {string} label The text title of the grouping entry
 */
AntObject_FieldInput_Grouping.prototype.addGroupingItem = function(con, id, label)
{
	var bg = "e3e3e3";
	var fg = "000000";

	// group div
	var dv = alib.dom.createElement("div", con);
	alib.dom.styleSet(dv, "display", "inline-block");
	alib.dom.styleSet(dv, "zoom", "1");
	alib.dom.styleSet(dv, "*display", "inline");
	alib.dom.styleSet(dv, "padding", "3px 5px 3px 5px");
	alib.dom.styleSet(dv, "margin-right", "5px");
	alib.dom.styleSet(dv, "background-color", '#'+bg);
	alib.dom.styleSet(dv, "color", "#"+fg);
	//alib.dom.styleSet(dv, "border-radius", "3px");
	//alib.dom.styleSet(dv, "-webkit-border-radius", "3px");
	//alib.dom.styleSet(dv, "-moz-border-radius", "3px");

	// label span
	var lblsp = alib.dom.createElement("span", dv, label + " | ");

	// Load remote if label not set
	if (id == label)
	{
		var ajax = new CAjax('json');
		ajax.cbData.lblsp = lblsp;
		ajax.onload = function(ret)
		{
			if(!ret)
				return;
				
			if (!ret['error'])
			{
				this.cbData.lblsp.innerHTML = ret['title'] + " ";
			}
		};
		var args = [["obj_type", this.fieldInput.objType], ["field", this.fieldInput.field.name], ["gid", id]];
		ajax.exec("/controller/Object/getGroupingById", args);
	}

	var alnk = alib.dom.createElement("a", dv);
	alnk.href = "javascript:void(0);";
	alnk.innerHTML = "X";
	alnk.m_id = id;
	alnk.m_label = label;
	alnk.m_div = dv;
	alnk.m_cls = this;
	alnk.m_fieldname = this.fieldInput.field.name;
	alnk.dynSelObject = this.sel;
	alnk.onclick = function()
	{
		this.m_div.style.display='none';
		alib.events.triggerEvent(this.m_cls, "change", {value:this.m_id, valueName:"", action:"remove"});
		
		for(mVar in this.dynSelObject.multiVars)
		{
			var gId = this.dynSelObject.multiVars[mVar];
			if(this.m_id == gId)
				delete this.dynSelObject.multiVars[mVar];
		}
	}
}

/**
 * Input class for number fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Number(inpField, con, options)
{
	// If the field has optional values defined then print drop-down
	if (inpField.field.optional_vals && inpField.field.optional_vals.length)
	{
		var subInp = new AntObject_FieldInput_OptionalValues(inpField, con, options);
		return subInp;
	}

	var inp = alib.dom.createElement("input");
	inp.type = "text";
	con.inptType = "input";
	alib.dom.styleSetClass(inp, "fancy");

	if (options.width)
		alib.dom.styleSet(inp, "width", options.width);
	else
		alib.dom.styleSet(inp, "width", "99%");

	if (inpField.value)
		inp.value = inpField.value;

	if (inpField.field.type == "real")
		inp.maxLength = 15;

	con.inpRef = inp;
	con.appendChild(inp);

	// Register change event
	inp.clsRef = this;
	inp.onchange = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:null});
	}
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Number.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Number.prototype.getValue = function()
{
}

/**
 * Field input with type='object'
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Object(fieldCls, con, options)
{
	/**
	 * FieldInput class
	 *
	 * @var {AntObject_FieldInput}
	 */
	this.fieldInput = fieldCls;

	if (fieldCls.field.subtype == "file")
		this.renderInputObjectFile(con, options);
	else
		this.renderInputObject(con, options);
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Object.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Object.prototype.getValue = function()
{
}

/**
 * Render an object field with a subtype
 *
 * @private
 * @param {DOMElement} con
 * @param {Object} options
 */
AntObject_FieldInput_Object.prototype.renderInputObject = function(con, options)
{
	var browserCon = alib.dom.createElement("div", con);            
	var label = alib.dom.createElement("label", browserCon);
	
	if (this.fieldInput.valueName)
	{
		this.renderLabel(label, this.fieldInput.valueName);
	}
	else if (this.fieldInput.value)
	{
		var subLabel = alib.dom.createElement("span", label, "loading...");

		if (this.fieldInput.field.subtype)
		{
			// Replace current user (-3) with "Me" for forms
			// TODO: when queries start using AntObject_Field* classes we'll need to revisit this
			if (this.fieldInput.value == -3 && this.fieldInput.field.subtype == "user")
				subLabel.innerHTML = "Me";
			else
				objectSetNameLabel(this.fieldInput.field.subtype, this.fieldInput.value, subLabel); // get from server
		}
		else
		{
			var refParts = this.fieldInput.value.split(":");
			if (refParts.length == 2)
				objectSetNameLabel(refParts[0], refParts[1], subLabel); // get from server
		}

		this.renderLabel(label, subLabel);
	}
	else
	{
		label.innerHTML = "None Selected";
	}

	
	alib.dom.styleSet(label, "font-size", "12px");
	alib.dom.styleSet(label, "margin-right", "10px");
	
	if (this.fieldInput.field.subtype)
	{
		var btn = alib.ui.Button("Select", {
			className:"b1", 
			clsRef:this, 
			label:label, 
			objType:this.fieldInput.field.subtype,
			options:options,
			onclick:function() 
			{
				var antBrowser = new AntObjectBrowser(this.objType);
				antBrowser.cbData.label = this.label;
				antBrowser.cbData.clsRef = this.clsRef;

				if (this.options.refField && (this.options.refThis || options.refValue))
				{
					var val = (this.options.refValue) ? 
									this.options.refValue : 
									this.clsRef.fieldInput.obj.getValue(this.options.refThis);
					if (val)
						antBrowser.setFilter(this.options.refField, val);
				}
					
				antBrowser.onSelect = function(objId, objLabel) 
				{
					this.cbData.clsRef.renderLabel(this.cbData.label, objLabel);
					alib.events.triggerEvent(this.cbData.clsRef, "change", {value:objId, valueName:objLabel});
				}
				antBrowser.displaySelect();
			}
		});                            
		browserCon.appendChild(btn.getButton());
	}
	else
	{
		// First select object type
		var typeSel = new AntObjectTypeSel(this.fieldInput.value);
		typeSel.render(browserCon);
		typeSel.cbData.cls = this;
		typeSel.cbData.label = label;
		typeSel.cbData.clsRef = this;
		typeSel.onchange = function(objType)
		{
			var antBrowser = new AntObjectBrowser(objType);
			antBrowser.cbData.label = this.cbData.label;
			antBrowser.cbData.clsRef = this.cbData.clsRef;
			antBrowser.onSelect = function(objId, objLabel) 
			{
				this.cbData.clsRef.renderLabel(this.cbData.label, objLabel);
				alib.events.triggerEvent(this.cbData.clsRef, "change", {value:objType + ":" + objId, valueName:objLabel});
			}
			antBrowser.displaySelect();
		}
	}
}

/**
 * Render an object field with a subtype of file
 */
AntObject_FieldInput_Object.prototype.renderInputObjectFile = function(con, options)
{
	var label = alib.dom.createElement("label", con);
	
	if (this.fieldInput.value)
	{
		if (options.profileImage)
			label.innerHTML = "<img src=\"/antfs/images/"+this.fieldInput.value+"/48\" border='0' />";
		else
			label.innerHTML = "<a href=\"/antfs/"+this.fieldInput.value+"\">"+this.fieldInput.valueName+"</a>";
	}
	else
	{

		if (options.profileImage)
			label.innerHTML = "<img src=\"/images/icons/objects/files/image_48.png\" border='0' />";
		else
			label.innerHTML = "None Selected";
	}

	var browserCon = alib.dom.createElement("div", con);            
	var dm = new CDropdownMenu();

	var menu = new alib.ui.PopupMenu();

	// Uplaod files
	var item = new alib.ui.MenuItem("Upload File", {icon:"<img src='/images/icons/add_10.png' />"});
	item.cbData.cls = this;
	item.cbData.label = label;
	item.cbData.options = options;
	item.onclick = function() {
		// Upload a new file to a temp directory
		var cfupload = new AntFsUpload();
		cfupload.cbData.cls = this.cbData.cls;
		cfupload.cbData.opts = this.cbData.options;
		cfupload.cbData.lbl = this.cbData.label;
		if (this.cbData.options.folderRoot > 0)
			cfupload.setFolderId(this.cbData.options.folderRoot);
		else if (this.cbData.cls.fieldInput.obj.id)
			cfupload.setPath("/System/Objects/" + this.cbData.cls.fieldInput.objType + "/" + this.cbData.cls.fieldInput.obj.id);
		else
			cfupload.setPath("%tmp%");
		cfupload.onUploadFinished = function()
		{
			var file = this.getUploadedFile(0);

			if (this.cbData.opts.profileImage)
				this.cbData.lbl.innerHTML = "<img src=\"/antfs/images/"+file.id+"/48\" border='0' />";
			else
				this.cbData.lbl.innerHTML = "<a href=\"/antfs/"+file.id+"\">"+file.name+"</a>";

			alib.events.triggerEvent(this.cbData.cls, "change", {value:file.id, valueName:file.name});
		}
		cfupload.showDialog();
	};
	menu.addItem(item);

	// Browse for files
	var item = new alib.ui.MenuItem("Select Uploaded File", {icon:"<img src='/images/icons/folder_open_10.png' />"});
	item.cbData.cls = this;
	item.cbData.label = label;
	item.cbData.options = options;
	item.onclick = function() {
		// Open file browser
		var cbrowser = new AntFsOpen();
		cbrowser.cbData.cls = this.cbData.cls;
		cbrowser.cbData.opts = this.cbData.options;
		cbrowser.cbData.lbl = this.cbData.label;
		if (this.cbData.options.folderRoot)
			cbrowser.setPathById(this.cbData.options.folderRoot);
		cbrowser.onSelect = function(fid, name, path) 
		{
			if (this.cbData.opts.profileImage)
				this.cbData.lbl.innerHTML = "<img src=\"/antfs/images/"+fid+"/48\" border='0' />";
			else
				this.cbData.lbl.innerHTML = "<a href=\"/antfs/"+fid+"\">"+name+"</a>";

			alib.events.triggerEvent(this.cbData.cls, "change", {value:fid, valueName:name});
		}
		cbrowser.showDialog();
	};
	menu.addItem(item);

	// Add remove file
	var item = new alib.ui.MenuItem("Remove File", {icon:"<img src='/images/icons/delete_10.png' />"});
	item.cbData.cls = this;
	item.cbData.label = label;
	item.cbData.options = options;
	item.onclick = function() {
		// If there is a value then remove this file
		this.cbData.label.innerHTML = "None Selected";
		alib.events.triggerEvent(this.cbData.cls, "change", {value:"", valueName:""});
	};
	menu.addItem(item);

	// Render the menu
	var btn = new alib.ui.MenuButton("change", menu, {className:"b1"});
	btn.print(browserCon);
}

/**
 * Render the label of a this field
 *
 * @public
 * @param {DOMElement} label The container for the label
 * @param {string} lblText Text to set the label to
 */
AntObject_FieldInput_Object.prototype.renderLabel = function(label, lblText)
{
	if (lblText)
	{
		if (typeof lblText == "string")
			label.innerHTML = lblText;
		else
			label.appendChild(lblText);

		// Add clear icon
		if (!this.fieldInput.field.required)
		{
			var spacer = alib.dom.createElement("span", label, "&nbsp;");
			var clearLink = alib.dom.createElement("a", label);
			clearLink.href = "javascript:void(0);";
			clearLink.clsRef = this;
			clearLink.label = label;
			clearLink.onclick = function() {
				alib.events.triggerEvent(this.clsRef, "change", {value:"", valueName:""});
				this.clsRef.renderLabel(this.label, "");
			}
			clearLink.innerHTML = "<img src='/images/icons/delete_16.png' />";
		}
	}
	else
	{
		label.innerHTML = "None Selected";
	}
}

/**
 * Input class for fields with manually defined optional values (drop-down)
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_OptionalValues(inptField, con, options)
{
	if (inptField.field.optional_vals && inptField.field.optional_vals.length)
    {
        var inp = alib.dom.createElement("select", con);
        inptField.buildInputDropDown(inp, inptField.field.optional_vals, inptField.value);
    }

	// Register change event
	inp.clsRef = this;
	inp.onchange = function() { 
		alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:null});
	}
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_OptionalValues.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_OptionalValues.prototype.getValue = function()
{
}

/**
 * Create a dropdown for values of fkey_multi
 *
 * @depriacted We will be using the grouping select later
 */
AntObject_FieldInput_OptionalValues.prototype.buildInputDropDown = function(cbMval, optional_vals, val, pnt, pre)
{
    var value = (val) ? val : null;
    var parent_id = (pnt) ? pnt : "";
    var pre_txt = (pre) ? pre : "";
    var spacer = "\u00A0\u00A0"; // Unicode \u00A0 for space
    for (var n = 0; n < optional_vals.length; n++)
    {
        if (optional_vals[n][3] != parent_id)
        {
            continue;
        }

        cbMval[cbMval.length] = new Option(pre_txt+optional_vals[n][1], optional_vals[n][0], false, (value==optional_vals[n][0])?true:false);
        // Check for heiarchy
        if (optional_vals[n][2])
            this.buildInputDropDown(cbMval, optional_vals, value, optional_vals[n][0], pre_txt+spacer);
    }
}

/**
 * Input class for text fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Text(inptField, con, options)
{
	// If the field has optional values defined then print drop-down
	if (inptField.field.optional_vals && inptField.field.optional_vals.length)
	{
		var subInp = new AntObject_FieldInput_OptionalValues(inptField, con, options);
		return subInp;
	}

	var options = options || new Object();

	if (options.rich)
	{
		//var inp = new CRte();
		var inp = alib.ui.Editor();
		con.inptType = "rte";
	}
	else if (options.multiLine)
	{
		var inp = alib.dom.createElement("textarea");
		con.inptType = "input";
	}
	else
	{
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		con.inptType = "input";
		alib.dom.styleSetClass(inp, "fancy");
	}

	if (options.height)
		alib.dom.styleSet(inp, "height", options.height);

	if (options.width)
		alib.dom.styleSet(inp, "width", options.width);

	if (inptField.value && !options.rich)
		inp.value = inptField.value;

	con.inpRef = inp;
	if (options.rich)
	{
		if (options.plugins)
		{
			if ("cms" == options.plugins)
				inp.cssFiles = [
					"/css/bootstrap.min.css", 
					"/css/bootstrap-theme.min.css"
				];
		}

		inp.print(con, '100%', '250px');
		if (inptField.value)
			inp.setValue(inptField.value);
	}
	else
	{
		con.appendChild(inp);
	}

	alib.dom.styleSet(inp, "width", "99%");

	// Must be added after appended
	if (options.multiLine && !options.rich)
	{
		alib.dom.textAreaAutoResizeHeight(inp, 50, 400);
	}

	// Register change event
	inp.clsRef = this;
	if (options.rich)
	{
		inp.onChange = function() { 
			alib.events.triggerEvent(this.clsRef, "change", {value:this.getValue(), valueName:null});
		}
	}
	else
	{
		// Add blurr text with field name if there is no label - we may use this for mobile too
		if (options.hidelabel)
			inp.placeholder = inptField.field.title;

		inp.onchange = function() { 
			alib.events.triggerEvent(this.clsRef, "change", {value:this.value, valueName:null});
		}
	}

	this.options = options;
	this.inp = inp;
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Text.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Text.prototype.getValue = function()
{
}

/**
 * Set the height of multiLine or rich inputs
 *
 * @param {string} height The css height to set
 * @return {bool} true if set, false if not set
 */
AntObject_FieldInput_Text.prototype.setHeight = function(height)
{
	if (!this.inp)
		return false;

	if (this.options.rich)
	{
		if (this.inp.setHeight)
		{
			this.inp.setHeight(height);
			return true;
		}
	}
	
	/* Multiline autogrows so we don't really need this
	if (this.options.multiLine)
	{
		alib.dom.styleSet(this.inp, "height", height);
		return true;
	}
	*/

	return false;
}

/**
 * Input class for timestaml fields
 *
 * These all have the commmon interface functions:
 * setValue
 * getValue
 *
 * Should fire a 'change' event that the parent input can capture
 */

/**
 * Class constructor
 */
function AntObject_FieldInput_Timestamp(fieldCls, con, options)
{
	var inp = alib.dom.createElement("input");
	inp.type = "text";
	con.inptType = "input";
	alib.dom.styleSetClass(inp, "fancy");

	var options = options || new Object();

	if (options.width)
		alib.dom.styleSet(inp, "width", options.width);

	if (fieldCls.value)
		inp.value = fieldCls.value;
	
	con.inpRef = inp;
	con.appendChild(inp);

	if (options.part == "time")
	{
		var start_ac = new CAutoCompleteTime(inp);
		alib.dom.styleSet(inp, "width", "75px");
	}
	else 
	{
		var start_ac = new CAutoCompleteCal(inp);
		alib.dom.styleSet(inp, "width", "100px");
	}

	if (options.part)
	{
		inp.part = options.part;
		
		if (fieldCls.value)
			inp.value = fieldCls.obj.getInputPartValue(fieldCls.field.name, fieldCls.value, options.part);
	}

	// Register change event
	inp.clsRef = this;
	inp.onchange = function() { 
		this.clsRef.triggerChange();
	}

	this.fieldCls = fieldCls;
	this.inp = inp;
	this.options = options || {};
}

/**
 * Set the value of this input
 *
 * @var {string} value The value, numeric if this is a key type like fkey or object
 * @var {string} valueName Optional name of key value if value type is key
 */
AntObject_FieldInput_Timestamp.prototype.setValue = function(value, valueName)
{
}

/**
 * Get the value of this input
 */
AntObject_FieldInput_Timestamp.prototype.getValue = function()
{
}

/**
 * Determine value based on parts
 */
AntObject_FieldInput_Timestamp.prototype.triggerChange = function()
{
	var val = this.inp.value;

	if (this.options.part == "time")
	{
		val = this.fieldCls.obj.getInputPartValue(this.fieldCls.field.name, this.fieldCls.value, "date");
		val += " " + this.inp.value;
	}
	else if (this.options.part == "date")
	{
		val = this.inp.value + " ";
		val += this.fieldCls.obj.getInputPartValue(this.fieldCls.field.name, this.fieldCls.value, "time");
	}

	alib.events.triggerEvent(this, "change", {value:val, valueName:null});
}

/**
 * Determine value based on parts
 */
AntObject_FieldInput_Timestamp.prototype.updateTime = function()
{
	var val = this.fieldCls.obj.getInputPartValue(this.fieldCls.field.name, this.fieldCls.value, "date");
	val += " " + this.inp.value;

	alib.events.triggerEvent(this, "change", {value:val, valueName:null});
}

/**
 * Determine value based on parts
 */
AntObject_FieldInput_Timestamp.prototype.updateDate = function()
{
	var val = this.inp.value + " ";
	val += this.fieldCls.obj.getInputPartValue(this.fieldCls.field.name, this.fieldCls.value, "time");

	alib.events.triggerEvent(this, "change", {value:val, valueName:null});
}

/**
 * @fileoverview This class handles validating field inputs
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011-2013 Aereus Corporation. All rights reserved.
 */

/**
 * Creates an instance of AntObject_FieldValidator
 *
 * @constructor
 * @param {string} name The name of the validator
 * @param {AntObject_FieldInput} The input we are validating against
 */
function AntObject_FieldValidator(name, fieldInput)
{
	/**
	 * Validator name to run
	 *
	 * @public
	 * @var {string}
	 */
	this.name = name;

	/**
	 * Input reference
	 *
	 * @var {AntObject_FieldInput}
	 */
	this.fieldInput = fieldInput;

	/**
	 * Generic callback data object
	 *
	 * @var {Object}
	 */
	this.cbData = new Object();
}

/**
 * Run validation
 */
AntObject_FieldValidator.prototype.validate = function(value) 
{
	switch (this.name)
	{
	case "username":

		// Create please wait div to keep user from saving before validated
		var dlg = new CDialog();
		var dv_load = alib.dom.createElement('div');
		alib.dom.styleSetClass(dv_load, "statusAlert");
		alib.dom.styleSet(dv_load, "text-align", "center");
		dv_load.innerHTML = "Checking values, please wait...";
		dlg.statusDialog(dv_load, 150, 100);

		var ajax = new CAjax('json');
		ajax.cbData.cls = this;    
		ajax.cbData.dlg = dlg;
		ajax.onload = function(ret)
		{
			dlg.hide();
			if (ret == 1)
				this.cbData.cls.onValid();
			else
				this.cbData.cls.onInvalid(ret);
		};
		ajax.exec("/controller/User/checkUserName", [["name", value], ["uid", this.fieldInput.obj.id]]);
		break;
	default:
		this.onValid();
		break;
	}
}

/**
 * Callback called when the field is validated successfully
 */
AntObject_FieldValidator.prototype.onValid = function() { }

/**
 * Callback called when the field is invalid
 */
AntObject_FieldValidator.prototype.onInvalid = function(message) { }

/*
Pungo Spell Copyright (c) 2003 Billy Cook, Barry Johnson

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/


// Public functions --------------------------------

// spellCheck - spell check a field
function spellCheck( formName, fieldName, spelltext ) 
{
   var h_spellform = document.forms['spell_form'];
   h_spellform.spell_formname.value = formName;
   h_spellform.spell_fieldname.value = fieldName;
   h_spellform.spellstring.value = document.forms[formName][fieldName].value;
   openSpellWin(520, 480);
   h_spellform.submit();
   return true;
}

// Private functions -------------------------------

// globals
var wordindex = -1;
var offsetindex = 0;
var ignoredWords = Array();

// mispelled word object
//
function misp(word, start, end, suggestions) 
{
   this.word = word;               // the word
   this.start = start;             // start index
   this.end = end;                 // end index
   this.suggestions = suggestions; // array of suggestions
}

// replace the word in the misps array at the "wordindex" index.  The
// misps array is generated by a PHP script after the string to be spell
// checked is evaluated with pspell
//
function replaceWord() 
{
   var frm = document.fm1;
   var strstart = '';
   var strend;

   // if this isn't the beginning of the string then get all of the string
   // that is before the word we are replacing
   if ( misps[ wordindex ].start != 0 )
       strstart = mispstr.slice( 0, misps[ wordindex ].start + offsetindex);

   // get the end of the string after the word we are replacing
   strend = mispstr.slice( misps[ wordindex ].end + 1 + offsetindex);
  
   // rebuild the string with the new word
   mispstr = strstart +  frm.changeto.value  + strend;

   // update offsetindex to compensate for replacing a word with a word
   // of a different length.
   offsetindex += frm.changeto.value.length - misps[ wordindex ].word.length;

   // update the word so future replaceAll calls don't change it
   misps[ wordindex ].word = frm.changeto.value;

   nextWord(false);
}

// replaces all instances of currently selected word with contents chosen by user. 
// note: currently only replaces words after hilighted word.  I think we can re-index
// all words at replacement or ignore time to have it wrap to the beginning if we want
// to.
//
function replaceAll() 
{
   var frm = document.fm1;
   var strstart = '';
   var strend;
   var idx;
   var origword;
   var localoffsetindex = offsetindex;

   origword = misps[ wordindex ].word;

   // reindex everything past the current word
   for (idx = wordindex; idx < misps.length; idx++) {
      misps[ idx ].start += localoffsetindex;
      misps[ idx ].end += localoffsetindex;
   }

   // testing
   localoffsetindex = 0;

   for (idx = 0; idx < misps.length; idx++) {

      if (misps[ idx ].word == origword) {
         if ( misps[ idx ].start != 0 )
            strstart = mispstr.slice( 0, misps[ idx ].start + localoffsetindex);
   
   
         // get the end of the string after the word we are replacing
         strend = mispstr.slice( misps[ idx ].end + 1 + localoffsetindex);
        
         // rebuild the string with the new word
         mispstr = strstart +  frm.changeto.value  + strend;
      
         // update offsetindex to compensate for replacing a word with a word
         // of a different length.
         localoffsetindex += frm.changeto.value.length - misps[ idx ].word.length;

      }
      // we have to re-index everything after replacements
      misps[ idx ].start += localoffsetindex;
      misps[ idx ].end += localoffsetindex;
   }

   // add the word to the ignore array
   ignoredWords[ origword ] = 1;

   // reset offsetindex since we reindexed
   offsetindex = 0;

   nextWord(false);
}

// hilight the word that was selected using the nextWord function
function hilightWord() 
{
   var strstart = '';
   var strend = '';

   // if this isn't the beginning of the string then get all of the string
   // that is before the word we are replacing

   if ( misps[ wordindex ].start != 0 )
       strstart = mispstr.slice( 0, misps[ wordindex ].start + offsetindex);

   // get the end of the string after the word we are replacing

   strend = mispstr.slice( misps[ wordindex ].end + 1 + offsetindex);

   // rebuild the string with a span wrapped around the misspelled word 
   // so we can hilight it in the div the user is viewing the string in


   //var divptr = document.getElementById("strview");
   var divptr = iFrameBody;

   divptr.innerHTML = '';
   divptr.innerHTML = strstart;

   divptr.innerHTML +=  "<span class='hilight' id='h1'>" + misps[ wordindex ].word + "</span>" + htmlToText(strend);
   
   //if (document.getElementById("h1").scrollIntoView)
      //document.getElementById("h1").scrollIntoView();

   divptr.innerHTML = divptr.innerHTML.replace(/_\|_/g, "<br>");
}


// called by onLoad handler to start the process of evaluating misspelled
// words
//
function startsp() 
{
   nextWord(false);
}

function getCorrectedText() 
{
   return mispstr;
}

function xmlSpellAddWord(val)
{
	var xmlLocal = null;
	//alert("xml_spell_action.awp?act=addword&val=" + escape(misps[wordindex].word));	
	var url = "xml_spell_action.awp?act=addword&val=" + escape(misps[wordindex].word);
	
	// branch for native XMLHttpRequest object
	if (window.XMLHttpRequest) 
		xmlLocal = new XMLHttpRequest();
	else if (window.ActiveXObject) 
		xmlLocal = new ActiveXObject("Microsoft.XMLHTTP");
	
	if (xmlLocal) 
	{
		function ProcessUpdateCallback()
		{
			// May be used later for confirmation
		}

		xmlLocal.onreadystatechange = ProcessUpdateCallback;
		xmlLocal.open("GET", url, true);
		xmlLocal.send(null);
	}

	nextWord(true);
}

// display the next misspelled word to the user and populate the suggested
// spellings box
//
function nextWord(ignoreall, finished) 
{
   var frm = document.fm1;
   var sug = document.fm1.suggestions;
   var sugidx = 0;
   var newopt;
   var isselected = 0;
	
   // push ignored word onto ingoredWords array
   if (ignoreall)
      ignoredWords[ misps[ wordindex ].word ] = 1;

   // update the index of all words we have processed
   // This must be done to accomodate the replaceAll function.
   if (wordindex >= 0) 
   {
      misps[ wordindex ].start += offsetindex;
      misps[ wordindex ].end += offsetindex;
   }

   // increment the counter for the array of misspelled words
   wordindex++;

 

   // draw it and quit if there are no more misspelled words to evaluate
   if (misps.length <= wordindex || finished)
   {
      iFrameBody.innerHTML = mispstr;
      iFrameBody.innerHTML = iFrameBody.innerHTML.replace(/_\|_/g, "<br>");
      
	 
      alert('Spell checking complete.');
      //frm.change.disabled = true;
      //frm.changeall.disabled = true;
      //frm.ignore.disabled = true;
      //frm.ignoreall.disabled = true;
	  if (sug)
      {
		  clearBox( sug );
		  // put line feeds back
		  mispstr = mispstr.replace(/_\|_/g, "\n");
	
		  // get a handle to the field we need to re-populate
		  window.opener.document.forms[spell_formname][spell_fieldname].value = mispstr;
	  }
	  
	  // Call finished funtion
	  window.opener.spell_complete();
	  window.close();
      return true;
   }


   // check to see if word is supposed to be ignored
   if (ignoredWords[ misps[ wordindex ].word ] == 1) 
   {
       nextWord(false);
       return;
   }

   // clear out the suggestions box
   clearBox( sug );

   // re-populate the suggestions box if there are any suggested spellings for the word
   if (misps[ wordindex ].suggestions.length) 
   {
      for (sugidx = 0; sugidx < misps[ wordindex ].suggestions.length; sugidx++) 
	  {
         if (sugidx == 0)
            isselected = 1;
         else
            isselected = 0;
         newopt = new Option(misps[ wordindex ].suggestions[sugidx], misps[ wordindex ].suggestions[sugidx], 0, isselected); 
         sug.options[ sugidx ] = newopt;

         if (isselected) 
		 {
            frm.changeto.value = misps[ wordindex ].suggestions[sugidx];
            frm.changeto.select();
         }
      }
   }
   hilightWord();
}

function htmlToText(thetext) 
{
   // disable for now
   return thetext;

   var re = /\</g;
   var re2 = /\>/g;
   var re3 = /\n/g;
   var re4 = /\ /g;
   
   thetext = thetext.replace(re, "&lt;");                          
   thetext = thetext.replace(re2, "&gt;");
   thetext = thetext.replace(re3, "<br>");
   thetext = thetext.replace(re4, "&nbsp;");

   return thetext;
}

// remove all items from the suggested spelling box
// 
function clearBox( box ) 
{
  var length = box.length;

  // delete old options -- rememeber that select
  //                       boxes automatically re-index
  for (i = 0; i < length; i++) 
  {
     box.options[0] = null;
  }
}

function openSpellWin(width, height) 
{
  window.open("", "spellWindow", 'toolbar=no,location=no,directories=no,status=no,menubar=no,scrollbars=yes,resizable=no,width='+width+',height='+height+'\'');
}

/****************************************************************************
*	
*	Class:		CVideoWizard
*
*	Purpose:	Wizard for inserting a new video
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2010 Aereus Corporation. All rights reserved.
*
*	Deps:		Alib
*
*****************************************************************************/

function CVideoWizard(user_id)
{
	this.user_id			= user_id;		// Each time a directory is loaded the current user is populated for the upload tool
	this.template_id		= null;			// Uid if template to pull message definition from
	this.templates 			= new Array();	// Array of available templates
	this.video_file_name	= null;
	this.video_file_id		= null;
	this.video_file_jobid	= 0;			// For processing files
	this.f_videoIsTmp		= false;		// Video is temporarily uploaded - should be moved as appropriate
	this.logo_file_name		= null;
	this.logo_file_id		= null;
	this.buttons 			= new Array();	// Array of objects button.name, button.link
	this.title				= "My Message";
	this.subtitle			= "My Name/title";
	this.message			= "";
	this.footer				= "";
	this.theme 				= "white";
	this.save_template_name = null;
	this.save_template_changes  = 'f';
	this.f_template_video	= 'f';
	this.facebook			= "";
	this.twitter			= "";

	this.steps = new Array();
	this.steps[0] = "Getting Started";
	this.steps[1] = "Upload Video";
	this.steps[2] = "Page Layout";
	this.steps[3] = "Select Theme &amp; Preview Message";
	this.steps[4] = "Save &amp; Finish";
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Display wizard
**************************************************************************/
CVideoWizard.prototype.showDialog = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.m_dlg = new CDialog("Video Message Wizard", this.parentDlg);
	this.m_dlg.f_close = true;
	var dlg = this.m_dlg;

	this.body_dv = alib.dom.createElement("div");

	dlg.customDialog(this.body_dv, 775, 520);

	this.showStep(0);
}
/*************************************************************************
*	Function:	showStep
*
*	Purpose:	Used to display the contents of a given step
**************************************************************************/
CVideoWizard.prototype.showStep = function(step)
{
	this.body_dv.innerHTML = ""; 
	this.cbTemplates = null;
	this.verify_step_data = new Object();

	// Path
	// ---------------------------------------------------------
	this.pathDiv = alib.dom.createElement("div", this.body_dv);
	this.pathDiv.innerHTML = "Step " + (step + 1) + " of " + this.steps.length + " - " + this.steps[step];
	alib.dom.styleSetClass(this.pathDiv, "wizardTitle");

	// Main content
	// ---------------------------------------------------------
	var div_main = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSetClass(div_main, "wizardBody");

	switch (step)
	{
	case 0:
		var p = alib.dom.createElement("h3", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 10px 0");
		p.innerHTML = "This wizard will guide you through sending your video message/email";

		var lbl = alib.dom.createElement("div", div_main);
		lbl.innerHTML = "Would you like to:";
		alib.dom.styleSetClass(lbl, "formLabel");
		
		this.cbTemplates = alib.dom.createElement("select", div_main);
		var cbTemplates = this.cbTemplates;
		cbTemplates.size = 20;
		cbTemplates.style.width = "98%";
		cbTemplates.cls = this;
		cbTemplates.onchange = function()
		{
			if (this.value)
			{
				this.cls.template_id = this.value;
				this.cls.setTemplate(this.value);
			}
		}

		var btn_delt = new CButton("Delete Selected Template", function(cls, cbTemplates) { cls.deleteTemplates(cbTemplates);  }, [this, cbTemplates]);
		btn_delt.disable();

		var div_new = alib.dom.createElement("div", div_main);
		var rbtn1 = alib.dom.createElement("input");
		rbtn1.type='radio';
		rbtn1.name = 'create';
		rbtn1.checked = (this.template_id) ? false : true;
		rbtn1.cbTemplates = cbTemplates;
		rbtn1.btn_delt = btn_delt;
		rbtn1.cls = this;
		rbtn1.onchange = function() {  cbTemplates.disabled = true; this.btn_delt.disable(); this.cls.template_id = null; }
		div_new.appendChild(rbtn1);
		var lbl = alib.dom.createElement("span", div_new);
		lbl.innerHTML = " Create New Video Message";

		var div_template = alib.dom.createElement("div", div_main);
		var rbtn1 = alib.dom.createElement("input");
		rbtn1.type='radio';
		rbtn1.name = 'create';
		rbtn1.checked = (this.template_id) ? true : false;
		rbtn1.cbTemplates = cbTemplates;
		rbtn1.btn_delt = btn_delt;
		rbtn1.onchange = function() {  cbTemplates.disabled = false; this.btn_delt.enable(); /* set to template */ }
		div_template.appendChild(rbtn1);
		var lbl = alib.dom.createElement("span", div_template);
		lbl.innerHTML = " Use A Template";

		var div_select = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(div_select, "margin", "5px 0 3px 0");
		cbTemplates.disabled = true;
		div_select.appendChild(cbTemplates);

		btn_delt.print(div_select);

		// Load templates
		if (!this.templates.length)
			this.loadTemplates();
		else
			this.populateTemplates();	

		break;
	case 1:
		var p = alib.dom.createElement("h3", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 10px 0");
		p.innerHTML = "Select a video:. ";
		var p = alib.dom.createElement("h5", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 10px 0");
		p.innerHTML = "We highly recommend the flash (FLV) format but  AVI, WMV, and MPEG files will also work";

		var div_upload = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(div_select, "margin", "5px 0 3px 0");

		var p = alib.dom.createElement("p", div_main);
		p.innerHTML = "-- OR --";

		var a_browse = alib.dom.createElement("a", div_main);

		var div_res = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(div_select, "margin", "5px 0 3px 0");

		var div_display = alib.dom.createElement("div", div_main); // display the video info
		alib.dom.styleSetClass(div_display, "formLabel");
		alib.dom.styleSet(div_display, "margin", "10px");
		alib.dom.styleSet(div_display, "padding", "5px");
		alib.dom.styleSet(div_display, "text-align", "center");
		if (this.video_file_name)
		{
			alib.dom.styleSet(div_display, "border", "1px solid");
			div_display.innerHTML = "Selected File: " + this.video_file_name;
		}

		var cfupload = new AntFsUpload('%tmp%', m_dlg);
		cfupload.process_function = "toflv"; // Conver the image to flv
		cfupload.m_appcls = this;
		cfupload.div_display = div_display;
		cfupload.onUploadStarted = function () { this.m_appcls.wait_uploading = true; };
		cfupload.onQueueComplete = function () { this.m_appcls.wait_uploading = false; };
		cfupload.onUploadSuccess = function (fid, name, jobid) 
		{ 
			this.m_appcls.video_file_id = fid; 
			this.m_appcls.video_file_name = name; 
			this.m_appcls.video_file_jobid = jobid; 
			this.m_appcls.f_videoIsTmp  = true; 
			alib.dom.styleSet(this.div_display, "border", "1px solid");
			this.div_display.innerHTML = "Selected File: " + name;
		};
		cfupload.showTmpUpload(div_upload, div_res, 'Upload Video', 1);


		var cbrowser = new AntFsUpload('%tmp%', m_dlg);
		cbrowser.filterType = "avi:wmv:mpg:mpeg:m4v:flv:f4v:jpeg:jpg:png:gif";
		cbrowser.m_appcls = this;
		cbrowser.div_display = div_display;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.m_appcls.video_file_id = fid; 
			this.m_appcls.video_file_name = name; 
			this.m_appcls.f_videoIsTmp = false; 
			alib.dom.styleSet(this.div_display, "border", "1px solid");
			this.div_display.innerHTML = "Selected Video: " + name;
		}

		a_browse.innerHTML = "Select a file from ANT File System";
		a_browse.href = 'javascript:void(0);';
		a_browse.cbrowser = cbrowser;
		a_browse.m_dlg = this.m_dlg;
		a_browse.onclick = function() { this.cbrowser.showDialog(this.m_dlg); }

		// Logo
		// ------------------------------------------------------------------
		var p = alib.dom.createElement("h3", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 10px 0");
		p.innerHTML = "Select a logo/image (will go next to your title and name): ";

		var a_browse = alib.dom.createElement("a", div_main);

		var div_logo_res = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(div_select, "margin", "5px 0 3px 0");

		var div_logo_display = alib.dom.createElement("div", div_main); // display logo info
		alib.dom.styleSetClass(div_logo_display, "formLabel");
		if (this.logo_file_id)
		{
			div_logo_display.innerHTML = "<img src='/files/"+this.logo_file_id+"' style='height:70px;' />";
		}

		// ANT File Browser
		var cbrowser = new AntFsOpen();
		cbrowser.filterType = "jpg:jpeg:gif:png";
		cbrowser.cbData.m_appcls = this;
		cbrowser.cbData.div_display = div_logo_display;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.cbData.m_appcls.logo_file_id = fid; 
			this.cbData.m_appcls.logo_file_name = name; 
			this.cbData.div_display.innerHTML = "<img src='/files/"+fid+"' style='height:70px;' />";
		}
		
		a_browse.innerHTML = "Select a file from ANT File System";
		a_browse.href = 'javascript:void(0);';
		a_browse.cbrowser = cbrowser;
		a_browse.m_dlg = this.m_dlg;
		a_browse.onclick = function() { this.cbrowser.showDialog(this.m_dlg); }

		this.veriftyStep = function()
		{
			if (!this.video_file_id)
			{
				this.verify_step_data.message = "Please upload a video file before continuing";
				return false;
			}
			else
				return true;
		}
		break;
	case 2:
		var p = alib.dom.createElement("h3", div_main);
		alib.dom.styleSet(p, "margin", "5px 0 10px 0");
		p.innerHTML = "Build the page you would like your recipient to see when they click to watch your video";

		// Title
		// -----------------------------------------------------------------
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSetClass(dv, "formLabel");
		dv.innerHTML = "Page Header / Title:";
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "margin-bottom", "5px");
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		inp.style.width = "98%";
		inp.value = this.title;
		inp.cls = this;
		inp.onchange = function() { this.cls.title = this.value; };
		dv.appendChild(inp);

		// Subtitle
		// -----------------------------------------------------------------
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSetClass(dv, "formLabel");
		dv.innerHTML = "Your Name &amp; Title (optional):";
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "margin-bottom", "5px");
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		inp.style.width = "98%";
		inp.value = this.subtitle;
		inp.cls = this;
		inp.onchange = function() { this.cls.subtitle = this.value; };
		dv.appendChild(inp);

		// Footer
		// -----------------------------------------------------------------
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSetClass(dv, "formLabel");
		dv.innerHTML = "Page Footer:";
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "margin-bottom", "5px");
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		inp.style.width = "98%";
		inp.value = this.footer;
		inp.cls = this;
		inp.onchange = function() { this.cls.footer = this.value; };
		dv.appendChild(inp);

		// Message
		// -----------------------------------------------------------------
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSetClass(dv, "formLabel");
		dv.innerHTML = "Message (optional):";
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "margin-bottom", "5px");
		var inp = alib.dom.createElement("textarea");
		inp.style.width = "98%";
		inp.style.height = "75px";
		inp.value = this.message;
		inp.cls = this;
		inp.onchange = function() { this.cls.message = this.value; };
		dv.appendChild(inp);

		// Buttons
		// -----------------------------------------------------------------
		var dv = alib.dom.createElement("div", div_main);
		var lbl = alib.dom.createElement("span", dv);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = "Buttons - these will be to the right of your video:";
		var lbl = alib.dom.createElement("span", dv);
		lbl.innerHTML = " (TIP: enter an email address to compose email)";
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "height", "120px");
		alib.dom.styleSet(dv, "border", "1px solid");
		alib.dom.styleSet(dv, "overflow", "auto");
		
		if (this.buttons.length)
		{
			for (var i = 0; i < this.buttons.length; i++)
			{
				this.addButtonRow(dv, i);
			}
		}
		else
		{
				this.addButtonRow(dv);
				this.addButtonRow(dv);
				this.addButtonRow(dv);
		}

		var dv_add = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(a, "margin-top", "3px");
		var a = alib.dom.createElement("a", dv_add);
		a.innerHTML = "[add button]";
		a.href = "javascript:void(0);";
		a.dv = dv;
		a.cls = this;
		a.onclick = function()
		{
			this.cls.addButtonRow(this.dv);	
		}
		
		var table = alib.dom.createElement("table", div_main);
		alib.dom.styleSet(table, "margin-top", "5px");
		table.style.width = "98%";
		var tableBody = alib.dom.createElement("tbody", table);
		var tr = alib.dom.createElement("tr", tableBody);
		var td = alib.dom.createElement("td", tr);
		var dv = alib.dom.createElement("div", div_main);
		var lbl = alib.dom.createElement("strong", dv);
		lbl.innerHTML = "Facebook page: ";
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		inp.style.width = "250px";
		inp.value = this.facebook;
		inp.cls = this;
		inp.onchange = function() { this.cls.facebook = this.value; };
		dv.appendChild(inp);
		td.appendChild(lbl);
		td.appendChild(inp);
		
		var td = alib.dom.createElement("td", tr);	
		var lbl = alib.dom.createElement("strong", dv);
		lbl.innerHTML = " Twitter url: ";
		var inp = alib.dom.createElement("input");
		inp.type = "text";
		inp.style.width = "250px";
		inp.value = this.twitter;
		inp.cls = this;
		inp.onchange = function() { this.cls.twitter = this.value; };
		dv.appendChild(inp);
		td.appendChild(lbl);
		td.appendChild(inp);
		tr.appendChild(td);
		table.appendChild(tableBody);
		
		break;
	case 3:
		var dv = alib.dom.createElement("div", div_main);
		alib.dom.styleSet(dv, "margin", "5px 0 5px 0");

		var lbl = alib.dom.createElement("span", dv);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = "Select Theme: ";

		var sel = alib.dom.createElement("select", dv);
		sel[sel.length] = new Option("Default", "white", false, (this.theme=="white")?true:false);
		sel[sel.length] = new Option("Red", "red", false, (this.theme=="red")?true:false);
		sel[sel.length] = new Option("Blue", "blue", false, (this.theme=="blue")?true:false);
		this.getThemes(sel);

		var dv = alib.dom.createElement("div", div_main);
		var ifrm = alib.dom.createElement("iframe", dv);
		alib.dom.styleSet(ifrm, "height", "360px");
		alib.dom.styleSet(ifrm, "width", "100%");

		sel.ifrm = ifrm;
		sel.cls = this;
		sel.onchange = function()
		{
			this.cls.theme = this.value;
			this.cls.loadPreview(this.ifrm, this.value);
		}

		this.loadPreview(ifrm, this.theme);

		break;
	case 4:
		var hdr = alib.dom.createElement("h2", div_main);
		hdr.innerHTML = "Congratulations!";

		var hdr = alib.dom.createElement("h3", div_main);
		hdr.innerHTML = "Your Video Message is ready to be sent. Click \"Finish\" below and compose an email message to your desired recipients of this video. They will receive a link to the video.";


		var fieldset = alib.dom.createElement("fieldset", div_main);
		alib.dom.styleSet(fieldset, "margin", "20px 0 5px 0");
		var legend = alib.dom.createElement("legend", fieldset);
		legend.innerHTML = "Save Template (optional)";

		var inp_name = alib.dom.createElement("input"); // created first for reference

		if (this.template_id)
		{
			var dv = alib.dom.createElement("div", fieldset);
			alib.dom.styleSet(dv, "margin", "5px 0 5px 0");

			var lbl = alib.dom.createElement("span", dv);
			alib.dom.styleSetClass(lbl, "formLabel");
			lbl.innerHTML = "Save Changes: ";
			var inp = alib.dom.createElement("input");
			inp.type = "checkbox";
			inp.checked = false;
			inp.cls = this;
			inp.inp_name = inp_name;
			inp.onclick = function() { this.cls.save_template_changes = (this.checked) ? 't' : 'f'; this.inp_name.disabled = (this.checked) ? true : false; };
			dv.appendChild(inp);
			var lbl = alib.dom.createElement("span", dv);
			lbl.innerHTML = " (save the changes I have made to this template)";
		}

		var lbl = alib.dom.createElement("span", fieldset);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = "Save As: ";
		inp_name.type = "text";
		inp_name.style.width = "100px";
		inp_name.cls = this;
		inp_name.onchange = function() { this.cls.save_template_name = this.value; };
		fieldset.appendChild(inp_name);

		var lbl = alib.dom.createElement("span", fieldset);
		lbl.innerHTML = " (save settings to re-use later, leave blank if you do not wish to save)";

		var dv = alib.dom.createElement("div", fieldset);
		alib.dom.styleSet(dv, "margin", "5px 0 5px 0");

		var lbl = alib.dom.createElement("span", dv);
		alib.dom.styleSetClass(lbl, "formLabel");
		lbl.innerHTML = "Save Video: ";
		var inp = alib.dom.createElement("input");
		inp.type = "checkbox";
		inp.cls = this;
		inp.onclick = function() { this.cls.f_template_video = (this.checked) ? 't' : 'f'; };
		dv.appendChild(inp);
		var lbl = alib.dom.createElement("span", dv);
		lbl.innerHTML = " (use this video any time template is loaded in the future)";

		break;
	}

	// Buttons
	// ---------------------------------------------------------
	var dv_btn = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSetClass(dv_btn, "wizardFooter");

	var btn = new CButton("Back", function(cls, step) { cls.showStep(step-1); }, [this, step]);
	btn.print(dv_btn);
	if (step == 0)
		btn.disable();

	if (step == (this.steps.length - 1))
	{
		var btn = new CButton("Finish", function(cls) { cls.save(); }, [this]);
		btn.print(dv_btn);
	}
	else
	{
		var next_funct = function(cls, step)
		{
			if (cls.veriftyStep())
			{
				cls.showStep(step+1);
			}
			else
			{
				ALib.Dlg.messageBox(cls.verify_step_data.message, cls.m_dlg);
			}
		}

		var btn = new CButton("Next", next_funct, [this, step], "b2");
		btn.print(dv_btn);
	}

	var btn = new CButton("Cancel", function(dlg) {  dlg.hide(); }, [this.m_dlg], "b3");
	btn.print(dv_btn);
}

/*************************************************************************
*	Function:	veriftyStep
*
*	Purpose:	This function should be over-rideen with each step
**************************************************************************/
CVideoWizard.prototype.veriftyStep = function()
{
	return true;
}

/*************************************************************************
*	Function:	onCancel
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CVideoWizard.prototype.onCancel = function()
{
}

/*************************************************************************
*	Function:	onFinished
*
*	Purpose:	This function should be over-rideen
**************************************************************************/
CVideoWizard.prototype.onFinished = function(mid, message)
{
}

/*************************************************************************
*	Function:	addButtonRow
*
*	Purpose:	Add a button row
**************************************************************************/
CVideoWizard.prototype.addButtonRow = function(con, idx)
{
	if (typeof idx == "undefined")
	{
		var idx = this.buttons.length;
		this.buttons[idx] = new Object();
		this.buttons[idx].id = idx;
		this.buttons[idx].label = "Button " + (idx + 1);
		this.buttons[idx].link = "";
	}

	var dv = alib.dom.createElement("div", con);
	alib.dom.styleSet(dv, "margin", "3px");
	
	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = "Button label ";

	var inp = alib.dom.createElement("input");
	inp.setAttribute('maxLength', 32);
	inp.type = "text";
	inp.style.width = "100px";
	inp.cls = this;
	inp.button = this.buttons[idx];
	inp.value = this.buttons[idx].label;
	inp.onchange = function() { this.button.label = this.value; };
	dv.appendChild(inp);

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = " link ";

	var inp = alib.dom.createElement("input");
	inp.type = "text";
	inp.style.width = "200px";
	inp.cls = this;
	inp.button = this.buttons[idx];
	inp.value = this.buttons[idx].link;
	inp.onchange = function() { this.button.link = this.value; };
	dv.appendChild(inp);

	var lbl = alib.dom.createElement("span", dv);
	lbl.innerHTML = "&nbsp;";
	
	var a = alib.dom.createElement("a", dv);
	a.innerHTML = "[remove]";
	a.href = "javascript:void(0);";
	a.thiscon = dv;
	a.parentcon = con;
	a.bid = this.buttons[idx].id;
	a.cls = this;
	a.onclick = function()
	{
		for (var i = 0; i < this.cls.buttons.length; i++)
		{
			if (this.cls.buttons[i].id == this.bid)
			{
				this.cls.buttons.splice(i, 1);
			}
		}
		this.parentcon.removeChild(this.thiscon);
	}
}

/*************************************************************************
*	Function:	loadPreview
*
*	Purpose:	Reset iframe
**************************************************************************/
CVideoWizard.prototype.loadPreview = function(ifrm, theme)
{
	var url = "/email/vmail_player.php?title="+((this.title)?escape(this.title):'Untitled');
	if (this.subtitle)
		url += "&subtitle=" + escape(this.subtitle);
	if (this.video_file_id)
		url += "&video_file_id=" + escape(this.video_file_id);
	if (this.logo_file_id)
		url += "&logo_file_id=" + escape(this.logo_file_id);
	if (this.video_file_jobid)
		url += "&video_file_jobid=" + escape(this.video_file_jobid);
	for (var i = 0; i < this.buttons.length; i++)
	{
		url += "&buttons[]=" + escape(this.buttons[i].label)+"|"+ escape(this.buttons[i].link);
	}
	if (this.message)
		url += "&message=" + escape(this.message);
	if (this.footer)
		url += "&footer=" + escape(this.footer);
	if (theme)
		url += "&theme=" + escape(theme);
	if(this.facebook)
		url += "&facebook=" + escape(this.facebook);
	if(this.twitter)
		url += "&twitter=" + escape(this.twitter);

	ifrm.src = url;
}

/*************************************************************************
*	Function:	save
*
*	Purpose:	Save this video message
**************************************************************************/
CVideoWizard.prototype.save = function()
{
	var args = [["video_file_id", this.video_file_id], ["logo_file_id", this.logo_file_id], ["title", this.title], ["subtitle", this.subtitle],
				["message", this.message], ["footer", this.footer], ["theme", this.theme], ["save_template_name", this.save_template_name],
				["f_template_video", this.f_template_video], ["template_id", this.template_id], ["save_template_changes", this.save_template_changes],
				["facebook", this.facebook], ["twitter", this.twitter], ["f_video_is_tmp", (this.f_videoIsTmp)?'t':'f']];

	for (var i = 0; i < this.buttons.length; i++)
	{
		args[args.length] = ["buttons[]", this.buttons[i].label+"|"+this.buttons[i].link];
	}

	this.m_dlg.hide();

	var dlg = new CDialog();
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Preparing message, please wait...";
	dlg.statusDialog(dv_load, 250, 100);
    
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.dlg = dlg;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {
            this.cls.onFinished(ret, this.cls.message);
        }

        this.dlg.hide();            
    };
    ajax.exec("/controller/Email/saveVideoMail", args);
}


/*************************************************************************
*	Function:	loadTemplates
*
*	Purpose:	Load previously saved templates
**************************************************************************/
CVideoWizard.prototype.loadTemplates = function()
{
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret.length)
        {
            for(template in ret)
            {
                var currentTemplate = ret[template];
                
                this.cls.templates[this.cls.templates.length] = currentTemplate;
            }
        }

        cls.populateTemplates();
    };
    ajax.exec("/controller/Email/getVmailTemplates");
}

/*************************************************************************
*	Function:	loadTemplates
*
*	Purpose:	Load previously saved templates
**************************************************************************/
CVideoWizard.prototype.getThemes = function(sel)
{
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.sel = sel;
    ajax.onload = function(ret)
    {
        if (ret.length)
        {
            for(theme in ret)
            {
                var currentTheme = ret[theme];
                
                var id = currentTheme.id;
                var name = currentTheme.name;
                this.sel[this.sel.length] = new Option(name, id, false, (this.cls.theme==id)?true:false);

            }
        }   
    };
    ajax.exec("/controller/Email/getVmailThemes");
}

/*************************************************************************
*	Function:	populateTemplates
*
*	Purpose:	Place templates in select box
**************************************************************************/
CVideoWizard.prototype.populateTemplates = function()
{
	if (!this.cbTemplates)
		return;

	for (var i = 0; i < this.templates.length; i++)
	{
		var template = this.templates[i];

		this.cbTemplates[this.cbTemplates.length] = new Option(template.name, template.id, false, (template.id == this.template_id)?true:false);
	}
}

/*************************************************************************
*	Function:	getTemplateById
*
*	Purpose:	Get a template by id
**************************************************************************/
CVideoWizard.prototype.setTemplate = function(id)
{
	for (var i = 0; i < this.templates.length; i++)
	{
		if (this.templates[i].id == id)
		{
			this.title = this.templates[i].title;
			this.video_file_id = this.templates[i].file_id;
			this.video_file_name = this.templates[i].file_name;
			this.logo_file_id = this.templates[i].logo_file_id;
			this.logo_file_name = this.templates[i].logo_file_name;
			this.subtitle = this.templates[i].subtitle;
			this.message = this.templates[i].message;
			this.facebook = this.templates[i].facebook;
			this.twitter = this.templates[i].twitter;
			this.name = this.templates[i].name;
			this.footer = this.templates[i].footer;
			this.theme = this.templates[i].theme;

			this.buttons = new Array();

			for (var j = 0; j < this.templates[i].buttons.length; j++)
			{
				this.buttons[j] = new Object();
				this.buttons[j].id = this.templates[i].buttons[j].id;
				this.buttons[j].label = this.templates[i].buttons[j].label;
				this.buttons[j].link= this.templates[i].buttons[j].link;
			}

			return;
		}
	}
}

/*************************************************************************
*	Function:	deleteTemplates
*
*	Purpose:	Delete a template
**************************************************************************/
CVideoWizard.prototype.deleteTemplates = function(cbTemplates)
{	
	var args = [["tid", cbTemplates.value]];
    
    ajax = new CAjax('json');    
    ajax.cbTemplates = cbTemplates;
    ajax.onload = function(ret)
    {
        if (!ret['error'])
        {
            for (var i = 0; i < this.cbTemplates.options.length; i++)
            {
                if (this.cbTemplates.options[i].selected)
                    this.cbTemplates.options[i] = null;
            }
        }
    };
    ajax.exec("/controller/Email/deleteVmailTemplate", args);
}


/**
 * @fileoverview This class handles creating wizards in ANT including dynamically loading
 *
 * Example:
 * <code>
 * 	var ob = new AntObjectBrowser("customer");
 *	ob.print(document.body);
 * </code>
 *
 * @author 	joe, sky.stebnicki@aereus.com.
 * 			Copyright (c) 2011 Aereus Corporation. All rights reserved.
 */

/**
 * @constructor
 * @param {string} wizName Optional name of wizard to load dynamically from the /wizards directory
 * @param {Object} data Optional data object to pass to subclass
 */
function AntWizard(wizName, data)
{
	/**
	 * Sublcass of this wizard - actual wizard definition
	 *
	 * @var {AntWizard_}
	 */
	this.subclass = null;

	/**
	 * Array of steps
	 *
	 * @private
	 * @var {Array({title, callback})}
	 */
	this.steps = new Array();

	/**
	 * The next step
	 *
	 * @private
	 * @var {int}
	 */
	this.nStep = 0;

	/**
	 * Store the wizard name
	 *
	 * @private
	 * @var {string}
	 */
	this.wizardClassName = wizName;

	/**
	 * Title, may be set by subclass
	 *
	 * @public
	 * @var {string}
	 */
	this.title = "Wizard";

	/**
	 * Flag used to prevent showing the dialog until the subclass is loaded
	 *
	 * @private
	 * @var {bool}
	 */
	this.loading = false;

	/**
	 * Flag used to fire call this.show after the subclass has been loaded
	 *
	 * @private
	 * @var {bool}
	 */
	this.showOnLoad = false;

	/**
	 * Flag used to determin if a step is async processing and we should wait to move to next step
	 *
	 * @private
	 * @var {bool}
	 */
	this.processing = false;

	/**
	 * Flag set when processing is finished in async mode
	 *
	 * @private
	 * @var {bool}
	 */
	this.processingSuccess = true;

	/**
	 * Timer used for delayed processing
	 *
	 * @private
	 * @var {window timer}
	 */
	this.processingTimer = null;

	/**
	 * Property buffer for callback data
	 *
	 * @var {Object}
	 */
	this.cbData = data || new Object();
    
    /**
     * Flag set when displaying wizard path
     *
     * @private
     * @var {bool}
     */
    this.showPath = true;

	/**
	 * The width of this wizard in pixels
	 *
	 * @var {int}
	 */
	this.width = 820;

	// Load the wizard class
	if (wizName)
		this.loadSubclass(wizName);
}

/**
 * Callback called when the wizard is finished
 *
 * This should be over-ridden by the calling class/process
 *
 * @public
 */
AntWizard.prototype.onFinished = function() { }

/**
 * Callback called when the wizard is finished
 *
 * This should be over-ridden by the calling class/process
 *
 * @public
 */
AntWizard.prototype.onCancel = function() { }

/**
 * Add a step to this wizard instnace
 *
 * @param {callback} cb The callback function used to generate this step
 * @param {string} title The title of this step
 */
AntWizard.prototype.addStep = function(cb, title)
{
	var step = new Object();
	step.callback = cb;
	step.title = title;
	this.steps.push(step);
}

/**
 * Advance to the next step
 */
AntWizard.prototype.nextStep = function()
{
	this.showStep(this.nStep);
}

/**
 * Load the wizard subclass
 */
AntWizard.prototype.setWizardSubclass = function()
{
	this.subclass = eval("new AntWizard_" + this.wizardClassName + "();");
	this.subclass.setup(this);
	this.loading = false;

	if (this.showOnLoad)
	{
		this.showOnLoad = false;
		this.show(this.parentDlg);
	}
}

/**
 * Load a wizard
 *
 * @param string className = the name of the applet
 */
AntWizard.prototype.loadSubclass = function(className)
{
	var classParts = className.split("_"); // Nomenclature is [modulename]_[classname]

	// Module specific
	if (classParts.length == 2)
	{
		var moduleDir = classParts[0];
		var fileName = classParts[1];
	}

	// Global wizard
	if (classParts.length == 1)
	{
		var moduleDir = "";
		var fileName = classParts[0];
	}

	// Set plugin path
	var filepath = "/wizards";
	if (moduleDir)
		filepath += "/" + moduleDir;
	filepath += "/" + fileName + ".js";


	// Check if script is already loaded
	if (!document.getElementById("js_wiz_" + className))
	{
		// Set flag to prevent showing the dialog until it is loaded
		this.loading = true;

		// Load External file into this document
		var fileRef = document.createElement('script');
		fileRef.wizardClassName = className;
		fileRef.wizard = this;

		if (alib.userAgent.ie)
		{
			fileRef.onreadystatechange = function () 
			{ 
				if (this.readyState == "complete" || this.readyState == "loaded") 
				{
					this.wizard.setWizardSubclass();
				}
			};
		}
		else
		{
			fileRef.onload = function () 
			{ 
				this.wizard.setWizardSubclass();
			};
		}

		fileRef.type = "text/javascript";
		fileRef.id = "js_wiz_" + className;
		fileRef.src =  filepath;
		document.getElementsByTagName("head")[0].appendChild(fileRef);

	}
	else
	{
		this.setWizardSubclass();
	}
}

/**
 * Display the dialog for this wizard
 *
 * @param {Alib_Ui_Dialog} parentDlg Optional parent dialog for modal display
 */
AntWizard.prototype.show = function(parentDlg)
{
	this.parentDlg = (parentDlg) ? parentDlg : null;

	if (this.loading)
	{
		this.showOnLoad = true;
		return;
	}

	this.dlg = new CDialog(this.title, this.parentDlg);
	this.dlg.f_close = true;

	this.bodyDiv = alib.dom.createElement("div");

	this.dlg.customDialog(this.bodyDiv, this.width, 555);

	if (this.steps.length > 0)
		this.showStep(0);
}

/**
 * Hide this wizard
 *
 * @public
 */
AntWizard.prototype.hide = function()
{
	this.dlg.hide(); 
}

/**
 * @depricated
 * Cancel and close the wizard
 *
 * @public
AntWizard.prototype.cancel = function()
{
	var close = true;
	if (this.subclass.cancel)
	{
		close = this.subclass.cancel();
	}
	else
	{
		close = confirm("Are you sure you want to exit?");
	}

	if (close)
	{
		this.hide();
		this.onCancel();
	}
}
 */

/**
 * Print a step on the wizard canvas
 *
 * @param {int} step The index of the step to load
 */
AntWizard.prototype.showStep = function(step)
{
	if (!this.subclass)
		return false;

	// Handle delaye advancement if the step processing is waiting on an async process
	if (this.processing)
	{
		// Clear old time if exists
		if (this.processingTimer)
			window.clearTimeout(this.processingTimer);

		var advanceStep = step;
		var me = this;
		this.processingTimer = window.setTimeout(function() { me.showStep(advanceStep); }, 1000); // Check again in one second
		// TODO: set up a timeout
		return true;
	}
	else if (!this.processingSuccess)
	{
		// Last async processing failed
		return false;
	}

    var backStep = false;
    
    if(this.nStep > step) // If backsetp, we need to execute the subclass function for stepping back
        backStep = true;
    
	this.bodyDiv.innerHTML = ""; 
	this.nStep = step+1;

	// Clear subclass processStep and local async processing flags
	this.processing = false;
	this.processingSuccess = true;
    this.subclass.processStep = function() { return true; };
    
    // Process a subclass function if back step    
    if(backStep && typeof this.subclass.processBackStep == "function")
        this.subclass.processBackStep();
	
	// Path
	// ---------------------------------------------------------
	this.pathDiv = alib.dom.createElement("div", this.bodyDiv);
	this.pathDiv.innerHTML = "Step " + (step + 1) + " of " + this.steps.length + " - " + this.steps[step].title;
	alib.dom.styleSetClass(this.pathDiv, "wizardTitle");
    
    if(!this.showPath)
        alib.dom.styleSet(this.pathDiv, "display", "none");

	// Display Step
	// ---------------------------------------------------------
	var div_main = alib.dom.createElement("div", this.bodyDiv);
	alib.dom.styleSetClass(div_main, "wizardBody");
	this.steps[step].callback(div_main);

    // Post process function before the step is showed
    if(typeof this.subclass.processPostStep == "function")
        this.subclass.processPostStep();
    
	// Buttons
	// ---------------------------------------------------------
	var dv_btn = alib.dom.createElement("div", this.bodyDiv);
	alib.dom.styleSet(dv_btn, "margin-top", "8px");
	alib.dom.styleSet(dv_btn, "text-align", "right");

	// Save and finish later can be defined in the wizard implementation file as an optional function
	if (this.saveAndFinishLater)
	{
		var btn = alib.ui.Button("Save & Finish Later", {
				className:"b1", tooltip:"Save changes to finish at a later time", cls:this, step:step, 
				onclick:function() 
				{
					this.cls.saveAndFinishLater(this.step);
					this.cls.hide();
					this.cls.onCancel();
				}
			});
		btn.print(dv_btn);
	}

	if (step > 0)
	{
		var btn = alib.ui.Button("Back", {
				className:"b1", tooltip:"Go back one step", cls:this, step:step, 
				onclick:function() 
				{
					this.cls.showStep(this.step-1);
				}
			});
		btn.print(dv_btn);
	}

	if (step == (this.steps.length - 1))
	{
		var btn = alib.ui.Button("Finished", {
				className:"b2", tooltip:"Finish and close wizard", cls:this,
				onclick:function() {this.cls.hide(); this.cls.onFinished(); }
			});
		btn.print(dv_btn);
	}
	else
	{
		var btn = alib.ui.Button("Continue", {
				className:"b2", tooltip:"Continue to next step", cls:this, step:step, 
				onclick:function() 
				{
					if (this.cls.subclass.processStep())
					{
						this.cls.showStep(this.step+1);
					}
					else
					{
						alib.Dlg.messageBox(this.cls.subclass.lastErrorMessage, this.cls.dlg);
					}
				}
			});
		btn.print(dv_btn);

		var button = alib.ui.Button("Cancel", {
				className:"b1", tooltip:"Cancel Wizard", cls:this, dlg:this.dlg, 
				onclick:function() 
                {
                    if(confirm("Are you sure you want to cancel the wizard?"))
                    {
                        this.cls.hide()
						this.cls.onCancel();
                        if(typeof this.cls.refresh == "function")
                            this.cls.refresh(); 
                    }
                }
			});
		button.print(dv_btn);
	}
}

/**
 * Set processing flag for async processing of steps
 */
AntWizard.prototype.setProcessing = function()
{
	this.processing = true;
}

/**
 * Unset processing flag and determine if it was a success or a failure
 *
 * @var {bool} success If true then continue to next step, if false the do not continue. Default is true;
 */
AntWizard.prototype.setProcessingFinished = function(success)
{
	this.processingSuccess = (typeof success != "undefined") ? success : true;
	this.processing = false;
}


/**
 * Gets the current step
 *
 * @return {Number} Returns the current step
 */
AntWizard.prototype.getCurrentStep = function()
{
    return this.nStep; 
}

/**
 * Optional function that can be defined in the wizard subClass
 *
 * @param {int} step The current step
 */
AntWizard.prototype.saveAndFinishLater = null;

/****************************************************************************
*	
*	Class:		WorkflowWizard
*
*	Purpose:	Wizard for creating/editing workflows
*
*****************************************************************************/
function WorkflowWizard(name, wid)
{
	// Edit existing workflow
	if(name && wid)
	{
		this.g_wid = wid;
		this.g_workflow = new WorkFlow(this.g_wid);
		this.g_workflow.object_type = name;
		this.g_workflow.cls = this;
		this.g_workflow.onload = function()
		{
			// Only called after workflow is loaded
			this.cls.showStep(0);			
		}
		this.g_workflow.load();
	}
	// New Workflow
	else
	{
		this.g_workflow = new WorkFlow();
		this.g_workflow.object_type = null;
		this.g_workflow.name = "My Workflow";
		this.g_workflow.notes = "Place notes here";
	}

	this.g_tblTasks = new CToolTable("100%");
	this.g_theme = (typeof Ant != "undefined") ? Ant.theme.name: "cheery";
	this.g_objTypes = new Array;
	this.getObjects();							// Populate g_objTypes
	this.buildActionTbl = true;
	
	this.steps = new Array();
	this.steps[0] = "Workflow Description";
	this.steps[1] = "Workflow Conditions";
	this.steps[2] = "Workflow Actions";
	this.steps[3] = "Finished";
}

/*************************************************************************
*	Function:	showDialog
*
*	Purpose:	Display wizard
**************************************************************************/
WorkflowWizard.prototype.showDialog = function(parentDlg)
{
	// Dialog Title
	if(this.g_workflow.object_type == null)
		var dlg_title = "Create Workflow";
	else
		var dlg_title = "Edit Workflow";
	
	this.parentDlg = (parentDlg) ? parentDlg : null;
	this.m_dlg = new CDialog(dlg_title, this.parentDlg);
	this.m_dlg.f_close = true;
	var dlg = this.m_dlg;

	this.body_dv = alib.dom.createElement("div");
	dlg.customDialog(this.body_dv, 820, 550);

	this.body_dv.innerHTML = "<div class='loading'></div>";
	if(this.g_workflow.object_type == null)			// New Workflow
		this.showStep(0);
}

/*************************************************************************
*	Function:	showStep
*
*	Purpose:	Used to display the contents of a given step
**************************************************************************/
WorkflowWizard.prototype.showStep = function(step)
{
	this.body_dv.innerHTML = ""; 
	this.verify_step_data = new Object();
	this.nextStep = step+1;

	// Path
	// ---------------------------------------------------------
	this.pathDiv = alib.dom.createElement("div", this.body_dv);
	this.pathDiv.innerHTML = "Step " + (step + 1) + " of " + this.steps.length + " - " + this.steps[step];
	alib.dom.styleSetClass(this.pathDiv, "wizardTitle");

	// Main content
	// ---------------------------------------------------------
	var div_main = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSetClass(div_main, "wizardBody");
    //alib.dom.styleSet(div_main, "height", "490");

	switch (step)
	{
	case 0:
		this.buildDescription(div_main);
		this.veriftyStep = function()
		{
			// Check for Object Type (Required)
			if(this.g_workflow.object_type)
				return true;
			else
			{
				this.verify_step_data.message = "Object Type not specified! Please select an Object Type.";
				return false;
			}
		}
		break;
	case 1:
		this.buildConditions(div_main);
		break;
	case 2:
		this.buildActions(div_main);
		break;
	case 3:
		div_main.innerHTML = "<h2>Congratulations, your workflow has been created!</h2>Click 'Save Workflow' below to save changes and continue working.";
		break;
	}

	// Buttons
	// ---------------------------------------------------------
	var dv_btn = alib.dom.createElement("div", this.body_dv);
	alib.dom.styleSet(dv_btn, "text-align", "right");

	var btn = new CButton("Back", 
	function(cls, step) 
	{
		// If leaving step 2, save conditions
		if(1 == step)
			cls.updateConditions();
		cls.showStep(step-1); 
	}, [this, step], "b1");
	btn.print(dv_btn);
	if (step == 0)
		btn.disable();

	if (step == (this.steps.length - 1))
	{
		var btn = new CButton("Save Workflow", function(cls) { cls.save(); }, [this], "b2");
		btn.print(dv_btn);
	}
	else
	{
		var next_funct = function(cls, step)
		{
			if (cls.veriftyStep())
			{
				// If leaving step 2, save conditions
				if(1 == step)
					cls.updateConditions();
				cls.showStep(step+1);
			}
			else
				ALib.Dlg.messageBox(cls.verify_step_data.message, cls.m_dlg);
		}
		var btn = new CButton("Continue", next_funct, [this, step], "b2");
		btn.print(dv_btn);
	}

	var btn = new CButton("Cancel", function(dlg, cls) { cls.cancel(); }, [this.m_dlg, this], "b3");
	btn.print(dv_btn);
}

/*************************************************************************
*	Function:	veriftyStep
*
*	Purpose:	This function should be over-rideen with each step
**************************************************************************/
WorkflowWizard.prototype.veriftyStep = function()
{
	return true;
}

/*************************************************************************
*	Function:	buildDescription
*
*	Purpose:	Build Description step
**************************************************************************/
WorkflowWizard.prototype.buildDescription = function(con)
{
	// Add Name, Description, Object Type
	// ==========================================================
	var main_dv = alib.dom.createElement("div", con);

	// Welcome
	var p = alib.dom.createElement("p", main_dv);
	alib.dom.styleSetClass(p, "info");
	p.innerHTML = "Welcome to the workflow wizard. Workflows automate both simple and complex tasks like 'if a lead gets updated by someone other than the owner, send the owner an email notifying them of the change' or 'if an opportunity is older than 30 days and has not been contacted, email a manager.' This wizard will guide you through the steps needed to create powerful automated workflows.";
	
	// Title
	var dv = alib.dom.createElement("div", main_dv);
	alib.dom.styleSet(dv, "margin", "10px 0px 3px 0px");
	var td = alib.dom.createElement("div", dv, "Name");
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "75px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSetClass(td, "strong");
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "margin-left", "80px");
	var txtTitle = alib.dom.createElement("input");
	txtTitle.cls = this;
	txtTitle.type = "text";
	alib.dom.styleSet(txtTitle, "width", "98%");
	txtTitle.onchange = function() { this.cls.g_workflow.name = this.value; }
	td.appendChild(txtTitle);
	if (this.g_workflow.name)
		txtTitle.value = this.g_workflow.name;
	
	// Notes
	var dv = alib.dom.createElement("div", main_dv);
	alib.dom.styleSet(dv, "margin", "3px 0px 3px 0px");
	var td = alib.dom.createElement("div", dv, "Description");
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "75px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSetClass(td, "strong");
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "margin-left", "80px");
	var txtNotes = alib.dom.createElement("textarea");
	txtNotes.cls = this;
	alib.dom.styleSet(txtNotes, "width", "98%");
	txtNotes.onchange = function() { this.cls.g_workflow.notes = this.value; }
	td.appendChild(txtNotes);
	if (this.g_workflow.notes)
		txtNotes.value = this.g_workflow.notes;

	// Object Type
	var dv = alib.dom.createElement("div", main_dv);
	alib.dom.styleSet(dv, "margin", "3px 0px 3px 0px");
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "75px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "Object Type";
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "margin-left", "80px");
	var dm = alib.dom.createElement("select");
	dm.cls = this;
	dm.onchange = function() 
	{
		if(this.value != "")
			this.cls.g_workflow.object_type = this.value;
	}
	dm[dm.length] = new Option("Select Object Type", "");
	
    if(this.g_objTypes)
    {
        for(object in this.g_objTypes)
        {
            var currentObject = this.g_objTypes[object];
            dm[dm.length] = new Option(currentObject.title, currentObject.name);
        }
    }
    
	td.appendChild(dm);
	if(this.g_workflow.object_type)
		dm.value = this.g_workflow.object_type;

	var notes = alib.dom.createElement("span", td, " select the type of object this workflow will be working with");

	// Active
	var dv = alib.dom.createElement("div", main_dv);
	alib.dom.styleSet(dv, "margin", "3px 0px 3px 0px");
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "float", "left");
	alib.dom.styleSet(td, "width", "75px");
	alib.dom.styleSet(td, "margin-top", "5px");
	alib.dom.styleSetClass(td, "strong");
	td.innerHTML = "Published";
	var td = alib.dom.createElement("div", dv);
	alib.dom.styleSet(td, "margin-left", "80px");
	var chk = alib.dom.createElement("input", td);
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fActive;
	chk.onchange = function() { this.cls.g_workflow.fActive = this.checked; }
	alib.dom.createElement("span", td, " if checked this workflow is active and will execute when conditions are met");


	// Add spacer
	alib.dom.createElement("br", main_dv);

	// Start Workflow When
	// ---------------------------------------------------
	var frm2 = new CWindowFrame("Start Workflow When");
	frm2.print(main_dv);
	var start_con = frm2.getCon();

	// Created
	var dv = alib.dom.createElement("div", start_con);
	var chk = alib.dom.createElement("input");
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fOnCreate;
	chk.onchange = function() { this.cls.g_workflow.fOnCreate = this.checked; }
	dv.appendChild(chk);
	dv.appendChild(document.createTextNode("An object is first created"));
	
	// Updated
	var dv = alib.dom.createElement("div", start_con);
	var chkUpdated = alib.dom.createElement("input");
	chkUpdated.cls = this;
	chkUpdated.type = "checkbox";
	chkUpdated.checked = this.g_workflow.fOnUpdate;
	chkUpdated.onchange = function() { this.cls.g_workflow.fOnUpdate = this.checked; }
	dv.appendChild(chkUpdated);
	dv.appendChild(document.createTextNode("An object is updated/changed (conditions for update will be set later)"));

	// Condition Unmet
    var dv = alib.dom.createElement("div", start_con);
	alib.dom.styleSet(dv, "margin-left", "20px");
    var chk = alib.dom.createElement("input", dv);
    chk.cls = this;
    chk.type = "checkbox";
    chk.checked = this.g_workflow.fConditionUnmet;
	chk.disabled = (this.g_workflow.fOnUpdate) ? false : true;
    chk.onchange = function() {
        this.cls.g_workflow.fConditionUnmet = this.checked;
    }
	alib.dom.createElement("span", dv, "Only if conditions are previously unmet");
	alib.events.listen(chkUpdated, "click", function(evt) {
		evt.data.subCond.disabled = (this.checked) ? false : true;
	}, {subCond:chk});
    
    var imageCon = alib.dom.setElementAttr(alib.dom.createElement("img", dv), [["src", "/images/icons/help_12.png"]]);
    alib.dom.styleSet(imageCon, "cursor", "help");
    alib.dom.styleSet(imageCon, "margin-left", "3px");
    alib.ui.Tooltip(imageCon, "Use this option for launching workflows on the update of an object if and only if the properties have changed to make it match the conditions for this workflow. An example would be sending an email notification the first time a lead is assigned to a user, but after that subsequent updates will not cause notifications to be sent.", true);
	
	// Deleted
	var dv = alib.dom.createElement("div", start_con);
	var chk = alib.dom.createElement("input");
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fOnDelete;
	chk.onchange = function() { this.cls.g_workflow.fOnDelete = this.checked; }
	dv.appendChild(chk);
	dv.appendChild(document.createTextNode("An object is deleted"));
	
	// Daily
	var dv = alib.dom.createElement("div", start_con);
	var chk = alib.dom.createElement("input");
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fOnDaily;
	chk.onchange = function() { this.cls.g_workflow.fOnDaily = this.checked; }
	dv.appendChild(chk);
	dv.appendChild(document.createTextNode("Check daily if there are any objects matching the conditions for this workflow. Example use: send email to any customers if their birthday is today."));

	// Options
	// ------------------------------------------------
	var frm3 = new CWindowFrame("Options", null, "3px");
	frm3.print(main_dv);
	var other_con = frm3.getCon();
	
	// Singleton
	var dv = alib.dom.createElement("div", other_con);
	var chk = alib.dom.createElement("input");
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fSingleton;
	chk.onchange = function() { this.cls.g_workflow.fSingleton= this.checked; }
	dv.appendChild(chk);
	dv.appendChild(document.createTextNode("Only allow one instance of this workflow per object at a time. Make sure longer running and complex workflows do not overlap."));
	
	// Manually Start
	var dv = alib.dom.createElement("div", other_con);
	var chk = alib.dom.createElement("input");
	chk.cls = this;
	chk.type = "checkbox";
	chk.checked = this.g_workflow.fAllowManual;
	chk.onchange = function() { this.cls.g_workflow.fAllowManual = this.checked; }
	dv.appendChild(chk);
	dv.appendChild(document.createTextNode("Allow user to manually start workflow"));
    
    
	
	
}

/*************************************************************************
*	Function:	buildConditions
*
*	Purpose:	Build Conditions step
**************************************************************************/
WorkflowWizard.prototype.buildConditions = function(con)
{
	this.g_antObject = new CAntObject(this.g_workflow.object_type);

	// Describe Conditions
	var p = alib.dom.createElement("p", con);
	alib.dom.styleSetClass(p, "info");
	p.innerHTML = "Use the form below to set any condtions required in order for this workflow to start. For example: if you only want a workflow to launch if a sales opportunity status was changed from 'Open' to 'Lost,' then you would add a condition below ['And' 'Status' 'is equal' 'Lost'] which would make sure the workflow only starts when those conditions are met. You can add multiple conditions if desired. If this workflow should launch on all objects without condition then just continue on to the next step.";

	// Add Condition
	// --------------------------------------
	var dv = alib.dom.createElement("div", con);
	alib.dom.styleSet(dv, "margin", "3px 0px 3px 0px");
	var frm1 = new CWindowFrame("Only start if the following conditions are met", null, "3px");
	var frmcon = frm1.getCon();
	frm1.print(dv);
	this.g_conditions = this.g_antObject.buildAdvancedQuery(frmcon, this.g_workflow.conditions);
}

/*************************************************************************
*	Function:	updateConditions
*
*	Purpose:	Update g_workflow.conditions
**************************************************************************/
WorkflowWizard.prototype.updateConditions = function()
{	
	// Clear old conditions
	this.g_workflow.delConditions();
	
	// Add all conditions
	for(var i = 0; i < this.g_conditions.getNumConditions(); i++)
	{
		var cond = this.g_conditions.getCondition(i);
		this.g_workflow.addCondition(cond.blogic, cond.fieldName, cond.operator, cond.condValue, cond.condId);
	}
}

/*************************************************************************
*	Function:	buildActions
*
*	Purpose:	Build Actions step
**************************************************************************/
WorkflowWizard.prototype.buildActions = function(con)
{
	// Add actions
	// --------------------------------------
	var dv = alib.dom.createElement("div", con);
	alib.dom.styleSet(dv, "margin", "3px 0px 3px 0px");
	var frm1 = new CWindowFrame("Set actions to be performed by this workflow once started");
	var frmcon = frm1.getCon();
	frm1.print(dv);
	var grid = new WorkFlow_ActionsGrid(this.g_workflow);
	grid.parentDlg = this.m_dlg;
	grid.print(frmcon);
}

/*************************************************************************
*	Function:	buildActionsTbl
*
*	Purpose:	Build Actions table
**************************************************************************/
WorkflowWizard.prototype.buildActionsTbl = function(con)
{
	// Purge table of existing actions
	this.g_tblTasks.clear();
	
	// Only add headers once
	if(this.buildActionTbl)
	{
		this.g_tblTasks.addHeader("Name");
		this.g_tblTasks.addHeader("Do");
		this.g_tblTasks.addHeader("When");
		this.g_tblTasks.addHeader("Condition");
		this.g_tblTasks.addHeader("Delete", "center", "50px");
	}
	this.g_tblTasks.print(con);
	this.buildActionTbl = false;	// Don't add headers agian

	// Create Tasks Table
	// --------------------------------------
	for (var i = 0; i < this.g_workflow.getNumTasks(); i++)
	{
		this.addAction(this.g_workflow.getTasks(i));
	}

	// Add Task Drop-down
	// --------------------------------------
	var dv = alib.dom.createElement("div", con);
	alib.dom.styleSet(dv, "padding", "3px");

	var dm = new CDropdownMenu();
	dm.addEntry("Send Email", function (cls) { cls.editAction(null, WF_ATYPE_SENDEMAIL); }, null, null, [this]);
	dm.addEntry("Create Task", function (cls) { cls.editAction(null, WF_ATYPE_CREATEOBJ, "task"); }, null, null, [this]);
	dm.addEntry("Create Invoice", function (cls) { cls.editAction(null, WF_ATYPE_CREATEOBJ, "invoice"); }, null, null, [this]);
	dm.addEntry("Update Field", function (cls) { cls.editAction(null, WF_ATYPE_UPDATEFLD); }, null, null, [this]);
	dm.addEntry("Start Child Workflow", function (cls) { cls.editAction(null, WF_ATYPE_STARTCHLD); }, null, null, [this]);
	dv.appendChild(dm.createButtonMenu("Add Action"));
}

/*************************************************************************
*	Function:	addAction
*
*	Purpose:	Add an action
**************************************************************************/
WorkflowWizard.prototype.addAction = function(act)
{
	var rw = this.g_tblTasks.addRow();
	var a = alib.dom.createElement("a");
	a.href = "javascript:void(0);";	
	a.act = act;
	a.cls = this;
	a.onclick = function()
	{
		this.cls.editAction(this.act, this.act.type, this.act.create_obj);
	}
	a.innerHTML = act.name;
	rw.addCell(a);
	rw.addCell(act.getTypeDesc());
	rw.addCell(act.getWhenDesc());
	rw.addCell(act.getCondDesc());

	var del_dv = alib.dom.createElement("div");
	rw.addCell(del_dv, true, "center");
	del_dv.innerHTML = "<img border='0' src='/images/themes/" + this.g_theme + "/icons/deleteTask.gif' />";
	alib.dom.styleSet(del_dv, "cursor", "pointer");
	del_dv.cls = this;
	del_dv.m_rw = rw;
	del_dv.m_id = act.id;
	del_dv.onclick = function()
	{
		var dlg = new CDialog("Remove Action", this.cls.m_dlg);
		var dv = alib.dom.createElement("div");
		dlg.customDialog(dv, 260, 40);

		var lbl = alib.dom.createElement("div", dv);
		alib.dom.styleSet(lbl, "text-align", "center");
		lbl.innerHTML = "Are you sure you want to remove this action?";
		dv.appendChild(lbl);
		
		var btn_dv = alib.dom.createElement("div", dv);
		alib.dom.styleSet(btn_dv, "text-align", "right");
		var btn = new CButton("Yes", 
		function(dlg, cls, row, id) 
		{
			dlg.hide();
			row.deleteRow();
			cls.g_workflow.delActionById(id);
		}, [dlg, this.cls, this.m_rw, this.m_id], "b1");
		btn.print(btn_dv);
		var btn = new CButton("No", function(dlg) { dlg.hide(); }, [dlg], "b1");
		btn.print(btn_dv);
	}
}

/*************************************************************************
*	Function:	editAction
*
*	Purpose:	Edit an action
**************************************************************************/
WorkflowWizard.prototype.editAction = function(act, type, subtype)
{
	if (act)
		var task_obj = act;
	else
		var task_obj = new WorkFlow_Action(g_workflow);

	var lbl = (act) ? "Edit Action" : "Create New Action";
	var g_taskDlg = new CDialog(lbl, this.m_dlg);
	g_taskDlg.f_close = true;
	var dv = alib.dom.createElement("div");
	g_taskDlg.customDialog(dv, 560, 500);

	var tbl = alib.dom.createElement("table", dv);
	var tbody = alib.dom.createElement("tbody", tbl);

	// Title
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "Name";
	var td = alib.dom.createElement("td", row);
	var txtTaskTitle = alib.dom.createElement("input", td);
	txtTaskTitle.m_task_obj = task_obj;
	txtTaskTitle.value = task_obj.name;
	txtTaskTitle.onchange = function() { this.m_task_obj.name = this.value; };
	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "&nbsp;give this action a unique name";

	// Timeframe
	// --------------------------------------------
	var row = alib.dom.createElement("tr", tbody);
	var td = alib.dom.createElement("td", row);
	alib.dom.styleSetClass(td, "formLabel");
	td.innerHTML = "When";
	var td = alib.dom.createElement("td", row);

	var txtWhenInterval = alib.dom.createElement("input", td);
	alib.dom.styleSet(txtWhenInterval, "width", "14px");
	txtWhenInterval.m_task_obj = task_obj;
	txtWhenInterval.value=task_obj.when.interval;
	txtWhenInterval.onchange = function() { this.m_task_obj.when.interval = this.value; };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = "&nbsp;";

	var cbWhenUnit = alib.dom.createElement("select", td);
	var time_units = wfGetTimeUnits();
	for (var i = 0; i < time_units.length; i++)
	{
		cbWhenUnit[cbWhenUnit.length] = new Option(time_units[i][1], time_units[i][0], false, (task_obj.when.unit==time_units[i][0])?true:false);
	}
	cbWhenUnit.m_task_obj = task_obj;
	cbWhenUnit.onchange = function() { this.m_task_obj.when.unit = this.value; };

	var lbl = alib.dom.createElement("span", td);
	lbl.innerHTML = " after workflow starts (enter 0 for immediate)";

	// Conditions
	// --------------------------------------------
	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSetClass(lbl, "formLabel");
	alib.dom.styleSet(lbl, "margin", "6px 0px 3px 3px");
	lbl.innerHTML = "If the following conditions are met:";
	var dv_cnd = alib.dom.createElement("div", dv);
	var tmpAntObj = new CAntObject(this.g_workflow.object_type);
	var condObj = tmpAntObj.buildAdvancedQuery(dv_cnd, task_obj.conditions);

	// Do
	// --------------------------------------------
	switch (type)
	{
	case WF_ATYPE_SENDEMAIL:
		var email_action = new WorkFlow_Action_Email(this.g_workflow.object_type);
		email_action.taskSendEmail(dv, task_obj);
		break;
	case WF_ATYPE_UPDATEFLD:
		this.actUpdateField(dv, task_obj);
		break;
	case WF_ATYPE_STARTCHLD:
		this.actChildWf(dv, task_obj);
		break;
	default: // Create new
		if (subtype == "task")
		{
			var task_action = new WorkFlow_Action_Task(this.g_workflow.object_type)
			task_action.taskCreateTask(dv, task_obj);
		}
		if (subtype == "invoice")
		{
			var task_invoice = new WorkFlow_Action_Invoice(this.g_workflow.object_type);
			task_invoice.taskCreateInvoice(dv, task_obj);
		}
	}
	
	// Buttons
	// --------------------------------------------
	var bntbar = alib.dom.createElement("div", dv);
	alib.dom.styleSet(bntbar, "margin", "6px 0px 3px 3px");
	
	var btn = new CButton("Save", 
	function(cls, dlg, task_obj, condObj, isnew) 
	{
		dlg.hide();
		cls.saveTask(task_obj, condObj, isnew);
	}, [this, g_taskDlg, task_obj, condObj, (act)?false:true], "b2");
	btn.print(bntbar);
	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [g_taskDlg], "b1");
	btn.print(bntbar);
	
}

/*************************************************************************
*	Function:	actUpdateField
*
*	Purpose:	Update action field
**************************************************************************/
WorkflowWizard.prototype.actUpdateField = function(con, task_obj)
{
	var dv_cnd = alib.dom.createElement("fieldset", con);
	alib.dom.styleSet(dv_cnd, "margin", "6px 0px 3px 3px");
	var lbl = alib.dom.createElement("legend", dv_cnd);
	lbl.innerHTML = "Update Field";

	var lbl = alib.dom.createElement("div", dv_cnd);
	lbl.innerHTML = "Change: ";

	var sel_fields = alib.dom.createElement("select", lbl);

	var lbl = alib.dom.createElement("div", dv_cnd);
	lbl.innerHTML = "To: ";

	var inp_con = alib.dom.createElement("span", lbl);

	var tmpAntObj = new CAntObject(this.g_workflow.object_type);
	sel_fields.m_task_obj = task_obj;
	sel_fields.m_inp_con = inp_con;
	sel_fields.m_ant_obj = tmpAntObj;
	sel_fields.onchange = function()
	{
		if (this.value.indexOf(".")!=-1)
		{
			var parts = this.value.split(".");
			if (parts.length==3)
			{
				var ref_obj = new CAntObject(parts[1]);
				this.m_task_obj.frm_changeto = ref_obj.fieldCreateValueInput(this.m_inp_con, parts[2]);
			}
		}
		else
		{
			this.m_task_obj.frm_changeto = this.m_ant_obj.fieldCreateValueInput(this.m_inp_con, this.value);
		}

		this.m_task_obj.update_field = this.value;
	}

	var fields = tmpAntObj.getFields();
	for (var i = 0; i < fields.length; i++)
	{
		sel_fields[sel_fields.length] = new Option(fields[i].title, fields[i].name, false, (task_obj.update_field == fields[i].name)?true:false);
		if (fields[i].type == "object")
		{
			if (fields[i].subtype)
			{
				var ref_obj = new CAntObject(fields[i].subtype);
				var ref_fields = ref_obj.getFields();
				for (var j = 0; j < ref_fields.length; j++)
				{
					var val = fields[i].name+"."+ref_obj.name+"."+ref_fields[j].name;
					sel_fields[sel_fields.length] = new Option(fields[i].title+"."+ref_fields[j].title, 
																val, false, (task_obj.update_field == val)?true:false);
				}
			}
			else
			{
				for (var m = 0; m < this.g_objTypes.length; m++)
				{
					if (this.g_objTypes[m][0] != tmpAntObj.name)
					{
						var ref_obj = new CAntObject(this.g_objTypes[m][0]);
						var ref_fields = ref_obj.getFields();
						for (var j = 0; j < ref_fields.length; j++)
						{
							var val = fields[i].name+"."+ref_obj.name+"."+ref_fields[j].name;
							sel_fields[sel_fields.length] = new Option(fields[i].title+"."+ref_obj.title+"."+ref_fields[j].title, 
																		val, false, (task_obj.update_field == val)?true:false);
						}
					}
				}
				//sel_fields[sel_fields.length] = new Option(fields[i].title, fields[i].name, false, (task_obj.update_field == fields[i].name)?true:false);
			}
		}

	}

	var fld = (task_obj.update_field) ? task_obj.update_field : fields[0].name
	task_obj.frm_changeto = tmpAntObj.fieldCreateValueInput(inp_con, fld, task_obj.update_to);
}

/*************************************************************************
*	Function:	actChildWf
*
*	Purpose:	Workflow action child
**************************************************************************/
WorkflowWizard.prototype.actChildWf = function(con, task_obj)
{
	task_obj.type = WF_ATYPE_STARTCHLD;

	var lbl = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(lbl, "formLabel");
	alib.dom.styleSet(lbl, "margin", "6px 0px 3px 3px");
	lbl.innerHTML = "Select a child workflow to launch:";

	var frm_dv = alib.dom.createElement("div", con);
	var workflows = alib.dom.createElement("select", frm_dv);
	workflows.size = 20;
	workflows.style.width = "98%";
	workflows.task_obj = task_obj;
	workflows.onchange = function()
	{
		this.task_obj.start_wfid = this.value;
	}

	// Set: start_wfid
	var ajax = new CAjax();
	ajax.workflows = workflows;
	ajax.task_obj = task_obj;
	ajax.onload = function(ret)
	{
        if (ret.length)
        {
            for (workflow in ret)
            {
                var currentWorkflow = ret[workflow];
                
                var name = currentWorkflow.name;
                var id = currentWorkflow.id;
                var act = currentWorkflow.f_active;
                
                if (act == 't')
                    this.workflows[this.workflows.length] = new Option(name, id, false, (id == this.task_obj.start_wfid)?true:false);
            }
        }
	};
	
	var args = new Array();
    args[args.length] = ['otypes', this.g_workflow.object_type];
    ajax.exec("/controller/Workflow/getWorkflow", args);
}

/*************************************************************************
*	Function:	saveTask
*
*	Purpose:	Save task
**************************************************************************/
WorkflowWizard.prototype.saveTask = function(task_obj, condObj, isnew)
{
	// Purge and set conditions
	task_obj.delConditions();

	for (var i = 0; i < condObj.getNumConditions(); i++)
	{
		var cond = condObj.getCondition(i);
		task_obj.addCondition(cond.blogic, cond.fieldName, cond.operator, cond.condValue);
	}

	if (task_obj.frm_changeto)
		task_obj.update_to = task_obj.frm_changeto.value;

	if (isnew)
	{
		this.addAction(task_obj);
		this.g_workflow.addAction(task_obj);
	}
}

/*************************************************************************
*	Function:	getObjects
*
*	Purpose:	Populates g_objTypes array
**************************************************************************/
WorkflowWizard.prototype.getObjects = function()
{
    if(this.g_objTypes)
        return;
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(!ret)
            ALib.statusShowAlert("Error occured while loading objects!", 5000, "bottom", "right");
        else
            this.cbData.cls.g_objTypes = ret;
    };
    ajax.exec("/controller/Object/getObjects");
}

/*************************************************************************
*	Function:	cancel
*
*	Purpose:	Close the wizard
**************************************************************************/
WorkflowWizard.prototype.cancel = function()
{
	var dlg = new CDialog("Close Workflow", this.m_dlg);
	var dv = alib.dom.createElement("div");
	dlg.customDialog(dv, 260);

	var lbl = alib.dom.createElement("div", dv);
	alib.dom.styleSet(lbl, "text-align", "center");
	lbl.innerHTML = "Are you sure you want to close this workflow?";
	dv.appendChild(lbl);
	
	var btn_dv = alib.dom.createElement("div", dv);
	alib.dom.styleSet(btn_dv, "text-align", "right");
	var btn = new CButton("Yes", 
	function(cls, dlg) { dlg.hide(); cls.m_dlg.hide(); }, [this, dlg], "b1");
	btn.print(btn_dv);
	var btn = new CButton("No", function(dlg) { dlg.hide(); }, [dlg], "b1");
	btn.print(btn_dv);
}

/*************************************************************************
*	Function:	save
*
*	Purpose:	Save workflow
**************************************************************************/
WorkflowWizard.prototype.save = function()
{
	// Create loading div
	var dlg = new CDialog();
	dlg.parentDlg = this.m_dlg;
	var dv_load = document.createElement('div');
	alib.dom.styleSetClass(dv_load, "statusAlert");
	alib.dom.styleSet(dv_load, "text-align", "center");
	dv_load.innerHTML = "Saving, please wait...";
	dlg.statusDialog(dv_load, 150, 100);

	this.g_workflow.dlg = dlg;
	this.g_workflow.cls = this;
	this.g_workflow.onsave = function()
	{
		this.dlg.hide();
		ALib.statusShowAlert("Workflow Saved!", 3000, "bottom", "right");
		
		// Close wizard
		this.cls.m_dlg.hide();
        this.cls.onsave();        
	}
	this.g_workflow.onsaveError = function()
	{
		this.dlg.hide();
		ALib.statusShowAlert("ERROR SAVING WORKFLOW!", 3000, "bottom", "right");
	}
	this.g_workflow.save();
}

WorkflowWizard.prototype.onsave = function()
{
    // This function exists to be defined before save is called above
}

/****************************************************************************
*	
*	Class:		CWidWelcome
*
*	Purpose:	Main application for the data center
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidWelcome()
{    
	this.title = "Welcome";
	this.m_container = null;	// Set by calling process
	this.m_image = new Image;
    this.appNavname = null;
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidWelcome.prototype.main = function()
{    
	Ant.setHinst(this, "/widgets/welcome");

	// Create container to hold text
	// ------------------------------------------------------------------
	this.mdiv = ALib.m_document.createElement("div");
	this.m_container.appendChild(this.mdiv);
	this.mdiv.id = "wWelcomeMsgBoard";
	this.mdiv.style.height = "130px";
	this.mdiv.style.padding = '3px;'
	this.mdiv.align = "right";
	this.loadMessage(this.mdiv); // Load text	

	// Load image into this.m_container
	// ------------------------------------------------------------------
	this.loadImage();

	// Set context menu
	// ------------------------------------------------------------------
	var sub2 = this.m_dm.addSubmenu("Change Text Color");
	var colors = [["Black", "000000"], ["Aqua", "00FFFF"], ["Blue", "0000FF"], ["DarkSlate Blue", "483D8B"], 
				  ["Midnite Blue", "191970"], ["Fuchia", "FF00FF"], ["Yellow", "FFFF00"], ["Green", "008000"],
				  ["Army Green", "45463E"], ["Lime", "00FF00"], ["Maroon", "800000"], ["Navy", "000080"],
				  ["Olive", "808000"], ["Purple", "800080"], ["Mild Purple", "3A58BA"], ["Lite Purple", "666699"],
				  ["Dark Purple", "5B005B"], ["Silver", "C0C0C0"], ["Teal", "008080"], ["White", "FFFFFF"],
				  ["Gray", "808080"], ["Level 2 Grey", "333"], ["Level 3 Grey", "666"], ["Level 4 Grey", "999"]];

	funct = function(cls, clr) { cls.setTextColor(clr, true); };
	for (var i = 0; i < colors.length; i++)
	{
		sub2.addEntry(colors[i][0], funct, null, 
					  "<div style='width:9px;height:9px;background-color:#" + colors[i][1] + "'></div>", [this, colors[i][1]]);
	}

	var custImg = function(cls)
	{
		var cbrowser = new AntFsOpen();
		cbrowser.filterType = "jpg:jpeg:png:gif";
		cbrowser.cbData.m_cls = cls;
		cbrowser.onSelect = function(fid, name, path) 
		{
			this.cbData.m_cls.changeImage(fid);
		}
		cbrowser.showDialog();
	}
	this.m_dm.addEntry('Use Default Background', function(cls) { cls.changeImage('default'); },
						"/images/themes/"+Ant.m_theme+"/icons/taskIcon.gif", null, [this]);
	this.m_dm.addEntry('Use Custom Background', custImg, 
						"/images/themes/"+Ant.m_theme+"/icons/taskIcon.gif", null, [this]);
	this.m_dm.addEntry('Remove Background (blank)', function(cls) { cls.changeImage('none'); },
						"/images/themes/"+Ant.m_theme+"/icons/taskIcon.gif", null, [this]);

}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidWelcome.prototype.exit= function()
{
	Ant.clearHinst("/widgets/welcome");

	this.m_container.innerHTML = "";
}

/*************************************************************************
*	Function:	loadMessage
*
*	Purpose:	Load welcome center text and the image once text is loaded
**************************************************************************/
CWidWelcome.prototype.loadMessage = function(mdiv)
{
	var style_left = "";
	var style_right = "";
	
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "font-weight", "bold");
	dv.innerHTML = "Greetings";
	mdiv.appendChild(dv);

	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "margin-bottom", "20px");
	dv.innerHTML = Ant.user.name;
	mdiv.appendChild(dv);

	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "font-weight", "bold");
	dv.innerHTML = "Getting Started";
	mdiv.appendChild(dv);

	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "margin-bottom", "5px");
	dv.innerHTML = "<img src='/images/icons/question_16.png' /> <a href='javascript:void(0);' onclick=\"loadSupportDoc(108);\" style='margin-bottom:5px;'> Watch Home Tutorial</a>";
	mdiv.appendChild(dv);

	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "margin-bottom", "5px");
	dv.innerHTML = "<img src='/images/icons/question_16.png' /> <a href='javascript:void(0);' onclick=\"loadSupportDoc(121);\" style='margin-bottom:5px;'> Watch ANT Overview</a>";
	mdiv.appendChild(dv);

	/*
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "font-weight", "bold");
	dv.innerHTML = "Storage Usage";
	mdiv.appendChild(dv);

	var quota = Ant.storage.user_quota;
	var used = Ant.storage.user_used;

	// Make quota human readable
	if (quota >= 1000000)
		var display_quota = quota/1000000 + "TB";
	else if (quota >= 1000)
		var display_quota = quota/1000 + "GB";
	else
		var display_quota = quota + "MB";

	// Makes usage human readable
	if (used >= 1000000)
		var display_used = used/1000000 + "TB";
	else if (used >= 1000)
		var display_used = used/1000 + "GB";
	else
		var display_used = used + "MB";

	// Get percent and remain
	var percent = (quota) ? Math.round((used / quota) * 100, 0) : 0;
	var remain = ((100 - percent) < 0) ? 0 : 100 - percent;

	// Diplay text label
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "margin-bottom", "2px");
	dv.innerHTML = display_used + " of " + display_quota + " (" + percent + "%)";
	mdiv.appendChild(dv);

	// Display usage status bar
	var dv = ALib.m_document.createElement("div");
	alib.dom.styleSet(dv, "width", "102px");
	mdiv.appendChild(dv);
	this.m_prog_left_dv = ALib.m_document.createElement("div");
	dv.appendChild(this.m_prog_left_dv);
	alib.dom.styleSet(this.m_prog_left_dv, "width", percent+"px");
	this.m_prog_left_dv.className = 'HomeWelcomeProgressBarLeft';

	this.m_progright_dv = ALib.m_document.createElement("div");
	dv.appendChild(this.m_progright_dv);
	alib.dom.styleSet(this.m_progright_dv, "width", remain+"px");
	this.m_progright_dv.className = 'HomeWelcomeProgressBarRight';
	*/

	this.getTextColor();
}

/*************************************************************************
*	Function:	setTextColor
*
*	Purpose:	Change and save custom color for text
**************************************************************************/
CWidWelcome.prototype.setTextColor = function(color, save)
{
	alib.dom.styleSet(this.mdiv, "color", "#"+color);
	/*
	alib.dom.styleSet(this.m_prog_left_dv, "background-color", "#"+color);
	alib.dom.styleSet(this.m_prog_left_dv, "border-left-color", "#"+color);
	alib.dom.styleSet(this.m_prog_left_dv, "border-top-color", "#"+color);
	alib.dom.styleSet(this.m_prog_left_dv, "border-bottom-color", "#"+color);
	alib.dom.styleSet(this.m_progright_dv, "border-right-color", "#"+color);
	alib.dom.styleSet(this.m_progright_dv, "border-top-color", "#"+color);
	alib.dom.styleSet(this.m_progright_dv, "border-bottom-color", "#"+color);
	*/

	if (save)
		this.savePref("setWelColor", color);
}

/*************************************************************************
*	Function:	getTextColor
*
*	Purpose:	Call xml_actions.awp to get saved text color
**************************************************************************/
CWidWelcome.prototype.getTextColor = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        if(ret)
            this.cbData.cls.setTextColor(ret);
    };
    ajax.exec("/controller/Application/getWelColor",
                [["appNavname", this.appNavname]]);
}

/*************************************************************************
*	Function:	savePref
*
*	Purpose:	Save a preference - with no callback or verification
**************************************************************************/
CWidWelcome.prototype.savePref = function(name, val)
{
    var args = new Array();        
    args[0] = ['val', val];
    args[1] = ['appNavname', this.appNavname];
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Application/" + name, args);
}

/*************************************************************************
*	Function:	loadImage
*
*	Purpose:	Load image into welcome center inner container
**************************************************************************/
CWidWelcome.prototype.loadImage = function()
{
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.widImage = this.m_image;
    ajax.onload = function(ret)
    {
        this.cbData.widImage.cls = this.cbData.cls;
        this.cbData.widImage.onload = function()
        {
            if (this.height > 130)
                this.cls.m_container.style.height = this.height + "px";

            this.cls.m_container.style.backgroundImage = 'url('+this.src+')';
            this.cls.m_container.style.backgroundRepeat='no-repeat';
            this.cls.m_container.style.backgroundPosition = "top left";    
        }
        this.cbData.widImage.src = unescape(ret);
    };
    
    var args = new Array();        
    args[0] = ['width', this.mdiv.offsetWidth];
    args[1] = ['appNavname', this.appNavname];
    ajax.exec("/controller/Application/getWelImage", args);
}

/*************************************************************************
*	Function:	changeImage
*
*	Purpose:	Switch welcome center image. 'default' uses theme default.
*				'none' set to blank and will not try to load an image.
**************************************************************************/
CWidWelcome.prototype.changeImage = function(fileid, name)
{
	if (fileid == 'default')
	{
		this.m_cust_img_id = null;
		this.setTextColor('none');
		this.savePref('setWelImgDef', fileid);
	}
	else if (fileid == "none")
	{
		this.m_cust_img_id = null;
		this.m_container.style.backgroundImage = '';
		this.savePref('setWelImg', fileid);
	}
	else
	{
		this.m_cust_img_id = fileid;
		
		this.savePref('setWelImg', fileid);
	}
	
	this.loadImage();
}

/****************************************************************************
*	
*	Class:		CWidWeather
*
*	Purpose:	Main application for the weather center
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidWeather()
{
	this.title = "Weather";
	this.m_container = null;	// Set by calling process
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidWeather.prototype.main = function()
{
	this.m_container.innerHTML = "Loading, please wait...";

	// Create context menu
	// ----------------------------------------------------------------------------
	var cls = this;
	this.m_dm.addEntry('Change Location', function (clsref) { clsref.setZip(); }, null, null, [cls]);

	this.loadWeather();
}

/**
 * Used for redrawing - this will be depricated soon
 */
CWidWeather.prototype.exit = function()
{
	this.m_container.innerHTML = "";
}

/**
 * Update user zipcode
 */
CWidWeather.prototype.setZip = function()
{
	var show = (this.m_zip) ? this.m_zip : '97477';
	var zcode = prompt('Please enter a symbol to add', show);
	this.m_container.innerHTML = "Setting zip, please wait";
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.m_zip = ret; 
        this.cbData.cls.loadWeather(); 
    };
    ajax.exec("/controller/Application/setZipcode",
                [["zipcode", zcode]]);
}

/**
 * Load weather based on zip code
 */
CWidWeather.prototype.loadWeatherOld = function()
{
	this.ajax = new CAjax();
	this.ajax.m_con = this.m_container;
	this.ajax.m_appcls = this;
	this.ajax.onload = function(root)
	{
		// Create addzip div if none
		var dv_zip = null;
		var city = "";
		var state = "";

		// Build Table
		var table = alib.dom.createElement("table");
		table.style.width = "100%";
		var tbody = alib.dom.createElement("tbody");
		table.appendChild(tbody);
		var tr_header = alib.dom.createElement("tr");
		tbody.appendChild(tr_header);
		var tr_icon = alib.dom.createElement("tr");
		tbody.appendChild(tr_icon);
		var tr_forecast = alib.dom.createElement("tr");
		tbody.appendChild(tr_forecast);
		var tr_temp = alib.dom.createElement("tr");
		tbody.appendChild(tr_temp);
		
		// Get contents of XML document
		if (root)
		{
			var num = root.getNumChildren();
			for (i = 0; i < num; i++)
			{
				var day = root.getChildNode(i);

				// Check for error
				if (day.m_name == "error")
				{
					if (day.m_text == "nozip")
					{
						dv_zip = alib.dom.createElement("div");
						dv_zip.style.paddingTop = "6px";
						dv_zip.style.paddingLeft = "3px";
						dv_zip.style.cursor = "pointer";
						dv_zip.m_appcls = this.m_appcls;
						dv_zip.onclick = function () { this.m_appcls.setZip(); }
						dv_zip.innerHTML = "Click here to enter your location!";
					}
				}
				
				if (day.m_name == "zip")
					this.m_appcls.m_zip = day.m_text;

				if (day.m_name == "city")
					city = day.m_text;
				
				if (day.m_name == "state")
					state = day.m_text;

				// Check for days
				if (day.m_name == "day")
				{
					// Populate vars
					var dayvar_num = day.getNumChildren();
					for (j = 0; j < dayvar_num; j++)
					{
						dayvar = day.getChildNode(j);
						
						switch (dayvar.m_name)
						{
						case "name":
							var day_name = dayvar.m_text;
							break;
						case "icon":
							var day_icon = dayvar.m_text;
							break;
						case "forecast":
							var day_forecast = dayvar.m_text;
							break;
						case "tempMax":
							var day_max = dayvar.m_text;
							break;
						case "tempMin":
							var day_min = dayvar.m_text;
							break;
						}
					}

					// Add day name to table
					var td = alib.dom.createElement("td");
					td.style.width = "20%";
					td.style.textAlign = "center";
					td.innerHTML = day_name;
					tr_header.appendChild(td);
					td = null;

					// Add icon to table
					var td = alib.dom.createElement("td");
					td.style.textAlign = "center";
					td.style.width = "20%";
					img = alib.dom.createElement("img");
					img.src = day_icon;
					img.border = "0";
					td.appendChild(img);
					tr_icon.appendChild(td);
					td = null;
					
					// Add description to table
					var td = alib.dom.createElement("td");
					td.style.textAlign = "center";
					td.style.width = "20%";
					td.innerHTML = day_forecast;
					tr_forecast.appendChild(td);
					td = null;
					
					// Add temerature to table
					var td = alib.dom.createElement("td");
					td.style.textAlign = "center";
					td.style.width = "20%";
					td.innerHTML = day_max + " | " + day_min;
					tr_temp.appendChild(td);
					td = null;

				}

			if (state && city)
				this.m_appcls.m_cct.setTitle(city + " " + state);
			}
		}

		// Add table to div
		this.m_con.innerHTML = "";
		if (dv_zip) // No zip
			this.m_con.appendChild(dv_zip);
		else
			this.m_con.appendChild(table);
	};

	this.ajax.exec("/widgets/xml_weather.awp");
}

/**
 * Load weather based on zip code using new controller
 */
CWidWeather.prototype.loadWeather = function()
{
	this.ajax = new CAjax("json");
	this.ajax.m_con = this.m_container;
	this.ajax.m_appcls = this;
	this.ajax.onload = function(data)
	{
		if (!data)
			return;

		this.m_con.innerHTML = "";

		if (data.error)
		{
			this.m_con.innerHTML = "";
			var dv_zip = alib.dom.createElement("div", this.m_con);
			dv_zip.style.paddingTop = "6px";
			dv_zip.style.paddingLeft = "3px";
			dv_zip.style.cursor = "pointer";
			dv_zip.m_appcls = this.m_appcls;
			dv_zip.onclick = function () { this.m_appcls.setZip(); }
			dv_zip.innerHTML = "Click here to enter your location!";
			return;
		}

		// TODO: Set the title
		//if (data.state && data.city)
			//this.m_appcls.m_cct.setTitle(data.city + " " + data.state);

		// Build Table
		var table = alib.dom.createElement("table", this.m_con);
		table.style.width = "100%";
		var tbody = alib.dom.createElement("tbody");
		table.appendChild(tbody);
		var tr_header = alib.dom.createElement("tr");
		tbody.appendChild(tr_header);
		var tr_icon = alib.dom.createElement("tr");
		tbody.appendChild(tr_icon);
		var tr_forecast = alib.dom.createElement("tr");
		tbody.appendChild(tr_forecast);
		var tr_temp = alib.dom.createElement("tr");
		tbody.appendChild(tr_temp);
		
		// Loop through weather objects
		for (var i in data.days)
		{
			this.m_appcls.m_zip = data.days[i].zip;
			var day_name = data.days[i].name;
			var day_icon = data.days[i].icon;
			var day_forecast = data.days[i].forecast;
			var day_max = data.days[i].tempMax;
			var day_min = data.days[i].tempMin;

			// Add day name to table
			var td = alib.dom.createElement("td");
			td.style.width = "20%";
			td.style.textAlign = "center";
			td.innerHTML = day_name;
			tr_header.appendChild(td);
			td = null;

			// Add icon to table
			var td = alib.dom.createElement("td");
			td.style.textAlign = "center";
			td.style.width = "20%";
			img = alib.dom.createElement("img");
			img.src = day_icon;
			img.border = "0";
			td.appendChild(img);
			tr_icon.appendChild(td);
			td = null;
			
			// Add description to table
			var td = alib.dom.createElement("td");
			td.style.textAlign = "center";
			td.style.width = "20%";
			td.innerHTML = day_forecast;
			tr_forecast.appendChild(td);
			td = null;
			
			// Add temerature to table
			var td = alib.dom.createElement("td");
			td.style.textAlign = "center";
			td.style.width = "20%";
			td.innerHTML = day_max + " | " + day_min;
			tr_temp.appendChild(td);
			td = null;
		}
	};

	this.ajax.exec("/controller/Application/getWeather");
}

/****************************************************************************
*	
*	Class:		CWidStokcs
*
*	Purpose:	Main widget application for the stock ticker
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidStocks()
{
	this.title = "Stock Ticker";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Dropdown menu set by calling process
	
	this.m_menus = new Array();
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidStocks.prototype.main = function()
{
	this.m_container.innerHTML = "Loading, please wait...";

	var cls = this;
	Ant.setHinst(cls, "/widgets/stocks");

	this.loadStocks();

	var cls = this;
	this.m_dm.addEntry("Add Stock Symbol", function(cls){cls.addStock();}, 
						"/images/themes/"+Ant.m_theme+"/icons/addStock.gif", null, [cls]);
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidStocks.prototype.exit = function()
{
	Ant.clearHinst("/widgets/stocks");

	if (this.m_timer)
		clearTimeout(this.m_timer);

	this.m_container.innerHTML = "";
}

/*************************************************************************
*	Function:	addStock
*
*	Purpose:	Add a stock ticker to the users database
**************************************************************************/
CWidStocks.prototype.addStock = function()
{
	var ticker = '';
	var sym = prompt('Please enter a symbol to add', '');
	if (sym == '' || sym == null)
	{
		return;
	}

	var cls = this;
	var rpc = new CAjaxRpc("/stocks/xml_act_stocks.awp", "stock_add", 
							[["sym", sym]], function(ret, cls){cls.loadStocks();}, [cls]);
}

/*************************************************************************
*	Function:	deleteStock
*
*	Purpose:	Remove a stock ticker to the users database
**************************************************************************/
CWidStocks.prototype.deleteStock = function(id, name)
{
	if (confirm("Are you sure you want to remove "+name+"?"))
	{
		var cls = this;
		var rpc = new CAjaxRpc("/stocks/xml_act_stocks.awp", "stock_delete", 
								[["eid", id]], function(ret, cls){cls.loadStocks();}, [cls]);
	}
}

/*************************************************************************
*	Function:	loadStocks
*
*	Purpose:	Populate stocks table from users database
**************************************************************************/
CWidStocks.prototype.loadStocks = function()
{
	this.ajax = new CAjax();
	this.ajax.m_con = this.m_container;
	this.ajax.m_appcls = this;
	this.ajax.onload = function(root)
	{
		// Build Table
		var table = ALib.m_document.createElement("table");
		table.style.width = "100%";
		var tbody = ALib.m_document.createElement("tbody");
		table.appendChild(tbody);
		
		// Get contents of XML document
		var num = root.getNumChildren();
		for (i = 0; i < num; i++)
		{
			var stock = root.getChildNode(i);

			// Check for stocks
			if (stock.m_name == "stock")
			{
				var stock_id = "";
				var stock_memid = "";
				var stock_sym = false;
				var stock_name = "";
				var price = "";
				var price_change = "";
				var percent_change = "";
				var stock_class = "";

				// Populate vars
				var stock_num = stock.getNumChildren();
				for (j = 0; j < stock_num; j++)
				{
					stockvar = stock.getChildNode(j);
					
					switch (stockvar.m_name)
					{
					case "stock_id":
						var stock_id = stockvar.m_text;
						break;
					case "stock_memid":
						var stock_memid = stockvar.m_text;
						break;
					case "stock_sym":
						var stock_sym = stockvar.m_text;
						break;
					case "stock_name":
						var stock_name = stockvar.m_text;
						break;
					case "price":
						var price = stockvar.m_text;
						break;
					case "price_change":
						var price_change = stockvar.m_text;
						break;
					case "percent_change":
						var percent_change = stockvar.m_text;
						break;
					case "stock_class":
						var stock_class = stockvar.m_text;
						break;
					}
				}

				// The first two will always be market stocks
                if (i == 2)
				{
					// blank hr row
					var tr = ALib.m_document.createElement("tr");
					tr.className = "HStocksHeaderHr";
					var cell = ALib.m_document.createElement("td");
					cell.colspan = '5';
					tr.appendChild(cell);
					tbody.appendChild(tr);
				}
				
				if (i < 2)
					var tr_class = 'HStocksMarketsRow';
				else
					var tr_class = (i % 2) ? "HStocksRow1" : "HStocksRow2";	
				
				var tr = ALib.m_document.createElement("tr");
				tr.className = tr_class;
				var cell = ALib.m_document.createElement("td");
				cell.innerHTML = unescape(stock_name);
				tr.appendChild(cell);
				var cell = ALib.m_document.createElement("td");
				cell.innerHTML = unescape(price);
				cell.align = 'right';
				tr.appendChild(cell);
				var cell = ALib.m_document.createElement("td");
				cell.innerHTML = unescape(price_change);
				cell.className = unescape(stock_class);
				cell.align = 'right';
				tr.appendChild(cell);
				var cell = ALib.m_document.createElement("td");
				cell.innerHTML = unescape(percent_change);
				cell.className = unescape(stock_class);
				cell.align = 'right';
				tr.appendChild(cell);
				// Now create delete cell
				if (i < 2)
				{
					var cell = ALib.m_document.createElement("td");
					//cell.colspan = '2';
					tr.appendChild(cell);
				}
				else
				{
					var link = ALib.m_document.createElement("div");
					link.innerHTML = "<img src='/images/themes/"+Ant.m_theme+"/icons/deleteTask.gif' border='0'>";
					link.m_id = stock_memid;
					link.m_name = unescape(stock_name);
					link.m_appcls = this.m_appcls;
					link.onclick = function ()
					{
						this.m_appcls.deleteStock(this.m_id, this.m_name);
					}
					Ant.Dom.styleSet(link, "cursor", "pointer");
					var cell = ALib.m_document.createElement("td");
					//cell.colspan = '2';
					cell.appendChild(link);
					tr.appendChild(cell);
				}
				tbody.appendChild(tr);
			}
		}

		// Add table to div
		this.m_con.innerHTML = "";
		this.m_con.appendChild(table);

		this.m_appcls.m_timer = window.setTimeout("Ant.getHinst('/widgets/stocks').loadStocks()", 30000);
	};

	this.ajax.exec("/stocks/xml_act_stocks.awp");
}

/****************************************************************************
*	
*	Class:		CWidTasks
*
*	Purpose:	Task Widget
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidTasks()
{
	this.title = "Tasks";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Dropdown menu will be set by parent
    this.m_id = null;

	/**
	 * Array of tasks
	 *
	 * @type {CAntObject[]}
	 */
	this.tasksObjects = new Array();

    this.m_data = new Object();
}

/**
 * Entry point for application
 *
 * @public
 * @this {CWidTasks}
 */
CWidTasks.prototype.main = function()
{
	var cls = this;

	this.m_container.innerHTML = "";

	// Create context menu
	//this.m_dm.addEntry('Add Task', function() { loadObjectForm("task"); }, "/images/icons/taskIcon.gif");
	
	var cls = this;
	funct = function(cls, showFor, groupBy)
	{
		cls.displayTasks(showFor, groupBy);
        cls.m_data = "['" + showFor + "', '" + groupBy + "']";
        cls.saveWidgetData();
	};

	var sub2 = this.m_dm.addSubmenu("Group By");
	sub2.addEntry('None', funct, null, "<div id='widg_home_tasks_group_none'></div>", [cls, null, null]);
	sub2.addEntry('Overview', funct, null, "<div id='widg_home_tasks_group_overview'></div>", [cls, null, 'overview']);
	sub2.addEntry('Project', funct, null, "<div id='widg_home_tasks_group_project'></div>", [cls, null, 'project']);
	sub2.addEntry('Contact/Customer', funct, null, "<div id='widg_home_tasks_group_contact'></div>", [cls, null, 'customer_id']);
	sub2.addEntry('Priority', funct, null, "<div id='widg_home_tasks_group_priority'></div>", [cls, null, 'priority']);
	sub2.addEntry('Due Date', funct, null, "<div id='widg_home_tasks_group_deadline'></div>", [cls, null, 'deadline']);
	sub2.addEntry('Category', funct, null, "<div id='widg_home_tasks_group_category'></div>", [cls, null, 'category']);

	this.m_container.innerHTML = "<div class='loading'></div>";

	this.loadTasks();
}

/**
 * Perform needed clean-up on app exit
 *
 * @public
 * @this {CWidTasks}
 */
CWidTasks.prototype.exit= function()
{
	this.m_container.innerHTML = "";
}

/**
 * Loads the tasks for widget
 *
 * @public
 * @this {CWidTasks}
 * @param {string} showFor      Show the tasks for specific date range
 * @param {string} groupBy      Group the task by specificcategory
 */
CWidTasks.prototype.displayTasks = function(showFor, groupBy)
{
	if (typeof showFor == "undefined" && typeof groupBy == "undefined")
	{
        if(this.m_data)
        {
            var data = eval(this.m_data);
            showFor = data[0]
            groupBy = data[1];
        }
	}

    this.tasks = new Array();
    this.taskContainers = new Array();

    this.m_container.innerHTML = "";

	var tb = alib.dom.createElement("div", this.m_container);
	alib.dom.styleSet(tb, "margin-bottom", "10px");
	alib.dom.styleSet(tb, "text-align", "right");

	// Add task
	var ref = alib.dom.createElement("a", tb);
	ref.innerHTML = "add task";
	ref.href = "javascript:void(0);";
	ref.cls = this;
	ref.onclick = function() {
		var ol = loadObjectForm("task");
		alib.events.listen(ol, "close", function(evt) {
			evt.data.cls.loadTasks(); // refresh
		}, {cls:this.cls});
	}

	alib.dom.createElement("span", tb, " | ");

	// Add refresh
	var ref = alib.dom.createElement("a", tb);
	ref.innerHTML = "refresh";
	ref.href = "javascript:void(0);";
	ref.cls = this;
	ref.onclick = function() {
		this.cls.loadTasks();
	}


	// If we are in overview, then pre-create the containers so sorting is correct
	if (groupBy == "overview")
	{
		this.getContainer("Due Today");
		this.getContainer("Upcoming");
		this.getContainer("Later");
	}

	for(i in this.tasksObjects)
	{
		var currentTask = this.tasksObjects[i];
		var taskObj = new Object();
		taskObj.id = currentTask.id;

		var groupName = "";
		
		if(groupBy)
		{
			switch(groupBy)
			{
				case "start_date":
				case "deadline":
					var conIndex = currentTask.getValue(groupBy);
					var groupName = currentTask.getValue(groupBy);
					break;
				case "overview":
					var conIndex = this.getOverviewGroup(currentTask);
					var groupName = conIndex;
					break;
				default:
					var conIndex = currentTask.getValue(groupBy);
					var groupName = currentTask.getValueName(groupBy);
					break;
			}
		}
		
		// Get grouping contianer for this class
		var taskCon = this.getContainer(groupName);
		
		// Create checkbox
		var divCon = alib.dom.createElement("div", taskCon);
		alib.dom.styleSet(divCon, "float", "left");
		alib.dom.styleSet(divCon, "width", "20px");
		
		var taskCheckbox = alib.dom.setElementAttr(alib.dom.createElement("input", divCon), [["type", "checkbox"]]);
		taskCheckbox.checked = (currentTask.getValue("done") == 't') ? true : false;
		taskCheckbox.taskId = currentTask.id;
		taskCheckbox.cls = this;
		taskCheckbox.onchange = function()
		{
			this.cls.checkTask(this.taskId, (this.checked) ? 't' : 'f');
		}
		taskObj.checkbox = taskCheckbox;
		
		// Task Name
		var divCon = alib.dom.createElement("div", taskCon);
		alib.dom.styleSet(divCon, "float", "left");
		alib.dom.styleSet(divCon, "max-width", "80%");

		var lbl = "";
		if (currentTask.getValue("project"))
			lbl += currentTask.getValueName("project") + ": ";
		if (currentTask.getValue("customer_id"))
			lbl += currentTask.getValueName("customer_id") + ": ";

		lbl += currentTask.getValue("name");
		
		var lnk = alib.dom.createElement("a", divCon, lbl);
		lnk.href = "javascript:void(0);";
		lnk.cls = this;
		lnk.taskId = currentTask.id;
		lnk.onclick = function() {
			var ol = loadObjectForm("task", this.taskId);
			alib.events.listen(ol, "close", function(evt) {
				evt.data.cls.loadTasks(); // refresh
			}, {cls:this.cls});
		};
		taskObj.label = lnk;
		
		// Task delete icon
		var divCon = alib.dom.createElement("div", taskCon);
		alib.dom.styleSet(divCon, "float", "right");
		alib.dom.styleSet(divCon, "width", "20px");
		
		var taskDelete = alib.dom.createElement("img", divCon);
		taskDelete.src = "/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif";
		alib.dom.styleSet(taskDelete, "cursor", "pointer");
		taskDelete.cls = this;
		taskDelete.taskId = currentTask.id;
		taskDelete.taskName = currentTask.getValue("name");
		taskDelete.onclick = function()
		{
			this.cls.deleteTask(this.taskId, this.taskName);
		}
		taskObj.deleteIcon = taskDelete;
		
		var taskIndex = this.tasks.length;
		this.tasks[taskIndex] = taskObj;
		
		alib.dom.divClear(taskCon);
    }
}

/**
 * Add a named container for tasks
 *
 * @public
 * @this {CWidTasks} 
 * @param {string} name The unique name of the container
 */
CWidTasks.prototype.getContainer = function(name)
{
	var name = name || "None"; // If no name then use default container

	// If already exists then return container
	if(this.taskContainers[name])
		return this.taskContainers[name];

	// Create container
	var projectCon = alib.dom.createElement("div", this.m_container);
	alib.dom.styleSet(projectCon, "margin-bottom", "10px");
	this.taskContainers[name] = projectCon;
	
	// Icon and label
	var headerCon = alib.dom.createElement('div', projectCon);
	
	var groupLabel = alib.dom.setElementAttr(alib.dom.createElement("span", headerCon), [["innerHTML", name]]);
	alib.dom.styleSet(groupLabel, "font-weight", "bold");

	// Horizontal Row
	var hrCon = alib.dom.createElement('div', headerCon);
	alib.dom.styleSetClass(hrCon, "horizontalline");
	alib.dom.styleSet(hrCon, "margin-bottom", "5px");
	
	var taskCon = alib.dom.createElement("div", projectCon); // Create a child container for every task
	alib.dom.styleSetClass(taskCon, "group" + name);

	return projectCon;
}

/**
 * Determine what group this task belongs to
 *
 * Groups include: New Tasks, Due Today, Upcoming, Later
 *
 * @public
 * @this {CWidTasks} 
 * @param {Object} task The task we will be classifying
 * @return {string} The label of the group this task belongs to
 */
CWidTasks.prototype.getOverviewGroup = function(task)
{
	var today = new Date();

	// TODO: add new

	// Check for due today
	if (task.getValue("deadline"))
	{
		var dueDate = new Date(task.getValue("deadline"));

		if (dueDate <= today)
			return "Due Today";
	}

	// Check for upcoming
	if (task.getValue("deadline"))
	{
		var futureDate = new Date();
		futureDate.setDate(today.getDate() + 3); // Add three days
		var dueDate = new Date(task.getValue("deadline"));

		if (dueDate <= futureDate)
			return "Upcoming";
	}

	return "Later";
}

/**
 * Loads the tasks for widget
 *
 * @public
 * @this {CWidTasks}
 */
CWidTasks.prototype.loadTasks = function()
{
	this.tasksObjects = new Array();

	var list = new AntObjectList("task");
	list.cbData.cls = this;
	list.addCondition("and", "user_id", "is_equal", -3); // Current user
	list.addCondition("and", "done", "is_equal", "f"); // Current user

	list.onLoad = function()
	{
		for (var i = 0; i < this.getNumObjects(); i++)
		{
			this.cbData.cls.tasksObjects.push(this.getObject(i));
		}
        	
		this.cbData.cls.displayTasks();
	}

	list.getObjects();
}

/**
 * Delete a task from the table and the database - rpc
 *
 * @public
 * @this {CWidTasks}
 * @param {Integer} id      Task Id
 * @param {String} name     Task Name
 */
CWidTasks.prototype.deleteTask = function(id, name)
{
	if (confirm("Are you sure you want to remove " + name + "?"))
	{	
        ajax = new CAjax('json');
        ajax.cbData.cls = this;
        ajax.onload = function(ret)
        {
            this.cbData.cls.loadTasks();
        };
        ajax.exec("/controller/Project/checkTask",
                    [["type", "delete"], ["task_id", id]]);
	}
}

/**
 * Change the status of a task to complete
 *
 * @public
 * @this {CWidTasks}
 * @param {Integer} id      Task Id
 * @param {Boolean} status  Determines if task is deleted or not
 */
CWidTasks.prototype.checkTask = function(id, status)
{
    ajax = new CAjax('json');
    ajax.exec("/controller/Project/checkTask",
                [["type", "check"], ["task_id", id], ["task_res", status]]);
    
	for (var i = 0; i < this.tasks.length; i++)
    {
        if (this.tasks[i].id == id)
        {
            if (status=='t')
            {
                this.tasks[i].label.style.textDecoration = 'line-through';
                this.tasks[i].checkbox.checked = true;
            }
            else
            {
                this.tasks[i].label.style.textDecoration = '';
                this.tasks[i].checkbox.checked = false;
            }
            
        }
    }
}

/**
 * Saves the widget data
 *
 * @public
 * @this {CWidTasks} 
 */
CWidTasks.prototype.saveWidgetData = function()
{
    var args = new Array();
    args[args.length] = ['data', this.m_data];
    args[args.length] = ['dwid', this.m_id];
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.exec("/controller/Dashboard/saveData", args);
}

/****************************************************************************
*	
*	Class:		CWidFriends
*
*	Purpose:	Frinds/chat application
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidFriends()
{
	this.title = "Online Friends";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Dropdown menu will be set by parent

	this.m_menus = new Array();
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidFriends.prototype.main = function()
{
	var cls = this;
	Ant.setHinst(cls, "/home/widgets/friends");

	// Create Status Dropdown
	// -----------------------------------------------------------------------------
	var dm = new CDropdownMenu();
	this.m_menus.push(dm);
	dm.addEntry("Available", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ["Available"]);
	dm.addEntry("Busy", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ["Busy"]);
	dm.addEntry("Invisible", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ["Invisible"]);
	dm.addEntry("Be Right Back", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ["Be Right Back"]);
	dm.addEntry("Not at My Desk", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png", null, ["Not at My Desk"]);
	dm.addEntry("Custom", cls.setMyStatus, "/images/themes/" + Ant.theme.name+ "/icons/circle_blue.png");
	var dm_dv = dm.createButtonMenu("<span id='friends_statusid'>Loading...</span>");
	
	var pdiv = ALib.m_document.createElement("div");
	var right_div = ALib.m_document.createElement("div");
	if (Ant.m_browser.ie)
		right_div.style.styleFloat = 'right';
	else
		right_div.style.cssFloat = 'right';

	right_div.style.paddingRight = '3px';
	right_div.style.paddingTop = '3px';
	pdiv.appendChild(dm_dv);
	right_div.appendChild(pdiv);

	this.m_container.appendChild(right_div);
	
	// Build Friends Table
	// -----------------------------------------------------------------------------
	var pdiv = ALib.m_document.createElement("div");
	pdiv.style.clear = "both";
	
	var table = ALib.m_document.createElement("table");
	table.style.width = "100%";
	var tbody = ALib.m_document.createElement("tbody");
	this.m_friendsTbody = tbody;
	table.appendChild(tbody);
	pdiv.appendChild(table);
	this.m_container.appendChild(pdiv);

	// Create context menu
	// ----------------------------------------------------------------------------- 
	var wnd_params = "top=200,left=100,width=300,height=350,toolbar=no,menubar=no,scrollbars=yes,location=no,directories=no,status=no,resizable=yes";
	this.m_dm.addEntry('Manage Friends', function(wnd_params) { window.open('/chat/ant_messenger.awp', 'messenger', wnd_params); }, null, null, [wnd_params]);
	this.m_dm.addEntry('Change My Display Name', cls.changeMyName);

	// Continue execution
	// ----------------------------------------------------------------------------- 
	this.updateFriends();
	this.getMyStatus();
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidFriends.prototype.exit= function()
{
	if (this.m_timer)
		clearTimeout(this.m_timer);

	Ant.clearHinst('/home/widgets/friends');
		
	for (var i = 0; i < this.m_menus.length; i++)
	{
		this.m_menus[i].destroyMenu();
	}
	
	this.m_container.innerHTML = "";
}

CWidFriends.prototype.updateFriends = function()
{
	var ajax = new CAjax();
	ajax.m_tbody = this.m_friendsTbody;
	ajax.m_widcls = this;
	// Set callback once xml is loaded
	ajax.onload = function(root)
	{
		try
		{
			// Get all friends
			for (i = 0; i < root.getNumChildren(); i++)
			{
				var friend = root.getChildNode(i);

				if (friend.m_name == "friend")
				{
					var uid = friend.getChildNodeValByName("uid");
					var uname = unescape(friend.getChildNodeValByName("uname"));
					var online = friend.getChildNodeValByName("online");
					var status_text = unescape(friend.getChildNodeValByName("status_text"));
					var friend_id = friend.getChildNodeValByName("friend_id");

					// Get table
					var tbl_body = this.m_tbody;

					// Look for this user in a row
					var urow = ALib.m_document.getElementById("widget_friends_row_" + uid);
					if (urow)
					{
						if (online != 1)
							tbl_body.removeChild(urow);
						else
							ALib.m_document.getElementById("widget_frinds_uid_status" + uid).innerHTML = status_text;
					}
					else
					{
						if (online == 1)
						{
							var row = ALib.m_document.createElement("tr");
							row.id = "widget_friends_row_" + uid;
							row.valign='middle';
							tbl_body.appendChild(row);
							
							var td = ALib.m_document.createElement("td");
							td.style.width = "16px";
							td.style.cursor = "pointer";
							td.align = "center";
							//td.innerHTML = "<img src='/images/themes/"+Ant.m_theme+"/icons/inviteIcon.png' border='0' />";
							td.innerHTML = "<img src='/images/icons/comments_double_16.png' border='0' />";
							td.m_uid = uid;
							td.onclick=function() { InitiateChat(this.m_uid); }
							row.appendChild(td);
							
							var td = ALib.m_document.createElement("td");
							td.innerHTML = "<a href='javascript:void(0);' onclick=\"InitiateChat('" + uid + "')\">" + uname + "</a>"
										   + " (<span style='font-size:9px;' id='widget_frinds_uid_status"  + uid + "'>" + status_text + "</span>)";
							row.appendChild(td);
							
							/*
							var td = ALib.m_document.createElement("td");
							td.style.width = "35px";
							var btn = new CButton("<img src='images/icons/chat6.png' border='0'>", "topNav.InitiateChat('" + uid + "')", null, "b2");
							td.appendChild(btn.getButton());
							row.appendChild(td);
							*/
						}
					}
				}
			}
		}
		catch(e) {}

		this.m_widcls.m_timer = window.setTimeout("Ant.getHinst('/home/widgets/friends').updateFriends()", 30000);
	};
	ajax.exec("/chat/xml_update_list.awp");
}

CWidFriends.prototype.changeMyName = function()
{
	name = prompt('Please enter your display name (128 chars) max', '');
				
	if (name && name!='null' && name!='undefined')
	{
		var funct = function(ret)
		{
			alert('Your display name has been changed to: ' + name);
		}
		var xmlrpc = new CAjaxRpc("/contacts/xml_friends_status.awp", "setname", 
								  [["myname", name]], funct);
	}
}

CWidFriends.prototype.setMyStatus = function(stat)
{
	if (!stat)
	{
		stat = prompt('Please enter your status (128 chars) max', '');
	}
	
	if (stat)
	{
		var xmlrpc = new CAjaxRpc("/contacts/xml_friends_status.awp", "setstatus", 
								  [["mystatus", stat]], function(ret){ALib.m_document.getElementById('friends_statusid').innerHTML = unescape(ret);});
	}
}

CWidFriends.prototype.getMyStatus = function()
{
	var xmlrpc = new CAjaxRpc("/contacts/xml_friends_status.awp", "getmystatus", 
							  null, function(ret){ALib.m_document.getElementById('friends_statusid').innerHTML = ret;});
}

/****************************************************************************
*	
*	Class:		CWidSettings
*
*	Purpose:	Settings widget
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidSettings()
{
	this.title = "Settings";
	this.m_container = null;	// Set by calling process
	this.m_id = null;			// Set by calling process
	this.m_dashclass = null;	// Set my calling process
    this.appNavname = null;
    
	this.m_menus = new Array();
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidSettings.prototype.main = function()
{    
	//alib.dom.styleSetClass(this.m_container, "CWidContentTableBodyPadding");

	var table = ALib.m_document.createElement("table");
	var tbody = ALib.m_document.createElement("tbody");
	table.appendChild(tbody);
	
	// Theme Row
	// ------------------------------------------------------------------------------------------
	var row = ALib.m_document.createElement("tr");
	tbody.appendChild(row);
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "<img src='/images/icons/settings_16.png' border='0' />";
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "Current Theme:";
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	var dm = new CDropdownMenu();
	this.m_menus.push(dm);
	var ajax = new CAjax();
	ajax.m_dm = dm;
	ajax.m_td = td;
	// Set callback once xml is loaded
	ajax.onload = function(root)
	{
		// Get first node
		var num = root.getNumChildren();
		for (var j = 0; j < num; j++)
		{
			var theme = root.getChildNode(j);
			var title = unescape(theme.m_text);
			var id = theme.getAttribute("id");

			this.m_dm.addEntry(title, "location='main?change_theme=" + id + "'", 
							   "/images/icons/circle_blue.png")
		}

	};
	// Get xml file	
	ajax.exec("/widgets/xml_settings.php?function=get_themes");
	td.appendChild(dm.createButtonMenu(Ant.m_themeTitle));
	
	// ANTClient
	// ------------------------------------------------------------------------------------------
	var row = ALib.m_document.createElement("tr");
	tbody.appendChild(row);
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "<img src='/images/icons/windows_16.png' border='0' />";
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "Desktop Client";

	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.innerHTML = "<a href='http://www.aereus.com/downloads/antclient_setup.exe'>Download ANTClient</a>";

	// Add table to widget container
	// ------------------------------------------------------------------------------------------
	this.m_container.appendChild(table);
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidSettings.prototype.exit= function()
{
	for (var i = 0; i < this.m_menus.length; i++)
	{
		this.m_menus[i].destroyMenu();
	}

	this.m_container.innerHTML = "";
}


/****************************************************************************
*	
*	Class:		CWidBookmarks
*
*	Purpose:	Bookmarks widget
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidBookmarks()
{
	this.title = "Bookmarks";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Context menu set by calling process
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidBookmarks.prototype.main = function()
{
	this.loadBookmarks();
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidBookmarks.prototype.exit= function()
{
	this.m_container.innerHTML = "";
}

/*************************************************************************
*	Function:	addRootActions
*
*	Purpose:	Add actions to widget dropdown for new categories and bookmarks
**************************************************************************/
CWidBookmarks.prototype.addRootActions = function()
{
	// Create context menu
	// ----------------------------------------------------------------------------
	var cls = this;
	this.m_dm.addEntry('Add Category', function (clsref) { clsref.addCategory(null, clsref.m_tv); }, null, null, [cls]);


	var pfuct = function(dlg, dv, cid, tvnode) 
	{ 
		dlg.m_id = null; 
		dlg.name_txt.value = "";
		dlg.url_txt.value = "http://";
		dlg.m_cid = cid;
		dlg.m_tvnode = tvnode;

		dlg.customDialog(dv, 300, 300); 
	};
	this.m_dm.addEntry('Add Bookmark', pfuct, null, null, [this.dlgProperties, this.dlgProperties.m_dv, null, this.m_tv]);
}

/*************************************************************************
*	Function:	loadBookmarks
*
*	Purpose:	Get and display bookmarks
**************************************************************************/
CWidBookmarks.prototype.loadBookmarks = function()
{
	this.ajax = new CAjax();
	this.ajax.m_con = this.m_container;
	this.ajax.m_appcls = this;
	this.ajax.onload = function(root)
	{
		// Build Treeview
		this.m_appcls.m_tv = new CTreeView();
		
		this.m_appcls.loadCategory(root, this.m_appcls.m_tv);

		// Add table to div
		this.m_con.innerHTML = "";
		this.m_appcls.m_tv.print(this.m_con);

		// Create context menu now that the treeview is created
		this.m_appcls.addRootActions();
	};

	this.ajax.exec("/widgets/xml_bookmarks.php?function=get_bookmarks");
}

/*************************************************************************
*	Function:	loadCategory
*
*	Purpose:	Loop through categories
**************************************************************************/
CWidBookmarks.prototype.loadCategory= function(ajaxnode, tvnode)
{
	// Create properties dialog
	if (!this.dlgProperties)
		this.createPropertiesDialog();
	
	var num = ajaxnode.getNumChildren();
	for (var i = 0; i < num; i++)
	{
		var item = ajaxnode.getChildNode(i);
		
		// Check for categories
		if (item.m_name == "category")
		{
			var name = item.getAttribute('name');
			var id = item.getAttribute('id');
			var cnode = this.insertCategory(unescape(name), id, tvnode);
			
			// Check if category has children
			this.loadCategory(item, cnode);
		}


		// Check for bookmarks
		if (item.m_name == "bookmark")
		{
			var name = item.getChildNodeValByName("name");
			var url = item.getChildNodeValByName("url");
			var id = item.getChildNodeValByName("id");
			var cid = item.getChildNodeValByName("cid");

			this.insertBookmark(id, cid, unescape(url), unescape(name), tvnode);
		}
	}
}

/*************************************************************************
*	Function:	insertCategory
*
*	Purpose:	Insert a category into the tree view
**************************************************************************/
CWidBookmarks.prototype.insertCategory = function(name, id, tvnode)
{
	if (!name)
		name = "untitled";

	var cnode = tvnode.addNode(name, "/images/icons/closedfolderlink_small.gif");
	
	// Add ability to edit node title
	cnode.m_cid = id;
	cnode.onBodyEdit = function(val)
	{
		var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "rename_category", 
								  [["cid", this.m_cid], ["cname", val]]);
	}

	// Create right-click context menu
	var dm = cnode.createContextMenu();
	dm.addEntry("Delete Category", function(cls, id, tvnode) { cls.deleteCategory(tvnode, id); } , 
				"/images/icons/deleteTask.gif", null, [this, id, cnode]);
	dm.addEntry("Rename Category", function(cls, id, tvnode) { tvnode.editBody(); } , 
				null, null, [this, id, cnode]);
	dm.addEntry("New Subcategory", function(cls, id, tvnode) { cls.addCategory(id, tvnode); } , 
				null, null, [this, id, cnode]);

	var pfuct = function(dlg, dv, cid, tvnode) 
	{ 
		dlg.m_id = null; 
		dlg.name_txt.value = "";
		dlg.url_txt.value = "http://";
		dlg.m_cid = cid;
		dlg.m_tvnode = tvnode;

		dlg.customDialog(dv, 300, 300); 
	};
	dm.addEntry("Add Bookmark", pfuct, null, null, 
				[this.dlgProperties, this.dlgProperties.m_dv, id, cnode]);

	return cnode;
}

/*************************************************************************
*	Function:	insertBookmark
*
*	Purpose:	Insert a boodmark into the tree view
**************************************************************************/
CWidBookmarks.prototype.insertBookmark = function(id, cid, url, name, tvnode)
{
	if (!name)
		name = "untitled";

	var icon = "/images/icons/link_icon.gif";
	var tv_lnk = tvnode.addNode(unescape(name), icon);
	tv_lnk.m_url = url;
	tv_lnk.m_name = name;
	tv_lnk.m_id = id;
	tv_lnk.id = "fav" + id;

	var afunct = function(url) 
	{ 
		window.open(url); 
	};

	tv_lnk.setAction(afunct, [tv_lnk.m_url]);

	var dm = tv_lnk.createContextMenu();
	dm.addEntry("Delete Bookmark", function(cls, id, tvnode) { cls.deleteBookmark(tvnode, id); } , 
				"/images/themes/" + Ant.theme.name+ "/icons/deleteTask.gif", null, [this, id, tv_lnk]);

	var pfuct = function(dlg, dv, cid, lnknode, tvnode) 
	{ 
		dlg.m_id = lnknode.m_id; 
		dlg.m_cid = cid;
		dlg.m_tvnode = tvnode;
		dlg.name_txt.value = lnknode.m_name;
		dlg.url_txt.value = lnknode.m_url;
		dlg.customDialog(dv, 300, 300); 
	};
	dm.addEntry("Properties", pfuct, null, null, 
				[this.dlgProperties, this.dlgProperties.m_dv, cid, tv_lnk, tvnode]);
}

/*************************************************************************
*	Function:	createPropertiesDialog
*
*	Purpose:	Create and return properties dialog
**************************************************************************/
CWidBookmarks.prototype.createPropertiesDialog = function()
{
	this.dlgProperties = new CDialog("Edit Bookmark");
	this.dlgProperties.m_id = null;
	this.dlgProperties.m_cid = null;
	this.dlgProperties.m_tvnode = null;
	this.dlgProperties.m_dv = alib.dom.createElement("div");

	var lbl = alib.dom.createElement("div");
	lbl.innerHTML = "Name:";
	this.dlgProperties.m_dv.appendChild(lbl);
	this.dlgProperties.name_txt = alib.dom.createElement("input");
	alib.dom.styleSet(this.dlgProperties.name_txt, "width", "99%");
	this.dlgProperties.m_dv.appendChild(this.dlgProperties.name_txt);
	var lbl = alib.dom.createElement("div");
	lbl.innerHTML = "URL:";
	this.dlgProperties.m_dv.appendChild(lbl);
	this.dlgProperties.url_txt = alib.dom.createElement("input");
	alib.dom.styleSet(this.dlgProperties.url_txt, "width", "99%");
	this.dlgProperties.m_dv.appendChild(this.dlgProperties.url_txt);
	var okfunct = function(widcls, dlg)
	{
		widcls.editBookmark(dlg.name_txt.value, dlg.url_txt.value, dlg.m_cid, dlg.m_id, dlg.m_tvnode);
		dlg.hide();
	}

	// Create spacer div
	var dv = alib.dom.createElement("div", this.dlgProperties.m_dv);
	alib.dom.styleSet(dv, "text-align", "center");
	alib.dom.styleSet(dv, "padding-top", "5px");

	var btn = new CButton("OK", okfunct, [this, this.dlgProperties], "b2");
	btn.print(dv);

	var btn = new CButton("Cancel", function(dlg) { dlg.hide(); }, [this.dlgProperties], "b1");
	btn.print(dv);

	return this.dlgProperties;
}

/*************************************************************************
*	Function:	deleteBookmark
*
*	Purpose:	Delete a bookmark
**************************************************************************/
CWidBookmarks.prototype.deleteBookmark = function(tvnode, bid)
{
	ALib.Dlg.onConfirmOk = function(tvnode, bid)
	{
		var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "delete_bookmark", 
							  	  [["bid", bid]], 
								  function(ret, tvnode){ tvnode.remove();}, [tvnode]);
	}

	ALib.Dlg.confirmBox("Are you sure you want to delete this bookmark?", "Delete Bookmark", [tvnode, bid]);

	/*
	if (confirm("Are you sure you want to delete this bookmark?"))
	{
		var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "delete_bookmark", 
							  	  [["bid", bid]], 
								  function(ret, tvnode){ tvnode.remove();}, [tvnode]);
	}
	*/
}


/*************************************************************************
*	Function:	deleteCategory
*
*	Purpose:	Delete a category
**************************************************************************/
CWidBookmarks.prototype.deleteCategory = function(tvnode, cid)
{
	if (confirm("Are you sure you want to delete this category and all associated bookmarks?"))
	{
		var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "delete_category", 
							  	  [["catid", cid]], 
								  function(ret, tvnode){ tvnode.remove();}, [tvnode]);
	}
}

/*************************************************************************
*	Function:	editBookmark
*
*	Purpose:	Save changes to a bookmark
**************************************************************************/
CWidBookmarks.prototype.editBookmark = function(name, url, cid, bid, tvnode)
{
	var id = (bid) ? bid : "";

	var funct = function(ret, widcls, cid, url, name, tvnode)
	{ 
		var node = widcls.m_tv.getTvNodeById("fav" + ret);
		if (node == null)
		{
			widcls.insertBookmark(ret, cid, url, name, tvnode); 
		}
		else
		{
			node.m_url = url;
			node.m_name = name;
			node.setBody(name);
		}
	};
	var widcls = this;
	var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "edit_bookmark", 
							  [["bid", id], ["cid", cid], ["name", name], ["url", url]], 
							  funct, [widcls, cid, url, name, tvnode]);
}

/*************************************************************************
*	Function:	addCategory
*
*	Purpose:	Add a category
**************************************************************************/
CWidBookmarks.prototype.addCategory = function(pcid, tvnode)
{
	var parent_id = (pcid) ? pcid : "";

	var funct = function(cid, tvnode, widcls)
	{
		var node = widcls.insertCategory("New Category", cid, tvnode);

		node.editBody();
	}
	var widcls = this;
	var xmlrpc = new CAjaxRpc("/widgets/xml_bookmarks.php", "add_category", 
							  [["pcid", parent_id]], funct, [tvnode, widcls]);
}

/****************************************************************************
*	
*	Class:		CWidRssManager
*
*	Purpose:	Bookmarks widget
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidRssManager()
{
	this.title = "RSS Manager";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Context menu set by calling process
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidRssManager.prototype.main = function()
{
	/*
	this.m_dm.addEntry('Add RSS Feed', "document.getElementById('rss_favorites').ToggleEdit()", "/images/themes/"+Ant.m_theme+"/icons/taskIcon.gif");
	*/

	mdiv = ALib.m_document.createElement("div");
	mdiv.id = "wBookmarks";
	mdiv.innerHTML = '<IFRAME ALLOWTRANSPARENCY="true" SRC="/rss_favorites.awp" WIDTH="100%" HEIGHT="50" frameborder="0" '
					 	+ 'name="rss_favorites" id="rss_favorites"></IFRAME>';
	this.m_container.appendChild(mdiv);
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidRssManager.prototype.exit= function()
{
	this.m_container.innerHTML = "";
}

/****************************************************************************
*	
*	Class:		CWidWebsearch
*
*	Purpose:	Websearch application
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2006 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidWebsearch()
{
	this.title = "Web Search";
	this.m_container = null;	// Set by calling process

	this.m_menus = new Array();
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidWebsearch.prototype.main = function()
{
	var div = ALib.m_document.createElement("div");
	div.id='websearch_action';
	div.style.height = '0px';
	div.style.width = '0px';

	this.m_container.appendChild(div);

	webform = ALib.m_document.createElement('form');
	webform.name = 'webform';
	webform.id = 'webform_id';
	webform.method = 'get';
	webform.target = '_blank';
	webform.action = 'http://www.google.com/search';

	var table = ALib.m_document.createElement("table");
	table.style.width = '100%';
	var tbody = ALib.m_document.createElement("tbody");
	table.appendChild(tbody);

	var row = ALib.m_document.createElement("tr");
	tbody.appendChild(row);
	
	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.align = 'center';
	td.innerHTML = "<input maxLength='500' id='websearch_input' name='q' value='' class='websearchStyles'>";

	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.align = 'center';
	td.style.width = '63px';
	td.style.paddingLeft = '6px';
	var dm = new CDropdownMenu();
	this.m_menus.push(dm);
	dm.addEntry("Google", "HomeSearchSelect('google')", "/images/icons/google_fav.png");
	dm.addEntry("MSN", "HomeSearchSelect('msn')", "/images/icons/msn_fav.png");
	dm.addEntry("Dogpile", "HomeSearchSelect('dogpile')", "/images/icons/dog_fav.png");
	dm.addEntry("AlltheWeb", "HomeSearchSelect('alltheweb')", "/images/icons/allweb_fav.png");
	dm.addEntry("Yahoo!", "HomeSearchSelect('yahoo')", "/images/icons/yahoo_fav.png");
	td.appendChild(dm.createButtonMenu("Engine"));

	var td = ALib.m_document.createElement("td");
	row.appendChild(td);
	td.align = 'center';
	td.style.width = '50px';
	td.style.paddingLeft = '2px';
	var btn = new CButton("Search", "ALib.m_document.websearch.submit()");
	td.appendChild(btn.getButton());

	webform.appendChild(table);

	this.m_container.appendChild(webform);
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidWebsearch.prototype.exit= function()
{
	this.m_container.innerHTML = "";
}


/****************************************************************************
*    
*    Class:        CWidCalendar
*
*    Purpose:    Calendar widget
*
*    Author:        joe, sky.stebnicki@aereus.com
*                Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidCalendar()
{
	this.title = "Calendar";
    this.m_container = null;    // Set by calling process
    this.appNavname = null;

    this.m_menus = new Array();
}

/**
 * Entry point for application
 *
 * @public
 * @this {CWidCalendar}
 */
CWidCalendar.prototype.main = function()
{
    Ant.setHinst(this, "/widgets/calendar");
    this.m_container.innerHTML = "Loading, please wait...";
    var cls = this;
    
    // Set context menu
    var funct = function(cls, val) { cls.setSpan(val); };
    var sub2 = this.m_dm.addSubmenu("Show Events For");
    sub2.addEntry('1 Day', funct, null, "<div id='widg_home_cal_span_1'></div>", [cls, 1]);
    sub2.addEntry('2 Days', funct, null, "<div id='widg_home_cal_span_2'></div>", [cls, 2]);
    sub2.addEntry('3 Days', funct, null, "<div id='widg_home_cal_span_3'></div>", [cls, 3]);
    sub2.addEntry('4 Days', funct, null, "<div id='widg_home_cal_span_4'></div>", [cls, 4]);
    sub2.addEntry('5 Days', funct, null, "<div id='widg_home_cal_span_5'></div>", [cls, 5]);
    sub2.addEntry('6 Days', funct, null, "<div id='widg_home_cal_span_6'></div>", [cls, 6]);
    sub2.addEntry('1 Week', funct, null, "<div id='widg_home_cal_span_7'></div>", [cls, 7]);
    sub2.addEntry('2 Weeks', funct, null, "<div id='widg_home_cal_span_14'></div>", [cls, 14]);
    sub2.addEntry('3 Weeks', funct, null, "<div id='widg_home_cal_span_21'></div>", [cls, 21]);
    sub2.addEntry('4 Weeks', funct, null, "<div id='widg_home_cal_span_30'></div>", [cls, 30]);

    //this.getEvents();
    this.getSpan();
}

/**
 * Perform needed clean-up on app exit
 *
 * @public
 * @this {CWidCalendar}
 */
CWidCalendar.prototype.exit= function()
{
    Ant.clearHinst("/widgets/calendar");

    if (this.m_timer)
        clearTimeout(this.m_timer);

    for (var i = 0; i < this.m_menus.length; i++)
    {
        this.m_menus[i].destroyMenu();
    }

    this.m_container.innerHTML = "";
}

/**
 * Retrieve events from database and build table
 *
 * @public
 * @this {CWidCalendar}
 */
CWidCalendar.prototype.getEvents = function()
{
    var dateObj = new Date();
    var day = ('0' + dateObj.getDate()).slice(-2);
    var year = dateObj.getFullYear();
    var month = dateObj.getMonth() + 1;
    month = ('0' + month).slice(-2);
    
    var date_start = month + "/" + day + "/" + year;
    var date_end = date_start;
    
    if (this.m_timer)
        clearTimeout(this.m_timer);

    ajax = new CAjax('json');
    ajax.cbData.con = this.m_container;
    ajax.cbData.cls = this;
    ajax.cbData.currentDate = date_start;

    // Set callback once xml is loaded
    ajax.onload = function(ret)
    {
        this.cbData.con.innerHTML = "";
        
        if (ret.objects.length)
        {
            var eventCon = alib.dom.createElement("div", this.cbData.con);
            var lastDateStart = null;

            for(event in ret.objects)
            {
                var currentEvent = ret.objects[event];
                
                var eventId = currentEvent["id"];
                var recurId = currentEvent["recur_id"];
                var name = currentEvent["name"];
                var eventStart = currentEvent["ts_start"];
                var eventEnd = currentEvent["ts_end"];
                var allDay = currentEvent["all_day"];
                var color = currentEvent["color"];
                var calendarId = currentEvent["calendar"]["key"];
                
                var dateStart = eventStart.split(" ", 1).toString();
                var dateEnd = eventEnd.split(" ", 1).toString();
                
                var timeStart = this.cbData.cls.getEventTime(eventStart);
                var timeEnd = this.cbData.cls.getEventTime(eventEnd);
                
                if(lastDateStart !== dateStart)                
                {
                    var headerDate = new Date(dateStart);
                    var headerCon = alib.dom.createElement("div", eventCon);
                    
                    if(lastDateStart)
                        alib.dom.styleSet(headerCon, "margin-top", "10px");
                    
                    if(this.currentDate == dateStart)
                        headerDate = "Today";
                    else
                    {
                        headerDate = headerDate.toString("dddd, MMMM ,yyyy");
                        headerDate = headerDate.split(" ", 4).toString();
                        
                        var headerArr = headerDate.split(",");
                        headerDate = headerArr[0] + " " + headerArr[1] + " " + headerArr[2] + ", " + headerArr[3];                        
                    }
                    
                    // Event Header
                    var eventHeader = alib.dom.setElementAttr(alib.dom.createElement("div", headerCon), [["innerHTML", headerDate]]);
                    alib.dom.styleSet(eventHeader, "font-weight", "bold");

                    // Display horizontal line
                    var hrCon = alib.dom.createElement('div', headerCon);
                    hrCon.innerHTML = "&nbsp;";
                    alib.dom.styleSetClass(hrCon, "horizontalline");
                    alib.dom.styleSet(hrCon, "float", "left");
                    alib.dom.styleSet(hrCon, "min-width", "110px");
                    alib.dom.styleSet(hrCon, "margin-right", "10px");
                    
                    var hrCon = alib.dom.createElement('div', headerCon);
                    hrCon.innerHTML = "&nbsp;";
                    alib.dom.styleSetClass(hrCon, "horizontalline");
                    alib.dom.styleSet(hrCon, "overflow", "hidden");
                    
                    alib.dom.divClear(headerCon);
                }
                
                var detailsCon = alib.dom.createElement("div", eventCon);
                var timeCon = alib.dom.createElement("div", detailsCon);
                var nameCon = alib.dom.createElement("div", detailsCon);
                
                alib.dom.styleSet(detailsCon, "cursor", "pointer");
                alib.dom.styleSet(detailsCon, "margin-top", "3px");
                alib.dom.styleSet(timeCon, "float", "left");
                alib.dom.styleSet(timeCon, "min-width", "120px");
                alib.dom.styleSet(nameCon, "overflow", "hidden");
                
                // Event Time
                if (allDay == "t") // All Day event container
                    timeCon.innerHTML = "[All Day Event]"; 
                else
                    timeCon.innerHTML = timeStart + " - " + timeEnd;
                
                // Add event name
                nameCon.innerHTML = name;
                
                // Set onclick event
                detailsCon.eventId = eventId;
				detailsCon.cls = this.cbData.cls;
                detailsCon.onclick = function () 
                {   
					var ol = loadObjectForm("calendar_event", this.eventId);
					alib.events.listen(ol, "close", function(evt) {
						evt.data.cls.getEvents(); // refresh
					}, {cls:this.cls});
                };
                
                // Assign the last date start to check for new header
                lastDateStart = dateStart;
                
                alib.dom.divClear(detailsCon);
            }
        }
    };
    
    var args = new Array();
    
    // Set range
    var ccount = 1;
    args[args.length] = ["conditions[]", ccount];
    args[args.length] = ["condition_blogic_" + ccount, "and"];
    args[args.length] = ["condition_fieldname_" + ccount, "ts_start"];
    args[args.length] = ["condition_operator_" + ccount, "is_greater_or_equal"];
    args[args.length] = ["condition_condvalue_" + ccount, date_start];
    
    if (this.date_end)
        date_end = this.date_end;
        
    if(date_end < date_start)
        date_end = date_start;
    
    date_end = date_end + " 11:59:59 pm";    
    
    ccount = 2;
    args[args.length] = ["conditions[]", ccount];
    args[args.length] = ["condition_blogic_" + ccount, "and"];
    args[args.length] = ["condition_fieldname_" + ccount, "ts_end"];
    args[args.length] = ["condition_operator_" + ccount, "is_less_or_equal"];
    args[args.length] = ["condition_condvalue_" + ccount, date_end];
    
    // Add sort arguments    
    args[args.length] = ["order_by[]", "ts_start asc"];    
    args[args.length] = ["obj_type", "calendar_event"];
    ajax.exec("/controller/Calendar/getEvents", args);
}

/**
 * Put a check next to the appropriate option in the drop-down
 *
 * @public
 * @this {CWidCalendar}
 * @param {String} show_for     Displays the options for show span
 */
CWidCalendar.prototype.setShowSpan= function(show_for)
{
    if (show_for)
    {
        var id_arr = new Array(["1", "widg_home_cal_span_1"], ["2", "widg_home_cal_span_2"], 
                               ["3", "widg_home_cal_span_3"], ["4", "widg_home_cal_span_4"],
                               ["5", "widg_home_cal_span_5"], ["6", "widg_home_cal_span_6"],
                               ["7", "widg_home_cal_span_7"], ["14", "widg_home_cal_span_14"],
                               ["21", "widg_home_cal_span_21"], ["30", "widg_home_cal_span_30"]);
        for (var i = 0; i < id_arr.length; i++)
        {
            if (id_arr[i][0] == show_for)
                ALib.m_document.getElementById(id_arr[i][1]).innerHTML = "<img src='/images/themes/"+ Ant.theme.name+"/icons/circle_blue.png' />";
            else
                ALib.m_document.getElementById(id_arr[i][1]).innerHTML = '';
        }
    }
}

/**
 * Set number of days events will be shown for
 *
 * @public
 * @this {CWidCalendar}
 * @param {Int} numdays     Determine what calendar events to show
 */
CWidCalendar.prototype.setSpan= function(numdays)
{
    var args = new Array();
        
    args[0] = ['val', numdays];
    args[1] = ['appNavname', this.appNavname];

    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret)
            this.cls.date_end = unescape(ret);

        this.cls.m_container.innerHTML = "Loading, please wait...";
        this.cls.getEvents();
    };
    ajax.exec("/controller/Application/setCalTimespan", args);
    
    this.numdays = numdays;
    this.setShowSpan(numdays);
}

/**
 * Get number of days events will be shown for
 *
 * @public
 * @this {CWidCalendar}
 */
CWidCalendar.prototype.getSpan= function()
{
    ajax = new CAjax('json');
    ajax.cls = this;
    ajax.onload = function(ret)
    {
        if (ret)
            this.cls.date_end = unescape(ret);
        
        this.cls.getEvents();
    };
    ajax.exec("/controller/Application/getCalTimespan", 
                [["appNavname", this.appNavname]]);
}

/**
 * Gets the event time
 *
 * @public
 * @this {CWidCalendar}
 * @param {Timestamp} eventTS       Event Time
 */
CWidCalendar.prototype.getEventTime = function(eventTS)
{
    var eventTimeParts = eventTS.split(" ");
    var result = "";
    
    for(parts in eventTimeParts)
    {
        if(parts > 0 && parts < (eventTimeParts.length-1))
        {
            result += eventTimeParts[parts] + " ";
        }
    }
    
    return result;
}

/**
 * Refresh the widget
 *
 * @public
 * @this {CWidCalendar}
 */
CWidCalendar.prototype.refresh = function()
{
    this.getEvents();
}

/****************************************************************************
*	
*	Class:		CWidRss
*
*	Purpose:	Rss Widget will probably be used more than once
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidRss()
{
	this.title = "RSS Reader";
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Context menu set by calling process
	this.m_data = null;			// If data is set, this will be passed by parent process
    this.appNavname = null;
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidRss.prototype.main = function()
{
	alib.dom.styleSet(this.m_container, "padding", "3px");

	if (!this.m_data)
	{
		var dv = ALib.m_document.createElement("div");
		dv.m_widcls = this;
		dv.onclick = function() { this.m_widcls.setData(); };
		alib.dom.styleSet(dv, "cursor", "pointer");
		dv.innerHTML = "Click here to set RSS url";
		this.m_container.appendChild(dv);
	}
	else
		this.loadRss();
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidRss.prototype.exit= function()
{
	this.m_container.innerHTML = "";
}

/*************************************************************************
*	Function:	loadRss
*
*	Purpose:	Load contents of RSS file
**************************************************************************/
CWidRss.prototype.loadRss = function()
{
	var ajax = new CAjax();
	ajax.m_widcls = this;
	// Set callback once xml is loaded
	ajax.onload = function(root)
	{
		this.m_widcls.m_container.innerHTML = "";

		var num = root.getNumChildren();
		for (var i = 0; i < num; i++)
		{
			var channel = root.getChildNode(i);
			var channel_title = "";

			var tbl = ALib.m_document.createElement("table");
			var tbl_body = ALib.m_document.createElement("tbody");
			tbl.appendChild(tbl_body);

			for (var j = 0; j < channel.getNumChildren(); j++)
			{
				var node = channel.getChildNode(j);

				if ("title" == node.m_name)
					channel_title = unescape(node.m_text);

				if ("item" == node.m_name)
				{
					var title = node.getChildNodeValByName("title");
					var link = node.getChildNodeValByName("link");
					var desc = node.getChildNodeValByName("description");

					// Add row for icon and title
					var tr = ALib.m_document.createElement("tr");
					tbl_body.appendChild(tr);

					var td = ALib.m_document.createElement("td");
					tr.appendChild(td);
					td.innerHTML = "<img src='/images/icons/rss_link2.gif' border='0'>";

					var td = ALib.m_document.createElement("td");
					tr.appendChild(td);
					td.innerHTML = "<a target='_blank' href='"+unescape(link)+"'>"+unescape(title)+"</a>";

					// Add row for description
					var tr = ALib.m_document.createElement("tr");
					tbl_body.appendChild(tr);

					var td = ALib.m_document.createElement("td");
					tr.appendChild(td);

					var td = ALib.m_document.createElement("td");
					tr.appendChild(td);
					td.innerHTML = unescape(desc);
				}
			}

			if (channel_title)
				this.m_widcls.m_cct.setTitle(channel_title);
			this.m_widcls.m_container.appendChild(tbl);
		}
	};
	// Get xml file	
	ajax.exec("/widgets/xml_rss_reader.php?url=" + escape(this.m_data) + "&id=" + this.m_id);
}

/*************************************************************************
*	Function:	setData
*
*	Purpose:	Change URL(data) for this widget
**************************************************************************/
CWidRss.prototype.setData = function()
{
	var url = (this.m_data) ? this.m_data : 'http://examplefeed.com/path/to/rss.xml';
	var data = prompt('Please enter an rss url', url);
	this.m_container.innerHTML = "Setting url, please wait";
	var cls = this;
    
    var args = new Array();
        
    args[0] = ['id', cls.m_id];
    args[1] = ['data', data];
    args[2] = ['appNavname', cls.appNavname];
                                
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.onload = function(ret)
    {
        this.cbData.cls.m_data = unescape(ret);
        this.cbData.cls.loadRss();
    };
    ajax.exec("/controller/Application/setRssData", args);
}

/****************************************************************************
*	
*	Class:		CWidReport
*
*	Purpose:	Rss Widget will probably be used more than once
*
*	Author:		joe, sky.stebnicki@aereus.com
*				Copyright (c) 2007 Aereus Corporation. All rights reserved.
*
*****************************************************************************/
function CWidReport()
{
	this.m_container = null;	// Set by calling process
	this.m_dm = null;			// Context menu set by calling process
	this.m_data = null;			// If data is set, this will be passed by parent process
	this.m_report = null;
	this.m_show_graph= true;
	this.m_show_summary= true;
    this.appNavname = null;
    this.widgetWidth = null;
    this.m_reportid = null;
    this.dashboardCls = null;
	this.title = "Report";
}

/*************************************************************************
*	Function:	main
*
*	Purpose:	Entry point for application
**************************************************************************/
CWidReport.prototype.main = function()
{
	// Get and parse report data
	if (this.m_data)
	{
		var args = eval(this.m_data); // [report_id, show_graph, show_summary]
		this.m_reportid = args[0];
		this.m_show_graph = (args[1] == 'f')?false:true;
		this.m_show_summary = (args[2] == 'f')?false:true;
	}

	// Add view options
	this.m_dm.addEntry('Select Report', 
                        function(cls) 
                        { 
                            cls.setReport();
                        }, null, null, [this]);
	this.m_dm.addEntry('Toggle Chart Display', 
                        function(cls) 
                        { 
                            cls.m_report.toggleDisplay(true);	
                        }, null, null, [this]);
	this.m_dm.addEntry('Toggle Table Display', 
                        function(cls) 
                        {
                            cls.m_report.toggleDisplay(false);  
                        }, null, null, [this]);
                        
    // Get the last child so we can edit the title
    this.toggleTitleCon = this.m_dm.m_tbody.lastChild;
                        
	this.m_dm.addEntry('View Full Report', 
						function(cls) 
                        { 
                            if (cls.m_report) 
                                loadObjectForm("report", cls.m_reportid); 
                            else 
                                alert("Please load a report first");  
                        }, null, null, [this]);
    
	if (!this.m_data)
	{
		var dv = ALib.m_document.createElement("div");
		dv.m_widcls = this;
		dv.onclick = function() 
        { 
            this.m_widcls.setReport(); 
        };
		alib.dom.styleSet(dv, "cursor", "pointer");
		dv.innerHTML = "Click here to select report";
		this.m_container.appendChild(dv);
	}
	else
	{
		this.loadReport();
	}
}

/*************************************************************************
*	Function:	exit
*
*	Purpose:	Perform needed clean-up on app exit
**************************************************************************/
CWidReport.prototype.exit = function()
{
	this.m_container.innerHTML = "";
}

/*************************************************************************
*	Function:	loadReport
*
*	Purpose:	Load report object
**************************************************************************/
CWidReport.prototype.loadReport = function()
{    
    this.m_container.innerHTML = "";
    
    var objType = "report";
    var chartWidth;
    
    if(this.m_container.offsetWidth)
        chartWidth = this.m_container.offsetWidth;
    else
        chartWidth = this.widgetWidth;        
    
    // Initialize Report Instance    
    this.m_report = new Report(this.m_reportid);        
    this.m_report.cls = this;
    this.m_report.chartWidth = chartWidth - 10;
    
    // over-ride the onload function
    this.m_report.onload = function(ret)
    {        
        var toggleTitle = this.cls.toggleTitleCon.childNodes[1];
        
        if(ret.reportData.table_type)
            toggleTitle.innerHTML = "Toggle Table Display (" + ret.reportData.table_type.capitalize() + ")";
        
        this.print(this.cls.m_container);
    }
    
    this.m_report.loadReport();
}

/*************************************************************************
*	Function:	setReport
*
*	Purpose:	Set the report to pull from
**************************************************************************/
CWidReport.prototype.setReport = function()
{
	var ob = new AntObjectBrowser("report");
	ob.cbData.cls = this;
	ob.onSelect = function(rid) 
	{ 
		this.cbData.cls.m_reportid = rid; 
		this.cbData.cls.loadReport(); 
        
        if(this.cbData.cls.dashboardCls)
        {
            var data = "["+this.cbData.cls.m_reportid+"]";            
            this.cbData.cls.dashboardCls.saveData(this.cbData.cls.m_id, data);
        }            
        else
		    this.cbData.cls.saveSettings(); 
	}
	ob.displaySelect();
}

/*************************************************************************
*	Function:	saveSettings
*
*	Purpose:	Set the report to pull from
**************************************************************************/
CWidReport.prototype.saveSettings = function()
{
        
	var data = "["+this.m_reportid+", '"+((this.m_show_graph)?'t':'f')+"', '"+((this.m_show_summary)?'t':'f')+"']";

    var args = new Array();
    args[0] = ['id', this.m_id];
    args[1] = ['data', data];
    args[2] = ['appNavname', this.appNavname];
    
    ajax = new CAjax('json');    
    ajax.exec("/controller/Application/widgetSetData", args);
}

/****************************************************************************
*    
*    Class:        CWidgetBrowser
*
*    Purpose:    Browser to select widgets for dashboard
*
*    Author:        Marl Tumulak, marl.tumulak@aereus.com
*                Copyright (c) 2011 Aereus Corporation. All rights reserved.
*
*    Deps:        Alib
*
*****************************************************************************/
function CWidgetBrowser()
{
	this.title = "Widget Browser";
    this.title = "Add Widget";        // Customize the title
    this.appNavname = null;    
}

/*************************************************************************
*    Function:    showDialog
*
*    Purpose:    Display a widget browser
**************************************************************************/
CWidgetBrowser.prototype.showDialog = function()
{    

    var dlg = new CDialog(this.title);
    this.m_dlg = dlg;
    dlg.f_close = true;

    // Search Bar
    var dv = alib.dom.createElement("div");
    var lbl = alib.dom.createElement("span", dv);
    alib.dom.styleSet(lbl, "margin-left", "10px");
    lbl.innerHTML = "Select a widget...";    

    dlg.customDialog(dv, 600, 410);

    // Results
    this.m_browsedv = alib.dom.createElement("div", dv);
    alib.dom.styleSet(this.m_browsedv, "height", "350px");
    alib.dom.styleSet(this.m_browsedv, "border", "1px solid");    
    alib.dom.styleSet(this.m_browsedv, "overflow", "auto");
    alib.dom.styleSet(this.m_browsedv, "margin", "10px");    

    // Load widgets
    this.loadWidgets();
}

/*************************************************************************
*    Function:    select
*
*    Purpose:    Internal function to select a widgets then fire pubic onselect
**************************************************************************/
CWidgetBrowser.prototype.select = function(wid)
{    
    this.m_dlg.hide();
    this.onSelect(wid);
}


/*************************************************************************
*    Function:    onSelect
*
*    Purpose:    This function should be over-ridden
**************************************************************************/
CWidgetBrowser.prototype.onSelect = function()
{    
}

/*************************************************************************
*    Function:    onCancel
*
*    Purpose:    This function should be over-rideen
**************************************************************************/
CWidgetBrowser.prototype.onCancel = function()
{
}

/*************************************************************************
*    Function:    loadwidgets
*
*    Purpose:    Load widgets
**************************************************************************/
CWidgetBrowser.prototype.loadWidgets = function()
{    
    var dv = alib.dom.createElement("div");
    this.m_ajax = new CAjax();    
    this.m_ajax.m_browseclass = this;
    this.m_browsedv.innerHTML = "<div class='loading'></div>";
    this.m_ajax.onload = function(root)
    {                
        var active = "";
        this.m_browseclass.m_browsedv.innerHTML = "";

        var dvWidgetList = alib.dom.createElement("div", this.m_browseclass.m_browsedv);
        var dvWidgetDesc = alib.dom.createElement("div", this.m_browseclass.m_browsedv);
        var dvClear = alib.dom.createElement("div", this.m_browseclass.m_browsedv);
        var dvWidgetNameCont = alib.dom.createElement("div", dvWidgetDesc);
        var dvWidgetDescCont = alib.dom.createElement("div", dvWidgetDesc);
        var dvWidgetBtnCont = alib.dom.createElement("div", dvWidgetDesc);

        alib.dom.styleSet(dvWidgetNameCont, "font-weight", "bold");
        alib.dom.styleSet(dvWidgetNameCont, "font-size", "20px");

        alib.dom.styleSet(dvWidgetDescCont, "margin-top", "15px");
        alib.dom.styleSet(dvWidgetDescCont, "margin-bottom", "15px");
        alib.dom.styleSet(dvWidgetDescCont, "height", "225px");
        alib.dom.styleSet(dvWidgetDescCont, "overflow", "auto");
        alib.dom.styleSet(dvWidgetDescCont, "width", "300");

        alib.dom.styleSet(dvWidgetList, "float", "left");
        alib.dom.styleSet(dvWidgetList, "width", "200");
        alib.dom.styleSet(dvWidgetList, "margin", "20px");

        alib.dom.styleSet(dvWidgetDesc, "float", "left");
        alib.dom.styleSet(dvWidgetDesc, "width", "320px");
        alib.dom.styleSet(dvWidgetDesc, "margin-top", "20px");

        alib.dom.styleSet(dvClear, "clear", "both");

        var widgetList = alib.dom.createElement("select", dvWidgetList);
        widgetList.setAttribute("size","20");
        alib.dom.styleSet(widgetList, "height", "300px");
        alib.dom.styleSet(widgetList, "width", "200px");        

        var num = root.getNumChildren();        
        for (var j = 0; j < num; j++)
        {            
            var wid = root.getChildNode(j);
            var name = unescape(wid.m_text);
            var id = wid.getAttribute("id");
            var className = wid.getAttribute("class_name");
            var description = wid.getAttribute("description");

            var elOptNew = alib.dom.createElement("option")
            elOptNew.text = name;
            elOptNew.value = id;
            elOptNew.setAttribute("description", description);

            elOptNew.onclick = function()
            {
                dvWidgetNameCont.innerHTML = unescape(this.text);
                dvWidgetDescCont.innerHTML = unescape(this.getAttribute("description"));
            }

            try 
            {
                widgetList.add(elOptNew, null); // standard compliant; doesn't work in IE
            }
            catch(ex) 
            {
                widgetList.add(elOptNew); // IE only
            }

            if(j==0)
            {
                dvWidgetNameCont.innerHTML = unescape(name);
                dvWidgetDescCont.innerHTML = unescape(description);                
            }
        }        
        widgetList.selectedIndex=0;
        var btn = new CButton("Add This Widget", 
                                function(cls)
                                {
                                    cls.select(widgetList.options[widgetList.selectedIndex].value);
                                }, 
                                [this.m_browseclass]);        
        btn.print(dvWidgetBtnCont);        
    };

    var url = "/widgets/xml_settings.php?function=get_widgets";    
    this.m_ajax.exec(url);
}

/****************************************************************************
*    
*    Class:        CWidWebpage
*
*    Purpose:    Webpage Widget
*
*    Author:        Marl Tumulak, marl.tumulak@aereus.com
*                Copyright (c) 2012 Aereus Corporation. All rights reserved.
*
*****************************************************************************/

function CWidWebpage()
{
    this.title = "Web Page";
    this.m_container = null;    // Set by calling process
    this.m_widTitle = null;          // Get the Contect Table Instance
    this.m_dm = null;           // Dropdown menu will be set by parent
    this.m_data = null;         // If data is set, this will be passed by parent process
    this.m_id = null;           // The id of the dashboard widget
    this.appNavname = null;     // The name of the current application
    this.dashboardCls = null;   // Holds the class for dashboard application
    this.m_webpageId = null;    
    this.widgetWidth = null;
}

/**
 * Entry point for application
 *
 * @public
 * @this {CWidWebpage} 
 */
CWidWebpage.prototype.main = function()
{
    if(this.m_container.offsetWidth==0)
        return;
    
    // Dropdown Entries
    this.m_dm.addEntry('Set Webpage Url', 
                        function(cls) 
                        { 
                            cls.setWidgetData();
                        }, null, null, [this]);

    this.m_container.innerHTML = "";
    this.loadWidgetData();
}

/**
 * Perform needed clean-up on app exit
 *
 * @public
 * @this {CWidWebpage} 
 */
CWidWebpage.prototype.exit= function()
{
    this.m_container.innerHTML = "";    
}

/**
 * Sets the widget data
 *
 * @public
 * @this {CWidWebpage} 
 */
CWidWebpage.prototype.setWidgetData = function()
{
    var dlg = new CDialog("Webpage Details");
    dlg.f_close = true;
        
    var divModal = alib.dom.createElement("div");
    
    var tableForm = alib.dom.createElement("table", divModal);
    var tBody = alib.dom.createElement("tbody", tableForm);
    
    var title = "";
    var url = "";
    
    if(this.m_data)
    {
        var data = eval(this.m_data);
        title = data[0];
        url = data[1];
    }
    
    var urlForm = new Object();
    urlForm.title = alib.dom.setElementAttr(alib.dom.createElement("input"), [["type", "text"], ["label", "Title: "], ["value", title], ["width", "200px"]]);
    urlForm.url = alib.dom.setElementAttr(alib.dom.createElement("input"), [["type", "text"], ["label", "Url: "], ["value", url], ["width", "400"]]);    
    buildFormInput(urlForm, tBody);
    
    // Buttons
    var divButton = alib.dom.createElement("div", divModal);
    alib.dom.styleSet(divButton, "text-align", "right");
    var btn = new CButton("Save and Close",
                        function(dlg, cls, urlForm)
                        {
                            cls.saveWidgetData(urlForm);
                            dlg.hide();
                        }, 
                        [dlg, this, urlForm], "b1");
    btn.print(divButton);
    
    var btn = new CButton("Cancel",
                        function(dlg) 
                        {  
                            dlg.hide(); 
                        }, 
                        [dlg], "b1");
    btn.print(divButton);

    dlg.customDialog(divModal, 450);
}

/**
 * Saves the widget data
 *
 * @public
 * @this {CWidWebpage} 
 */
CWidWebpage.prototype.saveWidgetData = function(urlForm)
{
    var url = urlForm.url.value;
    var title = urlForm.title.value;
    
    ajax = new CAjax('json');
    ajax.cbData.cls = this;
    ajax.cbData.title = title;
    ajax.cbData.dlg = showDialog("Saving, please wait...");
    ajax.onload = function(ret)
    {
        this.cbData.cls.loadWidgetData();
        
        // Set the Webpage Widget Title
        if(this.cbData.title)
            this.cbData.cls.m_widTitle.innerHTML = "Web Page - " + this.cbData.title;
        
        this.cbData.dlg.hide();
        ALib.statusShowAlert("Webpage Url successfully saved!", 3000, "bottom", "right");
    };
    
    this.m_data = "['" + title + "', '" + url + "']";
    
    var args = new Array();
    args[args.length] = ['data', this.m_data];
    
    if(this.dashboardCls)
    {
        var controller = "/controller/Dashboard/saveData";
        args[args.length] = ['dwid', this.m_id];
    }
    else
    {
        var controller = "/controller/Application/widgetSetData";
        args[args.length] = ['id', this.m_id];
        args[args.length] = ['appNavname', this.appNavname];
    }
    
    ajax.exec(controller, args);
}

/**
 * Loads the url of the webpage widget
 *
 * @public
 * @this {CWidWebpage} 
 */
CWidWebpage.prototype.loadWidgetData = function()
{    
    if(!this.m_data)
    {
        var divClick = alib.dom.setElementAttr(alib.dom.createElement("div", this.m_container), [["innerHTML", "Click to enter a page location"]]);
        alib.dom.styleSet(divClick, "width", "100%");
        alib.dom.styleSet(divClick, "cursor", "pointer");
        
        divClick.cls = this;
        divClick.onclick = function()
        {
            this.cls.setWidgetData();
        }
        
        return;
    }
    
    var data = eval(this.m_data);
    title = data[0];
    url = data[1];
    
	this.m_widTitle.innerHTML = "Web Page - " + title;
    
    if(!url)
        return;
    
    var widgetWidth = this.m_container.offsetWidth - 15;
    var cleanUrl = url.replace(/<%width%>/g, widgetWidth);
    
    this.m_container.innerHTML = "<div class='loading'></div>";
    ajax = new CAjax("json");
    ajax.cbData.cls = this;
    ajax.cbData.con = this.m_container;
    ajax.cbData.widgetWidth = widgetWidth;
    ajax.cbData.cleanUrl = cleanUrl;
    ajax.onload = function(ret)
    {
        this.cbData.con.innerHTML = "";
        var webpageCon = alib.dom.createElement("div", this.cbData.con);
        alib.dom.styleSet(webpageCon, "width", this.cbData.widgetWidth);
        alib.dom.styleSet(webpageCon, "overflow", "auto");
        alib.dom.styleSet(webpageCon, "maxHeight", "700px");
        
        switch(ret.type)
        {
            case "image":
                alib.dom.setElementAttr(alib.dom.createElement("img", webpageCon), [["src", this.cbData.cleanUrl]]);
                break;
            default:
                var pageData = ret.data;
                
                if(!pageData)
                    pageData = "Webpage Url was not able to retrieve any data.";
                    
                alib.dom.setElementAttr(alib.dom.createElement("div", webpageCon), [["innerHTML", pageData]]);
                break;
        }
    };
    
    var args = new Array();
    args[args.length] = ['url', cleanUrl];
    ajax.exec("/controller/Application/loadWidgetUrl", args);
}

/**
 * @fileoverview Activity dashboard widget
 *
 * @author	joe, sky.stebnicki@aereus.com
 * @copyright (c) 2012 Aereus Corporation. All rights reserved.
 */

/**
 * Class constructor
 */
function CWidActivity()
{
	this.title = "News & Updates";
    this.m_container = null;    // Set by calling process
    this.m_cct = null;          // Get the Contect Table Instance
    this.m_dm = null;           // Dropdown menu will be set by parent
    this.m_data = null;         // If data is set, this will be passed by parent process
    this.m_id = null;           // The id of the dashboard widget
    this.appNavname = null;     // The name of the current application
    this.dashboardCls = null;   // Holds the class for dashboard application
    this.m_webpageId = null;    
    this.widgetWidth = null;
	this.antView = null;		// If set this is the current antView rendered

	/**
	 * Activity browser references
	 *
	 * @var {AntObjectBrowser}
	 */
	this.activityBrowser = null;
}

/**
 * Entry point for application
 *
 * @public
 * @this {CWidActivity} 
 */
CWidActivity.prototype.main = function()
{
	this.m_container.innerHTML = "";

	// List status
	var statusCon = alib.dom.createElement("div", this.m_container);
	alib.dom.styleSet(statusCon, "margin-bottom", "10px");
	this.buildStatusUpdateForm(statusCon);

	// Display Activity Log
	var objb = new AntObjectBrowser("status_update");
	//if (this.antView)
		//objb.setAntView(this.antView);
	//objb.addCondition('and', 'level', 'is_greater_or_equal', "4"); // high level overview
	//objb.addCondition('and', 'type_id', 'is_not_equal', "comment");
	objb.addCondition('and', 'associations', 'is_equal', "user:-3");
	objb.addCondition('or', 'owner_id.team_id', 'is_equal', "-3");
	//objb.setFilter('user.team_id', "-3");
	
	var activityCon = alib.dom.createElement("div", this.m_container);
	objb.printInline(activityCon, true);
	this.activityBrowser = objb;
	if (this.antView)
		objb.setAntView(this.antView);
}

/**
 * Perform needed clean-up on app exit
 *
 * @public
 * @this {CWidActivity} 
 */
CWidActivity.prototype.exit = function()
{
    this.m_container.innerHTML = "";    
}

/**
 * Build status update form
 *
 * @param {DOMElement} con Status container for the form
 */
CWidActivity.prototype.buildStatusUpdateForm = function(con)
{
	con.innerHTML = "";


    /* Old input form used to post updates to everyone, but too many people got into trouble
     * so adding manual notify box
	// Add input
	var ta_comment = alib.dom.createElement("textarea", con);
	ta_comment.placeholder = "What are you working on right now?";
	alib.dom.styleSet(ta_comment, "display", "block");
	alib.dom.styleSet(ta_comment, "width", "100%");
	alib.dom.textAreaAutoResizeHeight(ta_comment);

	// Add submit
	var button = alib.ui.Button("Post Update", {
		className:"b1 nomargin", tooltip:"Click to publish your post", cls:this, textarea:ta_comment,
		onclick:function() { alib.dom.styleAddClass(this, "working"); this.cls.postStatusUpdate(this.textarea, this); }
	});
	var btnsp = alib.dom.createElement("div", con); // use for dynamic width
	alib.dom.styleSet(btnsp, "margin-top", "5px");
	alib.dom.styleSet(btnsp, "text-align", "right");
	button.print(btnsp);
    */
   
   // Image
	var imagecon = alib.dom.createElement("div", con);
	alib.dom.styleSet(imagecon, "float", "left");
	alib.dom.styleSet(imagecon, "width", "48px");
	imagecon.innerHTML = "<img src='/files/userimages/current/48/48' style='width:48px;' />";

	// Add input
	var inputDiv = alib.dom.createElement("div", con);
	alib.dom.styleSet(inputDiv, "margin-bottom", "5px");
		alib.dom.styleSet(inputDiv, "margin-left", "51px");
	var ta_comment = alib.dom.createElement("textarea", inputDiv);
    ta_comment.placeholder = "What are you working on right now?";
	alib.dom.styleSet(ta_comment, "width", "100%");
	alib.dom.styleSet(ta_comment, "height", "25px");
	alib.dom.textAreaAutoResizeHeight(ta_comment, 48);

	// Clear floats
	var clear = alib.dom.createElement("div", con);
	alib.dom.styleSet(clear, "clear", "both");

	// Notification
	var lbl = alib.dom.createElement("div", con);
	alib.dom.styleSet(lbl, "float", "left");
	alib.dom.styleSet(lbl, "width", "48px");
	alib.dom.styleSet(lbl, "padding-top", "5px");
	lbl.innerHTML = "Notify:";
	var inpdv = alib.dom.createElement("div", con);
	alib.dom.styleSet(inpdv, "margin-left", "51px");
	alib.dom.styleSet(inpdv, "margin-bottom", "5px");
	var inp_notify = alib.dom.createElement("input", inpdv);
	var t = new CTextBoxList(inp_notify, { bitsOptions:{editable:{addKeys: [188, 13, 186, 59], addOnBlur:true }}, plugins: {autocomplete: { placeholder: false, minLength: 2, queryRemote: true, remote: {url:"/users/json_autocomplete.php"}}}});

	// Add submit
	var button = alib.ui.Button("Save Status Update", {
		className:"b1 nomargin", tooltip:"Click to save and send your status update", cls:this, textarea:ta_comment, notify:t,
		onclick:function() { 
			alib.dom.styleAddClass(this, "working");
			this.cls.postStatusUpdate(this.textarea, this.notify, this); 
		}
	});
	var btnsp = alib.dom.createElement("div", con); // use for dynamic width
	alib.dom.styleSet(btnsp, "text-align", "right");
	button.print(btnsp);
}

/**
 * Send status update to ANT then refresh activity log
 * 
 * @param {textarea} textarea The textarea contianing the comment
 */
CWidActivity.prototype.postStatusUpdate = function(textarea, t_notify, btn)
{
    var notify = "";
	var values = t_notify.getValues();
	for (var i = 0; i < values.length; i++)
	{
		if (notify) notify += ",";
		if (values[i][0])
        {
			 notify += values[i][0];
             }
		else if (values[i][1]) // email, no object
			 notify += values[i][1];
	}
    
	var ajax = new CAjax('json');
	ajax.cbData.cls = this;
	ajax.cbData.textarea = textarea;
	ajax.cbData.btn = btn;
    ajax.cbData.t_notify = t_notify;
	ajax.onload = function(ret)
	{
		this.cbData.textarea.value = "";

		if (this.cbData.cls.activityBrowser)
			this.cbData.cls.activityBrowser.refresh();

        this.cbData.t_notify.clear(); // clear input

		alib.dom.styleRemoveClass(this.cbData.btn, "working");
	};        
	ajax.exec("/controller/User/logStatusUpdate", [["status", textarea.value], ["notify", notify]]);
}

/**
 * Build notices list
 *
 * @param {DOMElement} con Status container for the form
 */
CWidActivity.prototype.buildNotices = function(con)
{
	con.innerHTML = "";

	// Add header
	var ttl = alib.dom.createElement("div", con, "Unread Notices");
	alib.dom.styleSet(ttl, "font-weight", "bold");

	// Add mock notice
	var ncon = alib.dom.createElement("div", con);
	alib.dom.styleSetClass(ncon, "notice");
	ncon.innerHTML = "<h3>Title</h3>Put notice here";
}


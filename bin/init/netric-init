# !/bin/sh
# Init script for neric daemon

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

if [ $(id -u) -ne 0 ]; then
   echo "You need root privileges to run this script"
   exit 1
fi

name=netric
pidfile="/var/run/$name.pid"

HOME=/var/www/html/bin
program=/var/www/html/bin/netricd
args=""

start() {

  export PATH HOME

  # Run the program!
  nice -n ${LS_NICE} chroot --userspec $LS_USER:$LS_GROUP / sh -c "
    cd $HOME
    exec \"$program\" $args
  " > "/var/log/$name.stdout" 2> "/var/log/$name.err" &

  # Generate the pidfile from here. If we instead made the forked process
  # generate it there will be a race condition between the pidfile writing
  # and a process possibly asking for status.
  echo $! > $pidfile

  echo "$name started."
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status; then
    pid=$(cat "$pidfile")
    echo "Killing $name (pid $pid) with SIGTERM"
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5; do
      echo "Waiting for $name (pid $pid) to die..."
      status || break
      sleep 1
    done
    if status; then
      echo "$name stop failed; still running."
    else
      echo "$name stopped."
      rm -f $pidfile
    fi
  fi
}

status() {
  if [ -f "$pidfile" ] ; then
    pid=$(cat "$pidfile")
    if kill -0 $pid > /dev/null 2> /dev/null; then
      # process by this pid is running.
      # It may not be our pid, but that's what you get with just pidfiles.
      # TODO(sissel): Check if this process seems to be the same as the one we
      # expect. It'd be nice to use flock here, but flock uses fork, not exec,
      # so it makes it quite awkward to use in this case.
      return 0
    else
      return 2 # program is dead but pid file exists
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status; then
    stop
    status && kill -KILL $(cat "$pidfile")
    rm -f $pidfile
  fi
}


case "$1" in
  start)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$name is already running"
    else
      start
      code=$?
    fi
    exit $code
    ;;

  stop) stop ;;

  force-stop) force_stop ;;

  status)
    status
    code=$?
    if [ $code -eq 0 ]; then
      echo "$name is running"
    else
      echo "$name is not running"
    fi
    exit $code
    ;;

  restart) stop && start ;;

  *)
    echo "Usage: $SCRIPTNAME {start|stop|force-stop|status|restart}" >&2
    exit 3
    ;;
esac

exit $?
<?php
require_once 'PHPUnit/Autoload.php';
// ANT Includes 
require_once(dirname(__FILE__).'/../../lib/AntConfig.php');
require_once(dirname(__FILE__).'/../../lib/CDatabase.awp');    
require_once(dirname(__FILE__).'/../../lib/AntUser.php');
require_once(dirname(__FILE__).'/../../lib/Ant.php');
require_once(dirname(__FILE__).'/../../lib/CAntObject.php');    
require_once(dirname(__FILE__).'/../../controllers/CustomerController.php');
require_once(dirname(__FILE__).'/../../controllers/ObjectController.php');
require_once(dirname(__FILE__).'/../../lib/aereus.lib.php/antapi.php');        
require_once(dirname(__FILE__).'/../../lib/Olap.php');	

class AntApiTest extends PHPUnit_Framework_TestCase
{
	var $dbh = null;
	var $user = null;
	var $ant = null;

	/**
	 * The url of the ANT sever (usually set to localhost)
	 *
	 * @var string
	 */
	public $antServer = "";

	/**
	 * User to be used when connecting to ant
	 *
	 * @var string
	 */
	public $antUser = "";

	/**
	 * password to be used when connecting to ant
	 *
	 * @var string
	 */
	public $antPass = "";

	function setUp() 
	{
		// Elastic local store
		if (AntConfig::getInstance()->object_index['host'] && AntConfig::getInstance()->object_index['type'] == "elastic")
		{
			global $ANTAPI_STORE_ELASTIC_IDX, $ANTAPI_STORE_ELASTIC_HOST;

			$ANTAPI_STORE_ELASTIC_IDX = "tmp_ant_uni_test";
			$ANTAPI_STORE_ELASTIC_HOST = AntConfig::getInstance()->db['host'];
		}

		// PGSQL local store
		if (AntConfig::getInstance()->db['host'] && AntConfig::getInstance()->db['type'] == "pgsql")
		{
			global $ANTAPI_STORE_PGSQL_HOST, $ANTAPI_STORE_PGSQL_DBNAME, $ANTAPI_STORE_PGSQL_USER, $ANTAPI_STORE_PGSQL_PASSWORD;

			$ANTAPI_STORE_PGSQL_HOST = AntConfig::getInstance()->db['host'];
			$ANTAPI_STORE_PGSQL_DBNAME = "tmp_ant_uni_test";
			$ANTAPI_STORE_PGSQL_USER = AntConfig::getInstance()->db['user'];
			$ANTAPI_STORE_PGSQL_PASSWORD = AntConfig::getInstance()->db['password'];
		}

		$this->ant = new Ant();
		$this->dbh = $this->ant->dbh;
		$this->user = $this->ant->getUser(USER_SYSTEM);

		$this->antServer = $this->ant->getAccBaseUrl(false);
		$this->antUser = $this->user->name;
		$this->antPass = "Password1";
	}
	
	/*******************************************************************
	 * Function:	testCustomerApi
	 *
	 * Purpose:		Test api unique to customers
	 *******************************************************************/
	function testCustomerApi()
	{
		$dbh = $this->dbh;
		
		// Test new customer entry
		// --------------------------------------------------
		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$cust->setValue("name", "Test WAPI");
		$cust->setValue("type_id", CUST_TYPE_ACCOUNT);
		$cust->setValue("website", "www.test.com");
		$cust->setValue("email", "test@test.com");
		$cust->setValue("notes", "Generated by unit test suite");
		$cust->setValue("owner_id", $this->user->id);
		$custid_acct = $cust->save();

		$this->assertTrue(is_numeric($custid_acct));

		// Now open customer and test values
		$obj = new CAntObject($dbh, "customer", $custid_acct, $this->user);
					
		$this->assertEquals($obj->getValue("name"), "Test WAPI");
		$this->assertEquals($obj->getValue("website"), "www.test.com");
		$this->assertEquals($obj->getValue("email"), "test@test.com");
		$this->assertEquals($obj->getValue("owner_id"), $this->user->id);

		$obj->removeHard();
	}

	/*******************************************************************
	 * Function:	testAPIAuthRegister
	 *
	 * Purpose:		Test aereus.lib.php authentication api
	 *******************************************************************/
	function testCustomerAuthRegister()
	{
		$dbh = $this->dbh;
		
		$username = "testauth@testauth.com";
		$pass = "testauth";
		
		$dbh->Query("delete from customers where name='testauth'");
		$dbh->Query("delete from customer_publish where username='$username'");

		// Clean test if exists
		/*
		$objList = new AntApi_ObjectList($this->antServer, $this->antUser, $this->antPass, "customer");
		$objList->addCondition("and", "email2", "is_equal", $username);
		$objList->getObjects();
		for ($i = 0; $i < $objList->getNumObjects(); $i++)
		{
			$obj = $objList->getObject($i);
			$obj->removeHard();
		}
		*/

		// New non-existant Customer
		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$result_custid = $cust->registerCustomer($username, $pass, array("name"=>"testauth", "email2"=>"$username"));
		
		$this->assertTrue($result_custid>0);
		if ($result_custid<=0)
			echo "<pre>Error [$result_custid] ".$cust->lastErrorMessage."</pre>";
		$customer_id = $result_custid;			
		unset($cust);
		
		// Existing Customer (with existing login registered)
		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$result_custid = $cust->registerCustomer($username, $pass, array("name"=>"testauth", "email2"=>"$username"));
		$this->assertEquals($result_custid, -2); // Username already in use
		unset($cust);
		
		// Existing Customer (without existing login registered - should be added)
		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$dbh->Query("delete from customer_publish where customer_id='$customer_id'");
		$registered_cid = $cust->registerCustomer($username, $pass, array("name"=>"testauth", "email2"=>"$username"));
		$this->assertEquals($customer_id, $registered_cid); //Should be the same customer id as before but now with the customer_publish populated
		$this->assertTrue($dbh->GetNumberRows($dbh->Query("select customer_id from customer_publish where customer_id='$customer_id'"))>0);
		unset($cust);
		
		$obj = new CAntObject($dbh, "customer", $customer_id, $this->user);
		$obj->removeHard();
	}

	/*******************************************************************
	 * Function:	testAPIAuth
	 *
	 * Purpose:		Test aereus.lib.php authentication api
	 *******************************************************************/
	function testCustomerAuth()
	{
		$dbh = $this->dbh;

		$username = "testauth@testauth.com";
		$pass = "testauth";

		$dbh->Query("delete from customers where name='testauth'");
		$dbh->Query("delete from customer_publish where username='$username'");

		// Non existant customer
		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$result_custid = $cust->authUser($username, $pass);
		$this->assertEquals($result_custid, -1);
		unset($cust);

		// Existing Customer - with published user/pass
		$obj = new CAntObject($dbh, "customer", null, $this->user);
		$obj->setValue("name", "testauth");
		$obj->setValue("email", $username);
		$cid = $obj->save();
		$dbh->Query("insert into customer_publish(customer_id, username, password) values('$cid', '$username', md5('$pass'));");

		$cust = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$result_custid = $cust->authUser($username, $pass);
		$this->assertEquals($result_custid, $cid);
		
		// Test Set Passwowrd            
		$ret = $cust->authSetPassword($cid, "{$pass}Updated");            
		$this->assertEquals($ret, 1);
		
		// test reset Authenticate Password
		// DEPRICATED
		/*
		$ret = $cust->resetAuthPassword($username, "{$pass}Updated");
		print_r($ret);
		//$this->assertEquals($ret, 2);
		 */
		
		// test wrong password
		$result_custid = $cust->authUser($username, "Wrong Password");
		$this->assertEquals($result_custid, -2);
		unset($cust);

		$obj->removeHard();
	}

	/*******************************************************************
	 * Function:	testAPICCard
	 *
	 * Purpose:		Test aereus.lib.php authentication api
	 *******************************************************************/
	function testCustomerCCard()
	{
		$dbh = $this->dbh;

		$dbh->Query("delete from customers where name='testauth'");

		$username = "testauth@testauth.com";
		$pass = "testauth";

		// Existing Customer - with published user/pass
		// ----------------------------------------------
		$obj = new CAntObject($dbh, "customer", null, $this->user);
		$obj->setValue("name", "testauth");
		$obj->setValue("email2", $username);
		$cid = $obj->save();
		unset($obj);

		$custapi = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$custapi->open($cid);
		$ccid = $custapi->addCreditCard("Test Name", "1234123412341235", 01, 2012, "visa");
		$custapi->saveChanges();
		$this->assertTrue($ccid > 0);
		
		// Test Get Credit Card Function
		// ----------------------------------------------
		$ret = $custapi->getCreditCards();
		$this->assertTrue(is_array($ret));
		$this->assertEquals($ret[0]['id'], $ccid);
		$this->assertEquals($ret[0]['type'], "visa");
		unset($custapi);

		$result = $dbh->Query("select ccard_name, ccard_number, ccard_exp_month, ccard_exp_year from customer_ccards
								where customer_id='$cid'");
		$this->assertTrue(strlen($dbh->GetValue($result, 0, "ccard_name"))>0);
		$this->assertTrue(strlen($dbh->GetValue($result, 0, "ccard_number"))>0);
		$this->assertTrue(strlen($dbh->GetValue($result, 0, "ccard_exp_month"))>0);
		$this->assertTrue(strlen($dbh->GetValue($result, 0, "ccard_exp_year"))>0);
		

		// Now test ccard test function
		// ----------------------------------------------
		$custapi = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$ret = $custapi->testCreditCard("Test Name", "", 01, 2012, "visa"); // blank number will throw exception
		$this->assertTrue(is_array($ret));
		$this->assertTrue(count($ret['error']) > 0);			
		unset($custapi);

		$obj = new CAntObject($dbh, "customer", $cid, $this->user);
		$obj->removeHard();
	}

	/*******************************************************************
	 * Function:	testProductCatalog
	 *
	 * Purpose:		Test aereus.lib.php product catalog
	 *******************************************************************/
	function testProductCatalog()
	{
		$dbh = $this->dbh;
	}

	/*******************************************************************
	 * Function:	testShoppingCart
	 *
	 * Purpose:		Test aereus.lib.php shopping cart api add, update, remove
	 *******************************************************************/
	function testShoppingCartAUR()
	{
		$dbh = $this->dbh;

		// Create a fake product
		$product = new AntApi_Product($this->antServer, $this->antUser, $this->antPass);
		$product->setValue("name", "My Test Product");
		$product->setValue("price", 500.00);
		$pid = $product->save();

		$cart = new AntApi_ShoppingCart($this->antServer, $this->antUser, $this->antPass);
		$cart->clear(); // Purge just in case

		// Add product with a qunatity of 2
		$cart->addItem($product, 2);
		$this->assertEquals($cart->getNumItems(), 1);
		$this->assertEquals($cart->getQuantityItems(), 2);
		$this->assertEquals($cart->getSubTotal(), 1000);

		// Update quantity
		$cart->updateQuantity($pid, 1);
		$this->assertEquals($cart->getQuantityItems(), 1);

		// Delete item from cart
		$cart->removeItem((int)$pid);
		$this->assertEquals($cart->getNumItems(), 0);

		// Test clear
		$cart->addItem($product, 2);
		$this->assertEquals($cart->getNumItems(), 1);
		$cart->clear();
		$this->assertEquals($cart->getNumItems(), 0);

		// Cleanup
		$product->remove();
		$product->remove();
	}

	function testObjectRemove()
	{
		$dbh = $this->dbh;

		// Test remote create
		// -----------------------------------
		$objApi = new AntApi_Object($this->antServer, $this->antUser, $this->antPass, "customer");
		$objApi->setValue("name", "UnitTest CustomerName");
		$cid = $objApi->save();
		$this->assertNotEquals($cid, 0);
					
		// Test remote remove
		$ret = $objApi->remove();
		$this->assertTrue($ret > 0);
	}
	
	/*******************************************************************
	 * Function:	testSalesOrder
	 *
	 * Purpose:		Test aereus.lib.php sales order
	 *******************************************************************/
	function testSalesOrder()
	{

		// Create a fake product
		$product = new AntApi_Product($this->antServer, $this->antUser, $this->antPass);
		$product->setValue("name", "My Test Product");
		$product->setValue("price", 500.00);
		$pid = $product->save();

		$cart = new AntApi_ShoppingCart($this->antServer, $this->antUser, $this->antPass);
		$cart->addItem($product, 2);
		$order = $cart->createOrder("My Test Order");
		$oid = $order->save();
		$this->assertTrue($oid > 0);
		$this->assertEquals($order->id, $oid);

		// Test Processing
		$order->testMode = true;
		$order->setCreditCard("Some Name", "1111111111111111", "11", "2020");
		$order->setBillingAddress("123 Pvt St", "Springfield", "OR", "97477");
		$ret = $order->processPayment();
		$this->assertEquals($ret->status, "success");

		// Cleanup
		$product->remove();
		$product->remove();
		//$order->remove();
		//$order->remove();
	}

	/**
	 * Test invoice
	 */
	function testInvoice()
	{
		$inv = new AntApi_Invoice($this->antServer, $this->antUser, $this->antPass);
		$inv->setValue("name", "apiunittest - invoice");
		$inv->addItem("test", 1, 100);
		$invid = $inv->save();
		unset($inv);

		// Open and make sure the details were saved
		$inv = new AntApi_Invoice($this->antServer, $this->antUser, $this->antPass);
		$inv->open($invid);
		$this->assertTrue($inv->getNumItems() > 0);

		// Make a change, then save and test values again
		$inv->setValue("name", "apiunittest - invoice - edited");
		$inv->save();
		unset($inv);

		// Open and make sure the details were saved
		$inv = new AntApi_Invoice($this->antServer, $this->antUser, $this->antPass);
		$inv->open($invid);
		$this->assertTrue($inv->getNumItems() > 0);
		$this->assertEquals($inv->getValue("name"), "apiunittest - invoice - edited");
		$this->assertEquals($inv->getTotalAmount(), 100);

		// Cleanup
		$inv->remove();
		$inv->remove();
	}
	
	/*******************************************************************
	 * Function:    testGetCases
	 *
	 * Purpose:        Test aereus.lib.php Get Cases
	 *******************************************************************/
	function testGetCases()
	{
		$dbh = $this->dbh;
		
		$username = "UnitTest@CustomerName";
		
		// create customer data
		$objCustomer = new CAntObject($dbh, "customer", null, $this->user);
		$objCustomer->setValue("name", "UnitTest CustomerName");
		$objCustomer->setValue("email2", $username);
		$custid = $objCustomer->save();
		$this->assertTrue($custid > 0);
		
		// cretae cast data
		$objCase = new CAntObject($dbh, "case", null, $this->user);
		$objCase->setValue("title", "UnitTest CaseTitle");
		$objCase->setValue("ts_entered", "12/1/2011 11:00 PM");            
		//$objCase->setValue("status_id", 1);
		$objCase->setValue("customer_id", $custid);
		$cid = $objCase->save();
		
		// Test Get Case Function
		$custapi = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$custapi->open($custid);
		$ret = $custapi->getCases();            
		$this->assertTrue(is_array($ret));
		$this->assertEquals($ret[0]['id'], $cid);
		$this->assertEquals($ret[0]['title'], rawurlencode("UnitTest CaseTitle"));
	}
	
	/*******************************************************************
	 * Function:    testAuthGetCustId
	 *
	 * Purpose:        Test aereus.lib.php Authenticate - Get Customer Id
	 *******************************************************************/
	function testAuthGetCustId()
	{
		$dbh = $this->dbh;
		$username = "UnitTest@CustomerName";
		
		// Delete existing customer with same name            
		$dbh->Query("delete from customers where name='UnitTest CustomerName' or uname='unitTest-customername' 
						or uname like 'unitTest-customername-%'");
		
		// create customer data
		$objCustomer = CAntObject::factory($dbh, "customer", null, $this->user);
		$objCustomer->setValue("name", "UnitTest CustomerName");
		$objCustomer->setValue("username", "UnitTestUserName");
		$objCustomer->setValue("email2", $username);
		$custid = $objCustomer->save();
		
		// create publish data
		$params['username'] = "UnitTestUserName";
		$params['password'] = "UnitTestPublishPassword";
		$params['f_files_view'] = "f";
		$params['f_files_upload'] = "f";
		$params['f_files_modify'] = "f";
		$params['customer_id'] = $custid;
					
		$customerController = new CustomerController($this->ant, $this->user);
		$customerController->debug = true;
		$ret = $customerController->savePublish($params);
		$this->assertTrue($ret > 0);
		
		// Test Authenticate - Get Customer Id
		$custapi = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$ret = $custapi->authGetCustId("UnitTestUserName");
		$this->assertTrue($ret > 0);
		$this->assertEquals($custid, $ret);
		
		// clear data
		$objCustomer->removeHard();
	}

	/**
	 * Test to see if query customer by id works
	 */
	public function testAuthGetCustEmail()
	{
		$dbh = $this->dbh;
		$username = "UnitTest@CustomerName.com";            
		
		// create customer data
		$objCustomer = new CAntObject($dbh, "customer", null, $this->user);
		$objCustomer->setValue("name", "UnitTest CustomerName");
		$objCustomer->setValue("username", "UnitTestUserName");
		$objCustomer->setValue("email2", $username);
		$custid = $objCustomer->save();
		
		$custapi = new AntApi_Customer($this->antServer, $this->antUser, $this->antPass);
		$ret = $custapi->getIdByEmail($username);
		$this->assertEquals($custid, $ret);

		// clear data
		$objCustomer->removeHard();
	}

	/**
	 * Test olap - rename to activate
	 */
	public function testOlapCube()
	{
		$dbh = $this->dbh;
		// Get dataware cube
		$cubeapi = new AntApi_OlapCube($this->antServer, $this->antUser, $this->antPass);            
		$cubeapi->getCube("tests/api");
		
		// Now some page statistics
		$data = array(
			'page' => "/index.php",
			'country' => "us",
		);
		$measures = array("hits" => 100);
		$cubeapi->writeData($measures, $data);

		$data = array(
			'page' => "/about.php",
			'country' => "us",
		);
		$measures = array("hits" => 50);
		$cubeapi->writeData($measures, $data);

		// Now let's increment the data
		$data = array(
			'page' => "/index.php",
			'country' => "us",
		);
		$measures = array("hits" => 100);
		$cubeapi->incrementData($measures, $data);

		$data = array(
			'page' => "/about.php",
			'country' => "us",
		);
		$measures = array("hits" => 50);
		$cubeapi->incrementData($measures, $data);
		
		// Open the cube locally (ANT Object) and test the data
		// ---------------------------------------------------
		$olap = new Olap($this->dbh);
		$cube = $olap->getCube("tests/api");

		// Extract the data in a single dimension
		$query = new Olap_Cube_Query();
		$query->addMeasure("hits", "sum");
		$query->addDimension("page");
		$query->addFilter("and", "country", "is_equal", "us");
		$data = $cube->getData($query);
		$this->assertEquals($data['/index.php']['hits'], 200);
		$this->assertEquals($data['/about.php']['hits'], 100);

		// Cleanup
		$cube->remove();
	}
	
	/**
	 * Test local store pgsql utility functions
	 *
	 * Object open/edit/delete/query is handled in the testLocalStore* functions
	 */
	public function testPgSqlApi()
	{
		global $ANTAPI_STORE, $ANTAPI_STORE_PGSQL_DBNAME, $ANTAPI_STORE_PGSQL_HOST, $ANTAPI_STORE_PGSQL_USER, $ANTAPI_STORE_PGSQL_PASSWORD;
		
		$ANTAPI_STORE = "pgsql";
		$tableName = "customer";
		$testCustName = "testcustomerlocalstore" . rand(1, 1000000); // Create random number so uname will be unique
		
		// Create Sample Data
		$obj = new AntApi_Object($this->antServer, $this->antUser, $this->antPass, $tableName);
		$obj->setStoreSource("ant"); // Make sure this is posted straight to ANT and not stored in any local data sources
		$obj->setValue("name", $testCustName);
		$oid = $obj->save();
		$this->assertTrue($oid > 0);
		
		// Create an instance of ANT Api Class
		$antApiObj = new AntApi($this->antServer, $this->antUser, $this->antPass); 
		/*$antObj = $antApiObj->getObject($tableName); 
		$pgSqlApi = $antObj->getLocalStore(); */
		
		$pgSqlApi = new AntApi_ObjectStore_Pgsql();
		$pgSqlApi->debug = true; 
		
		// Create database
		$result = $pgSqlApi->createDatabase(); // comment if database already created
		$this->assertTrue(is_array($result));
		$this->assertTrue($result['status'] > 0);
		
		// Test Connect     
		$result = $pgSqlApi->connect();
		$this->assertTrue(is_array($result));
		$this->assertEquals($result['status'], 1);
		
		if($result["status"] == 1)
		{
			// Create Tables
			$result = $pgSqlApi->createTable($tableName);
			$this->assertTrue(sizeof($result["column"]) > 0);
			
			// Add condition to sync only the test data
			$pgSqlApi->addCondition("and", "id", "is_equal", $oid);
			
			// Sync Data
			$lastUpdated = gmdate("Y-m-d\\TG:i:s\\Z", strtotime("-5 minutes", time())); // set back so results are always returned
			$pgSqlApi->syncLocalWithAnt($tableName, $this->antServer, $this->antUser, $this->antPass, $lastUpdated);
			
			// Test Query Object
			$antObj = $antApiObj->getObject($tableName); // Get the customer object
			$pgSqlApi->clearCondition();
			$pgSqlApi->addCondition("and", "id", "is_equal", $oid);
			$result = $pgSqlApi->queryObjects($antObj);
			$this->assertTrue(is_array($result));
			$this->assertEquals($result[0]["id"], $oid);
			
			// Test Open Object
			$result = $pgSqlApi->openObject($tableName, "uname:$testCustName");
			$this->assertTrue(is_array($result));
			$this->assertEquals($result["id"], $oid); // This line fails, if test is run twice.
		}
		
		// Clean Sample Data
		$obj = new CAntObject($this->dbh, "task", $oid, $this->user);
		$obj->removeHard();
	}
	
	/**
	 * Test the blog api class
	 */
	public function testBlogApi()
	{
		$dbh = $this->dbh;
		
		// Create content feed
		$objFeed = CAntObject::factory($dbh, "content_feed", null, $this->user);
		$objFeed->setValue("title", "Unit Test: Blog");
		$fid = $objFeed->save();
        $this->assertTrue($fid > 0);

		// Create content feed post category
		$objFeedPost = CAntObject::factory($dbh, "content_feed_post", null, $this->user);
		$grpd = $objFeedPost->addGroupingEntry("categories", "unittestcategory", "", 1, "", false, array("feed_id" => $fid));
		$this->assertTrue($grpd["id"] > 0);
		
		$blog = new AntApi_Blog($this->antServer, $this->antUser, $this->antPass, $fid);
		$categories = $blog->getCategories();
		$found = false;
		foreach($categories as $key=>$cat)
		{
			if($cat->id==$grpd["id"])
				$found = true;
		}
        
		$this->assertTrue($found);
		
		// Clean Data
		$objFeedPost->deleteGroupingEntry("categories", $grpd['id']);
		$objFeed->removeHard();
	}
	
	/**
	 * Test the infocenter/wiki api 
	 */
	public function testIcApi()
	{
		$dbh = $this->dbh;
		
		// Create group
		$objController = new ObjectController($this->ant, $this->user);
		$objController->debug = true;
		
		$params["field"] = "groups";
		$params["obj_type"] = "infocenter_document";
		$params["title"] = "unittestgroup";
		$result = $objController->createGrouping($params);
		$this->assertTrue($result["id"] > 0);
		
		$infoCenter = new AntApi_InfoCenter($this->antServer, $this->antUser, $this->antPass);
		$groups = $infoCenter->getGroups();

		foreach($groups as $key=>$group)
		{
			if($group->id==$result["id"])
				break;
		}
		
		$this->assertEquals($result["id"], $group->id);
		$this->assertEquals($params["title"], $group->title);
		
		// Clean Data
		$params["gid"] = $result["id"];
		$objController->deleteGrouping($params);
	}
	
	/**
	 * Tet the product catalog api
	 */
	public function testProductCatalogApi()
	{
		$dbh = $this->dbh;
		
		// Create category
		$objController = new ObjectController($this->ant, $this->user);
		$objController->debug = true;
		
		$params["field"] = "categories";
		$params["obj_type"] = "product";
		$params["title"] = "unittestcategory";
		$result = $objController->createGrouping($params);
		$this->assertTrue($result["id"] > 0);
		
		$productCatalog = new AntApi_ProductCatalog($this->antServer, $this->antUser, $this->antPass);
		$categories = $productCatalog->getCategories();
		
		foreach($categories as $key=>$cat)
		{
			if($cat->id==$result["id"])
				break;
		}
		
		$this->assertEquals($result["id"], $cat->id);
		$this->assertEquals($params["title"], $cat->title);
		$this->assertEquals($params["title"], $cat->name);
		
		// Clean Data
		$params["gid"] = $result["id"];
		$objController->deleteGrouping($params);
	}
    
    /**
     * Test the ant api searcher
     */
    public function testSearcher()
    {
        // First lets save an object for testing
        // --------------------------------------------------
        $obj = new AntApi_Object($this->antServer, $this->antUser, $this->antPass, "cms_page");
        $obj->runIndexOnSave = true;
        $obj->setStoreSource("ant"); // Make sure this is posted straight to ANT and not stored in any local data sources
        $obj->setValue("name", "Test Page For Searcher");        
        $oid = $obj->save();
        $this->assertNotEquals($oid, false); // API did not fail
        
        $searcher = new AntApi_Searcher($this->antServer, $this->antUser, $this->antPass);        
        $docType = $searcher->addType("cms_page");
        
        $result = $searcher->query("page");
        $this->assertTrue(is_array($result));
        $this->assertTrue(sizeof($result) > 0);
        $this->assertEquals($result[0]["type"], "cms_page");
        $this->assertEquals($result[0]["title"], "Test Page For Searcher");
        
        $obj = new CAntObject($this->dbh, "cms_page", $oid, $this->user);
        $obj->removeHard();
    }
}
